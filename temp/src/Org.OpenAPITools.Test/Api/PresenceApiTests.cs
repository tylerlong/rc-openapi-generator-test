/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing PresenceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PresenceApiTests
    {
        private PresenceApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PresenceApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PresenceApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' PresenceApi
            //Assert.IsInstanceOf(typeof(PresenceApi), instance);
        }

        
        /// <summary>
        /// Test ReadAccountPresence
        /// </summary>
        [Test]
        public void ReadAccountPresenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //bool? detailedTelephonyState = null;
            //bool? sipData = null;
            //int? page = null;
            //int? perPage = null;
            //var response = instance.ReadAccountPresence(accountId, detailedTelephonyState, sipData, page, perPage);
            //Assert.IsInstanceOf(typeof(AccountPresenceInfo), response, "response is AccountPresenceInfo");
        }
        
        /// <summary>
        /// Test ReadCallQueuePresence
        /// </summary>
        [Test]
        public void ReadCallQueuePresenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string groupId = null;
            //var response = instance.ReadCallQueuePresence(accountId, groupId);
            //Assert.IsInstanceOf(typeof(CallQueuePresence), response, "response is CallQueuePresence");
        }
        
        /// <summary>
        /// Test ReadExtensionCallQueuePresence
        /// </summary>
        [Test]
        public void ReadExtensionCallQueuePresenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //bool? editableMemberStatus = null;
            //var response = instance.ReadExtensionCallQueuePresence(accountId, extensionId, editableMemberStatus);
            //Assert.IsInstanceOf(typeof(ExtensionCallQueuePresenceList), response, "response is ExtensionCallQueuePresenceList");
        }
        
        /// <summary>
        /// Test ReadUnifiedPresence
        /// </summary>
        [Test]
        public void ReadUnifiedPresenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //var response = instance.ReadUnifiedPresence(accountId, extensionId);
            //Assert.IsInstanceOf(typeof(UnifiedPresence), response, "response is UnifiedPresence");
        }
        
        /// <summary>
        /// Test ReadUserPresenceStatus
        /// </summary>
        [Test]
        public void ReadUserPresenceStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //bool? detailedTelephonyState = null;
            //bool? sipData = null;
            //var response = instance.ReadUserPresenceStatus(accountId, extensionId, detailedTelephonyState, sipData);
            //Assert.IsInstanceOf(typeof(GetPresenceInfo), response, "response is GetPresenceInfo");
        }
        
        /// <summary>
        /// Test UpdateCallQueuePresence
        /// </summary>
        [Test]
        public void UpdateCallQueuePresenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string groupId = null;
            //CallQueueUpdatePresence callQueueUpdatePresence = null;
            //var response = instance.UpdateCallQueuePresence(accountId, groupId, callQueueUpdatePresence);
            //Assert.IsInstanceOf(typeof(CallQueuePresence), response, "response is CallQueuePresence");
        }
        
        /// <summary>
        /// Test UpdateExtensionCallQueuePresence
        /// </summary>
        [Test]
        public void UpdateExtensionCallQueuePresenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //ExtensionCallQueueUpdatePresenceList extensionCallQueueUpdatePresenceList = null;
            //var response = instance.UpdateExtensionCallQueuePresence(accountId, extensionId, extensionCallQueueUpdatePresenceList);
            //Assert.IsInstanceOf(typeof(ExtensionCallQueuePresenceList), response, "response is ExtensionCallQueuePresenceList");
        }
        
        /// <summary>
        /// Test UpdateUnifiedPresence
        /// </summary>
        [Test]
        public void UpdateUnifiedPresenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //UpdateUnifiedPresence updateUnifiedPresence = null;
            //var response = instance.UpdateUnifiedPresence(accountId, extensionId, updateUnifiedPresence);
            //Assert.IsInstanceOf(typeof(UnifiedPresence), response, "response is UnifiedPresence");
        }
        
        /// <summary>
        /// Test UpdateUserPresenceStatus
        /// </summary>
        [Test]
        public void UpdateUserPresenceStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string extensionId = null;
            //string accountId = null;
            //PresenceInfoRequest presenceInfoRequest = null;
            //var response = instance.UpdateUserPresenceStatus(extensionId, accountId, presenceInfoRequest);
            //Assert.IsInstanceOf(typeof(PresenceInfoResponse), response, "response is PresenceInfoResponse");
        }
        
    }

}
