/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing CalendarEventsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CalendarEventsApiTests
    {
        private CalendarEventsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CalendarEventsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CalendarEventsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' CalendarEventsApi
            //Assert.IsInstanceOf(typeof(CalendarEventsApi), instance);
        }

        
        /// <summary>
        /// Test CreateEvent
        /// </summary>
        [Test]
        public void CreateEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GlipEventCreate glipEventCreate = null;
            //var response = instance.CreateEvent(glipEventCreate);
            //Assert.IsInstanceOf(typeof(GlipEventInfo), response, "response is GlipEventInfo");
        }
        
        /// <summary>
        /// Test CreateEventByGroupId
        /// </summary>
        [Test]
        public void CreateEventByGroupIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //GlipEventCreate glipEventCreate = null;
            //var response = instance.CreateEventByGroupId(groupId, glipEventCreate);
            //Assert.IsInstanceOf(typeof(GlipEventInfo), response, "response is GlipEventInfo");
        }
        
        /// <summary>
        /// Test DeleteEvent
        /// </summary>
        [Test]
        public void DeleteEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventId = null;
            //instance.DeleteEvent(eventId);
            
        }
        
        /// <summary>
        /// Test ListGroupEvents
        /// </summary>
        [Test]
        public void ListGroupEventsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //var response = instance.ListGroupEvents(groupId);
            //Assert.IsInstanceOf(typeof(GlipEventInfo), response, "response is GlipEventInfo");
        }
        
        /// <summary>
        /// Test ReadEvent
        /// </summary>
        [Test]
        public void ReadEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> eventId = null;
            //var response = instance.ReadEvent(eventId);
            //Assert.IsInstanceOf(typeof(GlipEventInfo), response, "response is GlipEventInfo");
        }
        
        /// <summary>
        /// Test ReadGlipEvents
        /// </summary>
        [Test]
        public void ReadGlipEventsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? recordCount = null;
            //string pageToken = null;
            //var response = instance.ReadGlipEvents(recordCount, pageToken);
            //Assert.IsInstanceOf(typeof(GlipEventsInfo), response, "response is GlipEventsInfo");
        }
        
        /// <summary>
        /// Test UpdateEvent
        /// </summary>
        [Test]
        public void UpdateEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventId = null;
            //GlipEventCreate glipEventCreate = null;
            //var response = instance.UpdateEvent(eventId, glipEventCreate);
            //Assert.IsInstanceOf(typeof(GlipEventInfo), response, "response is GlipEventInfo");
        }
        
    }

}
