/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing CallBlockingApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CallBlockingApiTests
    {
        private CallBlockingApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CallBlockingApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CallBlockingApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' CallBlockingApi
            //Assert.IsInstanceOf(typeof(CallBlockingApi), instance);
        }

        
        /// <summary>
        /// Test CreateBlockedAllowedNumber
        /// </summary>
        [Test]
        public void CreateBlockedAllowedNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //AddBlockedAllowedPhoneNumber addBlockedAllowedPhoneNumber = null;
            //var response = instance.CreateBlockedAllowedNumber(accountId, extensionId, addBlockedAllowedPhoneNumber);
            //Assert.IsInstanceOf(typeof(BlockedAllowedPhoneNumberInfo), response, "response is BlockedAllowedPhoneNumberInfo");
        }
        
        /// <summary>
        /// Test DeleteBlockedAllowedNumber
        /// </summary>
        [Test]
        public void DeleteBlockedAllowedNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //string blockedNumberId = null;
            //instance.DeleteBlockedAllowedNumber(accountId, extensionId, blockedNumberId);
            
        }
        
        /// <summary>
        /// Test ListBlockedAllowedNumbers
        /// </summary>
        [Test]
        public void ListBlockedAllowedNumbersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //int? page = null;
            //int? perPage = null;
            //string status = null;
            //var response = instance.ListBlockedAllowedNumbers(accountId, extensionId, page, perPage, status);
            //Assert.IsInstanceOf(typeof(BlockedAllowedPhoneNumbersList), response, "response is BlockedAllowedPhoneNumbersList");
        }
        
        /// <summary>
        /// Test ReadBlockedAllowedNumber
        /// </summary>
        [Test]
        public void ReadBlockedAllowedNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //string blockedNumberId = null;
            //var response = instance.ReadBlockedAllowedNumber(accountId, extensionId, blockedNumberId);
            //Assert.IsInstanceOf(typeof(BlockedAllowedPhoneNumberInfo), response, "response is BlockedAllowedPhoneNumberInfo");
        }
        
        /// <summary>
        /// Test ReadCallerBlockingSettings
        /// </summary>
        [Test]
        public void ReadCallerBlockingSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //var response = instance.ReadCallerBlockingSettings(accountId, extensionId);
            //Assert.IsInstanceOf(typeof(CallerBlockingSettings), response, "response is CallerBlockingSettings");
        }
        
        /// <summary>
        /// Test UpdateBlockedAllowedNumber
        /// </summary>
        [Test]
        public void UpdateBlockedAllowedNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //string blockedNumberId = null;
            //AddBlockedAllowedPhoneNumber addBlockedAllowedPhoneNumber = null;
            //var response = instance.UpdateBlockedAllowedNumber(accountId, extensionId, blockedNumberId, addBlockedAllowedPhoneNumber);
            //Assert.IsInstanceOf(typeof(BlockedAllowedPhoneNumberInfo), response, "response is BlockedAllowedPhoneNumberInfo");
        }
        
        /// <summary>
        /// Test UpdateCallerBlockingSettings
        /// </summary>
        [Test]
        public void UpdateCallerBlockingSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //CallerBlockingSettingsUpdate callerBlockingSettingsUpdate = null;
            //var response = instance.UpdateCallerBlockingSettings(accountId, extensionId, callerBlockingSettingsUpdate);
            //Assert.IsInstanceOf(typeof(CallerBlockingSettings), response, "response is CallerBlockingSettings");
        }
        
    }

}
