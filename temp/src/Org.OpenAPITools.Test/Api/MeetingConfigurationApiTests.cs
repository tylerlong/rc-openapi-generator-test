/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing MeetingConfigurationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class MeetingConfigurationApiTests
    {
        private MeetingConfigurationApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new MeetingConfigurationApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of MeetingConfigurationApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' MeetingConfigurationApi
            //Assert.IsInstanceOf(typeof(MeetingConfigurationApi), instance);
        }

        
        /// <summary>
        /// Test CreateUserMeetingProfileImage
        /// </summary>
        [Test]
        public void CreateUserMeetingProfileImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //System.IO.Stream profilePic = null;
            //instance.CreateUserMeetingProfileImage(accountId, extensionId, profilePic);
            
        }
        
        /// <summary>
        /// Test GetAccountLockedSetting
        /// </summary>
        [Test]
        public void GetAccountLockedSettingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //var response = instance.GetAccountLockedSetting(accountId);
            //Assert.IsInstanceOf(typeof(AccountLockedSettingResponse), response, "response is AccountLockedSettingResponse");
        }
        
        /// <summary>
        /// Test GetUserSetting
        /// </summary>
        [Test]
        public void GetUserSettingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string extensionId = null;
            //string accountId = null;
            //var response = instance.GetUserSetting(extensionId, accountId);
            //Assert.IsInstanceOf(typeof(MeetingUserSettingsResponse), response, "response is MeetingUserSettingsResponse");
        }
        
        /// <summary>
        /// Test ReadAssistants
        /// </summary>
        [Test]
        public void ReadAssistantsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //var response = instance.ReadAssistants(accountId, extensionId);
            //Assert.IsInstanceOf(typeof(AssistantsResource), response, "response is AssistantsResource");
        }
        
        /// <summary>
        /// Test ReadAssistedUsers
        /// </summary>
        [Test]
        public void ReadAssistedUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //var response = instance.ReadAssistedUsers(accountId, extensionId);
            //Assert.IsInstanceOf(typeof(AssistedUsersResource), response, "response is AssistedUsersResource");
        }
        
        /// <summary>
        /// Test ReadMeetingServiceInfo
        /// </summary>
        [Test]
        public void ReadMeetingServiceInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string extensionId = null;
            //string accountId = null;
            //var response = instance.ReadMeetingServiceInfo(extensionId, accountId);
            //Assert.IsInstanceOf(typeof(MeetingServiceInfoResource), response, "response is MeetingServiceInfoResource");
        }
        
        /// <summary>
        /// Test UpdateMeetingServiceInfo
        /// </summary>
        [Test]
        public void UpdateMeetingServiceInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string extensionId = null;
            //string accountId = null;
            //MeetingServiceInfoRequest meetingServiceInfoRequest = null;
            //var response = instance.UpdateMeetingServiceInfo(extensionId, accountId, meetingServiceInfoRequest);
            //Assert.IsInstanceOf(typeof(MeetingServiceInfoResource), response, "response is MeetingServiceInfoResource");
        }
        
    }

}
