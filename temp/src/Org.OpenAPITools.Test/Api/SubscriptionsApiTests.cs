/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing SubscriptionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SubscriptionsApiTests
    {
        private SubscriptionsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SubscriptionsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SubscriptionsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' SubscriptionsApi
            //Assert.IsInstanceOf(typeof(SubscriptionsApi), instance);
        }

        
        /// <summary>
        /// Test CreateSubscription
        /// </summary>
        [Test]
        public void CreateSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateSubscriptionRequest createSubscriptionRequest = null;
            //var response = instance.CreateSubscription(createSubscriptionRequest);
            //Assert.IsInstanceOf(typeof(SubscriptionInfo), response, "response is SubscriptionInfo");
        }
        
        /// <summary>
        /// Test DeleteSubscription
        /// </summary>
        [Test]
        public void DeleteSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subscriptionId = null;
            //instance.DeleteSubscription(subscriptionId);
            
        }
        
        /// <summary>
        /// Test ListSubscriptions
        /// </summary>
        [Test]
        public void ListSubscriptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ListSubscriptions();
            //Assert.IsInstanceOf(typeof(SubscriptionListResource), response, "response is SubscriptionListResource");
        }
        
        /// <summary>
        /// Test ReadSubscription
        /// </summary>
        [Test]
        public void ReadSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subscriptionId = null;
            //var response = instance.ReadSubscription(subscriptionId);
            //Assert.IsInstanceOf(typeof(SubscriptionInfo), response, "response is SubscriptionInfo");
        }
        
        /// <summary>
        /// Test RenewSubscription
        /// </summary>
        [Test]
        public void RenewSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subscriptionId = null;
            //var response = instance.RenewSubscription(subscriptionId);
            //Assert.IsInstanceOf(typeof(SubscriptionInfo), response, "response is SubscriptionInfo");
        }
        
        /// <summary>
        /// Test UpdateSubscription
        /// </summary>
        [Test]
        public void UpdateSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subscriptionId = null;
            //UpdateSubscriptionRequest updateSubscriptionRequest = null;
            //var response = instance.UpdateSubscription(subscriptionId, updateSubscriptionRequest);
            //Assert.IsInstanceOf(typeof(SubscriptionInfo), response, "response is SubscriptionInfo");
        }
        
    }

}
