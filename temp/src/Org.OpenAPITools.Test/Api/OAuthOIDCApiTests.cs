/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing OAuthOIDCApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class OAuthOIDCApiTests
    {
        private OAuthOIDCApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new OAuthOIDCApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of OAuthOIDCApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' OAuthOIDCApi
            //Assert.IsInstanceOf(typeof(OAuthOIDCApi), instance);
        }

        
        /// <summary>
        /// Test Authorize
        /// </summary>
        [Test]
        public void AuthorizeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.Authorize();
            
        }
        
        /// <summary>
        /// Test Authorize2
        /// </summary>
        [Test]
        public void Authorize2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string responseType = null;
            //string redirectUri = null;
            //string clientId = null;
            //string state = null;
            //string brandId = null;
            //string display = null;
            //string prompt = null;
            //string localeId = null;
            //string uiLocales = null;
            //string uiOptions = null;
            //string scope = null;
            //string acceptLanguage = null;
            //string request = null;
            //string requestUri = null;
            //string nonce = null;
            //string codeChallenge = null;
            //string codeChallengeMethod = null;
            //instance.Authorize2(responseType, redirectUri, clientId, state, brandId, display, prompt, localeId, uiLocales, uiOptions, scope, acceptLanguage, request, requestUri, nonce, codeChallenge, codeChallengeMethod);
            
        }
        
        /// <summary>
        /// Test GetToken
        /// </summary>
        [Test]
        public void GetTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string password = null;
            //string extension = null;
            //string grantType = null;
            //string code = null;
            //string redirectUri = null;
            //int? accessTokenTtl = null;
            //int? refreshTokenTtl = null;
            //string scope = null;
            //string refreshToken = null;
            //string endpointId = null;
            //string pin = null;
            //string clientId = null;
            //string accountId = null;
            //string partnerAccountId = null;
            //string clientAssertionType = null;
            //string clientAssertion = null;
            //string assertion = null;
            //string brandId = null;
            //string codeVerifier = null;
            //string deviceCode = null;
            //var response = instance.GetToken(username, password, extension, grantType, code, redirectUri, accessTokenTtl, refreshTokenTtl, scope, refreshToken, endpointId, pin, clientId, accountId, partnerAccountId, clientAssertionType, clientAssertion, assertion, brandId, codeVerifier, deviceCode);
            //Assert.IsInstanceOf(typeof(TokenInfo), response, "response is TokenInfo");
        }
        
        /// <summary>
        /// Test RevokeToken
        /// </summary>
        [Test]
        public void RevokeTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //string clientAssertionType = null;
            //string clientAssertion = null;
            //instance.RevokeToken(token, clientAssertionType, clientAssertion);
            
        }
        
    }

}
