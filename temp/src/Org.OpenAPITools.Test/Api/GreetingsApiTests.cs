/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing GreetingsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class GreetingsApiTests
    {
        private GreetingsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new GreetingsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of GreetingsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' GreetingsApi
            //Assert.IsInstanceOf(typeof(GreetingsApi), instance);
        }

        
        /// <summary>
        /// Test CreateCompanyGreeting
        /// </summary>
        [Test]
        public void CreateCompanyGreetingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string type = null;
            //System.IO.Stream binary = null;
            //string answeringRuleId = null;
            //string languageId = null;
            //var response = instance.CreateCompanyGreeting(accountId, type, binary, answeringRuleId, languageId);
            //Assert.IsInstanceOf(typeof(CustomCompanyGreetingInfo), response, "response is CustomCompanyGreetingInfo");
        }
        
        /// <summary>
        /// Test CreateCustomUserGreeting
        /// </summary>
        [Test]
        public void CreateCustomUserGreetingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //string type = null;
            //System.IO.Stream binary = null;
            //bool? apply = null;
            //string answeringRuleId = null;
            //var response = instance.CreateCustomUserGreeting(accountId, extensionId, type, binary, apply, answeringRuleId);
            //Assert.IsInstanceOf(typeof(CustomUserGreetingInfo), response, "response is CustomUserGreetingInfo");
        }
        
        /// <summary>
        /// Test ListStandardGreetings
        /// </summary>
        [Test]
        public void ListStandardGreetingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //string type = null;
            //string usageType = null;
            //var response = instance.ListStandardGreetings(page, perPage, type, usageType);
            //Assert.IsInstanceOf(typeof(DictionaryGreetingList), response, "response is DictionaryGreetingList");
        }
        
        /// <summary>
        /// Test ReadCustomGreeting
        /// </summary>
        [Test]
        public void ReadCustomGreetingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //long greetingId = null;
            //var response = instance.ReadCustomGreeting(accountId, extensionId, greetingId);
            //Assert.IsInstanceOf(typeof(CustomUserGreetingInfo), response, "response is CustomUserGreetingInfo");
        }
        
        /// <summary>
        /// Test ReadStandardGreeting
        /// </summary>
        [Test]
        public void ReadStandardGreetingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string greetingId = null;
            //var response = instance.ReadStandardGreeting(greetingId);
            //Assert.IsInstanceOf(typeof(DictionaryGreetingInfo), response, "response is DictionaryGreetingInfo");
        }
        
    }

}
