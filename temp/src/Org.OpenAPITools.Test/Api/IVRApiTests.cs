/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing IVRApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class IVRApiTests
    {
        private IVRApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new IVRApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of IVRApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' IVRApi
            //Assert.IsInstanceOf(typeof(IVRApi), instance);
        }

        
        /// <summary>
        /// Test CreateIVRMenu
        /// </summary>
        [Test]
        public void CreateIVRMenuTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //IVRMenuInfo iVRMenuInfo = null;
            //var response = instance.CreateIVRMenu(accountId, iVRMenuInfo);
            //Assert.IsInstanceOf(typeof(IVRMenuInfo), response, "response is IVRMenuInfo");
        }
        
        /// <summary>
        /// Test CreateIVRPrompt
        /// </summary>
        [Test]
        public void CreateIVRPromptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //System.IO.Stream attachment = null;
            //string name = null;
            //var response = instance.CreateIVRPrompt(accountId, attachment, name);
            //Assert.IsInstanceOf(typeof(PromptInfo), response, "response is PromptInfo");
        }
        
        /// <summary>
        /// Test DeleteIVRPrompt
        /// </summary>
        [Test]
        public void DeleteIVRPromptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string promptId = null;
            //instance.DeleteIVRPrompt(accountId, promptId);
            
        }
        
        /// <summary>
        /// Test ListIVRPrompts
        /// </summary>
        [Test]
        public void ListIVRPromptsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //var response = instance.ListIVRPrompts(accountId);
            //Assert.IsInstanceOf(typeof(IVRPrompts), response, "response is IVRPrompts");
        }
        
        /// <summary>
        /// Test ReadIVRMenu
        /// </summary>
        [Test]
        public void ReadIVRMenuTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string ivrMenuId = null;
            //var response = instance.ReadIVRMenu(accountId, ivrMenuId);
            //Assert.IsInstanceOf(typeof(IVRMenuInfo), response, "response is IVRMenuInfo");
        }
        
        /// <summary>
        /// Test ReadIVRPrompt
        /// </summary>
        [Test]
        public void ReadIVRPromptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string promptId = null;
            //var response = instance.ReadIVRPrompt(accountId, promptId);
            //Assert.IsInstanceOf(typeof(PromptInfo), response, "response is PromptInfo");
        }
        
        /// <summary>
        /// Test ReadIVRPromptContent
        /// </summary>
        [Test]
        public void ReadIVRPromptContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string promptId = null;
            //var response = instance.ReadIVRPromptContent(accountId, promptId);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test UpdateIVRMenu
        /// </summary>
        [Test]
        public void UpdateIVRMenuTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string ivrMenuId = null;
            //IVRMenuInfo iVRMenuInfo = null;
            //var response = instance.UpdateIVRMenu(accountId, ivrMenuId, iVRMenuInfo);
            //Assert.IsInstanceOf(typeof(IVRMenuInfo), response, "response is IVRMenuInfo");
        }
        
        /// <summary>
        /// Test UpdateIVRPrompt
        /// </summary>
        [Test]
        public void UpdateIVRPromptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string promptId = null;
            //UpdateIVRPromptRequest updateIVRPromptRequest = null;
            //var response = instance.UpdateIVRPrompt(accountId, promptId, updateIVRPromptRequest);
            //Assert.IsInstanceOf(typeof(PromptInfo), response, "response is PromptInfo");
        }
        
    }

}
