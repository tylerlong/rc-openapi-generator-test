/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing CallHandlingRulesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CallHandlingRulesApiTests
    {
        private CallHandlingRulesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CallHandlingRulesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CallHandlingRulesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' CallHandlingRulesApi
            //Assert.IsInstanceOf(typeof(CallHandlingRulesApi), instance);
        }

        
        /// <summary>
        /// Test CreateAnsweringRule
        /// </summary>
        [Test]
        public void CreateAnsweringRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //CreateAnsweringRuleRequest createAnsweringRuleRequest = null;
            //var response = instance.CreateAnsweringRule(accountId, extensionId, createAnsweringRuleRequest);
            //Assert.IsInstanceOf(typeof(CustomAnsweringRuleInfo), response, "response is CustomAnsweringRuleInfo");
        }
        
        /// <summary>
        /// Test CreateCompanyAnsweringRule
        /// </summary>
        [Test]
        public void CreateCompanyAnsweringRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //CompanyAnsweringRuleRequest companyAnsweringRuleRequest = null;
            //var response = instance.CreateCompanyAnsweringRule(accountId, companyAnsweringRuleRequest);
            //Assert.IsInstanceOf(typeof(CompanyAnsweringRuleInfo), response, "response is CompanyAnsweringRuleInfo");
        }
        
        /// <summary>
        /// Test DeleteAnsweringRule
        /// </summary>
        [Test]
        public void DeleteAnsweringRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //string ruleId = null;
            //instance.DeleteAnsweringRule(accountId, extensionId, ruleId);
            
        }
        
        /// <summary>
        /// Test DeleteCompanyAnsweringRule
        /// </summary>
        [Test]
        public void DeleteCompanyAnsweringRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string ruleId = null;
            //instance.DeleteCompanyAnsweringRule(accountId, ruleId);
            
        }
        
        /// <summary>
        /// Test GetForwardAllCalls
        /// </summary>
        [Test]
        public void GetForwardAllCallsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //var response = instance.GetForwardAllCalls(accountId, extensionId);
            //Assert.IsInstanceOf(typeof(ForwardAllCallsInfo), response, "response is ForwardAllCallsInfo");
        }
        
        /// <summary>
        /// Test ListAnsweringRules
        /// </summary>
        [Test]
        public void ListAnsweringRulesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //string type = null;
            //string view = null;
            //bool? enabledOnly = null;
            //string page = null;
            //string perPage = null;
            //var response = instance.ListAnsweringRules(accountId, extensionId, type, view, enabledOnly, page, perPage);
            //Assert.IsInstanceOf(typeof(UserAnsweringRuleList), response, "response is UserAnsweringRuleList");
        }
        
        /// <summary>
        /// Test ListCompanyAnsweringRules
        /// </summary>
        [Test]
        public void ListCompanyAnsweringRulesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //int? page = null;
            //int? perPage = null;
            //var response = instance.ListCompanyAnsweringRules(accountId, page, perPage);
            //Assert.IsInstanceOf(typeof(CompanyAnsweringRuleList), response, "response is CompanyAnsweringRuleList");
        }
        
        /// <summary>
        /// Test ReadAnsweringRule
        /// </summary>
        [Test]
        public void ReadAnsweringRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //string ruleId = null;
            //bool? showInactiveNumbers = null;
            //var response = instance.ReadAnsweringRule(accountId, extensionId, ruleId, showInactiveNumbers);
            //Assert.IsInstanceOf(typeof(AnsweringRuleInfo), response, "response is AnsweringRuleInfo");
        }
        
        /// <summary>
        /// Test ReadCompanyAnsweringRule
        /// </summary>
        [Test]
        public void ReadCompanyAnsweringRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string ruleId = null;
            //var response = instance.ReadCompanyAnsweringRule(accountId, ruleId);
            //Assert.IsInstanceOf(typeof(CompanyAnsweringRuleInfo), response, "response is CompanyAnsweringRuleInfo");
        }
        
        /// <summary>
        /// Test UpdateAnsweringRule
        /// </summary>
        [Test]
        public void UpdateAnsweringRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //string ruleId = null;
            //UpdateAnsweringRuleRequest updateAnsweringRuleRequest = null;
            //var response = instance.UpdateAnsweringRule(accountId, extensionId, ruleId, updateAnsweringRuleRequest);
            //Assert.IsInstanceOf(typeof(AnsweringRuleInfo), response, "response is AnsweringRuleInfo");
        }
        
        /// <summary>
        /// Test UpdateCompanyAnsweringRule
        /// </summary>
        [Test]
        public void UpdateCompanyAnsweringRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string ruleId = null;
            //CompanyAnsweringRuleUpdate companyAnsweringRuleUpdate = null;
            //var response = instance.UpdateCompanyAnsweringRule(accountId, ruleId, companyAnsweringRuleUpdate);
            //Assert.IsInstanceOf(typeof(CompanyAnsweringRuleInfo), response, "response is CompanyAnsweringRuleInfo");
        }
        
        /// <summary>
        /// Test UpdateForwardAllCalls
        /// </summary>
        [Test]
        public void UpdateForwardAllCallsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //ForwardAllCallsInfo forwardAllCallsInfo = null;
            //var response = instance.UpdateForwardAllCalls(accountId, extensionId, forwardAllCallsInfo);
            //Assert.IsInstanceOf(typeof(ForwardAllCallsInfo), response, "response is ForwardAllCallsInfo");
        }
        
    }

}
