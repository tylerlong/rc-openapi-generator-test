/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing NotesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class NotesApiTests
    {
        private NotesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new NotesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of NotesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' NotesApi
            //Assert.IsInstanceOf(typeof(NotesApi), instance);
        }

        
        /// <summary>
        /// Test CreateChatNote
        /// </summary>
        [Test]
        public void CreateChatNoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string chatId = null;
            //GlipNoteCreate glipNoteCreate = null;
            //var response = instance.CreateChatNote(chatId, glipNoteCreate);
            //Assert.IsInstanceOf(typeof(GlipNoteInfo), response, "response is GlipNoteInfo");
        }
        
        /// <summary>
        /// Test DeleteNote
        /// </summary>
        [Test]
        public void DeleteNoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string noteId = null;
            //instance.DeleteNote(noteId);
            
        }
        
        /// <summary>
        /// Test ListChatNotes
        /// </summary>
        [Test]
        public void ListChatNotesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string chatId = null;
            //string creationTimeTo = null;
            //string creationTimeFrom = null;
            //string creatorId = null;
            //string status = null;
            //string pageToken = null;
            //int? recordCount = null;
            //var response = instance.ListChatNotes(chatId, creationTimeTo, creationTimeFrom, creatorId, status, pageToken, recordCount);
            //Assert.IsInstanceOf(typeof(GlipNotesInfo), response, "response is GlipNotesInfo");
        }
        
        /// <summary>
        /// Test LockNote
        /// </summary>
        [Test]
        public void LockNoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string noteId = null;
            //instance.LockNote(noteId);
            
        }
        
        /// <summary>
        /// Test PatchNote
        /// </summary>
        [Test]
        public void PatchNoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string noteId = null;
            //GlipNoteCreate glipNoteCreate = null;
            //var response = instance.PatchNote(noteId, glipNoteCreate);
            //Assert.IsInstanceOf(typeof(GlipNoteInfo), response, "response is GlipNoteInfo");
        }
        
        /// <summary>
        /// Test PublishNote
        /// </summary>
        [Test]
        public void PublishNoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string noteId = null;
            //instance.PublishNote(noteId);
            
        }
        
        /// <summary>
        /// Test ReadUserNote
        /// </summary>
        [Test]
        public void ReadUserNoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string noteId = null;
            //var response = instance.ReadUserNote(noteId);
            //Assert.IsInstanceOf(typeof(GetGlipNoteInfo), response, "response is GetGlipNoteInfo");
        }
        
        /// <summary>
        /// Test UnlockNote
        /// </summary>
        [Test]
        public void UnlockNoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string noteId = null;
            //instance.UnlockNote(noteId);
            
        }
        
    }

}
