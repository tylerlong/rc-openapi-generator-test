/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing RingOutApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class RingOutApiTests
    {
        private RingOutApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new RingOutApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of RingOutApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' RingOutApi
            //Assert.IsInstanceOf(typeof(RingOutApi), instance);
        }

        
        /// <summary>
        /// Test CreateRingOutCall
        /// </summary>
        [Test]
        public void CreateRingOutCallTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //MakeRingOutRequest makeRingOutRequest = null;
            //var response = instance.CreateRingOutCall(accountId, extensionId, makeRingOutRequest);
            //Assert.IsInstanceOf(typeof(GetRingOutStatusResponse), response, "response is GetRingOutStatusResponse");
        }
        
        /// <summary>
        /// Test CreateRingOutCallDeprecated
        /// </summary>
        [Test]
        public void CreateRingOutCallDeprecatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //MakeRingOutRequest makeRingOutRequest = null;
            //var response = instance.CreateRingOutCallDeprecated(accountId, extensionId, makeRingOutRequest);
            //Assert.IsInstanceOf(typeof(GetRingOutStatusResponseIntId), response, "response is GetRingOutStatusResponseIntId");
        }
        
        /// <summary>
        /// Test DeleteRingOutCall
        /// </summary>
        [Test]
        public void DeleteRingOutCallTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //string ringoutId = null;
            //instance.DeleteRingOutCall(accountId, extensionId, ringoutId);
            
        }
        
        /// <summary>
        /// Test DeleteRingOutCallDeprecated
        /// </summary>
        [Test]
        public void DeleteRingOutCallDeprecatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //int ringoutId = null;
            //instance.DeleteRingOutCallDeprecated(accountId, extensionId, ringoutId);
            
        }
        
        /// <summary>
        /// Test ReadRingOutCallStatus
        /// </summary>
        [Test]
        public void ReadRingOutCallStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //string ringoutId = null;
            //var response = instance.ReadRingOutCallStatus(accountId, extensionId, ringoutId);
            //Assert.IsInstanceOf(typeof(GetRingOutStatusResponse), response, "response is GetRingOutStatusResponse");
        }
        
        /// <summary>
        /// Test ReadRingOutCallStatusDeprecated
        /// </summary>
        [Test]
        public void ReadRingOutCallStatusDeprecatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //int ringoutId = null;
            //var response = instance.ReadRingOutCallStatusDeprecated(accountId, extensionId, ringoutId);
            //Assert.IsInstanceOf(typeof(GetRingOutStatusResponse), response, "response is GetRingOutStatusResponse");
        }
        
    }

}
