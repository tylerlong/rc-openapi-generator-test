/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing TasksApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TasksApiTests
    {
        private TasksApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TasksApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TasksApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' TasksApi
            //Assert.IsInstanceOf(typeof(TasksApi), instance);
        }

        
        /// <summary>
        /// Test CompleteTask
        /// </summary>
        [Test]
        public void CompleteTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //GlipCompleteTask glipCompleteTask = null;
            //instance.CompleteTask(taskId, glipCompleteTask);
            
        }
        
        /// <summary>
        /// Test CreateTask
        /// </summary>
        [Test]
        public void CreateTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string chatId = null;
            //GlipCreateTask glipCreateTask = null;
            //var response = instance.CreateTask(chatId, glipCreateTask);
            //Assert.IsInstanceOf(typeof(GlipTaskInfo), response, "response is GlipTaskInfo");
        }
        
        /// <summary>
        /// Test DeleteTask
        /// </summary>
        [Test]
        public void DeleteTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //instance.DeleteTask(taskId);
            
        }
        
        /// <summary>
        /// Test ListChatTasks
        /// </summary>
        [Test]
        public void ListChatTasksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string chatId = null;
            //string creationTimeTo = null;
            //string creationTimeFrom = null;
            //List<string> creatorId = null;
            //List<string> status = null;
            //string assignmentStatus = null;
            //List<string> assigneeId = null;
            //string assigneeStatus = null;
            //string pageToken = null;
            //int? recordCount = null;
            //var response = instance.ListChatTasks(chatId, creationTimeTo, creationTimeFrom, creatorId, status, assignmentStatus, assigneeId, assigneeStatus, pageToken, recordCount);
            //Assert.IsInstanceOf(typeof(GlipTaskList), response, "response is GlipTaskList");
        }
        
        /// <summary>
        /// Test PatchTask
        /// </summary>
        [Test]
        public void PatchTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //GlipUpdateTask glipUpdateTask = null;
            //var response = instance.PatchTask(taskId, glipUpdateTask);
            //Assert.IsInstanceOf(typeof(GlipTaskList), response, "response is GlipTaskList");
        }
        
        /// <summary>
        /// Test ReadTask
        /// </summary>
        [Test]
        public void ReadTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //var response = instance.ReadTask(taskId);
            //Assert.IsInstanceOf(typeof(GlipTaskInfo), response, "response is GlipTaskInfo");
        }
        
    }

}
