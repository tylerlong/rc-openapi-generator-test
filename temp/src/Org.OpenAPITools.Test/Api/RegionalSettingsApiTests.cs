/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing RegionalSettingsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class RegionalSettingsApiTests
    {
        private RegionalSettingsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new RegionalSettingsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of RegionalSettingsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' RegionalSettingsApi
            //Assert.IsInstanceOf(typeof(RegionalSettingsApi), instance);
        }

        
        /// <summary>
        /// Test ListCountries
        /// </summary>
        [Test]
        public void ListCountriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? loginAllowed = null;
            //bool? signupAllowed = null;
            //bool? numberSelling = null;
            //int? page = null;
            //int? perPage = null;
            //bool? freeSoftphoneLine = null;
            //var response = instance.ListCountries(loginAllowed, signupAllowed, numberSelling, page, perPage, freeSoftphoneLine);
            //Assert.IsInstanceOf(typeof(GetCountryListResponse), response, "response is GetCountryListResponse");
        }
        
        /// <summary>
        /// Test ListLanguages
        /// </summary>
        [Test]
        public void ListLanguagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ListLanguages();
            //Assert.IsInstanceOf(typeof(LanguageList), response, "response is LanguageList");
        }
        
        /// <summary>
        /// Test ListLocations
        /// </summary>
        [Test]
        public void ListLocationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orderBy = null;
            //int? page = null;
            //int? perPage = null;
            //string stateId = null;
            //bool? withNxx = null;
            //var response = instance.ListLocations(orderBy, page, perPage, stateId, withNxx);
            //Assert.IsInstanceOf(typeof(GetLocationListResponse), response, "response is GetLocationListResponse");
        }
        
        /// <summary>
        /// Test ListStates
        /// </summary>
        [Test]
        public void ListStatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? allCountries = null;
            //long? countryId = null;
            //int? page = null;
            //int? perPage = null;
            //bool? withPhoneNumbers = null;
            //var response = instance.ListStates(allCountries, countryId, page, perPage, withPhoneNumbers);
            //Assert.IsInstanceOf(typeof(GetStateListResponse), response, "response is GetStateListResponse");
        }
        
        /// <summary>
        /// Test ListTimezones
        /// </summary>
        [Test]
        public void ListTimezonesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string page = null;
            //string perPage = null;
            //var response = instance.ListTimezones(page, perPage);
            //Assert.IsInstanceOf(typeof(GetTimezoneListResponse), response, "response is GetTimezoneListResponse");
        }
        
        /// <summary>
        /// Test ReadCountry
        /// </summary>
        [Test]
        public void ReadCountryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long countryId = null;
            //var response = instance.ReadCountry(countryId);
            //Assert.IsInstanceOf(typeof(GetCountryInfoDictionaryResponse), response, "response is GetCountryInfoDictionaryResponse");
        }
        
        /// <summary>
        /// Test ReadLanguage
        /// </summary>
        [Test]
        public void ReadLanguageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long languageId = null;
            //var response = instance.ReadLanguage(languageId);
            //Assert.IsInstanceOf(typeof(LanguageInfo), response, "response is LanguageInfo");
        }
        
        /// <summary>
        /// Test ReadState
        /// </summary>
        [Test]
        public void ReadStateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long stateId = null;
            //var response = instance.ReadState(stateId);
            //Assert.IsInstanceOf(typeof(GetStateInfoResponse), response, "response is GetStateInfoResponse");
        }
        
        /// <summary>
        /// Test ReadTimezone
        /// </summary>
        [Test]
        public void ReadTimezoneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long timezoneId = null;
            //string page = null;
            //string perPage = null;
            //var response = instance.ReadTimezone(timezoneId, page, perPage);
            //Assert.IsInstanceOf(typeof(GetTimezoneInfoResponse), response, "response is GetTimezoneInfoResponse");
        }
        
    }

}
