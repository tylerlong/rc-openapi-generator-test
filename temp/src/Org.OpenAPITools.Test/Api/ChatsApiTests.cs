/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing ChatsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ChatsApiTests
    {
        private ChatsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ChatsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ChatsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' ChatsApi
            //Assert.IsInstanceOf(typeof(ChatsApi), instance);
        }

        
        /// <summary>
        /// Test AssignGlipGroupMembers
        /// </summary>
        [Test]
        public void AssignGlipGroupMembersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //EditGroupRequest editGroupRequest = null;
            //var response = instance.AssignGlipGroupMembers(groupId, editGroupRequest);
            //Assert.IsInstanceOf(typeof(GlipGroupInfo), response, "response is GlipGroupInfo");
        }
        
        /// <summary>
        /// Test CreateGlipGroup
        /// </summary>
        [Test]
        public void CreateGlipGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GlipCreateGroup glipCreateGroup = null;
            //var response = instance.CreateGlipGroup(glipCreateGroup);
            //Assert.IsInstanceOf(typeof(GlipGroupInfo), response, "response is GlipGroupInfo");
        }
        
        /// <summary>
        /// Test FavoriteGlipChat
        /// </summary>
        [Test]
        public void FavoriteGlipChatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string chatId = null;
            //instance.FavoriteGlipChat(chatId);
            
        }
        
        /// <summary>
        /// Test ListFavoriteChats
        /// </summary>
        [Test]
        public void ListFavoriteChatsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? recordCount = null;
            //var response = instance.ListFavoriteChats(recordCount);
            //Assert.IsInstanceOf(typeof(GlipChatsListWithoutNavigation), response, "response is GlipChatsListWithoutNavigation");
        }
        
        /// <summary>
        /// Test ListGlipChats
        /// </summary>
        [Test]
        public void ListGlipChatsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> type = null;
            //int? recordCount = null;
            //string pageToken = null;
            //var response = instance.ListGlipChats(type, recordCount, pageToken);
            //Assert.IsInstanceOf(typeof(GlipChatsList), response, "response is GlipChatsList");
        }
        
        /// <summary>
        /// Test ListGlipGroups
        /// </summary>
        [Test]
        public void ListGlipGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //int? recordCount = null;
            //string pageToken = null;
            //var response = instance.ListGlipGroups(type, recordCount, pageToken);
            //Assert.IsInstanceOf(typeof(GlipGroupList), response, "response is GlipGroupList");
        }
        
        /// <summary>
        /// Test ListRecentChats
        /// </summary>
        [Test]
        public void ListRecentChatsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> type = null;
            //int? recordCount = null;
            //var response = instance.ListRecentChats(type, recordCount);
            //Assert.IsInstanceOf(typeof(GlipChatsListWithoutNavigation), response, "response is GlipChatsListWithoutNavigation");
        }
        
        /// <summary>
        /// Test MarkChatRead
        /// </summary>
        [Test]
        public void MarkChatReadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string chatId = null;
            //instance.MarkChatRead(chatId);
            
        }
        
        /// <summary>
        /// Test MarkChatUnread
        /// </summary>
        [Test]
        public void MarkChatUnreadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string chatId = null;
            //instance.MarkChatUnread(chatId);
            
        }
        
        /// <summary>
        /// Test ReadGlipChat
        /// </summary>
        [Test]
        public void ReadGlipChatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string chatId = null;
            //var response = instance.ReadGlipChat(chatId);
            //Assert.IsInstanceOf(typeof(GlipChatInfo), response, "response is GlipChatInfo");
        }
        
        /// <summary>
        /// Test ReadGlipGroup
        /// </summary>
        [Test]
        public void ReadGlipGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> groupId = null;
            //var response = instance.ReadGlipGroup(groupId);
            //Assert.IsInstanceOf(typeof(GlipGroupInfo), response, "response is GlipGroupInfo");
        }
        
        /// <summary>
        /// Test UnfavoriteGlipChat
        /// </summary>
        [Test]
        public void UnfavoriteGlipChatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string chatId = null;
            //instance.UnfavoriteGlipChat(chatId);
            
        }
        
    }

}
