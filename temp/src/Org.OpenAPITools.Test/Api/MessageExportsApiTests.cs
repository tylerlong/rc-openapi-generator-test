/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing MessageExportsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class MessageExportsApiTests
    {
        private MessageExportsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new MessageExportsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of MessageExportsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' MessageExportsApi
            //Assert.IsInstanceOf(typeof(MessageExportsApi), instance);
        }

        
        /// <summary>
        /// Test CreateMessageStoreReport
        /// </summary>
        [Test]
        public void CreateMessageStoreReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //CreateMessageStoreReportRequest createMessageStoreReportRequest = null;
            //var response = instance.CreateMessageStoreReport(accountId, createMessageStoreReportRequest);
            //Assert.IsInstanceOf(typeof(MessageStoreReport), response, "response is MessageStoreReport");
        }
        
        /// <summary>
        /// Test ReadMessageStoreReportArchive
        /// </summary>
        [Test]
        public void ReadMessageStoreReportArchiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string taskId = null;
            //var response = instance.ReadMessageStoreReportArchive(accountId, taskId);
            //Assert.IsInstanceOf(typeof(MessageStoreReportArchive), response, "response is MessageStoreReportArchive");
        }
        
        /// <summary>
        /// Test ReadMessageStoreReportArchiveContent
        /// </summary>
        [Test]
        public void ReadMessageStoreReportArchiveContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string taskId = null;
            //string archiveId = null;
            //var response = instance.ReadMessageStoreReportArchiveContent(accountId, taskId, archiveId);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test ReadMessageStoreReportTask
        /// </summary>
        [Test]
        public void ReadMessageStoreReportTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string taskId = null;
            //var response = instance.ReadMessageStoreReportTask(accountId, taskId);
            //Assert.IsInstanceOf(typeof(MessageStoreReport), response, "response is MessageStoreReport");
        }
        
    }

}
