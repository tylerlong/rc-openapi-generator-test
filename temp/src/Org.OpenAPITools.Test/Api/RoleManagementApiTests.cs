/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing RoleManagementApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class RoleManagementApiTests
    {
        private RoleManagementApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new RoleManagementApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of RoleManagementApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' RoleManagementApi
            //Assert.IsInstanceOf(typeof(RoleManagementApi), instance);
        }

        
        /// <summary>
        /// Test AssignDefaultRole
        /// </summary>
        [Test]
        public void AssignDefaultRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string extensionId = null;
            //string accountId = null;
            //var response = instance.AssignDefaultRole(extensionId, accountId);
            //Assert.IsInstanceOf(typeof(AssignedRolesResource), response, "response is AssignedRolesResource");
        }
        
        /// <summary>
        /// Test AssignMultipleUserRoles
        /// </summary>
        [Test]
        public void AssignMultipleUserRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleId = null;
            //string accountId = null;
            //BulkRoleAssignResource bulkRoleAssignResource = null;
            //instance.AssignMultipleUserRoles(roleId, accountId, bulkRoleAssignResource);
            
        }
        
        /// <summary>
        /// Test CreateCustomRole
        /// </summary>
        [Test]
        public void CreateCustomRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //RoleResource roleResource = null;
            //instance.CreateCustomRole(accountId, roleResource);
            
        }
        
        /// <summary>
        /// Test DeleteCustomRole
        /// </summary>
        [Test]
        public void DeleteCustomRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleId = null;
            //string accountId = null;
            //bool? validateOnly = null;
            //instance.DeleteCustomRole(roleId, accountId, validateOnly);
            
        }
        
        /// <summary>
        /// Test ListAssignedRoles
        /// </summary>
        [Test]
        public void ListAssignedRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //bool? showHidden = null;
            //var response = instance.ListAssignedRoles(accountId, showHidden);
            //Assert.IsInstanceOf(typeof(ExtensionWithRolesCollectionResource), response, "response is ExtensionWithRolesCollectionResource");
        }
        
        /// <summary>
        /// Test ListStandardUserRole
        /// </summary>
        [Test]
        public void ListStandardUserRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string page = null;
            //string perPage = null;
            //string servicePlanId = null;
            //var response = instance.ListStandardUserRole(page, perPage, servicePlanId);
            //Assert.IsInstanceOf(typeof(RolesCollectionResource), response, "response is RolesCollectionResource");
        }
        
        /// <summary>
        /// Test ListUserAssignedRoles
        /// </summary>
        [Test]
        public void ListUserAssignedRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string extensionId = null;
            //string accountId = null;
            //bool? showHidden = null;
            //var response = instance.ListUserAssignedRoles(extensionId, accountId, showHidden);
            //Assert.IsInstanceOf(typeof(AssignedRolesResource), response, "response is AssignedRolesResource");
        }
        
        /// <summary>
        /// Test ListUserRoles
        /// </summary>
        [Test]
        public void ListUserRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //bool? custom = null;
            //string page = null;
            //string perPage = null;
            //var response = instance.ListUserRoles(accountId, custom, page, perPage);
            //Assert.IsInstanceOf(typeof(RolesCollectionResource), response, "response is RolesCollectionResource");
        }
        
        /// <summary>
        /// Test ReadDefaultRole
        /// </summary>
        [Test]
        public void ReadDefaultRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //instance.ReadDefaultRole(accountId);
            
        }
        
        /// <summary>
        /// Test ReadStandardUserRole
        /// </summary>
        [Test]
        public void ReadStandardUserRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleId = null;
            //var response = instance.ReadStandardUserRole(roleId);
            //Assert.IsInstanceOf(typeof(RoleResource), response, "response is RoleResource");
        }
        
        /// <summary>
        /// Test ReadUserRole
        /// </summary>
        [Test]
        public void ReadUserRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleId = null;
            //string accountId = null;
            //var response = instance.ReadUserRole(roleId, accountId);
            //Assert.IsInstanceOf(typeof(RoleResource), response, "response is RoleResource");
        }
        
        /// <summary>
        /// Test UpdateDefaultUserRole
        /// </summary>
        [Test]
        public void UpdateDefaultUserRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //DefaultUserRoleRequest defaultUserRoleRequest = null;
            //instance.UpdateDefaultUserRole(accountId, defaultUserRoleRequest);
            
        }
        
        /// <summary>
        /// Test UpdateUserAssignedRoles
        /// </summary>
        [Test]
        public void UpdateUserAssignedRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string extensionId = null;
            //string accountId = null;
            //AssignedRolesResource assignedRolesResource = null;
            //var response = instance.UpdateUserAssignedRoles(extensionId, accountId, assignedRolesResource);
            //Assert.IsInstanceOf(typeof(AssignedRolesResource), response, "response is AssignedRolesResource");
        }
        
        /// <summary>
        /// Test UpdateUserRole
        /// </summary>
        [Test]
        public void UpdateUserRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleId = null;
            //string accountId = null;
            //RoleResource roleResource = null;
            //instance.UpdateUserRole(roleId, accountId, roleResource);
            
        }
        
    }

}
