/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing CallControlApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CallControlApiTests
    {
        private CallControlApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CallControlApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CallControlApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' CallControlApi
            //Assert.IsInstanceOf(typeof(CallControlApi), instance);
        }

        
        /// <summary>
        /// Test AnswerCallParty
        /// </summary>
        [Test]
        public void AnswerCallPartyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string telephonySessionId = null;
            //string partyId = null;
            //AnswerTarget answerTarget = null;
            //var response = instance.AnswerCallParty(accountId, telephonySessionId, partyId, answerTarget);
            //Assert.IsInstanceOf(typeof(CallParty), response, "response is CallParty");
        }
        
        /// <summary>
        /// Test BridgeCallParty
        /// </summary>
        [Test]
        public void BridgeCallPartyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string telephonySessionId = null;
            //string partyId = null;
            //BridgeTargetRequest bridgeTargetRequest = null;
            //var response = instance.BridgeCallParty(accountId, telephonySessionId, partyId, bridgeTargetRequest);
            //Assert.IsInstanceOf(typeof(CallParty), response, "response is CallParty");
        }
        
        /// <summary>
        /// Test CallFlipParty
        /// </summary>
        [Test]
        public void CallFlipPartyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string telephonySessionId = null;
            //string partyId = null;
            //CallPartyFlip callPartyFlip = null;
            //instance.CallFlipParty(accountId, telephonySessionId, partyId, callPartyFlip);
            
        }
        
        /// <summary>
        /// Test CallParkParty
        /// </summary>
        [Test]
        public void CallParkPartyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string telephonySessionId = null;
            //string partyId = null;
            //var response = instance.CallParkParty(accountId, telephonySessionId, partyId);
            //Assert.IsInstanceOf(typeof(CallParty), response, "response is CallParty");
        }
        
        /// <summary>
        /// Test CreateCallOutCallSession
        /// </summary>
        [Test]
        public void CreateCallOutCallSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //MakeCallOutRequest makeCallOutRequest = null;
            //var response = instance.CreateCallOutCallSession(accountId, makeCallOutRequest);
            //Assert.IsInstanceOf(typeof(CallSession), response, "response is CallSession");
        }
        
        /// <summary>
        /// Test CreateCallPartyWithBringIn
        /// </summary>
        [Test]
        public void CreateCallPartyWithBringInTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string telephonySessionId = null;
            //AddPartyRequest addPartyRequest = null;
            //var response = instance.CreateCallPartyWithBringIn(accountId, telephonySessionId, addPartyRequest);
            //Assert.IsInstanceOf(typeof(CallParty), response, "response is CallParty");
        }
        
        /// <summary>
        /// Test CreateConferenceCallSession
        /// </summary>
        [Test]
        public void CreateConferenceCallSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //var response = instance.CreateConferenceCallSession(accountId);
            //Assert.IsInstanceOf(typeof(CallSessionObject), response, "response is CallSessionObject");
        }
        
        /// <summary>
        /// Test DeleteCallParty
        /// </summary>
        [Test]
        public void DeleteCallPartyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string telephonySessionId = null;
            //string partyId = null;
            //instance.DeleteCallParty(accountId, telephonySessionId, partyId);
            
        }
        
        /// <summary>
        /// Test DeleteCallSession
        /// </summary>
        [Test]
        public void DeleteCallSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string telephonySessionId = null;
            //instance.DeleteCallSession(accountId, telephonySessionId);
            
        }
        
        /// <summary>
        /// Test ForwardCallParty
        /// </summary>
        [Test]
        public void ForwardCallPartyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string telephonySessionId = null;
            //string partyId = null;
            //ForwardTarget forwardTarget = null;
            //var response = instance.ForwardCallParty(accountId, telephonySessionId, partyId, forwardTarget);
            //Assert.IsInstanceOf(typeof(CallParty), response, "response is CallParty");
        }
        
        /// <summary>
        /// Test HoldCallParty
        /// </summary>
        [Test]
        public void HoldCallPartyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string telephonySessionId = null;
            //string partyId = null;
            //var response = instance.HoldCallParty(accountId, telephonySessionId, partyId);
            //Assert.IsInstanceOf(typeof(CallParty), response, "response is CallParty");
        }
        
        /// <summary>
        /// Test IgnoreCallInQueue
        /// </summary>
        [Test]
        public void IgnoreCallInQueueTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string telephonySessionId = null;
            //string partyId = null;
            //IgnoreRequestBody ignoreRequestBody = null;
            //instance.IgnoreCallInQueue(accountId, telephonySessionId, partyId, ignoreRequestBody);
            
        }
        
        /// <summary>
        /// Test PauseResumeCallRecording
        /// </summary>
        [Test]
        public void PauseResumeCallRecordingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandId = null;
            //string accountId = null;
            //string telephonySessionId = null;
            //string partyId = null;
            //string recordingId = null;
            //CallRecordingUpdate callRecordingUpdate = null;
            //var response = instance.PauseResumeCallRecording(brandId, accountId, telephonySessionId, partyId, recordingId, callRecordingUpdate);
            //Assert.IsInstanceOf(typeof(CallRecording), response, "response is CallRecording");
        }
        
        /// <summary>
        /// Test PickupCallParty
        /// </summary>
        [Test]
        public void PickupCallPartyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string telephonySessionId = null;
            //string partyId = null;
            //PickupTarget pickupTarget = null;
            //var response = instance.PickupCallParty(accountId, telephonySessionId, partyId, pickupTarget);
            //Assert.IsInstanceOf(typeof(CallParty), response, "response is CallParty");
        }
        
        /// <summary>
        /// Test ReadCallPartyStatus
        /// </summary>
        [Test]
        public void ReadCallPartyStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string telephonySessionId = null;
            //string partyId = null;
            //var response = instance.ReadCallPartyStatus(accountId, telephonySessionId, partyId);
            //Assert.IsInstanceOf(typeof(CallParty), response, "response is CallParty");
        }
        
        /// <summary>
        /// Test ReadCallSessionStatus
        /// </summary>
        [Test]
        public void ReadCallSessionStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string telephonySessionId = null;
            //string timestamp = null;
            //string timeout = null;
            //var response = instance.ReadCallSessionStatus(accountId, telephonySessionId, timestamp, timeout);
            //Assert.IsInstanceOf(typeof(CallSessionObject), response, "response is CallSessionObject");
        }
        
        /// <summary>
        /// Test RejectParty
        /// </summary>
        [Test]
        public void RejectPartyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string telephonySessionId = null;
            //string partyId = null;
            //instance.RejectParty(accountId, telephonySessionId, partyId);
            
        }
        
        /// <summary>
        /// Test ReplyParty
        /// </summary>
        [Test]
        public void ReplyPartyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string telephonySessionId = null;
            //string partyId = null;
            //CallPartyReply callPartyReply = null;
            //var response = instance.ReplyParty(accountId, telephonySessionId, partyId, callPartyReply);
            //Assert.IsInstanceOf(typeof(ReplyParty), response, "response is ReplyParty");
        }
        
        /// <summary>
        /// Test StartCallRecording
        /// </summary>
        [Test]
        public void StartCallRecordingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string telephonySessionId = null;
            //string partyId = null;
            //instance.StartCallRecording(accountId, telephonySessionId, partyId);
            
        }
        
        /// <summary>
        /// Test SuperviseCallParty
        /// </summary>
        [Test]
        public void SuperviseCallPartyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string telephonySessionId = null;
            //string partyId = null;
            //PartySuperviseRequest partySuperviseRequest = null;
            //var response = instance.SuperviseCallParty(accountId, telephonySessionId, partyId, partySuperviseRequest);
            //Assert.IsInstanceOf(typeof(PartySuperviseResponse), response, "response is PartySuperviseResponse");
        }
        
        /// <summary>
        /// Test SuperviseCallSession
        /// </summary>
        [Test]
        public void SuperviseCallSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string telephonySessionId = null;
            //SuperviseCallSessionRequest superviseCallSessionRequest = null;
            //var response = instance.SuperviseCallSession(accountId, telephonySessionId, superviseCallSessionRequest);
            //Assert.IsInstanceOf(typeof(SuperviseCallSession), response, "response is SuperviseCallSession");
        }
        
        /// <summary>
        /// Test TransferCallParty
        /// </summary>
        [Test]
        public void TransferCallPartyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string telephonySessionId = null;
            //string partyId = null;
            //TransferTarget transferTarget = null;
            //var response = instance.TransferCallParty(accountId, telephonySessionId, partyId, transferTarget);
            //Assert.IsInstanceOf(typeof(CallParty), response, "response is CallParty");
        }
        
        /// <summary>
        /// Test UnholdCallParty
        /// </summary>
        [Test]
        public void UnholdCallPartyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string telephonySessionId = null;
            //string partyId = null;
            //var response = instance.UnholdCallParty(accountId, telephonySessionId, partyId);
            //Assert.IsInstanceOf(typeof(CallParty), response, "response is CallParty");
        }
        
        /// <summary>
        /// Test UpdateCallParty
        /// </summary>
        [Test]
        public void UpdateCallPartyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string telephonySessionId = null;
            //string partyId = null;
            //PartyUpdateRequest partyUpdateRequest = null;
            //var response = instance.UpdateCallParty(accountId, telephonySessionId, partyId, partyUpdateRequest);
            //Assert.IsInstanceOf(typeof(CallParty), response, "response is CallParty");
        }
        
    }

}
