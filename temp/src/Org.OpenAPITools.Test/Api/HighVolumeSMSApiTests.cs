/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing HighVolumeSMSApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class HighVolumeSMSApiTests
    {
        private HighVolumeSMSApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new HighVolumeSMSApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of HighVolumeSMSApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' HighVolumeSMSApi
            //Assert.IsInstanceOf(typeof(HighVolumeSMSApi), instance);
        }

        
        /// <summary>
        /// Test AddA2PSMSOptOuts
        /// </summary>
        [Test]
        public void AddA2PSMSOptOutsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //OptOutBulkAssignRequest optOutBulkAssignRequest = null;
            //var response = instance.AddA2PSMSOptOuts(accountId, optOutBulkAssignRequest);
            //Assert.IsInstanceOf(typeof(OptOutBulkAssignResponse), response, "response is OptOutBulkAssignResponse");
        }
        
        /// <summary>
        /// Test AggregateA2PSMSStatuses
        /// </summary>
        [Test]
        public void AggregateA2PSMSStatusesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string batchId = null;
            //SmsDirectionEnum? direction = null;
            //DateTime? dateFrom = null;
            //DateTime? dateTo = null;
            //List<string> phoneNumber = null;
            //var response = instance.AggregateA2PSMSStatuses(accountId, batchId, direction, dateFrom, dateTo, phoneNumber);
            //Assert.IsInstanceOf(typeof(MessageStatusesResponse), response, "response is MessageStatusesResponse");
        }
        
        /// <summary>
        /// Test CreateA2PSMS
        /// </summary>
        [Test]
        public void CreateA2PSMSTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //MessageBatchCreateRequest messageBatchCreateRequest = null;
            //var response = instance.CreateA2PSMS(accountId, messageBatchCreateRequest);
            //Assert.IsInstanceOf(typeof(MessageBatchResponse), response, "response is MessageBatchResponse");
        }
        
        /// <summary>
        /// Test ListA2PBatches
        /// </summary>
        [Test]
        public void ListA2PBatchesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //DateTime? dateFrom = null;
            //DateTime? dateTo = null;
            //string from = null;
            //List<string> status = null;
            //string pageToken = null;
            //long? perPage = null;
            //var response = instance.ListA2PBatches(accountId, dateFrom, dateTo, from, status, pageToken, perPage);
            //Assert.IsInstanceOf(typeof(BatchListResponse), response, "response is BatchListResponse");
        }
        
        /// <summary>
        /// Test ListA2PSMS
        /// </summary>
        [Test]
        public void ListA2PSMSTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string batchId = null;
            //SmsDirectionEnum? direction = null;
            //DateTime? dateFrom = null;
            //DateTime? dateTo = null;
            //string view = null;
            //List<string> phoneNumber = null;
            //string pageToken = null;
            //int? perPage = null;
            //var response = instance.ListA2PSMS(accountId, batchId, direction, dateFrom, dateTo, view, phoneNumber, pageToken, perPage);
            //Assert.IsInstanceOf(typeof(MessageListResponse), response, "response is MessageListResponse");
        }
        
        /// <summary>
        /// Test ReadA2PBatch
        /// </summary>
        [Test]
        public void ReadA2PBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string batchId = null;
            //var response = instance.ReadA2PBatch(accountId, batchId);
            //Assert.IsInstanceOf(typeof(MessageBatchResponse), response, "response is MessageBatchResponse");
        }
        
        /// <summary>
        /// Test ReadA2PSMS
        /// </summary>
        [Test]
        public void ReadA2PSMSTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string messageId = null;
            //var response = instance.ReadA2PSMS(accountId, messageId);
            //Assert.IsInstanceOf(typeof(MessageDetailsResponse), response, "response is MessageDetailsResponse");
        }
        
        /// <summary>
        /// Test ReadA2PSMSOptOuts
        /// </summary>
        [Test]
        public void ReadA2PSMSOptOutsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string from = null;
            //string to = null;
            //string status = null;
            //string pageToken = null;
            //int? perPage = null;
            //var response = instance.ReadA2PSMSOptOuts(accountId, from, to, status, pageToken, perPage);
            //Assert.IsInstanceOf(typeof(OptOutListResponse), response, "response is OptOutListResponse");
        }
        
    }

}
