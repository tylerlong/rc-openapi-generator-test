/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing SCIMApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SCIMApiTests
    {
        private SCIMApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SCIMApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SCIMApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' SCIMApi
            //Assert.IsInstanceOf(typeof(SCIMApi), instance);
        }

        
        /// <summary>
        /// Test CreateUser
        /// </summary>
        [Test]
        public void CreateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateUser createUser = null;
            //var response = instance.CreateUser(createUser);
            //Assert.IsInstanceOf(typeof(UserResponse), response, "response is UserResponse");
        }
        
        /// <summary>
        /// Test CreateUser2
        /// </summary>
        [Test]
        public void CreateUser2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateUser createUser = null;
            //var response = instance.CreateUser2(createUser);
            //Assert.IsInstanceOf(typeof(UserResponse), response, "response is UserResponse");
        }
        
        /// <summary>
        /// Test DeleteUser2
        /// </summary>
        [Test]
        public void DeleteUser2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DeleteUser2(id);
            
        }
        
        /// <summary>
        /// Test PatchUser2
        /// </summary>
        [Test]
        public void PatchUser2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //UserPatch userPatch = null;
            //var response = instance.PatchUser2(id, userPatch);
            //Assert.IsInstanceOf(typeof(UserResponse), response, "response is UserResponse");
        }
        
        /// <summary>
        /// Test ReadServiceProviderConfig
        /// </summary>
        [Test]
        public void ReadServiceProviderConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ReadServiceProviderConfig();
            //Assert.IsInstanceOf(typeof(ServiceProviderConfig), response, "response is ServiceProviderConfig");
        }
        
        /// <summary>
        /// Test ReadServiceProviderConfig2
        /// </summary>
        [Test]
        public void ReadServiceProviderConfig2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ReadServiceProviderConfig2();
            //Assert.IsInstanceOf(typeof(ServiceProviderConfig), response, "response is ServiceProviderConfig");
        }
        
        /// <summary>
        /// Test ReadUser2
        /// </summary>
        [Test]
        public void ReadUser2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.ReadUser2(id);
            //Assert.IsInstanceOf(typeof(UserResponse), response, "response is UserResponse");
        }
        
        /// <summary>
        /// Test ReplaceUser2
        /// </summary>
        [Test]
        public void ReplaceUser2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //User user = null;
            //var response = instance.ReplaceUser2(id, user);
            //Assert.IsInstanceOf(typeof(UserResponse), response, "response is UserResponse");
        }
        
        /// <summary>
        /// Test SearchViaGet
        /// </summary>
        [Test]
        public void SearchViaGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //int? startIndex = null;
            //int? count = null;
            //var response = instance.SearchViaGet(filter, startIndex, count);
            //Assert.IsInstanceOf(typeof(UserSearchResponse), response, "response is UserSearchResponse");
        }
        
        /// <summary>
        /// Test SearchViaGet2
        /// </summary>
        [Test]
        public void SearchViaGet2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //int? startIndex = null;
            //int? count = null;
            //var response = instance.SearchViaGet2(filter, startIndex, count);
            //Assert.IsInstanceOf(typeof(UserSearchResponse), response, "response is UserSearchResponse");
        }
        
        /// <summary>
        /// Test SearchViaPost2
        /// </summary>
        [Test]
        public void SearchViaPost2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SearchRequest searchRequest = null;
            //var response = instance.SearchViaPost2(searchRequest);
            //Assert.IsInstanceOf(typeof(UserSearchResponse), response, "response is UserSearchResponse");
        }
        
    }

}
