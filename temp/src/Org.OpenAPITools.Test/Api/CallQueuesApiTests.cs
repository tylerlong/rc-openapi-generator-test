/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing CallQueuesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CallQueuesApiTests
    {
        private CallQueuesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CallQueuesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CallQueuesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' CallQueuesApi
            //Assert.IsInstanceOf(typeof(CallQueuesApi), instance);
        }

        
        /// <summary>
        /// Test AssignMultipleCallQueueMembers
        /// </summary>
        [Test]
        public void AssignMultipleCallQueueMembersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string groupId = null;
            //CallQueueBulkAssignResource callQueueBulkAssignResource = null;
            //instance.AssignMultipleCallQueueMembers(accountId, groupId, callQueueBulkAssignResource);
            
        }
        
        /// <summary>
        /// Test AssignMultipleDepartmentMembers
        /// </summary>
        [Test]
        public void AssignMultipleDepartmentMembersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //DepartmentBulkAssignResource departmentBulkAssignResource = null;
            //instance.AssignMultipleDepartmentMembers(accountId, departmentBulkAssignResource);
            
        }
        
        /// <summary>
        /// Test ListCallQueueMembers
        /// </summary>
        [Test]
        public void ListCallQueueMembersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string groupId = null;
            //int? page = null;
            //int? perPage = null;
            //var response = instance.ListCallQueueMembers(accountId, groupId, page, perPage);
            //Assert.IsInstanceOf(typeof(CallQueueMembers), response, "response is CallQueueMembers");
        }
        
        /// <summary>
        /// Test ListCallQueues
        /// </summary>
        [Test]
        public void ListCallQueuesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //int? page = null;
            //int? perPage = null;
            //string memberExtensionId = null;
            //var response = instance.ListCallQueues(accountId, page, perPage, memberExtensionId);
            //Assert.IsInstanceOf(typeof(CallQueues), response, "response is CallQueues");
        }
        
        /// <summary>
        /// Test ListDepartmentMembers
        /// </summary>
        [Test]
        public void ListDepartmentMembersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //long departmentId = null;
            //int? page = null;
            //int? perPage = null;
            //var response = instance.ListDepartmentMembers(accountId, departmentId, page, perPage);
            //Assert.IsInstanceOf(typeof(DepartmentMemberList), response, "response is DepartmentMemberList");
        }
        
        /// <summary>
        /// Test ReadCallQueueInfo
        /// </summary>
        [Test]
        public void ReadCallQueueInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string groupId = null;
            //var response = instance.ReadCallQueueInfo(accountId, groupId);
            //Assert.IsInstanceOf(typeof(CallQueueDetails), response, "response is CallQueueDetails");
        }
        
        /// <summary>
        /// Test UpdateCallQueueInfo
        /// </summary>
        [Test]
        public void UpdateCallQueueInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string groupId = null;
            //CallQueueUpdateDetails callQueueUpdateDetails = null;
            //var response = instance.UpdateCallQueueInfo(accountId, groupId, callQueueUpdateDetails);
            //Assert.IsInstanceOf(typeof(CallQueueDetails), response, "response is CallQueueDetails");
        }
        
        /// <summary>
        /// Test UpdateUserCallQueues
        /// </summary>
        [Test]
        public void UpdateUserCallQueuesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //UserCallQueues userCallQueues = null;
            //var response = instance.UpdateUserCallQueues(accountId, extensionId, userCallQueues);
            //Assert.IsInstanceOf(typeof(UserCallQueues), response, "response is UserCallQueues");
        }
        
    }

}
