/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing MeetingManagementApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class MeetingManagementApiTests
    {
        private MeetingManagementApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new MeetingManagementApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of MeetingManagementApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' MeetingManagementApi
            //Assert.IsInstanceOf(typeof(MeetingManagementApi), instance);
        }

        
        /// <summary>
        /// Test CreateMeeting
        /// </summary>
        [Test]
        public void CreateMeetingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string extensionId = null;
            //string accountId = null;
            //MeetingRequestResource meetingRequestResource = null;
            //var response = instance.CreateMeeting(extensionId, accountId, meetingRequestResource);
            //Assert.IsInstanceOf(typeof(MeetingResponseResource), response, "response is MeetingResponseResource");
        }
        
        /// <summary>
        /// Test DeleteMeeting
        /// </summary>
        [Test]
        public void DeleteMeetingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string meetingId = null;
            //string extensionId = null;
            //string accountId = null;
            //instance.DeleteMeeting(meetingId, extensionId, accountId);
            
        }
        
        /// <summary>
        /// Test EndMeeting
        /// </summary>
        [Test]
        public void EndMeetingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string meetingId = null;
            //string extensionId = null;
            //string accountId = null;
            //instance.EndMeeting(meetingId, extensionId, accountId);
            
        }
        
        /// <summary>
        /// Test ListMeetings
        /// </summary>
        [Test]
        public void ListMeetingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string extensionId = null;
            //string accountId = null;
            //var response = instance.ListMeetings(extensionId, accountId);
            //Assert.IsInstanceOf(typeof(MeetingsResource), response, "response is MeetingsResource");
        }
        
        /// <summary>
        /// Test ReadMeeting
        /// </summary>
        [Test]
        public void ReadMeetingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string meetingId = null;
            //string extensionId = null;
            //string accountId = null;
            //var response = instance.ReadMeeting(meetingId, extensionId, accountId);
            //Assert.IsInstanceOf(typeof(MeetingResponseResource), response, "response is MeetingResponseResource");
        }
        
        /// <summary>
        /// Test ReadMeetingInvitation
        /// </summary>
        [Test]
        public void ReadMeetingInvitationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long meetingId = null;
            //string extensionId = null;
            //string accountId = null;
            //var response = instance.ReadMeetingInvitation(meetingId, extensionId, accountId);
            //Assert.IsInstanceOf(typeof(PublicMeetingInvitationResponse), response, "response is PublicMeetingInvitationResponse");
        }
        
        /// <summary>
        /// Test UpdateMeeting
        /// </summary>
        [Test]
        public void UpdateMeetingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string meetingId = null;
            //string extensionId = null;
            //string accountId = null;
            //MeetingRequestResource meetingRequestResource = null;
            //var response = instance.UpdateMeeting(meetingId, extensionId, accountId, meetingRequestResource);
            //Assert.IsInstanceOf(typeof(MeetingResponseResource), response, "response is MeetingResponseResource");
        }
        
    }

}
