/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing UserSettingsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UserSettingsApiTests
    {
        private UserSettingsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UserSettingsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UserSettingsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' UserSettingsApi
            //Assert.IsInstanceOf(typeof(UserSettingsApi), instance);
        }

        
        /// <summary>
        /// Test CreateUserProfileImage
        /// </summary>
        [Test]
        public void CreateUserProfileImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string extensionId = null;
            //string accountId = null;
            //System.IO.Stream image = null;
            //instance.CreateUserProfileImage(extensionId, accountId, image);
            
        }
        
        /// <summary>
        /// Test DeleteExtension
        /// </summary>
        [Test]
        public void DeleteExtensionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string extensionId = null;
            //string accountId = null;
            //bool? savePhoneLines = null;
            //bool? savePhoneNumbers = null;
            //instance.DeleteExtension(extensionId, accountId, savePhoneLines, savePhoneNumbers);
            
        }
        
        /// <summary>
        /// Test ListExtensionGrants
        /// </summary>
        [Test]
        public void ListExtensionGrantsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //string extensionType = null;
            //string page = null;
            //string perPage = null;
            //var response = instance.ListExtensionGrants(accountId, extensionId, extensionType, page, perPage);
            //Assert.IsInstanceOf(typeof(GetExtensionGrantListResponse), response, "response is GetExtensionGrantListResponse");
        }
        
        /// <summary>
        /// Test ReadConferencingSettings
        /// </summary>
        [Test]
        public void ReadConferencingSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //string countryId = null;
            //var response = instance.ReadConferencingSettings(accountId, extensionId, countryId);
            //Assert.IsInstanceOf(typeof(GetConferencingInfoResponse), response, "response is GetConferencingInfoResponse");
        }
        
        /// <summary>
        /// Test ReadExtension
        /// </summary>
        [Test]
        public void ReadExtensionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //var response = instance.ReadExtension(accountId, extensionId);
            //Assert.IsInstanceOf(typeof(GetExtensionInfoResponse), response, "response is GetExtensionInfoResponse");
        }
        
        /// <summary>
        /// Test ReadExtensionCallerId
        /// </summary>
        [Test]
        public void ReadExtensionCallerIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //var response = instance.ReadExtensionCallerId(accountId, extensionId);
            //Assert.IsInstanceOf(typeof(ExtensionCallerIdInfo), response, "response is ExtensionCallerIdInfo");
        }
        
        /// <summary>
        /// Test ReadNotificationSettings
        /// </summary>
        [Test]
        public void ReadNotificationSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //var response = instance.ReadNotificationSettings(accountId, extensionId);
            //Assert.IsInstanceOf(typeof(NotificationSettings), response, "response is NotificationSettings");
        }
        
        /// <summary>
        /// Test ReadScaledProfileImage
        /// </summary>
        [Test]
        public void ReadScaledProfileImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //string scaleSize = null;
            //var response = instance.ReadScaledProfileImage(accountId, extensionId, scaleSize);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test ReadUserProfileImage
        /// </summary>
        [Test]
        public void ReadUserProfileImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string extensionId = null;
            //string accountId = null;
            //var response = instance.ReadUserProfileImage(extensionId, accountId);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test UpdateConferencingSettings
        /// </summary>
        [Test]
        public void UpdateConferencingSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //UpdateConferencingInfoRequest updateConferencingInfoRequest = null;
            //var response = instance.UpdateConferencingSettings(accountId, extensionId, updateConferencingInfoRequest);
            //Assert.IsInstanceOf(typeof(GetConferencingInfoResponse), response, "response is GetConferencingInfoResponse");
        }
        
        /// <summary>
        /// Test UpdateExtension
        /// </summary>
        [Test]
        public void UpdateExtensionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //ExtensionUpdateRequest extensionUpdateRequest = null;
            //var response = instance.UpdateExtension(accountId, extensionId, extensionUpdateRequest);
            //Assert.IsInstanceOf(typeof(GetExtensionInfoResponse), response, "response is GetExtensionInfoResponse");
        }
        
        /// <summary>
        /// Test UpdateExtensionCallerId
        /// </summary>
        [Test]
        public void UpdateExtensionCallerIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //ExtensionCallerIdInfoRequest extensionCallerIdInfoRequest = null;
            //var response = instance.UpdateExtensionCallerId(accountId, extensionId, extensionCallerIdInfoRequest);
            //Assert.IsInstanceOf(typeof(ExtensionCallerIdInfo), response, "response is ExtensionCallerIdInfo");
        }
        
        /// <summary>
        /// Test UpdateNotificationSettings
        /// </summary>
        [Test]
        public void UpdateNotificationSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //NotificationSettingsUpdateRequest notificationSettingsUpdateRequest = null;
            //var response = instance.UpdateNotificationSettings(accountId, extensionId, notificationSettingsUpdateRequest);
            //Assert.IsInstanceOf(typeof(NotificationSettings), response, "response is NotificationSettings");
        }
        
        /// <summary>
        /// Test UpdateUserProfileImage
        /// </summary>
        [Test]
        public void UpdateUserProfileImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string extensionId = null;
            //string accountId = null;
            //System.IO.Stream image = null;
            //instance.UpdateUserProfileImage(extensionId, accountId, image);
            
        }
        
    }

}
