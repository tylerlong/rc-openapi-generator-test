/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing MessageStoreApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class MessageStoreApiTests
    {
        private MessageStoreApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new MessageStoreApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of MessageStoreApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' MessageStoreApi
            //Assert.IsInstanceOf(typeof(MessageStoreApi), instance);
        }

        
        /// <summary>
        /// Test DeleteMessage
        /// </summary>
        [Test]
        public void DeleteMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //List<long> messageId = null;
            //bool? purge = null;
            //long? conversationId = null;
            //instance.DeleteMessage(accountId, extensionId, messageId, purge, conversationId);
            
        }
        
        /// <summary>
        /// Test DeleteMessageByFilter
        /// </summary>
        [Test]
        public void DeleteMessageByFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string extensionId = null;
            //string accountId = null;
            //List<string> conversationId = null;
            //DateTime? dateTo = null;
            //string type = null;
            //instance.DeleteMessageByFilter(extensionId, accountId, conversationId, dateTo, type);
            
        }
        
        /// <summary>
        /// Test ListMessages
        /// </summary>
        [Test]
        public void ListMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //List<string> availability = null;
            //int? conversationId = null;
            //DateTime? dateFrom = null;
            //DateTime? dateTo = null;
            //List<string> direction = null;
            //bool? distinctConversations = null;
            //List<string> messageType = null;
            //List<string> readStatus = null;
            //int? page = null;
            //int? perPage = null;
            //string phoneNumber = null;
            //var response = instance.ListMessages(accountId, extensionId, availability, conversationId, dateFrom, dateTo, direction, distinctConversations, messageType, readStatus, page, perPage, phoneNumber);
            //Assert.IsInstanceOf(typeof(GetMessageList), response, "response is GetMessageList");
        }
        
        /// <summary>
        /// Test ReadMessage
        /// </summary>
        [Test]
        public void ReadMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //long messageId = null;
            //var response = instance.ReadMessage(accountId, extensionId, messageId);
            //Assert.IsInstanceOf(typeof(GetMessageInfoResponse), response, "response is GetMessageInfoResponse");
        }
        
        /// <summary>
        /// Test ReadMessageContent
        /// </summary>
        [Test]
        public void ReadMessageContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //long attachmentId = null;
            //long messageId = null;
            //string range = null;
            //string contentDisposition = null;
            //var response = instance.ReadMessageContent(accountId, extensionId, attachmentId, messageId, range, contentDisposition);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test ReadMessageStoreConfiguration
        /// </summary>
        [Test]
        public void ReadMessageStoreConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //var response = instance.ReadMessageStoreConfiguration(accountId);
            //Assert.IsInstanceOf(typeof(MessageStoreConfiguration), response, "response is MessageStoreConfiguration");
        }
        
        /// <summary>
        /// Test SyncMessages
        /// </summary>
        [Test]
        public void SyncMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //long? conversationId = null;
            //DateTime? dateFrom = null;
            //DateTime? dateTo = null;
            //List<string> direction = null;
            //bool? distinctConversations = null;
            //List<string> messageType = null;
            //int? recordCount = null;
            //string syncToken = null;
            //string syncType = null;
            //var response = instance.SyncMessages(accountId, extensionId, conversationId, dateFrom, dateTo, direction, distinctConversations, messageType, recordCount, syncToken, syncType);
            //Assert.IsInstanceOf(typeof(GetMessageSyncResponse), response, "response is GetMessageSyncResponse");
        }
        
        /// <summary>
        /// Test UpdateMessage
        /// </summary>
        [Test]
        public void UpdateMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //List<long> messageId = null;
            //string dateFrom = null;
            //string type = null;
            //string readStatus = null;
            //var response = instance.UpdateMessage(accountId, extensionId, messageId, dateFrom, type, readStatus);
            //Assert.IsInstanceOf(typeof(GetMessageInfoResponse), response, "response is GetMessageInfoResponse");
        }
        
        /// <summary>
        /// Test UpdateMessageStoreConfiguration
        /// </summary>
        [Test]
        public void UpdateMessageStoreConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //MessageStoreConfiguration messageStoreConfiguration = null;
            //var response = instance.UpdateMessageStoreConfiguration(accountId, messageStoreConfiguration);
            //Assert.IsInstanceOf(typeof(MessageStoreConfiguration), response, "response is MessageStoreConfiguration");
        }
        
    }

}
