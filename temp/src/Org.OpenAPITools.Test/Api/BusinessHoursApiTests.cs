/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing BusinessHoursApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class BusinessHoursApiTests
    {
        private BusinessHoursApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new BusinessHoursApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of BusinessHoursApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' BusinessHoursApi
            //Assert.IsInstanceOf(typeof(BusinessHoursApi), instance);
        }

        
        /// <summary>
        /// Test ReadCompanyBusinessHours
        /// </summary>
        [Test]
        public void ReadCompanyBusinessHoursTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //var response = instance.ReadCompanyBusinessHours(accountId);
            //Assert.IsInstanceOf(typeof(CompanyBusinessHours), response, "response is CompanyBusinessHours");
        }
        
        /// <summary>
        /// Test ReadUserBusinessHours
        /// </summary>
        [Test]
        public void ReadUserBusinessHoursTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //var response = instance.ReadUserBusinessHours(accountId, extensionId);
            //Assert.IsInstanceOf(typeof(GetUserBusinessHoursResponse), response, "response is GetUserBusinessHoursResponse");
        }
        
        /// <summary>
        /// Test UpdateCompanyBusinessHours
        /// </summary>
        [Test]
        public void UpdateCompanyBusinessHoursTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //CompanyBusinessHoursUpdateRequest companyBusinessHoursUpdateRequest = null;
            //var response = instance.UpdateCompanyBusinessHours(accountId, companyBusinessHoursUpdateRequest);
            //Assert.IsInstanceOf(typeof(CompanyBusinessHours), response, "response is CompanyBusinessHours");
        }
        
        /// <summary>
        /// Test UpdateUserBusinessHours
        /// </summary>
        [Test]
        public void UpdateUserBusinessHoursTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionId = null;
            //UserBusinessHoursUpdateRequest userBusinessHoursUpdateRequest = null;
            //var response = instance.UpdateUserBusinessHours(accountId, extensionId, userBusinessHoursUpdateRequest);
            //Assert.IsInstanceOf(typeof(UserBusinessHoursUpdateResponse), response, "response is UserBusinessHoursUpdateResponse");
        }
        
    }

}
