/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing CompanyApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CompanyApiTests
    {
        private CompanyApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CompanyApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CompanyApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' CompanyApi
            //Assert.IsInstanceOf(typeof(CompanyApi), instance);
        }

        
        /// <summary>
        /// Test ListDomesticCountries
        /// </summary>
        [Test]
        public void ListDomesticCountriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandId = null;
            //string contractedCountryId = null;
            //int? page = null;
            //int? perPage = null;
            //var response = instance.ListDomesticCountries(brandId, contractedCountryId, page, perPage);
            //Assert.IsInstanceOf(typeof(GetCountryListResponse), response, "response is GetCountryListResponse");
        }
        
        /// <summary>
        /// Test ReadAccountBusinessAddress
        /// </summary>
        [Test]
        public void ReadAccountBusinessAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //var response = instance.ReadAccountBusinessAddress(accountId);
            //Assert.IsInstanceOf(typeof(AccountBusinessAddressResource), response, "response is AccountBusinessAddressResource");
        }
        
        /// <summary>
        /// Test ReadAccountInfo
        /// </summary>
        [Test]
        public void ReadAccountInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //var response = instance.ReadAccountInfo(accountId);
            //Assert.IsInstanceOf(typeof(GetAccountInfoResponse), response, "response is GetAccountInfoResponse");
        }
        
        /// <summary>
        /// Test ReadAccountServiceInfo
        /// </summary>
        [Test]
        public void ReadAccountServiceInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //var response = instance.ReadAccountServiceInfo(accountId);
            //Assert.IsInstanceOf(typeof(GetServiceInfoResponse), response, "response is GetServiceInfoResponse");
        }
        
        /// <summary>
        /// Test UpdateAccountBusinessAddress
        /// </summary>
        [Test]
        public void UpdateAccountBusinessAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //ModifyAccountBusinessAddressRequest modifyAccountBusinessAddressRequest = null;
            //var response = instance.UpdateAccountBusinessAddress(accountId, modifyAccountBusinessAddressRequest);
            //Assert.IsInstanceOf(typeof(AccountBusinessAddressResource), response, "response is AccountBusinessAddressResource");
        }
        
    }

}
