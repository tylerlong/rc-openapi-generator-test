/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing ExtensionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ExtensionsApiTests
    {
        private ExtensionsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ExtensionsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ExtensionsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' ExtensionsApi
            //Assert.IsInstanceOf(typeof(ExtensionsApi), instance);
        }

        
        /// <summary>
        /// Test CreateExtension
        /// </summary>
        [Test]
        public void CreateExtensionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //ExtensionCreationRequest extensionCreationRequest = null;
            //var response = instance.CreateExtension(accountId, extensionCreationRequest);
            //Assert.IsInstanceOf(typeof(ExtensionCreationResponse), response, "response is ExtensionCreationResponse");
        }
        
        /// <summary>
        /// Test ExtensionBulkUpdate
        /// </summary>
        [Test]
        public void ExtensionBulkUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //ExtensionBulkUpdateRequest extensionBulkUpdateRequest = null;
            //var response = instance.ExtensionBulkUpdate(accountId, extensionBulkUpdateRequest);
            //Assert.IsInstanceOf(typeof(ExtensionBulkUpdateTaskResource), response, "response is ExtensionBulkUpdateTaskResource");
        }
        
        /// <summary>
        /// Test GetExtensionBulkUpdateTask
        /// </summary>
        [Test]
        public void GetExtensionBulkUpdateTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string taskId = null;
            //var response = instance.GetExtensionBulkUpdateTask(accountId, taskId);
            //Assert.IsInstanceOf(typeof(ExtensionBulkUpdateTaskResource), response, "response is ExtensionBulkUpdateTaskResource");
        }
        
        /// <summary>
        /// Test ListExtensions
        /// </summary>
        [Test]
        public void ListExtensionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string extensionNumber = null;
            //string email = null;
            //long? page = null;
            //long? perPage = null;
            //List<string> status = null;
            //List<string> type = null;
            //var response = instance.ListExtensions(accountId, extensionNumber, email, page, perPage, status, type);
            //Assert.IsInstanceOf(typeof(GetExtensionListResponse), response, "response is GetExtensionListResponse");
        }
        
        /// <summary>
        /// Test ListUserTemplates
        /// </summary>
        [Test]
        public void ListUserTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string type = null;
            //string page = null;
            //string perPage = null;
            //var response = instance.ListUserTemplates(accountId, type, page, perPage);
            //Assert.IsInstanceOf(typeof(UserTemplates), response, "response is UserTemplates");
        }
        
        /// <summary>
        /// Test ReadUserTemplate
        /// </summary>
        [Test]
        public void ReadUserTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string templateId = null;
            //var response = instance.ReadUserTemplate(accountId, templateId);
            //Assert.IsInstanceOf(typeof(TemplateInfo), response, "response is TemplateInfo");
        }
        
    }

}
