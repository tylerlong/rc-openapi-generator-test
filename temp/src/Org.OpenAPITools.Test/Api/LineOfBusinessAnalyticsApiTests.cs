/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing LineOfBusinessAnalyticsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class LineOfBusinessAnalyticsApiTests
    {
        private LineOfBusinessAnalyticsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new LineOfBusinessAnalyticsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of LineOfBusinessAnalyticsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' LineOfBusinessAnalyticsApi
            //Assert.IsInstanceOf(typeof(LineOfBusinessAnalyticsApi), instance);
        }

        
        /// <summary>
        /// Test AggregatePerformanceReportCalls
        /// </summary>
        [Test]
        public void AggregatePerformanceReportCallsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //AnalyticsLegacyPerformanceCallsAggregatesRequest analyticsLegacyPerformanceCallsAggregatesRequest = null;
            //int? page = null;
            //int? perPage = null;
            //var response = instance.AggregatePerformanceReportCalls(accountId, analyticsLegacyPerformanceCallsAggregatesRequest, page, perPage);
            //Assert.IsInstanceOf(typeof(AnalyticsLegacyPerformanceCallsAggregatesResponse), response, "response is AnalyticsLegacyPerformanceCallsAggregatesResponse");
        }
        
        /// <summary>
        /// Test AnalyticsCallsAggregationFetch
        /// </summary>
        [Test]
        public void AnalyticsCallsAggregationFetchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //AggregationRequest aggregationRequest = null;
            //int? page = null;
            //int? perPage = null;
            //var response = instance.AnalyticsCallsAggregationFetch(accountId, aggregationRequest, page, perPage);
            //Assert.IsInstanceOf(typeof(AggregationResponse), response, "response is AggregationResponse");
        }
        
        /// <summary>
        /// Test AnalyticsCallsTimelineFetch
        /// </summary>
        [Test]
        public void AnalyticsCallsTimelineFetchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //Interval interval = null;
            //TimelineRequest timelineRequest = null;
            //int? page = null;
            //int? perPage = null;
            //var response = instance.AnalyticsCallsTimelineFetch(accountId, interval, timelineRequest, page, perPage);
            //Assert.IsInstanceOf(typeof(TimelineResponse), response, "response is TimelineResponse");
        }
        
        /// <summary>
        /// Test PerformanceReportCallsTimeline
        /// </summary>
        [Test]
        public void PerformanceReportCallsTimelineTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //AnalyticsLegacyInterval interval = null;
            //AnalyticsLegacyPerformanceCallsTimelineRequest analyticsLegacyPerformanceCallsTimelineRequest = null;
            //var response = instance.PerformanceReportCallsTimeline(accountId, interval, analyticsLegacyPerformanceCallsTimelineRequest);
            //Assert.IsInstanceOf(typeof(AnalyticsLegacyPerformanceCallsTimelineResponse), response, "response is AnalyticsLegacyPerformanceCallsTimelineResponse");
        }
        
    }

}
