/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing PagingOnlyGroupsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PagingOnlyGroupsApiTests
    {
        private PagingOnlyGroupsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PagingOnlyGroupsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PagingOnlyGroupsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' PagingOnlyGroupsApi
            //Assert.IsInstanceOf(typeof(PagingOnlyGroupsApi), instance);
        }

        
        /// <summary>
        /// Test AssignMultiplePagingGroupUsersDevices
        /// </summary>
        [Test]
        public void AssignMultiplePagingGroupUsersDevicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string pagingOnlyGroupId = null;
            //EditPagingGroupRequest editPagingGroupRequest = null;
            //instance.AssignMultiplePagingGroupUsersDevices(accountId, pagingOnlyGroupId, editPagingGroupRequest);
            
        }
        
        /// <summary>
        /// Test ListPagingGroupDevices
        /// </summary>
        [Test]
        public void ListPagingGroupDevicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string pagingOnlyGroupId = null;
            //int? page = null;
            //int? perPage = null;
            //var response = instance.ListPagingGroupDevices(accountId, pagingOnlyGroupId, page, perPage);
            //Assert.IsInstanceOf(typeof(PagingOnlyGroupDevices), response, "response is PagingOnlyGroupDevices");
        }
        
        /// <summary>
        /// Test ListPagingGroupUsers
        /// </summary>
        [Test]
        public void ListPagingGroupUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string pagingOnlyGroupId = null;
            //int? page = null;
            //int? perPage = null;
            //var response = instance.ListPagingGroupUsers(accountId, pagingOnlyGroupId, page, perPage);
            //Assert.IsInstanceOf(typeof(PagingOnlyGroupUsers), response, "response is PagingOnlyGroupUsers");
        }
        
    }

}
