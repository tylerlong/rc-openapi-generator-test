/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing PostsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PostsApiTests
    {
        private PostsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PostsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PostsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' PostsApi
            //Assert.IsInstanceOf(typeof(PostsApi), instance);
        }

        
        /// <summary>
        /// Test CreateGlipCard
        /// </summary>
        [Test]
        public void CreateGlipCardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GlipMessageAttachmentInfoRequest glipMessageAttachmentInfoRequest = null;
            //long? groupId = null;
            //var response = instance.CreateGlipCard(glipMessageAttachmentInfoRequest, groupId);
            //Assert.IsInstanceOf(typeof(GlipMessageAttachmentInfo), response, "response is GlipMessageAttachmentInfo");
        }
        
        /// <summary>
        /// Test CreateGlipFile
        /// </summary>
        [Test]
        public void CreateGlipFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream body = null;
            //long? groupId = null;
            //string name = null;
            //var response = instance.CreateGlipFile(body, groupId, name);
            //Assert.IsInstanceOf(typeof(PostGlipFile), response, "response is PostGlipFile");
        }
        
        /// <summary>
        /// Test CreateGlipGroupPost
        /// </summary>
        [Test]
        public void CreateGlipGroupPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //GlipCreatePost glipCreatePost = null;
            //var response = instance.CreateGlipGroupPost(groupId, glipCreatePost);
            //Assert.IsInstanceOf(typeof(GlipPostInfo), response, "response is GlipPostInfo");
        }
        
        /// <summary>
        /// Test CreateGlipPost
        /// </summary>
        [Test]
        public void CreateGlipPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string chatId = null;
            //GlipPostPostBody glipPostPostBody = null;
            //var response = instance.CreateGlipPost(chatId, glipPostPostBody);
            //Assert.IsInstanceOf(typeof(GlipPostInfo), response, "response is GlipPostInfo");
        }
        
        /// <summary>
        /// Test CreatePost
        /// </summary>
        [Test]
        public void CreatePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GlipCreatePost glipCreatePost = null;
            //var response = instance.CreatePost(glipCreatePost);
            //Assert.IsInstanceOf(typeof(GlipPostInfo), response, "response is GlipPostInfo");
        }
        
        /// <summary>
        /// Test DeleteGlipCard
        /// </summary>
        [Test]
        public void DeleteGlipCardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string cardId = null;
            //instance.DeleteGlipCard(cardId);
            
        }
        
        /// <summary>
        /// Test DeleteGlipPost
        /// </summary>
        [Test]
        public void DeleteGlipPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string chatId = null;
            //string postId = null;
            //instance.DeleteGlipPost(chatId, postId);
            
        }
        
        /// <summary>
        /// Test ListGlipGroupPosts
        /// </summary>
        [Test]
        public void ListGlipGroupPostsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //int? recordCount = null;
            //string pageToken = null;
            //var response = instance.ListGlipGroupPosts(groupId, recordCount, pageToken);
            //Assert.IsInstanceOf(typeof(GlipPosts), response, "response is GlipPosts");
        }
        
        /// <summary>
        /// Test ListGlipPosts
        /// </summary>
        [Test]
        public void ListGlipPostsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //string pageToken = null;
            //long? recordCount = null;
            //var response = instance.ListGlipPosts(groupId, pageToken, recordCount);
            //Assert.IsInstanceOf(typeof(GlipPosts), response, "response is GlipPosts");
        }
        
        /// <summary>
        /// Test PatchGlipPost
        /// </summary>
        [Test]
        public void PatchGlipPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string chatId = null;
            //string postId = null;
            //GlipPatchPostBody glipPatchPostBody = null;
            //var response = instance.PatchGlipPost(chatId, postId, glipPatchPostBody);
            //Assert.IsInstanceOf(typeof(GlipPostInfo), response, "response is GlipPostInfo");
        }
        
        /// <summary>
        /// Test ReadGlipCard
        /// </summary>
        [Test]
        public void ReadGlipCardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> cardId = null;
            //var response = instance.ReadGlipCard(cardId);
            //Assert.IsInstanceOf(typeof(GlipMessageAttachmentInfo), response, "response is GlipMessageAttachmentInfo");
        }
        
        /// <summary>
        /// Test ReadGlipPost
        /// </summary>
        [Test]
        public void ReadGlipPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string chatId = null;
            //string postId = null;
            //var response = instance.ReadGlipPost(chatId, postId);
            //Assert.IsInstanceOf(typeof(GlipPostInfo), response, "response is GlipPostInfo");
        }
        
        /// <summary>
        /// Test ReadGlipPosts
        /// </summary>
        [Test]
        public void ReadGlipPostsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string chatId = null;
            //int? recordCount = null;
            //string pageToken = null;
            //var response = instance.ReadGlipPosts(chatId, recordCount, pageToken);
            //Assert.IsInstanceOf(typeof(GlipPostsList), response, "response is GlipPostsList");
        }
        
        /// <summary>
        /// Test UpdateGlipCard
        /// </summary>
        [Test]
        public void UpdateGlipCardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string cardId = null;
            //GlipMessageAttachmentInfoRequest glipMessageAttachmentInfoRequest = null;
            //instance.UpdateGlipCard(cardId, glipMessageAttachmentInfoRequest);
            
        }
        
        /// <summary>
        /// Test UpdateGlipPostText
        /// </summary>
        [Test]
        public void UpdateGlipPostTextTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //string postId = null;
            //string body = null;
            //var response = instance.UpdateGlipPostText(groupId, postId, body);
            //Assert.IsInstanceOf(typeof(string), response, "response is string");
        }
        
    }

}
