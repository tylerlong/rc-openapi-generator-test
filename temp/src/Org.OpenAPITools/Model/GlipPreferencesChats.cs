/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GlipPreferencesChats
    /// </summary>
    [DataContract]
    public partial class GlipPreferencesChats :  IEquatable<GlipPreferencesChats>, IValidatableObject
    {
        /// <summary>
        /// Defines LeftRailMode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LeftRailModeEnum
        {
            /// <summary>
            /// Enum SeparateAllChatTypes for value: SeparateAllChatTypes
            /// </summary>
            [EnumMember(Value = "SeparateAllChatTypes")]
            SeparateAllChatTypes = 1,

            /// <summary>
            /// Enum SeparateConversationsAndTeams for value: SeparateConversationsAndTeams
            /// </summary>
            [EnumMember(Value = "SeparateConversationsAndTeams")]
            SeparateConversationsAndTeams = 2,

            /// <summary>
            /// Enum CombineAllChatTypes for value: CombineAllChatTypes
            /// </summary>
            [EnumMember(Value = "CombineAllChatTypes")]
            CombineAllChatTypes = 3

        }

        /// <summary>
        /// Gets or Sets LeftRailMode
        /// </summary>
        [DataMember(Name="leftRailMode", EmitDefaultValue=false)]
        public LeftRailModeEnum? LeftRailMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GlipPreferencesChats" /> class.
        /// </summary>
        /// <param name="maxCount">maxCount.</param>
        /// <param name="leftRailMode">leftRailMode (default to LeftRailModeEnum.CombineAllChatTypes).</param>
        public GlipPreferencesChats(int maxCount = default(int), LeftRailModeEnum? leftRailMode = LeftRailModeEnum.CombineAllChatTypes)
        {
            this.MaxCount = maxCount;
            // use default value if no "leftRailMode" provided
            if (leftRailMode == null)
            {
                this.LeftRailMode = LeftRailModeEnum.CombineAllChatTypes;
            }
            else
            {
                this.LeftRailMode = leftRailMode;
            }
        }

        /// <summary>
        /// Gets or Sets MaxCount
        /// </summary>
        [DataMember(Name="maxCount", EmitDefaultValue=false)]
        public int MaxCount { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlipPreferencesChats {\n");
            sb.Append("  MaxCount: ").Append(MaxCount).Append("\n");
            sb.Append("  LeftRailMode: ").Append(LeftRailMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GlipPreferencesChats);
        }

        /// <summary>
        /// Returns true if GlipPreferencesChats instances are equal
        /// </summary>
        /// <param name="input">Instance of GlipPreferencesChats to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlipPreferencesChats input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MaxCount == input.MaxCount ||
                    (this.MaxCount != null &&
                    this.MaxCount.Equals(input.MaxCount))
                ) && 
                (
                    this.LeftRailMode == input.LeftRailMode ||
                    (this.LeftRailMode != null &&
                    this.LeftRailMode.Equals(input.LeftRailMode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MaxCount != null)
                    hashCode = hashCode * 59 + this.MaxCount.GetHashCode();
                if (this.LeftRailMode != null)
                    hashCode = hashCode * 59 + this.LeftRailMode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
