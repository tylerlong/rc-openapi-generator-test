/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// LocationDeletionInfo
    /// </summary>
    [DataContract]
    public partial class LocationDeletionInfo :  IEquatable<LocationDeletionInfo>, IValidatableObject
    {
        /// <summary>
        /// Identifies the possibility and status of emergency location deletion
        /// </summary>
        /// <value>Identifies the possibility and status of emergency location deletion</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DeletionEnum
        {
            /// <summary>
            /// Enum Failed for value: Failed
            /// </summary>
            [EnumMember(Value = "Failed")]
            Failed = 1,

            /// <summary>
            /// Enum Completed for value: Completed
            /// </summary>
            [EnumMember(Value = "Completed")]
            Completed = 2,

            /// <summary>
            /// Enum Forbidden for value: Forbidden
            /// </summary>
            [EnumMember(Value = "Forbidden")]
            Forbidden = 3,

            /// <summary>
            /// Enum Restricted for value: Restricted
            /// </summary>
            [EnumMember(Value = "Restricted")]
            Restricted = 4,

            /// <summary>
            /// Enum Allowed for value: Allowed
            /// </summary>
            [EnumMember(Value = "Allowed")]
            Allowed = 5

        }

        /// <summary>
        /// Identifies the possibility and status of emergency location deletion
        /// </summary>
        /// <value>Identifies the possibility and status of emergency location deletion</value>
        [DataMember(Name="deletion", EmitDefaultValue=false)]
        public DeletionEnum? Deletion { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LocationDeletionInfo" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="deletion">Identifies the possibility and status of emergency location deletion.</param>
        /// <param name="errors">errors.</param>
        public LocationDeletionInfo(string id = default(string), string name = default(string), DeletionEnum? deletion = default(DeletionEnum?), LocationDeletionErrorInfo errors = default(LocationDeletionErrorInfo))
        {
            this.Id = id;
            this.Name = name;
            this.Deletion = deletion;
            this.Errors = errors;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Gets or Sets Errors
        /// </summary>
        [DataMember(Name="errors", EmitDefaultValue=false)]
        public LocationDeletionErrorInfo Errors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LocationDeletionInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Deletion: ").Append(Deletion).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LocationDeletionInfo);
        }

        /// <summary>
        /// Returns true if LocationDeletionInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of LocationDeletionInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LocationDeletionInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Deletion == input.Deletion ||
                    (this.Deletion != null &&
                    this.Deletion.Equals(input.Deletion))
                ) && 
                (
                    this.Errors == input.Errors ||
                    (this.Errors != null &&
                    this.Errors.Equals(input.Errors))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Deletion != null)
                    hashCode = hashCode * 59 + this.Deletion.GetHashCode();
                if (this.Errors != null)
                    hashCode = hashCode * 59 + this.Errors.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
