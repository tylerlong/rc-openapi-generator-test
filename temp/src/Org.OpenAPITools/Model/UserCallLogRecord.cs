/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// UserCallLogRecord
    /// </summary>
    [DataContract]
    public partial class UserCallLogRecord :  IEquatable<UserCallLogRecord>, IValidatableObject
    {
        /// <summary>
        /// Call type
        /// </summary>
        /// <value>Call type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Voice for value: Voice
            /// </summary>
            [EnumMember(Value = "Voice")]
            Voice = 1,

            /// <summary>
            /// Enum Fax for value: Fax
            /// </summary>
            [EnumMember(Value = "Fax")]
            Fax = 2

        }

        /// <summary>
        /// Call type
        /// </summary>
        /// <value>Call type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// For &#39;Detailed&#39; view only. Call transport
        /// </summary>
        /// <value>For &#39;Detailed&#39; view only. Call transport</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TransportEnum
        {
            /// <summary>
            /// Enum PSTN for value: PSTN
            /// </summary>
            [EnumMember(Value = "PSTN")]
            PSTN = 1,

            /// <summary>
            /// Enum VoIP for value: VoIP
            /// </summary>
            [EnumMember(Value = "VoIP")]
            VoIP = 2

        }

        /// <summary>
        /// For &#39;Detailed&#39; view only. Call transport
        /// </summary>
        /// <value>For &#39;Detailed&#39; view only. Call transport</value>
        [DataMember(Name="transport", EmitDefaultValue=false)]
        public TransportEnum? Transport { get; set; }
        /// <summary>
        /// Call direction
        /// </summary>
        /// <value>Call direction</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DirectionEnum
        {
            /// <summary>
            /// Enum Inbound for value: Inbound
            /// </summary>
            [EnumMember(Value = "Inbound")]
            Inbound = 1,

            /// <summary>
            /// Enum Outbound for value: Outbound
            /// </summary>
            [EnumMember(Value = "Outbound")]
            Outbound = 2

        }

        /// <summary>
        /// Call direction
        /// </summary>
        /// <value>Call direction</value>
        [DataMember(Name="direction", EmitDefaultValue=false)]
        public DirectionEnum? Direction { get; set; }
        /// <summary>
        /// Action description of the call operation
        /// </summary>
        /// <value>Action description of the call operation</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,

            /// <summary>
            /// Enum PhoneLogin for value: Phone Login
            /// </summary>
            [EnumMember(Value = "Phone Login")]
            PhoneLogin = 2,

            /// <summary>
            /// Enum CallingCard for value: Calling Card
            /// </summary>
            [EnumMember(Value = "Calling Card")]
            CallingCard = 3,

            /// <summary>
            /// Enum VoIPCall for value: VoIP Call
            /// </summary>
            [EnumMember(Value = "VoIP Call")]
            VoIPCall = 4,

            /// <summary>
            /// Enum PhoneCall for value: Phone Call
            /// </summary>
            [EnumMember(Value = "Phone Call")]
            PhoneCall = 5,

            /// <summary>
            /// Enum Paging for value: Paging
            /// </summary>
            [EnumMember(Value = "Paging")]
            Paging = 6,

            /// <summary>
            /// Enum Hunting for value: Hunting
            /// </summary>
            [EnumMember(Value = "Hunting")]
            Hunting = 7,

            /// <summary>
            /// Enum CallPark for value: Call Park
            /// </summary>
            [EnumMember(Value = "Call Park")]
            CallPark = 8,

            /// <summary>
            /// Enum Monitoring for value: Monitoring
            /// </summary>
            [EnumMember(Value = "Monitoring")]
            Monitoring = 9,

            /// <summary>
            /// Enum TextRelay for value: Text Relay
            /// </summary>
            [EnumMember(Value = "Text Relay")]
            TextRelay = 10,

            /// <summary>
            /// Enum ExternalApplication for value: External Application
            /// </summary>
            [EnumMember(Value = "External Application")]
            ExternalApplication = 11,

            /// <summary>
            /// Enum ParkLocation for value: Park Location
            /// </summary>
            [EnumMember(Value = "Park Location")]
            ParkLocation = 12,

            /// <summary>
            /// Enum CallOutCallMe for value: CallOut-CallMe
            /// </summary>
            [EnumMember(Value = "CallOut-CallMe")]
            CallOutCallMe = 13,

            /// <summary>
            /// Enum ConferenceCall for value: Conference Call
            /// </summary>
            [EnumMember(Value = "Conference Call")]
            ConferenceCall = 14,

            /// <summary>
            /// Enum Move for value: Move
            /// </summary>
            [EnumMember(Value = "Move")]
            Move = 15,

            /// <summary>
            /// Enum RCMeetings for value: RC Meetings
            /// </summary>
            [EnumMember(Value = "RC Meetings")]
            RCMeetings = 16,

            /// <summary>
            /// Enum AcceptCall for value: Accept Call
            /// </summary>
            [EnumMember(Value = "Accept Call")]
            AcceptCall = 17,

            /// <summary>
            /// Enum FindMe for value: FindMe
            /// </summary>
            [EnumMember(Value = "FindMe")]
            FindMe = 18,

            /// <summary>
            /// Enum FollowMe for value: FollowMe
            /// </summary>
            [EnumMember(Value = "FollowMe")]
            FollowMe = 19,

            /// <summary>
            /// Enum RingMe for value: RingMe
            /// </summary>
            [EnumMember(Value = "RingMe")]
            RingMe = 20,

            /// <summary>
            /// Enum Transfer for value: Transfer
            /// </summary>
            [EnumMember(Value = "Transfer")]
            Transfer = 21,

            /// <summary>
            /// Enum CallReturn for value: Call Return
            /// </summary>
            [EnumMember(Value = "Call Return")]
            CallReturn = 22,

            /// <summary>
            /// Enum RingDirectly for value: Ring Directly
            /// </summary>
            [EnumMember(Value = "Ring Directly")]
            RingDirectly = 23,

            /// <summary>
            /// Enum RingOutWeb for value: RingOut Web
            /// </summary>
            [EnumMember(Value = "RingOut Web")]
            RingOutWeb = 24,

            /// <summary>
            /// Enum RingOutPC for value: RingOut PC
            /// </summary>
            [EnumMember(Value = "RingOut PC")]
            RingOutPC = 25,

            /// <summary>
            /// Enum RingOutMobile for value: RingOut Mobile
            /// </summary>
            [EnumMember(Value = "RingOut Mobile")]
            RingOutMobile = 26,

            /// <summary>
            /// Enum Emergency for value: Emergency
            /// </summary>
            [EnumMember(Value = "Emergency")]
            Emergency = 27,

            /// <summary>
            /// Enum E911Update for value: E911 Update
            /// </summary>
            [EnumMember(Value = "E911 Update")]
            E911Update = 28,

            /// <summary>
            /// Enum Support for value: Support
            /// </summary>
            [EnumMember(Value = "Support")]
            Support = 29,

            /// <summary>
            /// Enum IncomingFax for value: Incoming Fax
            /// </summary>
            [EnumMember(Value = "Incoming Fax")]
            IncomingFax = 30,

            /// <summary>
            /// Enum OutgoingFax for value: Outgoing Fax
            /// </summary>
            [EnumMember(Value = "Outgoing Fax")]
            OutgoingFax = 31

        }

        /// <summary>
        /// Action description of the call operation
        /// </summary>
        /// <value>Action description of the call operation</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// Status description of the call operation
        /// </summary>
        /// <value>Status description of the call operation</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResultEnum
        {
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,

            /// <summary>
            /// Enum Accepted for value: Accepted
            /// </summary>
            [EnumMember(Value = "Accepted")]
            Accepted = 2,

            /// <summary>
            /// Enum Callconnected for value: Call connected
            /// </summary>
            [EnumMember(Value = "Call connected")]
            Callconnected = 3,

            /// <summary>
            /// Enum InProgress for value: In Progress
            /// </summary>
            [EnumMember(Value = "In Progress")]
            InProgress = 4,

            /// <summary>
            /// Enum Voicemail for value: Voicemail
            /// </summary>
            [EnumMember(Value = "Voicemail")]
            Voicemail = 5,

            /// <summary>
            /// Enum Reply for value: Reply
            /// </summary>
            [EnumMember(Value = "Reply")]
            Reply = 6,

            /// <summary>
            /// Enum Missed for value: Missed
            /// </summary>
            [EnumMember(Value = "Missed")]
            Missed = 7,

            /// <summary>
            /// Enum Busy for value: Busy
            /// </summary>
            [EnumMember(Value = "Busy")]
            Busy = 8,

            /// <summary>
            /// Enum Rejected for value: Rejected
            /// </summary>
            [EnumMember(Value = "Rejected")]
            Rejected = 9,

            /// <summary>
            /// Enum NoAnswer for value: No Answer
            /// </summary>
            [EnumMember(Value = "No Answer")]
            NoAnswer = 10,

            /// <summary>
            /// Enum HangUp for value: Hang Up
            /// </summary>
            [EnumMember(Value = "Hang Up")]
            HangUp = 11,

            /// <summary>
            /// Enum Blocked for value: Blocked
            /// </summary>
            [EnumMember(Value = "Blocked")]
            Blocked = 12,

            /// <summary>
            /// Enum Suspendedaccount for value: Suspended account
            /// </summary>
            [EnumMember(Value = "Suspended account")]
            Suspendedaccount = 13,

            /// <summary>
            /// Enum CallFailed for value: Call Failed
            /// </summary>
            [EnumMember(Value = "Call Failed")]
            CallFailed = 14,

            /// <summary>
            /// Enum CallFailure for value: Call Failure
            /// </summary>
            [EnumMember(Value = "Call Failure")]
            CallFailure = 15,

            /// <summary>
            /// Enum InternalError for value: Internal Error
            /// </summary>
            [EnumMember(Value = "Internal Error")]
            InternalError = 16,

            /// <summary>
            /// Enum IPPhoneOffline for value: IP Phone Offline
            /// </summary>
            [EnumMember(Value = "IP Phone Offline")]
            IPPhoneOffline = 17,

            /// <summary>
            /// Enum NoCallingCredit for value: No Calling Credit
            /// </summary>
            [EnumMember(Value = "No Calling Credit")]
            NoCallingCredit = 18,

            /// <summary>
            /// Enum NotAllowed for value: Not Allowed
            /// </summary>
            [EnumMember(Value = "Not Allowed")]
            NotAllowed = 19,

            /// <summary>
            /// Enum RestrictedNumber for value: Restricted Number
            /// </summary>
            [EnumMember(Value = "Restricted Number")]
            RestrictedNumber = 20,

            /// <summary>
            /// Enum WrongNumber for value: Wrong Number
            /// </summary>
            [EnumMember(Value = "Wrong Number")]
            WrongNumber = 21,

            /// <summary>
            /// Enum AnsweredNotAccepted for value: Answered Not Accepted
            /// </summary>
            [EnumMember(Value = "Answered Not Accepted")]
            AnsweredNotAccepted = 22,

            /// <summary>
            /// Enum Stopped for value: Stopped
            /// </summary>
            [EnumMember(Value = "Stopped")]
            Stopped = 23,

            /// <summary>
            /// Enum InternationalDisabled for value: International Disabled
            /// </summary>
            [EnumMember(Value = "International Disabled")]
            InternationalDisabled = 24,

            /// <summary>
            /// Enum InternationalRestricted for value: International Restricted
            /// </summary>
            [EnumMember(Value = "International Restricted")]
            InternationalRestricted = 25,

            /// <summary>
            /// Enum Abandoned for value: Abandoned
            /// </summary>
            [EnumMember(Value = "Abandoned")]
            Abandoned = 26,

            /// <summary>
            /// Enum Declined for value: Declined
            /// </summary>
            [EnumMember(Value = "Declined")]
            Declined = 27,

            /// <summary>
            /// Enum Received for value: Received
            /// </summary>
            [EnumMember(Value = "Received")]
            Received = 28,

            /// <summary>
            /// Enum FaxonDemand for value: Fax on Demand
            /// </summary>
            [EnumMember(Value = "Fax on Demand")]
            FaxonDemand = 29,

            /// <summary>
            /// Enum PartialReceive for value: Partial Receive
            /// </summary>
            [EnumMember(Value = "Partial Receive")]
            PartialReceive = 30,

            /// <summary>
            /// Enum ReceiveError for value: Receive Error
            /// </summary>
            [EnumMember(Value = "Receive Error")]
            ReceiveError = 31,

            /// <summary>
            /// Enum FaxReceiptError for value: Fax Receipt Error
            /// </summary>
            [EnumMember(Value = "Fax Receipt Error")]
            FaxReceiptError = 32,

            /// <summary>
            /// Enum Sent for value: Sent
            /// </summary>
            [EnumMember(Value = "Sent")]
            Sent = 33,

            /// <summary>
            /// Enum FaxPartiallySent for value: Fax Partially Sent
            /// </summary>
            [EnumMember(Value = "Fax Partially Sent")]
            FaxPartiallySent = 34,

            /// <summary>
            /// Enum SendError for value: Send Error
            /// </summary>
            [EnumMember(Value = "Send Error")]
            SendError = 35,

            /// <summary>
            /// Enum FaxNotSent for value: Fax Not Sent
            /// </summary>
            [EnumMember(Value = "Fax Not Sent")]
            FaxNotSent = 36,

            /// <summary>
            /// Enum FaxPoorLine for value: Fax Poor Line
            /// </summary>
            [EnumMember(Value = "Fax Poor Line")]
            FaxPoorLine = 37

        }

        /// <summary>
        /// Status description of the call operation
        /// </summary>
        /// <value>Status description of the call operation</value>
        [DataMember(Name="result", EmitDefaultValue=false)]
        public ResultEnum? Result { get; set; }
        /// <summary>
        /// Reason of a call result:  * &#x60;Accepted&#x60; - The call was connected to and accepted by this number  * &#x60;Connected&#x60; - The call was answered, but there was no response on how to handle the call (for example, a voice mail system answered the call and did not push \&quot;1\&quot; to accept)  * &#x60;Line Busy&#x60; - The phone number you dialed was busy  * &#x60;Not Answered&#x60; - The phone number you dialed was not answered  * &#x60;No Answer&#x60; - You did not answer the call  * &#x60;Hang Up&#x60; - The caller hung up before the call was answered  * &#x60;Stopped&#x60; - This attempt was stopped because the call was answered by another phone  * &#x60;Internal Error&#x60; - An internal error occurred when making the call. Please try again  * &#x60;No Credit&#x60; - There was not enough Calling Credit on your account to make this call  * &#x60;Restricted Number&#x60; - The number you dialed is restricted by RingCentral  * &#x60;Wrong Number&#x60; - The number you dialed has either been disconnected or is not a valid phone number. Please check the number and try again  * &#x60;International Disabled&#x60; - International calling is not enabled on your account. Contact customer service to activate International Calling  * &#x60;International Restricted&#x60; - The country and/or area you attempted to call has been prohibited by your administrator  * &#x60;Bad Number&#x60; - An error occurred when making the call. Please check the number before trying again  * &#x60;Info 411 Restricted&#x60; - Calling to 411 Information Services is restricted  * &#x60;Customer 611 Restricted&#x60; - 611 customer service is not supported. Please contact customer service at &lt;(888) 555-1212&gt;  * &#x60;No Digital Line&#x60; - This DigitalLine was either not plugged in or did not have an internet connection  * &#x60;Failed Try Again&#x60; - Call failed. Please try again  * &#x60;Max Call Limit&#x60; - The number of simultaneous calls to your account has reached its limit  * &#x60;Too Many Calls&#x60; - The number of simultaneous calls for per DigitalLine associated with Other Phone has reached its limit. Please contact customer service  * &#x60;Calls Not Accepted&#x60; - Your account was not accepting calls at this time  * &#x60;Number Not Allowed&#x60; - The number that was dialed to access your account is not allowed  * &#x60;Number Blocked&#x60; - This number is in your Blocked Numbers list  * &#x60;Number Disabled&#x60; - The phone number and/or area you attempted to call has been prohibited by your administrator  * &#x60;Resource Error&#x60; - An error occurred when making the call. Please try again  * &#x60;Call Loop&#x60; - A call loop occurred due to an incorrect call forwarding configuration. Please check that you are not forwarding calls back to your own account  * &#x60;Fax Not Received&#x60; - An incoming fax could not be received because a proper connection with the sender&#39;s fax machine could not be established  * &#x60;Fax Partially Sent&#x60; - The fax was only partially sent. Possible explanations include phone line quality to poor to maintain the connection or the call was dropped  * &#x60;Fax Not Sent&#x60; - An attempt to send the fax was made, but could not connect with the receiving fax machine  * &#x60;Fax Poor Line&#x60; - An attempt to send the fax was made, but the phone line quality was too poor to send the fax  * &#x60;Fax Prepare Error&#x60; - An internal error occurred when preparing the fax. Please try again  * &#x60;Fax Save Error&#x60; - An internal error occurred when saving the fax. Please try again  * &#x60;Fax Send Error&#x60; - An error occurred when sending the fax. Please try again  * &#x60;DescNoE911Address&#x60; - The call was rejected due to no E911 address 
        /// </summary>
        /// <value>Reason of a call result:  * &#x60;Accepted&#x60; - The call was connected to and accepted by this number  * &#x60;Connected&#x60; - The call was answered, but there was no response on how to handle the call (for example, a voice mail system answered the call and did not push \&quot;1\&quot; to accept)  * &#x60;Line Busy&#x60; - The phone number you dialed was busy  * &#x60;Not Answered&#x60; - The phone number you dialed was not answered  * &#x60;No Answer&#x60; - You did not answer the call  * &#x60;Hang Up&#x60; - The caller hung up before the call was answered  * &#x60;Stopped&#x60; - This attempt was stopped because the call was answered by another phone  * &#x60;Internal Error&#x60; - An internal error occurred when making the call. Please try again  * &#x60;No Credit&#x60; - There was not enough Calling Credit on your account to make this call  * &#x60;Restricted Number&#x60; - The number you dialed is restricted by RingCentral  * &#x60;Wrong Number&#x60; - The number you dialed has either been disconnected or is not a valid phone number. Please check the number and try again  * &#x60;International Disabled&#x60; - International calling is not enabled on your account. Contact customer service to activate International Calling  * &#x60;International Restricted&#x60; - The country and/or area you attempted to call has been prohibited by your administrator  * &#x60;Bad Number&#x60; - An error occurred when making the call. Please check the number before trying again  * &#x60;Info 411 Restricted&#x60; - Calling to 411 Information Services is restricted  * &#x60;Customer 611 Restricted&#x60; - 611 customer service is not supported. Please contact customer service at &lt;(888) 555-1212&gt;  * &#x60;No Digital Line&#x60; - This DigitalLine was either not plugged in or did not have an internet connection  * &#x60;Failed Try Again&#x60; - Call failed. Please try again  * &#x60;Max Call Limit&#x60; - The number of simultaneous calls to your account has reached its limit  * &#x60;Too Many Calls&#x60; - The number of simultaneous calls for per DigitalLine associated with Other Phone has reached its limit. Please contact customer service  * &#x60;Calls Not Accepted&#x60; - Your account was not accepting calls at this time  * &#x60;Number Not Allowed&#x60; - The number that was dialed to access your account is not allowed  * &#x60;Number Blocked&#x60; - This number is in your Blocked Numbers list  * &#x60;Number Disabled&#x60; - The phone number and/or area you attempted to call has been prohibited by your administrator  * &#x60;Resource Error&#x60; - An error occurred when making the call. Please try again  * &#x60;Call Loop&#x60; - A call loop occurred due to an incorrect call forwarding configuration. Please check that you are not forwarding calls back to your own account  * &#x60;Fax Not Received&#x60; - An incoming fax could not be received because a proper connection with the sender&#39;s fax machine could not be established  * &#x60;Fax Partially Sent&#x60; - The fax was only partially sent. Possible explanations include phone line quality to poor to maintain the connection or the call was dropped  * &#x60;Fax Not Sent&#x60; - An attempt to send the fax was made, but could not connect with the receiving fax machine  * &#x60;Fax Poor Line&#x60; - An attempt to send the fax was made, but the phone line quality was too poor to send the fax  * &#x60;Fax Prepare Error&#x60; - An internal error occurred when preparing the fax. Please try again  * &#x60;Fax Save Error&#x60; - An internal error occurred when saving the fax. Please try again  * &#x60;Fax Send Error&#x60; - An error occurred when sending the fax. Please try again  * &#x60;DescNoE911Address&#x60; - The call was rejected due to no E911 address </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReasonEnum
        {
            /// <summary>
            /// Enum Accepted for value: Accepted
            /// </summary>
            [EnumMember(Value = "Accepted")]
            Accepted = 1,

            /// <summary>
            /// Enum Connected for value: Connected
            /// </summary>
            [EnumMember(Value = "Connected")]
            Connected = 2,

            /// <summary>
            /// Enum LineBusy for value: line Busy
            /// </summary>
            [EnumMember(Value = "line Busy")]
            LineBusy = 3,

            /// <summary>
            /// Enum NotAnswered for value: Not Answered
            /// </summary>
            [EnumMember(Value = "Not Answered")]
            NotAnswered = 4,

            /// <summary>
            /// Enum NoAnswer for value: No Answer
            /// </summary>
            [EnumMember(Value = "No Answer")]
            NoAnswer = 5,

            /// <summary>
            /// Enum HangUp for value: Hang Up
            /// </summary>
            [EnumMember(Value = "Hang Up")]
            HangUp = 6,

            /// <summary>
            /// Enum Stopped for value: Stopped
            /// </summary>
            [EnumMember(Value = "Stopped")]
            Stopped = 7,

            /// <summary>
            /// Enum InternalError for value: Internal Error
            /// </summary>
            [EnumMember(Value = "Internal Error")]
            InternalError = 8,

            /// <summary>
            /// Enum NoCredit for value: No Credit
            /// </summary>
            [EnumMember(Value = "No Credit")]
            NoCredit = 9,

            /// <summary>
            /// Enum RestrictedNumber for value: Restricted Number
            /// </summary>
            [EnumMember(Value = "Restricted Number")]
            RestrictedNumber = 10,

            /// <summary>
            /// Enum WrongNumber for value: Wrong Number
            /// </summary>
            [EnumMember(Value = "Wrong Number")]
            WrongNumber = 11,

            /// <summary>
            /// Enum InternationalDisabled for value: International Disabled
            /// </summary>
            [EnumMember(Value = "International Disabled")]
            InternationalDisabled = 12,

            /// <summary>
            /// Enum InternationalRestricted for value: International Restricted
            /// </summary>
            [EnumMember(Value = "International Restricted")]
            InternationalRestricted = 13,

            /// <summary>
            /// Enum BadNumber for value: Bad Number
            /// </summary>
            [EnumMember(Value = "Bad Number")]
            BadNumber = 14,

            /// <summary>
            /// Enum Info411Restricted for value: Info 411 Restricted
            /// </summary>
            [EnumMember(Value = "Info 411 Restricted")]
            Info411Restricted = 15,

            /// <summary>
            /// Enum Customer611Restricted for value: Customer 611 Restricted
            /// </summary>
            [EnumMember(Value = "Customer 611 Restricted")]
            Customer611Restricted = 16,

            /// <summary>
            /// Enum NoDigitalLine for value: No Digital Line
            /// </summary>
            [EnumMember(Value = "No Digital Line")]
            NoDigitalLine = 17,

            /// <summary>
            /// Enum FailedTryAgain for value: Failed Try Again
            /// </summary>
            [EnumMember(Value = "Failed Try Again")]
            FailedTryAgain = 18,

            /// <summary>
            /// Enum MaxCallLimit for value: Max Call Limit
            /// </summary>
            [EnumMember(Value = "Max Call Limit")]
            MaxCallLimit = 19,

            /// <summary>
            /// Enum TooManyCalls for value: Too Many Calls
            /// </summary>
            [EnumMember(Value = "Too Many Calls")]
            TooManyCalls = 20,

            /// <summary>
            /// Enum CallsNotAccepted for value: Calls Not Accepted
            /// </summary>
            [EnumMember(Value = "Calls Not Accepted")]
            CallsNotAccepted = 21,

            /// <summary>
            /// Enum NumberNotAllowed for value: Number Not Allowed
            /// </summary>
            [EnumMember(Value = "Number Not Allowed")]
            NumberNotAllowed = 22,

            /// <summary>
            /// Enum NumberBlocked for value: Number Blocked
            /// </summary>
            [EnumMember(Value = "Number Blocked")]
            NumberBlocked = 23,

            /// <summary>
            /// Enum NumberDisabled for value: Number Disabled
            /// </summary>
            [EnumMember(Value = "Number Disabled")]
            NumberDisabled = 24,

            /// <summary>
            /// Enum ResourceError for value: Resource Error
            /// </summary>
            [EnumMember(Value = "Resource Error")]
            ResourceError = 25,

            /// <summary>
            /// Enum CallLoop for value: Call Loop
            /// </summary>
            [EnumMember(Value = "Call Loop")]
            CallLoop = 26,

            /// <summary>
            /// Enum FaxNotReceived for value: Fax Not Received
            /// </summary>
            [EnumMember(Value = "Fax Not Received")]
            FaxNotReceived = 27,

            /// <summary>
            /// Enum FaxPartiallySent for value: Fax Partially Sent
            /// </summary>
            [EnumMember(Value = "Fax Partially Sent")]
            FaxPartiallySent = 28,

            /// <summary>
            /// Enum FaxNotSent for value: Fax Not Sent
            /// </summary>
            [EnumMember(Value = "Fax Not Sent")]
            FaxNotSent = 29,

            /// <summary>
            /// Enum FaxPoorLine for value: Fax Poor Line
            /// </summary>
            [EnumMember(Value = "Fax Poor Line")]
            FaxPoorLine = 30,

            /// <summary>
            /// Enum FaxPrepareError for value: Fax Prepare Error
            /// </summary>
            [EnumMember(Value = "Fax Prepare Error")]
            FaxPrepareError = 31,

            /// <summary>
            /// Enum FaxSaveError for value: Fax Save Error
            /// </summary>
            [EnumMember(Value = "Fax Save Error")]
            FaxSaveError = 32,

            /// <summary>
            /// Enum FaxSendError for value: Fax Send Error
            /// </summary>
            [EnumMember(Value = "Fax Send Error")]
            FaxSendError = 33,

            /// <summary>
            /// Enum DescNoE911Address for value: DescNoE911Address
            /// </summary>
            [EnumMember(Value = "DescNoE911Address")]
            DescNoE911Address = 34

        }

        /// <summary>
        /// Reason of a call result:  * &#x60;Accepted&#x60; - The call was connected to and accepted by this number  * &#x60;Connected&#x60; - The call was answered, but there was no response on how to handle the call (for example, a voice mail system answered the call and did not push \&quot;1\&quot; to accept)  * &#x60;Line Busy&#x60; - The phone number you dialed was busy  * &#x60;Not Answered&#x60; - The phone number you dialed was not answered  * &#x60;No Answer&#x60; - You did not answer the call  * &#x60;Hang Up&#x60; - The caller hung up before the call was answered  * &#x60;Stopped&#x60; - This attempt was stopped because the call was answered by another phone  * &#x60;Internal Error&#x60; - An internal error occurred when making the call. Please try again  * &#x60;No Credit&#x60; - There was not enough Calling Credit on your account to make this call  * &#x60;Restricted Number&#x60; - The number you dialed is restricted by RingCentral  * &#x60;Wrong Number&#x60; - The number you dialed has either been disconnected or is not a valid phone number. Please check the number and try again  * &#x60;International Disabled&#x60; - International calling is not enabled on your account. Contact customer service to activate International Calling  * &#x60;International Restricted&#x60; - The country and/or area you attempted to call has been prohibited by your administrator  * &#x60;Bad Number&#x60; - An error occurred when making the call. Please check the number before trying again  * &#x60;Info 411 Restricted&#x60; - Calling to 411 Information Services is restricted  * &#x60;Customer 611 Restricted&#x60; - 611 customer service is not supported. Please contact customer service at &lt;(888) 555-1212&gt;  * &#x60;No Digital Line&#x60; - This DigitalLine was either not plugged in or did not have an internet connection  * &#x60;Failed Try Again&#x60; - Call failed. Please try again  * &#x60;Max Call Limit&#x60; - The number of simultaneous calls to your account has reached its limit  * &#x60;Too Many Calls&#x60; - The number of simultaneous calls for per DigitalLine associated with Other Phone has reached its limit. Please contact customer service  * &#x60;Calls Not Accepted&#x60; - Your account was not accepting calls at this time  * &#x60;Number Not Allowed&#x60; - The number that was dialed to access your account is not allowed  * &#x60;Number Blocked&#x60; - This number is in your Blocked Numbers list  * &#x60;Number Disabled&#x60; - The phone number and/or area you attempted to call has been prohibited by your administrator  * &#x60;Resource Error&#x60; - An error occurred when making the call. Please try again  * &#x60;Call Loop&#x60; - A call loop occurred due to an incorrect call forwarding configuration. Please check that you are not forwarding calls back to your own account  * &#x60;Fax Not Received&#x60; - An incoming fax could not be received because a proper connection with the sender&#39;s fax machine could not be established  * &#x60;Fax Partially Sent&#x60; - The fax was only partially sent. Possible explanations include phone line quality to poor to maintain the connection or the call was dropped  * &#x60;Fax Not Sent&#x60; - An attempt to send the fax was made, but could not connect with the receiving fax machine  * &#x60;Fax Poor Line&#x60; - An attempt to send the fax was made, but the phone line quality was too poor to send the fax  * &#x60;Fax Prepare Error&#x60; - An internal error occurred when preparing the fax. Please try again  * &#x60;Fax Save Error&#x60; - An internal error occurred when saving the fax. Please try again  * &#x60;Fax Send Error&#x60; - An error occurred when sending the fax. Please try again  * &#x60;DescNoE911Address&#x60; - The call was rejected due to no E911 address 
        /// </summary>
        /// <value>Reason of a call result:  * &#x60;Accepted&#x60; - The call was connected to and accepted by this number  * &#x60;Connected&#x60; - The call was answered, but there was no response on how to handle the call (for example, a voice mail system answered the call and did not push \&quot;1\&quot; to accept)  * &#x60;Line Busy&#x60; - The phone number you dialed was busy  * &#x60;Not Answered&#x60; - The phone number you dialed was not answered  * &#x60;No Answer&#x60; - You did not answer the call  * &#x60;Hang Up&#x60; - The caller hung up before the call was answered  * &#x60;Stopped&#x60; - This attempt was stopped because the call was answered by another phone  * &#x60;Internal Error&#x60; - An internal error occurred when making the call. Please try again  * &#x60;No Credit&#x60; - There was not enough Calling Credit on your account to make this call  * &#x60;Restricted Number&#x60; - The number you dialed is restricted by RingCentral  * &#x60;Wrong Number&#x60; - The number you dialed has either been disconnected or is not a valid phone number. Please check the number and try again  * &#x60;International Disabled&#x60; - International calling is not enabled on your account. Contact customer service to activate International Calling  * &#x60;International Restricted&#x60; - The country and/or area you attempted to call has been prohibited by your administrator  * &#x60;Bad Number&#x60; - An error occurred when making the call. Please check the number before trying again  * &#x60;Info 411 Restricted&#x60; - Calling to 411 Information Services is restricted  * &#x60;Customer 611 Restricted&#x60; - 611 customer service is not supported. Please contact customer service at &lt;(888) 555-1212&gt;  * &#x60;No Digital Line&#x60; - This DigitalLine was either not plugged in or did not have an internet connection  * &#x60;Failed Try Again&#x60; - Call failed. Please try again  * &#x60;Max Call Limit&#x60; - The number of simultaneous calls to your account has reached its limit  * &#x60;Too Many Calls&#x60; - The number of simultaneous calls for per DigitalLine associated with Other Phone has reached its limit. Please contact customer service  * &#x60;Calls Not Accepted&#x60; - Your account was not accepting calls at this time  * &#x60;Number Not Allowed&#x60; - The number that was dialed to access your account is not allowed  * &#x60;Number Blocked&#x60; - This number is in your Blocked Numbers list  * &#x60;Number Disabled&#x60; - The phone number and/or area you attempted to call has been prohibited by your administrator  * &#x60;Resource Error&#x60; - An error occurred when making the call. Please try again  * &#x60;Call Loop&#x60; - A call loop occurred due to an incorrect call forwarding configuration. Please check that you are not forwarding calls back to your own account  * &#x60;Fax Not Received&#x60; - An incoming fax could not be received because a proper connection with the sender&#39;s fax machine could not be established  * &#x60;Fax Partially Sent&#x60; - The fax was only partially sent. Possible explanations include phone line quality to poor to maintain the connection or the call was dropped  * &#x60;Fax Not Sent&#x60; - An attempt to send the fax was made, but could not connect with the receiving fax machine  * &#x60;Fax Poor Line&#x60; - An attempt to send the fax was made, but the phone line quality was too poor to send the fax  * &#x60;Fax Prepare Error&#x60; - An internal error occurred when preparing the fax. Please try again  * &#x60;Fax Save Error&#x60; - An internal error occurred when saving the fax. Please try again  * &#x60;Fax Send Error&#x60; - An error occurred when sending the fax. Please try again  * &#x60;DescNoE911Address&#x60; - The call was rejected due to no E911 address </value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public ReasonEnum? Reason { get; set; }
        /// <summary>
        /// Internal type of a call
        /// </summary>
        /// <value>Internal type of a call</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InternalTypeEnum
        {
            /// <summary>
            /// Enum Local for value: Local
            /// </summary>
            [EnumMember(Value = "Local")]
            Local = 1,

            /// <summary>
            /// Enum LongDistance for value: LongDistance
            /// </summary>
            [EnumMember(Value = "LongDistance")]
            LongDistance = 2,

            /// <summary>
            /// Enum International for value: International
            /// </summary>
            [EnumMember(Value = "International")]
            International = 3,

            /// <summary>
            /// Enum Sip for value: Sip
            /// </summary>
            [EnumMember(Value = "Sip")]
            Sip = 4,

            /// <summary>
            /// Enum RingMe for value: RingMe
            /// </summary>
            [EnumMember(Value = "RingMe")]
            RingMe = 5,

            /// <summary>
            /// Enum RingOut for value: RingOut
            /// </summary>
            [EnumMember(Value = "RingOut")]
            RingOut = 6,

            /// <summary>
            /// Enum Usual for value: Usual
            /// </summary>
            [EnumMember(Value = "Usual")]
            Usual = 7,

            /// <summary>
            /// Enum TollFreeNumber for value: TollFreeNumber
            /// </summary>
            [EnumMember(Value = "TollFreeNumber")]
            TollFreeNumber = 8,

            /// <summary>
            /// Enum VerificationNumber for value: VerificationNumber
            /// </summary>
            [EnumMember(Value = "VerificationNumber")]
            VerificationNumber = 9,

            /// <summary>
            /// Enum Vma for value: Vma
            /// </summary>
            [EnumMember(Value = "Vma")]
            Vma = 10,

            /// <summary>
            /// Enum LocalNumber for value: LocalNumber
            /// </summary>
            [EnumMember(Value = "LocalNumber")]
            LocalNumber = 11,

            /// <summary>
            /// Enum ImsOutgoing for value: ImsOutgoing
            /// </summary>
            [EnumMember(Value = "ImsOutgoing")]
            ImsOutgoing = 12,

            /// <summary>
            /// Enum ImsIncoming for value: ImsIncoming
            /// </summary>
            [EnumMember(Value = "ImsIncoming")]
            ImsIncoming = 13

        }

        /// <summary>
        /// Internal type of a call
        /// </summary>
        /// <value>Internal type of a call</value>
        [DataMember(Name="internalType", EmitDefaultValue=false)]
        public InternalTypeEnum? InternalType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserCallLogRecord" /> class.
        /// </summary>
        /// <param name="id">Internal identifier of a cal log record.</param>
        /// <param name="uri">Canonical URI of a call log record.</param>
        /// <param name="sessionId">Internal identifier of a call session.</param>
        /// <param name="telephonySessionId">Telephony identifier of a call session.</param>
        /// <param name="from">from.</param>
        /// <param name="to">to.</param>
        /// <param name="extension">extension.</param>
        /// <param name="type">Call type.</param>
        /// <param name="transport">For &#39;Detailed&#39; view only. Call transport.</param>
        /// <param name="legs">For &#39;Detailed&#39; view only. Leg description.</param>
        /// <param name="billing">billing.</param>
        /// <param name="direction">Call direction.</param>
        /// <param name="message">message.</param>
        /// <param name="startTime">The call start datetime in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example 2016-03-10T18:07:52.534Z.</param>
        /// <param name="_delegate">_delegate.</param>
        /// <param name="deleted">Indicates whether the record is deleted. Returned for deleted records, for ISync requests.</param>
        /// <param name="duration">Call duration in seconds.</param>
        /// <param name="lastModifiedTime">For &#39;Detailed&#39; view only. The datetime when the call log record was modified in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example 2016-03-10T18:07:52.534Z.</param>
        /// <param name="recording">recording.</param>
        /// <param name="shortRecording">Indicates that the recording is too short and therefore wouldn&#39;t be returned. The flag is not returned if the value is false.</param>
        /// <param name="action">Action description of the call operation.</param>
        /// <param name="result">Status description of the call operation.</param>
        /// <param name="reason">Reason of a call result:  * &#x60;Accepted&#x60; - The call was connected to and accepted by this number  * &#x60;Connected&#x60; - The call was answered, but there was no response on how to handle the call (for example, a voice mail system answered the call and did not push \&quot;1\&quot; to accept)  * &#x60;Line Busy&#x60; - The phone number you dialed was busy  * &#x60;Not Answered&#x60; - The phone number you dialed was not answered  * &#x60;No Answer&#x60; - You did not answer the call  * &#x60;Hang Up&#x60; - The caller hung up before the call was answered  * &#x60;Stopped&#x60; - This attempt was stopped because the call was answered by another phone  * &#x60;Internal Error&#x60; - An internal error occurred when making the call. Please try again  * &#x60;No Credit&#x60; - There was not enough Calling Credit on your account to make this call  * &#x60;Restricted Number&#x60; - The number you dialed is restricted by RingCentral  * &#x60;Wrong Number&#x60; - The number you dialed has either been disconnected or is not a valid phone number. Please check the number and try again  * &#x60;International Disabled&#x60; - International calling is not enabled on your account. Contact customer service to activate International Calling  * &#x60;International Restricted&#x60; - The country and/or area you attempted to call has been prohibited by your administrator  * &#x60;Bad Number&#x60; - An error occurred when making the call. Please check the number before trying again  * &#x60;Info 411 Restricted&#x60; - Calling to 411 Information Services is restricted  * &#x60;Customer 611 Restricted&#x60; - 611 customer service is not supported. Please contact customer service at &lt;(888) 555-1212&gt;  * &#x60;No Digital Line&#x60; - This DigitalLine was either not plugged in or did not have an internet connection  * &#x60;Failed Try Again&#x60; - Call failed. Please try again  * &#x60;Max Call Limit&#x60; - The number of simultaneous calls to your account has reached its limit  * &#x60;Too Many Calls&#x60; - The number of simultaneous calls for per DigitalLine associated with Other Phone has reached its limit. Please contact customer service  * &#x60;Calls Not Accepted&#x60; - Your account was not accepting calls at this time  * &#x60;Number Not Allowed&#x60; - The number that was dialed to access your account is not allowed  * &#x60;Number Blocked&#x60; - This number is in your Blocked Numbers list  * &#x60;Number Disabled&#x60; - The phone number and/or area you attempted to call has been prohibited by your administrator  * &#x60;Resource Error&#x60; - An error occurred when making the call. Please try again  * &#x60;Call Loop&#x60; - A call loop occurred due to an incorrect call forwarding configuration. Please check that you are not forwarding calls back to your own account  * &#x60;Fax Not Received&#x60; - An incoming fax could not be received because a proper connection with the sender&#39;s fax machine could not be established  * &#x60;Fax Partially Sent&#x60; - The fax was only partially sent. Possible explanations include phone line quality to poor to maintain the connection or the call was dropped  * &#x60;Fax Not Sent&#x60; - An attempt to send the fax was made, but could not connect with the receiving fax machine  * &#x60;Fax Poor Line&#x60; - An attempt to send the fax was made, but the phone line quality was too poor to send the fax  * &#x60;Fax Prepare Error&#x60; - An internal error occurred when preparing the fax. Please try again  * &#x60;Fax Save Error&#x60; - An internal error occurred when saving the fax. Please try again  * &#x60;Fax Send Error&#x60; - An error occurred when sending the fax. Please try again  * &#x60;DescNoE911Address&#x60; - The call was rejected due to no E911 address .</param>
        /// <param name="reasonDescription">reasonDescription.</param>
        /// <param name="internalType">Internal type of a call.</param>
        public UserCallLogRecord(string id = default(string), string uri = default(string), string sessionId = default(string), string telephonySessionId = default(string), CallLogCallerInfo from = default(CallLogCallerInfo), CallLogCallerInfo to = default(CallLogCallerInfo), ExtensionInfoCallLog extension = default(ExtensionInfoCallLog), TypeEnum? type = default(TypeEnum?), TransportEnum? transport = default(TransportEnum?), List<CallLogRecordLegInfo> legs = default(List<CallLogRecordLegInfo>), BillingInfo billing = default(BillingInfo), DirectionEnum? direction = default(DirectionEnum?), CallLogRecordMessage message = default(CallLogRecordMessage), string startTime = default(string), CallLogDelegateInfo _delegate = default(CallLogDelegateInfo), bool deleted = default(bool), int duration = default(int), DateTime lastModifiedTime = default(DateTime), CallLogRecordingInfo recording = default(CallLogRecordingInfo), bool shortRecording = default(bool), ActionEnum? action = default(ActionEnum?), ResultEnum? result = default(ResultEnum?), ReasonEnum? reason = default(ReasonEnum?), string reasonDescription = default(string), InternalTypeEnum? internalType = default(InternalTypeEnum?))
        {
            this.Id = id;
            this.Uri = uri;
            this.SessionId = sessionId;
            this.TelephonySessionId = telephonySessionId;
            this.From = from;
            this.To = to;
            this.Extension = extension;
            this.Type = type;
            this.Transport = transport;
            this.Legs = legs;
            this.Billing = billing;
            this.Direction = direction;
            this.Message = message;
            this.StartTime = startTime;
            this.Delegate = _delegate;
            this.Deleted = deleted;
            this.Duration = duration;
            this.LastModifiedTime = lastModifiedTime;
            this.Recording = recording;
            this.ShortRecording = shortRecording;
            this.Action = action;
            this.Result = result;
            this.Reason = reason;
            this.ReasonDescription = reasonDescription;
            this.InternalType = internalType;
        }

        /// <summary>
        /// Internal identifier of a cal log record
        /// </summary>
        /// <value>Internal identifier of a cal log record</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Canonical URI of a call log record
        /// </summary>
        /// <value>Canonical URI of a call log record</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Internal identifier of a call session
        /// </summary>
        /// <value>Internal identifier of a call session</value>
        [DataMember(Name="sessionId", EmitDefaultValue=false)]
        public string SessionId { get; set; }

        /// <summary>
        /// Telephony identifier of a call session
        /// </summary>
        /// <value>Telephony identifier of a call session</value>
        [DataMember(Name="telephonySessionId", EmitDefaultValue=false)]
        public string TelephonySessionId { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public CallLogCallerInfo From { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public CallLogCallerInfo To { get; set; }

        /// <summary>
        /// Gets or Sets Extension
        /// </summary>
        [DataMember(Name="extension", EmitDefaultValue=false)]
        public ExtensionInfoCallLog Extension { get; set; }



        /// <summary>
        /// For &#39;Detailed&#39; view only. Leg description
        /// </summary>
        /// <value>For &#39;Detailed&#39; view only. Leg description</value>
        [DataMember(Name="legs", EmitDefaultValue=false)]
        public List<CallLogRecordLegInfo> Legs { get; set; }

        /// <summary>
        /// Gets or Sets Billing
        /// </summary>
        [DataMember(Name="billing", EmitDefaultValue=false)]
        public BillingInfo Billing { get; set; }


        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public CallLogRecordMessage Message { get; set; }

        /// <summary>
        /// The call start datetime in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example 2016-03-10T18:07:52.534Z
        /// </summary>
        /// <value>The call start datetime in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example 2016-03-10T18:07:52.534Z</value>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public string StartTime { get; set; }

        /// <summary>
        /// Gets or Sets Delegate
        /// </summary>
        [DataMember(Name="delegate", EmitDefaultValue=false)]
        public CallLogDelegateInfo Delegate { get; set; }

        /// <summary>
        /// Indicates whether the record is deleted. Returned for deleted records, for ISync requests
        /// </summary>
        /// <value>Indicates whether the record is deleted. Returned for deleted records, for ISync requests</value>
        [DataMember(Name="deleted", EmitDefaultValue=false)]
        public bool Deleted { get; set; }

        /// <summary>
        /// Call duration in seconds
        /// </summary>
        /// <value>Call duration in seconds</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public int Duration { get; set; }

        /// <summary>
        /// For &#39;Detailed&#39; view only. The datetime when the call log record was modified in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example 2016-03-10T18:07:52.534Z
        /// </summary>
        /// <value>For &#39;Detailed&#39; view only. The datetime when the call log record was modified in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example 2016-03-10T18:07:52.534Z</value>
        [DataMember(Name="lastModifiedTime", EmitDefaultValue=false)]
        public DateTime LastModifiedTime { get; set; }

        /// <summary>
        /// Gets or Sets Recording
        /// </summary>
        [DataMember(Name="recording", EmitDefaultValue=false)]
        public CallLogRecordingInfo Recording { get; set; }

        /// <summary>
        /// Indicates that the recording is too short and therefore wouldn&#39;t be returned. The flag is not returned if the value is false
        /// </summary>
        /// <value>Indicates that the recording is too short and therefore wouldn&#39;t be returned. The flag is not returned if the value is false</value>
        [DataMember(Name="shortRecording", EmitDefaultValue=false)]
        public bool ShortRecording { get; set; }




        /// <summary>
        /// Gets or Sets ReasonDescription
        /// </summary>
        [DataMember(Name="reasonDescription", EmitDefaultValue=false)]
        public string ReasonDescription { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserCallLogRecord {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  TelephonySessionId: ").Append(TelephonySessionId).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Transport: ").Append(Transport).Append("\n");
            sb.Append("  Legs: ").Append(Legs).Append("\n");
            sb.Append("  Billing: ").Append(Billing).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  Delegate: ").Append(Delegate).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  LastModifiedTime: ").Append(LastModifiedTime).Append("\n");
            sb.Append("  Recording: ").Append(Recording).Append("\n");
            sb.Append("  ShortRecording: ").Append(ShortRecording).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  ReasonDescription: ").Append(ReasonDescription).Append("\n");
            sb.Append("  InternalType: ").Append(InternalType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserCallLogRecord);
        }

        /// <summary>
        /// Returns true if UserCallLogRecord instances are equal
        /// </summary>
        /// <param name="input">Instance of UserCallLogRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserCallLogRecord input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.SessionId == input.SessionId ||
                    (this.SessionId != null &&
                    this.SessionId.Equals(input.SessionId))
                ) && 
                (
                    this.TelephonySessionId == input.TelephonySessionId ||
                    (this.TelephonySessionId != null &&
                    this.TelephonySessionId.Equals(input.TelephonySessionId))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.Extension == input.Extension ||
                    (this.Extension != null &&
                    this.Extension.Equals(input.Extension))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Transport == input.Transport ||
                    (this.Transport != null &&
                    this.Transport.Equals(input.Transport))
                ) && 
                (
                    this.Legs == input.Legs ||
                    this.Legs != null &&
                    input.Legs != null &&
                    this.Legs.SequenceEqual(input.Legs)
                ) && 
                (
                    this.Billing == input.Billing ||
                    (this.Billing != null &&
                    this.Billing.Equals(input.Billing))
                ) && 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.Delegate == input.Delegate ||
                    (this.Delegate != null &&
                    this.Delegate.Equals(input.Delegate))
                ) && 
                (
                    this.Deleted == input.Deleted ||
                    (this.Deleted != null &&
                    this.Deleted.Equals(input.Deleted))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.LastModifiedTime == input.LastModifiedTime ||
                    (this.LastModifiedTime != null &&
                    this.LastModifiedTime.Equals(input.LastModifiedTime))
                ) && 
                (
                    this.Recording == input.Recording ||
                    (this.Recording != null &&
                    this.Recording.Equals(input.Recording))
                ) && 
                (
                    this.ShortRecording == input.ShortRecording ||
                    (this.ShortRecording != null &&
                    this.ShortRecording.Equals(input.ShortRecording))
                ) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.Result == input.Result ||
                    (this.Result != null &&
                    this.Result.Equals(input.Result))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.ReasonDescription == input.ReasonDescription ||
                    (this.ReasonDescription != null &&
                    this.ReasonDescription.Equals(input.ReasonDescription))
                ) && 
                (
                    this.InternalType == input.InternalType ||
                    (this.InternalType != null &&
                    this.InternalType.Equals(input.InternalType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.SessionId != null)
                    hashCode = hashCode * 59 + this.SessionId.GetHashCode();
                if (this.TelephonySessionId != null)
                    hashCode = hashCode * 59 + this.TelephonySessionId.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.Extension != null)
                    hashCode = hashCode * 59 + this.Extension.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Transport != null)
                    hashCode = hashCode * 59 + this.Transport.GetHashCode();
                if (this.Legs != null)
                    hashCode = hashCode * 59 + this.Legs.GetHashCode();
                if (this.Billing != null)
                    hashCode = hashCode * 59 + this.Billing.GetHashCode();
                if (this.Direction != null)
                    hashCode = hashCode * 59 + this.Direction.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.Delegate != null)
                    hashCode = hashCode * 59 + this.Delegate.GetHashCode();
                if (this.Deleted != null)
                    hashCode = hashCode * 59 + this.Deleted.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.LastModifiedTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedTime.GetHashCode();
                if (this.Recording != null)
                    hashCode = hashCode * 59 + this.Recording.GetHashCode();
                if (this.ShortRecording != null)
                    hashCode = hashCode * 59 + this.ShortRecording.GetHashCode();
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.Result != null)
                    hashCode = hashCode * 59 + this.Result.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.ReasonDescription != null)
                    hashCode = hashCode * 59 + this.ReasonDescription.GetHashCode();
                if (this.InternalType != null)
                    hashCode = hashCode * 59 + this.InternalType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
