/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GetAccountInfoResponse
    /// </summary>
    [DataContract]
    public partial class GetAccountInfoResponse :  IEquatable<GetAccountInfoResponse>, IValidatableObject
    {
        /// <summary>
        /// Specifies account configuration wizard state (web service setup)
        /// </summary>
        /// <value>Specifies account configuration wizard state (web service setup)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SetupWizardStateEnum
        {
            /// <summary>
            /// Enum NotStarted for value: NotStarted
            /// </summary>
            [EnumMember(Value = "NotStarted")]
            NotStarted = 1,

            /// <summary>
            /// Enum Incomplete for value: Incomplete
            /// </summary>
            [EnumMember(Value = "Incomplete")]
            Incomplete = 2,

            /// <summary>
            /// Enum Completed for value: Completed
            /// </summary>
            [EnumMember(Value = "Completed")]
            Completed = 3

        }

        /// <summary>
        /// Specifies account configuration wizard state (web service setup)
        /// </summary>
        /// <value>Specifies account configuration wizard state (web service setup)</value>
        [DataMember(Name="setupWizardState", EmitDefaultValue=false)]
        public SetupWizardStateEnum? SetupWizardState { get; set; }
        /// <summary>
        /// Status of the current account
        /// </summary>
        /// <value>Status of the current account</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Initial for value: Initial
            /// </summary>
            [EnumMember(Value = "Initial")]
            Initial = 1,

            /// <summary>
            /// Enum Confirmed for value: Confirmed
            /// </summary>
            [EnumMember(Value = "Confirmed")]
            Confirmed = 2,

            /// <summary>
            /// Enum Unconfirmed for value: Unconfirmed
            /// </summary>
            [EnumMember(Value = "Unconfirmed")]
            Unconfirmed = 3,

            /// <summary>
            /// Enum Disabled for value: Disabled
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled = 4

        }

        /// <summary>
        /// Status of the current account
        /// </summary>
        /// <value>Status of the current account</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAccountInfoResponse" /> class.
        /// </summary>
        /// <param name="id">Internal identifier of an account.</param>
        /// <param name="uri">Canonical URI of an account.</param>
        /// <param name="bsid">Internal identifier of an account in the billing system.</param>
        /// <param name="mainNumber">Main phone number of the current account.</param>
        /// <param name="_operator">_operator.</param>
        /// <param name="partnerId">Additional account identifier, created by partner application and applied on client side.</param>
        /// <param name="serviceInfo">serviceInfo.</param>
        /// <param name="setupWizardState">Specifies account configuration wizard state (web service setup) (default to SetupWizardStateEnum.NotStarted).</param>
        /// <param name="signupInfo">signupInfo.</param>
        /// <param name="status">Status of the current account.</param>
        /// <param name="statusInfo">statusInfo.</param>
        /// <param name="regionalSettings">regionalSettings.</param>
        /// <param name="federated">Specifies whether an account is included into any federation of accounts or not.</param>
        /// <param name="outboundCallPrefix">If outbound call prefix is not specified, or set to null (0), then the parameter is not returned; the supported value range is 2-9.</param>
        /// <param name="cfid">Customer facing identifier. Returned for accounts with the turned off PBX features. Equals to main company number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) (without &#39;+&#39; sign)format .</param>
        /// <param name="limits">limits.</param>
        public GetAccountInfoResponse(long id = default(long), string uri = default(string), string bsid = default(string), string mainNumber = default(string), AccountOperatorInfo _operator = default(AccountOperatorInfo), string partnerId = default(string), ServiceInfo serviceInfo = default(ServiceInfo), SetupWizardStateEnum? setupWizardState = SetupWizardStateEnum.NotStarted, SignupInfoResource signupInfo = default(SignupInfoResource), StatusEnum? status = default(StatusEnum?), AccountStatusInfo statusInfo = default(AccountStatusInfo), AccountRegionalSettings regionalSettings = default(AccountRegionalSettings), bool federated = default(bool), int outboundCallPrefix = default(int), string cfid = default(string), AccountLimits limits = default(AccountLimits))
        {
            this.Id = id;
            this.Uri = uri;
            this.Bsid = bsid;
            this.MainNumber = mainNumber;
            this.Operator = _operator;
            this.PartnerId = partnerId;
            this.ServiceInfo = serviceInfo;
            // use default value if no "setupWizardState" provided
            if (setupWizardState == null)
            {
                this.SetupWizardState = SetupWizardStateEnum.NotStarted;
            }
            else
            {
                this.SetupWizardState = setupWizardState;
            }
            this.SignupInfo = signupInfo;
            this.Status = status;
            this.StatusInfo = statusInfo;
            this.RegionalSettings = regionalSettings;
            this.Federated = federated;
            this.OutboundCallPrefix = outboundCallPrefix;
            this.Cfid = cfid;
            this.Limits = limits;
        }

        /// <summary>
        /// Internal identifier of an account
        /// </summary>
        /// <value>Internal identifier of an account</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long Id { get; set; }

        /// <summary>
        /// Canonical URI of an account
        /// </summary>
        /// <value>Canonical URI of an account</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Internal identifier of an account in the billing system
        /// </summary>
        /// <value>Internal identifier of an account in the billing system</value>
        [DataMember(Name="bsid", EmitDefaultValue=false)]
        public string Bsid { get; set; }

        /// <summary>
        /// Main phone number of the current account
        /// </summary>
        /// <value>Main phone number of the current account</value>
        [DataMember(Name="mainNumber", EmitDefaultValue=false)]
        public string MainNumber { get; set; }

        /// <summary>
        /// Gets or Sets Operator
        /// </summary>
        [DataMember(Name="operator", EmitDefaultValue=false)]
        public AccountOperatorInfo Operator { get; set; }

        /// <summary>
        /// Additional account identifier, created by partner application and applied on client side
        /// </summary>
        /// <value>Additional account identifier, created by partner application and applied on client side</value>
        [DataMember(Name="partnerId", EmitDefaultValue=false)]
        public string PartnerId { get; set; }

        /// <summary>
        /// Gets or Sets ServiceInfo
        /// </summary>
        [DataMember(Name="serviceInfo", EmitDefaultValue=false)]
        public ServiceInfo ServiceInfo { get; set; }


        /// <summary>
        /// Gets or Sets SignupInfo
        /// </summary>
        [DataMember(Name="signupInfo", EmitDefaultValue=false)]
        public SignupInfoResource SignupInfo { get; set; }


        /// <summary>
        /// Gets or Sets StatusInfo
        /// </summary>
        [DataMember(Name="statusInfo", EmitDefaultValue=false)]
        public AccountStatusInfo StatusInfo { get; set; }

        /// <summary>
        /// Gets or Sets RegionalSettings
        /// </summary>
        [DataMember(Name="regionalSettings", EmitDefaultValue=false)]
        public AccountRegionalSettings RegionalSettings { get; set; }

        /// <summary>
        /// Specifies whether an account is included into any federation of accounts or not
        /// </summary>
        /// <value>Specifies whether an account is included into any federation of accounts or not</value>
        [DataMember(Name="federated", EmitDefaultValue=false)]
        public bool Federated { get; set; }

        /// <summary>
        /// If outbound call prefix is not specified, or set to null (0), then the parameter is not returned; the supported value range is 2-9
        /// </summary>
        /// <value>If outbound call prefix is not specified, or set to null (0), then the parameter is not returned; the supported value range is 2-9</value>
        [DataMember(Name="outboundCallPrefix", EmitDefaultValue=false)]
        public int OutboundCallPrefix { get; set; }

        /// <summary>
        /// Customer facing identifier. Returned for accounts with the turned off PBX features. Equals to main company number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) (without &#39;+&#39; sign)format 
        /// </summary>
        /// <value>Customer facing identifier. Returned for accounts with the turned off PBX features. Equals to main company number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) (without &#39;+&#39; sign)format </value>
        [DataMember(Name="cfid", EmitDefaultValue=false)]
        public string Cfid { get; set; }

        /// <summary>
        /// Gets or Sets Limits
        /// </summary>
        [DataMember(Name="limits", EmitDefaultValue=false)]
        public AccountLimits Limits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetAccountInfoResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Bsid: ").Append(Bsid).Append("\n");
            sb.Append("  MainNumber: ").Append(MainNumber).Append("\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("  PartnerId: ").Append(PartnerId).Append("\n");
            sb.Append("  ServiceInfo: ").Append(ServiceInfo).Append("\n");
            sb.Append("  SetupWizardState: ").Append(SetupWizardState).Append("\n");
            sb.Append("  SignupInfo: ").Append(SignupInfo).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusInfo: ").Append(StatusInfo).Append("\n");
            sb.Append("  RegionalSettings: ").Append(RegionalSettings).Append("\n");
            sb.Append("  Federated: ").Append(Federated).Append("\n");
            sb.Append("  OutboundCallPrefix: ").Append(OutboundCallPrefix).Append("\n");
            sb.Append("  Cfid: ").Append(Cfid).Append("\n");
            sb.Append("  Limits: ").Append(Limits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetAccountInfoResponse);
        }

        /// <summary>
        /// Returns true if GetAccountInfoResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetAccountInfoResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetAccountInfoResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.Bsid == input.Bsid ||
                    (this.Bsid != null &&
                    this.Bsid.Equals(input.Bsid))
                ) && 
                (
                    this.MainNumber == input.MainNumber ||
                    (this.MainNumber != null &&
                    this.MainNumber.Equals(input.MainNumber))
                ) && 
                (
                    this.Operator == input.Operator ||
                    (this.Operator != null &&
                    this.Operator.Equals(input.Operator))
                ) && 
                (
                    this.PartnerId == input.PartnerId ||
                    (this.PartnerId != null &&
                    this.PartnerId.Equals(input.PartnerId))
                ) && 
                (
                    this.ServiceInfo == input.ServiceInfo ||
                    (this.ServiceInfo != null &&
                    this.ServiceInfo.Equals(input.ServiceInfo))
                ) && 
                (
                    this.SetupWizardState == input.SetupWizardState ||
                    (this.SetupWizardState != null &&
                    this.SetupWizardState.Equals(input.SetupWizardState))
                ) && 
                (
                    this.SignupInfo == input.SignupInfo ||
                    (this.SignupInfo != null &&
                    this.SignupInfo.Equals(input.SignupInfo))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusInfo == input.StatusInfo ||
                    (this.StatusInfo != null &&
                    this.StatusInfo.Equals(input.StatusInfo))
                ) && 
                (
                    this.RegionalSettings == input.RegionalSettings ||
                    (this.RegionalSettings != null &&
                    this.RegionalSettings.Equals(input.RegionalSettings))
                ) && 
                (
                    this.Federated == input.Federated ||
                    (this.Federated != null &&
                    this.Federated.Equals(input.Federated))
                ) && 
                (
                    this.OutboundCallPrefix == input.OutboundCallPrefix ||
                    (this.OutboundCallPrefix != null &&
                    this.OutboundCallPrefix.Equals(input.OutboundCallPrefix))
                ) && 
                (
                    this.Cfid == input.Cfid ||
                    (this.Cfid != null &&
                    this.Cfid.Equals(input.Cfid))
                ) && 
                (
                    this.Limits == input.Limits ||
                    (this.Limits != null &&
                    this.Limits.Equals(input.Limits))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.Bsid != null)
                    hashCode = hashCode * 59 + this.Bsid.GetHashCode();
                if (this.MainNumber != null)
                    hashCode = hashCode * 59 + this.MainNumber.GetHashCode();
                if (this.Operator != null)
                    hashCode = hashCode * 59 + this.Operator.GetHashCode();
                if (this.PartnerId != null)
                    hashCode = hashCode * 59 + this.PartnerId.GetHashCode();
                if (this.ServiceInfo != null)
                    hashCode = hashCode * 59 + this.ServiceInfo.GetHashCode();
                if (this.SetupWizardState != null)
                    hashCode = hashCode * 59 + this.SetupWizardState.GetHashCode();
                if (this.SignupInfo != null)
                    hashCode = hashCode * 59 + this.SignupInfo.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StatusInfo != null)
                    hashCode = hashCode * 59 + this.StatusInfo.GetHashCode();
                if (this.RegionalSettings != null)
                    hashCode = hashCode * 59 + this.RegionalSettings.GetHashCode();
                if (this.Federated != null)
                    hashCode = hashCode * 59 + this.Federated.GetHashCode();
                if (this.OutboundCallPrefix != null)
                    hashCode = hashCode * 59 + this.OutboundCallPrefix.GetHashCode();
                if (this.Cfid != null)
                    hashCode = hashCode * 59 + this.Cfid.GetHashCode();
                if (this.Limits != null)
                    hashCode = hashCode * 59 + this.Limits.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
