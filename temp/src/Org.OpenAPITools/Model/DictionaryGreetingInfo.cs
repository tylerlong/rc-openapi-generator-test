/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DictionaryGreetingInfo
    /// </summary>
    [DataContract]
    public partial class DictionaryGreetingInfo :  IEquatable<DictionaryGreetingInfo>, IValidatableObject
    {
        /// <summary>
        /// Usage type of a greeting, specifying if the greeting is applied for user extension or department (call queue) extension.
        /// </summary>
        /// <value>Usage type of a greeting, specifying if the greeting is applied for user extension or department (call queue) extension.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UsageTypeEnum
        {
            /// <summary>
            /// Enum UserExtensionAnsweringRule for value: UserExtensionAnsweringRule
            /// </summary>
            [EnumMember(Value = "UserExtensionAnsweringRule")]
            UserExtensionAnsweringRule = 1,

            /// <summary>
            /// Enum ExtensionAnsweringRule for value: ExtensionAnsweringRule
            /// </summary>
            [EnumMember(Value = "ExtensionAnsweringRule")]
            ExtensionAnsweringRule = 2,

            /// <summary>
            /// Enum DepartmentExtensionAnsweringRule for value: DepartmentExtensionAnsweringRule
            /// </summary>
            [EnumMember(Value = "DepartmentExtensionAnsweringRule")]
            DepartmentExtensionAnsweringRule = 3,

            /// <summary>
            /// Enum BlockedCalls for value: BlockedCalls
            /// </summary>
            [EnumMember(Value = "BlockedCalls")]
            BlockedCalls = 4,

            /// <summary>
            /// Enum CallRecording for value: CallRecording
            /// </summary>
            [EnumMember(Value = "CallRecording")]
            CallRecording = 5,

            /// <summary>
            /// Enum CompanyAnsweringRule for value: CompanyAnsweringRule
            /// </summary>
            [EnumMember(Value = "CompanyAnsweringRule")]
            CompanyAnsweringRule = 6,

            /// <summary>
            /// Enum CompanyAfterHoursAnsweringRule for value: CompanyAfterHoursAnsweringRule
            /// </summary>
            [EnumMember(Value = "CompanyAfterHoursAnsweringRule")]
            CompanyAfterHoursAnsweringRule = 7,

            /// <summary>
            /// Enum LimitedExtensionAnsweringRule for value: LimitedExtensionAnsweringRule
            /// </summary>
            [EnumMember(Value = "LimitedExtensionAnsweringRule")]
            LimitedExtensionAnsweringRule = 8,

            /// <summary>
            /// Enum VoicemailExtensionAnsweringRule for value: VoicemailExtensionAnsweringRule
            /// </summary>
            [EnumMember(Value = "VoicemailExtensionAnsweringRule")]
            VoicemailExtensionAnsweringRule = 9,

            /// <summary>
            /// Enum AnnouncementExtensionAnsweringRule for value: AnnouncementExtensionAnsweringRule
            /// </summary>
            [EnumMember(Value = "AnnouncementExtensionAnsweringRule")]
            AnnouncementExtensionAnsweringRule = 10,

            /// <summary>
            /// Enum SharedLinesGroupAnsweringRule for value: SharedLinesGroupAnsweringRule
            /// </summary>
            [EnumMember(Value = "SharedLinesGroupAnsweringRule")]
            SharedLinesGroupAnsweringRule = 11

        }

        /// <summary>
        /// Usage type of a greeting, specifying if the greeting is applied for user extension or department (call queue) extension.
        /// </summary>
        /// <value>Usage type of a greeting, specifying if the greeting is applied for user extension or department (call queue) extension.</value>
        [DataMember(Name="usageType", EmitDefaultValue=false)]
        public UsageTypeEnum? UsageType { get; set; }
        /// <summary>
        /// Type of a greeting, specifying the case when the greeting is played.
        /// </summary>
        /// <value>Type of a greeting, specifying the case when the greeting is played.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Introductory for value: Introductory
            /// </summary>
            [EnumMember(Value = "Introductory")]
            Introductory = 1,

            /// <summary>
            /// Enum Announcement for value: Announcement
            /// </summary>
            [EnumMember(Value = "Announcement")]
            Announcement = 2,

            /// <summary>
            /// Enum AutomaticRecording for value: AutomaticRecording
            /// </summary>
            [EnumMember(Value = "AutomaticRecording")]
            AutomaticRecording = 3,

            /// <summary>
            /// Enum BlockedCallersAll for value: BlockedCallersAll
            /// </summary>
            [EnumMember(Value = "BlockedCallersAll")]
            BlockedCallersAll = 4,

            /// <summary>
            /// Enum BlockedCallersSpecific for value: BlockedCallersSpecific
            /// </summary>
            [EnumMember(Value = "BlockedCallersSpecific")]
            BlockedCallersSpecific = 5,

            /// <summary>
            /// Enum BlockedNoCallerId for value: BlockedNoCallerId
            /// </summary>
            [EnumMember(Value = "BlockedNoCallerId")]
            BlockedNoCallerId = 6,

            /// <summary>
            /// Enum BlockedPayPhones for value: BlockedPayPhones
            /// </summary>
            [EnumMember(Value = "BlockedPayPhones")]
            BlockedPayPhones = 7,

            /// <summary>
            /// Enum ConnectingMessage for value: ConnectingMessage
            /// </summary>
            [EnumMember(Value = "ConnectingMessage")]
            ConnectingMessage = 8,

            /// <summary>
            /// Enum ConnectingAudio for value: ConnectingAudio
            /// </summary>
            [EnumMember(Value = "ConnectingAudio")]
            ConnectingAudio = 9,

            /// <summary>
            /// Enum StartRecording for value: StartRecording
            /// </summary>
            [EnumMember(Value = "StartRecording")]
            StartRecording = 10,

            /// <summary>
            /// Enum StopRecording for value: StopRecording
            /// </summary>
            [EnumMember(Value = "StopRecording")]
            StopRecording = 11,

            /// <summary>
            /// Enum Voicemail for value: Voicemail
            /// </summary>
            [EnumMember(Value = "Voicemail")]
            Voicemail = 12,

            /// <summary>
            /// Enum Unavailable for value: Unavailable
            /// </summary>
            [EnumMember(Value = "Unavailable")]
            Unavailable = 13,

            /// <summary>
            /// Enum InterruptPrompt for value: InterruptPrompt
            /// </summary>
            [EnumMember(Value = "InterruptPrompt")]
            InterruptPrompt = 14,

            /// <summary>
            /// Enum HoldMusic for value: HoldMusic
            /// </summary>
            [EnumMember(Value = "HoldMusic")]
            HoldMusic = 15,

            /// <summary>
            /// Enum Company for value: Company
            /// </summary>
            [EnumMember(Value = "Company")]
            Company = 16

        }

        /// <summary>
        /// Type of a greeting, specifying the case when the greeting is played.
        /// </summary>
        /// <value>Type of a greeting, specifying the case when the greeting is played.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Category of a greeting, specifying data form. The category value &#39;None&#39; specifies that greetings of a certain type (&#39;Introductory&#39;, &#39;ConnectingAudio&#39;, etc.) are switched off for an extension &#x3D; [&#39;Music&#39;, &#39;Message&#39;, &#39;RingTones&#39;, &#39;None&#39;]
        /// </summary>
        /// <value>Category of a greeting, specifying data form. The category value &#39;None&#39; specifies that greetings of a certain type (&#39;Introductory&#39;, &#39;ConnectingAudio&#39;, etc.) are switched off for an extension &#x3D; [&#39;Music&#39;, &#39;Message&#39;, &#39;RingTones&#39;, &#39;None&#39;]</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CategoryEnum
        {
            /// <summary>
            /// Enum Music for value: Music
            /// </summary>
            [EnumMember(Value = "Music")]
            Music = 1,

            /// <summary>
            /// Enum Message for value: Message
            /// </summary>
            [EnumMember(Value = "Message")]
            Message = 2,

            /// <summary>
            /// Enum RingTones for value: RingTones
            /// </summary>
            [EnumMember(Value = "RingTones")]
            RingTones = 3,

            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 4

        }

        /// <summary>
        /// Category of a greeting, specifying data form. The category value &#39;None&#39; specifies that greetings of a certain type (&#39;Introductory&#39;, &#39;ConnectingAudio&#39;, etc.) are switched off for an extension &#x3D; [&#39;Music&#39;, &#39;Message&#39;, &#39;RingTones&#39;, &#39;None&#39;]
        /// </summary>
        /// <value>Category of a greeting, specifying data form. The category value &#39;None&#39; specifies that greetings of a certain type (&#39;Introductory&#39;, &#39;ConnectingAudio&#39;, etc.) are switched off for an extension &#x3D; [&#39;Music&#39;, &#39;Message&#39;, &#39;RingTones&#39;, &#39;None&#39;]</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public CategoryEnum? Category { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DictionaryGreetingInfo" /> class.
        /// </summary>
        /// <param name="id">Internal identifier of a greeting.</param>
        /// <param name="uri">Link to a greeting.</param>
        /// <param name="name">Name of a greeting.</param>
        /// <param name="usageType">Usage type of a greeting, specifying if the greeting is applied for user extension or department (call queue) extension..</param>
        /// <param name="text">Text of a greeting, if any.</param>
        /// <param name="contentUri">Link to a greeting content (audio file), if any.</param>
        /// <param name="type">Type of a greeting, specifying the case when the greeting is played..</param>
        /// <param name="category">Category of a greeting, specifying data form. The category value &#39;None&#39; specifies that greetings of a certain type (&#39;Introductory&#39;, &#39;ConnectingAudio&#39;, etc.) are switched off for an extension &#x3D; [&#39;Music&#39;, &#39;Message&#39;, &#39;RingTones&#39;, &#39;None&#39;].</param>
        /// <param name="navigation">navigation.</param>
        /// <param name="paging">paging.</param>
        public DictionaryGreetingInfo(string id = default(string), string uri = default(string), string name = default(string), UsageTypeEnum? usageType = default(UsageTypeEnum?), string text = default(string), string contentUri = default(string), TypeEnum? type = default(TypeEnum?), CategoryEnum? category = default(CategoryEnum?), CallHandlingNavigationInfo navigation = default(CallHandlingNavigationInfo), CallHandlingPagingInfo paging = default(CallHandlingPagingInfo))
        {
            this.Id = id;
            this.Uri = uri;
            this.Name = name;
            this.UsageType = usageType;
            this.Text = text;
            this.ContentUri = contentUri;
            this.Type = type;
            this.Category = category;
            this.Navigation = navigation;
            this.Paging = paging;
        }

        /// <summary>
        /// Internal identifier of a greeting
        /// </summary>
        /// <value>Internal identifier of a greeting</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Link to a greeting
        /// </summary>
        /// <value>Link to a greeting</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Name of a greeting
        /// </summary>
        /// <value>Name of a greeting</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Text of a greeting, if any
        /// </summary>
        /// <value>Text of a greeting, if any</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Link to a greeting content (audio file), if any
        /// </summary>
        /// <value>Link to a greeting content (audio file), if any</value>
        [DataMember(Name="contentUri", EmitDefaultValue=false)]
        public string ContentUri { get; set; }



        /// <summary>
        /// Gets or Sets Navigation
        /// </summary>
        [DataMember(Name="navigation", EmitDefaultValue=false)]
        public CallHandlingNavigationInfo Navigation { get; set; }

        /// <summary>
        /// Gets or Sets Paging
        /// </summary>
        [DataMember(Name="paging", EmitDefaultValue=false)]
        public CallHandlingPagingInfo Paging { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DictionaryGreetingInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  UsageType: ").Append(UsageType).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  ContentUri: ").Append(ContentUri).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Navigation: ").Append(Navigation).Append("\n");
            sb.Append("  Paging: ").Append(Paging).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DictionaryGreetingInfo);
        }

        /// <summary>
        /// Returns true if DictionaryGreetingInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of DictionaryGreetingInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DictionaryGreetingInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.UsageType == input.UsageType ||
                    (this.UsageType != null &&
                    this.UsageType.Equals(input.UsageType))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.ContentUri == input.ContentUri ||
                    (this.ContentUri != null &&
                    this.ContentUri.Equals(input.ContentUri))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Navigation == input.Navigation ||
                    (this.Navigation != null &&
                    this.Navigation.Equals(input.Navigation))
                ) && 
                (
                    this.Paging == input.Paging ||
                    (this.Paging != null &&
                    this.Paging.Equals(input.Paging))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.UsageType != null)
                    hashCode = hashCode * 59 + this.UsageType.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.ContentUri != null)
                    hashCode = hashCode * 59 + this.ContentUri.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.Navigation != null)
                    hashCode = hashCode * 59 + this.Navigation.GetHashCode();
                if (this.Paging != null)
                    hashCode = hashCode * 59 + this.Paging.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
