/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PermissionIdResource
    /// </summary>
    [DataContract]
    public partial class PermissionIdResource :  IEquatable<PermissionIdResource>, IValidatableObject
    {
        /// <summary>
        /// Site compatibility flag set for permission
        /// </summary>
        /// <value>Site compatibility flag set for permission</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SiteCompatibleEnum
        {
            /// <summary>
            /// Enum Compatible for value: Compatible
            /// </summary>
            [EnumMember(Value = "Compatible")]
            Compatible = 1,

            /// <summary>
            /// Enum Incompatible for value: Incompatible
            /// </summary>
            [EnumMember(Value = "Incompatible")]
            Incompatible = 2,

            /// <summary>
            /// Enum Independent for value: Independent
            /// </summary>
            [EnumMember(Value = "Independent")]
            Independent = 3

        }

        /// <summary>
        /// Site compatibility flag set for permission
        /// </summary>
        /// <value>Site compatibility flag set for permission</value>
        [DataMember(Name="siteCompatible", EmitDefaultValue=false)]
        public SiteCompatibleEnum? SiteCompatible { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PermissionIdResource" /> class.
        /// </summary>
        /// <param name="uri">uri.</param>
        /// <param name="id">id.</param>
        /// <param name="siteCompatible">Site compatibility flag set for permission.</param>
        /// <param name="readOnly">Specifies if the permission is editable on UI (if set to &#39;True&#39;) or not (if set to &#39;False&#39;).</param>
        /// <param name="assignable">Specifies if the permission can be assigned by the account administrator.</param>
        public PermissionIdResource(string uri = default(string), string id = default(string), SiteCompatibleEnum? siteCompatible = default(SiteCompatibleEnum?), bool readOnly = default(bool), bool assignable = default(bool))
        {
            this.Uri = uri;
            this.Id = id;
            this.SiteCompatible = siteCompatible;
            this.ReadOnly = readOnly;
            this.Assignable = assignable;
        }

        /// <summary>
        /// Gets or Sets Uri
        /// </summary>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// Specifies if the permission is editable on UI (if set to &#39;True&#39;) or not (if set to &#39;False&#39;)
        /// </summary>
        /// <value>Specifies if the permission is editable on UI (if set to &#39;True&#39;) or not (if set to &#39;False&#39;)</value>
        [DataMember(Name="readOnly", EmitDefaultValue=false)]
        public bool ReadOnly { get; set; }

        /// <summary>
        /// Specifies if the permission can be assigned by the account administrator
        /// </summary>
        /// <value>Specifies if the permission can be assigned by the account administrator</value>
        [DataMember(Name="assignable", EmitDefaultValue=false)]
        public bool Assignable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PermissionIdResource {\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SiteCompatible: ").Append(SiteCompatible).Append("\n");
            sb.Append("  ReadOnly: ").Append(ReadOnly).Append("\n");
            sb.Append("  Assignable: ").Append(Assignable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PermissionIdResource);
        }

        /// <summary>
        /// Returns true if PermissionIdResource instances are equal
        /// </summary>
        /// <param name="input">Instance of PermissionIdResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PermissionIdResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.SiteCompatible == input.SiteCompatible ||
                    (this.SiteCompatible != null &&
                    this.SiteCompatible.Equals(input.SiteCompatible))
                ) && 
                (
                    this.ReadOnly == input.ReadOnly ||
                    (this.ReadOnly != null &&
                    this.ReadOnly.Equals(input.ReadOnly))
                ) && 
                (
                    this.Assignable == input.Assignable ||
                    (this.Assignable != null &&
                    this.Assignable.Equals(input.Assignable))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.SiteCompatible != null)
                    hashCode = hashCode * 59 + this.SiteCompatible.GetHashCode();
                if (this.ReadOnly != null)
                    hashCode = hashCode * 59 + this.ReadOnly.GetHashCode();
                if (this.Assignable != null)
                    hashCode = hashCode * 59 + this.Assignable.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
