/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GlipAdaptiveCardShortInfo
    /// </summary>
    [DataContract]
    public partial class GlipAdaptiveCardShortInfo :  IEquatable<GlipAdaptiveCardShortInfo>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum AdaptiveCard for value: AdaptiveCard
            /// </summary>
            [EnumMember(Value = "AdaptiveCard")]
            AdaptiveCard = 1

        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GlipAdaptiveCardShortInfo" /> class.
        /// </summary>
        /// <param name="id">Internal identifier of an adaptive card.</param>
        /// <param name="creationTime">Adaptive Card creation datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.</param>
        /// <param name="lastModifiedTime">Post last modification datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.</param>
        /// <param name="schema">Schema of an adaptive card.</param>
        /// <param name="type">type.</param>
        /// <param name="version">Version of an adaptive card. Filled on server-side.</param>
        /// <param name="creator">creator.</param>
        /// <param name="chatIds">Chat IDs where an adaptive card is posted or shared..</param>
        public GlipAdaptiveCardShortInfo(string id = default(string), DateTime creationTime = default(DateTime), DateTime lastModifiedTime = default(DateTime), string schema = default(string), TypeEnum? type = default(TypeEnum?), string version = default(string), AdaptiveCardCreator creator = default(AdaptiveCardCreator), List<string> chatIds = default(List<string>))
        {
            this.Id = id;
            this.CreationTime = creationTime;
            this.LastModifiedTime = lastModifiedTime;
            this.Schema = schema;
            this.Type = type;
            this._Version = version;
            this.Creator = creator;
            this.ChatIds = chatIds;
        }

        /// <summary>
        /// Internal identifier of an adaptive card
        /// </summary>
        /// <value>Internal identifier of an adaptive card</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Adaptive Card creation datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format
        /// </summary>
        /// <value>Adaptive Card creation datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format</value>
        [DataMember(Name="creationTime", EmitDefaultValue=false)]
        public DateTime CreationTime { get; set; }

        /// <summary>
        /// Post last modification datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format
        /// </summary>
        /// <value>Post last modification datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format</value>
        [DataMember(Name="lastModifiedTime", EmitDefaultValue=false)]
        public DateTime LastModifiedTime { get; set; }

        /// <summary>
        /// Schema of an adaptive card
        /// </summary>
        /// <value>Schema of an adaptive card</value>
        [DataMember(Name="$schema", EmitDefaultValue=false)]
        public string Schema { get; set; }


        /// <summary>
        /// Version of an adaptive card. Filled on server-side
        /// </summary>
        /// <value>Version of an adaptive card. Filled on server-side</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string _Version { get; set; }

        /// <summary>
        /// Gets or Sets Creator
        /// </summary>
        [DataMember(Name="creator", EmitDefaultValue=false)]
        public AdaptiveCardCreator Creator { get; set; }

        /// <summary>
        /// Chat IDs where an adaptive card is posted or shared.
        /// </summary>
        /// <value>Chat IDs where an adaptive card is posted or shared.</value>
        [DataMember(Name="chatIds", EmitDefaultValue=false)]
        public List<string> ChatIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlipAdaptiveCardShortInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreationTime: ").Append(CreationTime).Append("\n");
            sb.Append("  LastModifiedTime: ").Append(LastModifiedTime).Append("\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  ChatIds: ").Append(ChatIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GlipAdaptiveCardShortInfo);
        }

        /// <summary>
        /// Returns true if GlipAdaptiveCardShortInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of GlipAdaptiveCardShortInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlipAdaptiveCardShortInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreationTime == input.CreationTime ||
                    (this.CreationTime != null &&
                    this.CreationTime.Equals(input.CreationTime))
                ) && 
                (
                    this.LastModifiedTime == input.LastModifiedTime ||
                    (this.LastModifiedTime != null &&
                    this.LastModifiedTime.Equals(input.LastModifiedTime))
                ) && 
                (
                    this.Schema == input.Schema ||
                    (this.Schema != null &&
                    this.Schema.Equals(input.Schema))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this._Version == input._Version ||
                    (this._Version != null &&
                    this._Version.Equals(input._Version))
                ) && 
                (
                    this.Creator == input.Creator ||
                    (this.Creator != null &&
                    this.Creator.Equals(input.Creator))
                ) && 
                (
                    this.ChatIds == input.ChatIds ||
                    this.ChatIds != null &&
                    input.ChatIds != null &&
                    this.ChatIds.SequenceEqual(input.ChatIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CreationTime != null)
                    hashCode = hashCode * 59 + this.CreationTime.GetHashCode();
                if (this.LastModifiedTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedTime.GetHashCode();
                if (this.Schema != null)
                    hashCode = hashCode * 59 + this.Schema.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this._Version != null)
                    hashCode = hashCode * 59 + this._Version.GetHashCode();
                if (this.Creator != null)
                    hashCode = hashCode * 59 + this.Creator.GetHashCode();
                if (this.ChatIds != null)
                    hashCode = hashCode * 59 + this.ChatIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
