/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AnalyticsLegacyCallsByType
    /// </summary>
    [DataContract]
    public partial class AnalyticsLegacyCallsByType :  IEquatable<AnalyticsLegacyCallsByType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsLegacyCallsByType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AnalyticsLegacyCallsByType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsLegacyCallsByType" /> class.
        /// </summary>
        /// <param name="direct">direct (required).</param>
        /// <param name="fromQueue">fromQueue (required).</param>
        /// <param name="parkRetrieval">parkRetrieval (required).</param>
        /// <param name="transferred">transferred (required).</param>
        /// <param name="outbound">outbound (required).</param>
        public AnalyticsLegacyCallsByType(double direct = default(double), double fromQueue = default(double), double parkRetrieval = default(double), double transferred = default(double), double outbound = default(double))
        {
            // to ensure "direct" is required (not null)
            if (direct == null)
            {
                throw new InvalidDataException("direct is a required property for AnalyticsLegacyCallsByType and cannot be null");
            }
            else
            {
                this.Direct = direct;
            }

            // to ensure "fromQueue" is required (not null)
            if (fromQueue == null)
            {
                throw new InvalidDataException("fromQueue is a required property for AnalyticsLegacyCallsByType and cannot be null");
            }
            else
            {
                this.FromQueue = fromQueue;
            }

            // to ensure "parkRetrieval" is required (not null)
            if (parkRetrieval == null)
            {
                throw new InvalidDataException("parkRetrieval is a required property for AnalyticsLegacyCallsByType and cannot be null");
            }
            else
            {
                this.ParkRetrieval = parkRetrieval;
            }

            // to ensure "transferred" is required (not null)
            if (transferred == null)
            {
                throw new InvalidDataException("transferred is a required property for AnalyticsLegacyCallsByType and cannot be null");
            }
            else
            {
                this.Transferred = transferred;
            }

            // to ensure "outbound" is required (not null)
            if (outbound == null)
            {
                throw new InvalidDataException("outbound is a required property for AnalyticsLegacyCallsByType and cannot be null");
            }
            else
            {
                this.Outbound = outbound;
            }

        }

        /// <summary>
        /// Gets or Sets Direct
        /// </summary>
        [DataMember(Name="direct", EmitDefaultValue=true)]
        public double Direct { get; set; }

        /// <summary>
        /// Gets or Sets FromQueue
        /// </summary>
        [DataMember(Name="fromQueue", EmitDefaultValue=true)]
        public double FromQueue { get; set; }

        /// <summary>
        /// Gets or Sets ParkRetrieval
        /// </summary>
        [DataMember(Name="parkRetrieval", EmitDefaultValue=true)]
        public double ParkRetrieval { get; set; }

        /// <summary>
        /// Gets or Sets Transferred
        /// </summary>
        [DataMember(Name="transferred", EmitDefaultValue=true)]
        public double Transferred { get; set; }

        /// <summary>
        /// Gets or Sets Outbound
        /// </summary>
        [DataMember(Name="outbound", EmitDefaultValue=true)]
        public double Outbound { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnalyticsLegacyCallsByType {\n");
            sb.Append("  Direct: ").Append(Direct).Append("\n");
            sb.Append("  FromQueue: ").Append(FromQueue).Append("\n");
            sb.Append("  ParkRetrieval: ").Append(ParkRetrieval).Append("\n");
            sb.Append("  Transferred: ").Append(Transferred).Append("\n");
            sb.Append("  Outbound: ").Append(Outbound).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AnalyticsLegacyCallsByType);
        }

        /// <summary>
        /// Returns true if AnalyticsLegacyCallsByType instances are equal
        /// </summary>
        /// <param name="input">Instance of AnalyticsLegacyCallsByType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnalyticsLegacyCallsByType input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Direct == input.Direct ||
                    (this.Direct != null &&
                    this.Direct.Equals(input.Direct))
                ) && 
                (
                    this.FromQueue == input.FromQueue ||
                    (this.FromQueue != null &&
                    this.FromQueue.Equals(input.FromQueue))
                ) && 
                (
                    this.ParkRetrieval == input.ParkRetrieval ||
                    (this.ParkRetrieval != null &&
                    this.ParkRetrieval.Equals(input.ParkRetrieval))
                ) && 
                (
                    this.Transferred == input.Transferred ||
                    (this.Transferred != null &&
                    this.Transferred.Equals(input.Transferred))
                ) && 
                (
                    this.Outbound == input.Outbound ||
                    (this.Outbound != null &&
                    this.Outbound.Equals(input.Outbound))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Direct != null)
                    hashCode = hashCode * 59 + this.Direct.GetHashCode();
                if (this.FromQueue != null)
                    hashCode = hashCode * 59 + this.FromQueue.GetHashCode();
                if (this.ParkRetrieval != null)
                    hashCode = hashCode * 59 + this.ParkRetrieval.GetHashCode();
                if (this.Transferred != null)
                    hashCode = hashCode * 59 + this.Transferred.GetHashCode();
                if (this.Outbound != null)
                    hashCode = hashCode * 59 + this.Outbound.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
