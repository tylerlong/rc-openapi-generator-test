/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AdaptiveCardColumnItemInfo
    /// </summary>
    [DataContract]
    public partial class AdaptiveCardColumnItemInfo :  IEquatable<AdaptiveCardColumnItemInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdaptiveCardColumnItemInfo" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="url">url.</param>
        /// <param name="size">size.</param>
        /// <param name="style">style.</param>
        /// <param name="wrap">wrap.</param>
        /// <param name="spacing">spacing.</param>
        /// <param name="text">text.</param>
        /// <param name="isSubtle">isSubtle.</param>
        public AdaptiveCardColumnItemInfo(string type = default(string), string url = default(string), string size = default(string), string style = default(string), bool wrap = default(bool), string spacing = default(string), string text = default(string), bool isSubtle = default(bool))
        {
            this.Type = type;
            this.Url = url;
            this.Size = size;
            this.Style = style;
            this.Wrap = wrap;
            this.Spacing = spacing;
            this.Text = text;
            this.IsSubtle = isSubtle;
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public string Size { get; set; }

        /// <summary>
        /// Gets or Sets Style
        /// </summary>
        [DataMember(Name="style", EmitDefaultValue=false)]
        public string Style { get; set; }

        /// <summary>
        /// Gets or Sets Wrap
        /// </summary>
        [DataMember(Name="wrap", EmitDefaultValue=false)]
        public bool Wrap { get; set; }

        /// <summary>
        /// Gets or Sets Spacing
        /// </summary>
        [DataMember(Name="spacing", EmitDefaultValue=false)]
        public string Spacing { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets IsSubtle
        /// </summary>
        [DataMember(Name="isSubtle", EmitDefaultValue=false)]
        public bool IsSubtle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdaptiveCardColumnItemInfo {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Style: ").Append(Style).Append("\n");
            sb.Append("  Wrap: ").Append(Wrap).Append("\n");
            sb.Append("  Spacing: ").Append(Spacing).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  IsSubtle: ").Append(IsSubtle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdaptiveCardColumnItemInfo);
        }

        /// <summary>
        /// Returns true if AdaptiveCardColumnItemInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of AdaptiveCardColumnItemInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdaptiveCardColumnItemInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.Style == input.Style ||
                    (this.Style != null &&
                    this.Style.Equals(input.Style))
                ) && 
                (
                    this.Wrap == input.Wrap ||
                    (this.Wrap != null &&
                    this.Wrap.Equals(input.Wrap))
                ) && 
                (
                    this.Spacing == input.Spacing ||
                    (this.Spacing != null &&
                    this.Spacing.Equals(input.Spacing))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.IsSubtle == input.IsSubtle ||
                    (this.IsSubtle != null &&
                    this.IsSubtle.Equals(input.IsSubtle))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.Style != null)
                    hashCode = hashCode * 59 + this.Style.GetHashCode();
                if (this.Wrap != null)
                    hashCode = hashCode * 59 + this.Wrap.GetHashCode();
                if (this.Spacing != null)
                    hashCode = hashCode * 59 + this.Spacing.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.IsSubtle != null)
                    hashCode = hashCode * 59 + this.IsSubtle.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
