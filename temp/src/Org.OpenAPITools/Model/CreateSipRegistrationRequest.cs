/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CreateSipRegistrationRequest
    /// </summary>
    [DataContract]
    public partial class CreateSipRegistrationRequest :  IEquatable<CreateSipRegistrationRequest>, IValidatableObject
    {
        /// <summary>
        /// Supported for softphone clients only. If &#39;SoftphoneLineReassignment&#39; feature is enabled the reassignment process can be initialized, however if there is no DL for the given user&#39;s device then SPR-131 error code will be returned.
        /// </summary>
        /// <value>Supported for softphone clients only. If &#39;SoftphoneLineReassignment&#39; feature is enabled the reassignment process can be initialized, however if there is no DL for the given user&#39;s device then SPR-131 error code will be returned.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SoftPhoneLineReassignmentEnum
        {
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,

            /// <summary>
            /// Enum Initialize for value: Initialize
            /// </summary>
            [EnumMember(Value = "Initialize")]
            Initialize = 2,

            /// <summary>
            /// Enum Reassign for value: Reassign
            /// </summary>
            [EnumMember(Value = "Reassign")]
            Reassign = 3

        }

        /// <summary>
        /// Supported for softphone clients only. If &#39;SoftphoneLineReassignment&#39; feature is enabled the reassignment process can be initialized, however if there is no DL for the given user&#39;s device then SPR-131 error code will be returned.
        /// </summary>
        /// <value>Supported for softphone clients only. If &#39;SoftphoneLineReassignment&#39; feature is enabled the reassignment process can be initialized, however if there is no DL for the given user&#39;s device then SPR-131 error code will be returned.</value>
        [DataMember(Name="softPhoneLineReassignment", EmitDefaultValue=false)]
        public SoftPhoneLineReassignmentEnum? SoftPhoneLineReassignment { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSipRegistrationRequest" /> class.
        /// </summary>
        /// <param name="device">device.</param>
        /// <param name="sipInfo">SIP settings for device.</param>
        /// <param name="softPhoneLineReassignment">Supported for softphone clients only. If &#39;SoftphoneLineReassignment&#39; feature is enabled the reassignment process can be initialized, however if there is no DL for the given user&#39;s device then SPR-131 error code will be returned. (default to SoftPhoneLineReassignmentEnum.None).</param>
        public CreateSipRegistrationRequest(DeviceInfoRequest device = default(DeviceInfoRequest), List<SIPInfoRequest> sipInfo = default(List<SIPInfoRequest>), SoftPhoneLineReassignmentEnum? softPhoneLineReassignment = SoftPhoneLineReassignmentEnum.None)
        {
            this.Device = device;
            this.SipInfo = sipInfo;
            // use default value if no "softPhoneLineReassignment" provided
            if (softPhoneLineReassignment == null)
            {
                this.SoftPhoneLineReassignment = SoftPhoneLineReassignmentEnum.None;
            }
            else
            {
                this.SoftPhoneLineReassignment = softPhoneLineReassignment;
            }
        }

        /// <summary>
        /// Gets or Sets Device
        /// </summary>
        [DataMember(Name="device", EmitDefaultValue=false)]
        public DeviceInfoRequest Device { get; set; }

        /// <summary>
        /// SIP settings for device
        /// </summary>
        /// <value>SIP settings for device</value>
        [DataMember(Name="sipInfo", EmitDefaultValue=false)]
        public List<SIPInfoRequest> SipInfo { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateSipRegistrationRequest {\n");
            sb.Append("  Device: ").Append(Device).Append("\n");
            sb.Append("  SipInfo: ").Append(SipInfo).Append("\n");
            sb.Append("  SoftPhoneLineReassignment: ").Append(SoftPhoneLineReassignment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateSipRegistrationRequest);
        }

        /// <summary>
        /// Returns true if CreateSipRegistrationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateSipRegistrationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateSipRegistrationRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Device == input.Device ||
                    (this.Device != null &&
                    this.Device.Equals(input.Device))
                ) && 
                (
                    this.SipInfo == input.SipInfo ||
                    this.SipInfo != null &&
                    input.SipInfo != null &&
                    this.SipInfo.SequenceEqual(input.SipInfo)
                ) && 
                (
                    this.SoftPhoneLineReassignment == input.SoftPhoneLineReassignment ||
                    (this.SoftPhoneLineReassignment != null &&
                    this.SoftPhoneLineReassignment.Equals(input.SoftPhoneLineReassignment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Device != null)
                    hashCode = hashCode * 59 + this.Device.GetHashCode();
                if (this.SipInfo != null)
                    hashCode = hashCode * 59 + this.SipInfo.GetHashCode();
                if (this.SoftPhoneLineReassignment != null)
                    hashCode = hashCode * 59 + this.SoftPhoneLineReassignment.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
