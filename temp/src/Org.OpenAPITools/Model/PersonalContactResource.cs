/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PersonalContactResource
    /// </summary>
    [DataContract]
    public partial class PersonalContactResource :  IEquatable<PersonalContactResource>, IValidatableObject
    {
        /// <summary>
        /// This property has a special meaning only on Address Book Sync (e.g. a contact can be &#x60;Deleted&#x60;). For simple contact list reading it has always the default value - &#x60;Alive&#x60;
        /// </summary>
        /// <value>This property has a special meaning only on Address Book Sync (e.g. a contact can be &#x60;Deleted&#x60;). For simple contact list reading it has always the default value - &#x60;Alive&#x60;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AvailabilityEnum
        {
            /// <summary>
            /// Enum Alive for value: Alive
            /// </summary>
            [EnumMember(Value = "Alive")]
            Alive = 1,

            /// <summary>
            /// Enum Deleted for value: Deleted
            /// </summary>
            [EnumMember(Value = "Deleted")]
            Deleted = 2,

            /// <summary>
            /// Enum Purged for value: Purged
            /// </summary>
            [EnumMember(Value = "Purged")]
            Purged = 3

        }

        /// <summary>
        /// This property has a special meaning only on Address Book Sync (e.g. a contact can be &#x60;Deleted&#x60;). For simple contact list reading it has always the default value - &#x60;Alive&#x60;
        /// </summary>
        /// <value>This property has a special meaning only on Address Book Sync (e.g. a contact can be &#x60;Deleted&#x60;). For simple contact list reading it has always the default value - &#x60;Alive&#x60;</value>
        [DataMember(Name="availability", EmitDefaultValue=false)]
        public AvailabilityEnum? Availability { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonalContactResource" /> class.
        /// </summary>
        /// <param name="uri">Canonical URI of the contact.</param>
        /// <param name="availability">This property has a special meaning only on Address Book Sync (e.g. a contact can be &#x60;Deleted&#x60;). For simple contact list reading it has always the default value - &#x60;Alive&#x60;.</param>
        /// <param name="email">Email of the contact.</param>
        /// <param name="id">Internal identifier of the contact.</param>
        /// <param name="notes">Notes for the contact.</param>
        /// <param name="company">Company name of the contact.</param>
        /// <param name="firstName">First name of the contact.</param>
        /// <param name="lastName">Last name of the contact.</param>
        /// <param name="jobTitle">Job title of the contact.</param>
        /// <param name="birthday">Date of birth of the contact.</param>
        /// <param name="webPage">The contact home page URL.</param>
        /// <param name="middleName">Middle name of the contact.</param>
        /// <param name="nickName">Nick name of the contact.</param>
        /// <param name="email2">2nd email of the contact.</param>
        /// <param name="email3">3rd email of the contact.</param>
        /// <param name="homePhone">Home phone number of the contact in e.164 (with \&quot;+\&quot;) format.</param>
        /// <param name="homePhone2">2nd home phone number of the contact in e.164 (with \&quot;+\&quot;) format.</param>
        /// <param name="businessPhone">Business phone of the contact in e.164 (with \&quot;+\&quot;) format.</param>
        /// <param name="businessPhone2">2nd business phone of the contact in e.164 (with \&quot;+\&quot;) format.</param>
        /// <param name="mobilePhone">Mobile phone of the contact in e.164 (with \&quot;+\&quot;) format.</param>
        /// <param name="businessFax">Business fax number of the contact in e.164 (with \&quot;+\&quot;) format.</param>
        /// <param name="companyPhone">Company number of the contact in e.164 (with \&quot;+\&quot;) format.</param>
        /// <param name="assistantPhone">Phone number of the contact assistant in e.164 (with \&quot;+\&quot;) format.</param>
        /// <param name="carPhone">Car phone number of the contact in e.164 (with \&quot;+\&quot;) format.</param>
        /// <param name="otherPhone">Other phone number of the contact in e.164 (with \&quot;+\&quot;) format.</param>
        /// <param name="otherFax">Other fax number of the contact in e.164 (with \&quot;+\&quot;) format.</param>
        /// <param name="callbackPhone">Callback phone number of the contact in e.164 (with \&quot;+\&quot;) format.</param>
        /// <param name="businessAddress">businessAddress.</param>
        /// <param name="homeAddress">homeAddress.</param>
        /// <param name="otherAddress">otherAddress.</param>
        /// <param name="ringtoneIndex">Contact ringtone. Max number of symbols is 64.</param>
        public PersonalContactResource(string uri = default(string), AvailabilityEnum? availability = default(AvailabilityEnum?), string email = default(string), long id = default(long), string notes = default(string), string company = default(string), string firstName = default(string), string lastName = default(string), string jobTitle = default(string), DateTime birthday = default(DateTime), string webPage = default(string), string middleName = default(string), string nickName = default(string), string email2 = default(string), string email3 = default(string), string homePhone = default(string), string homePhone2 = default(string), string businessPhone = default(string), string businessPhone2 = default(string), string mobilePhone = default(string), string businessFax = default(string), string companyPhone = default(string), string assistantPhone = default(string), string carPhone = default(string), string otherPhone = default(string), string otherFax = default(string), string callbackPhone = default(string), ContactAddressInfo businessAddress = default(ContactAddressInfo), ContactAddressInfo homeAddress = default(ContactAddressInfo), ContactAddressInfo otherAddress = default(ContactAddressInfo), string ringtoneIndex = default(string))
        {
            this.Uri = uri;
            this.Availability = availability;
            this.Email = email;
            this.Id = id;
            this.Notes = notes;
            this.Company = company;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.JobTitle = jobTitle;
            this.Birthday = birthday;
            this.WebPage = webPage;
            this.MiddleName = middleName;
            this.NickName = nickName;
            this.Email2 = email2;
            this.Email3 = email3;
            this.HomePhone = homePhone;
            this.HomePhone2 = homePhone2;
            this.BusinessPhone = businessPhone;
            this.BusinessPhone2 = businessPhone2;
            this.MobilePhone = mobilePhone;
            this.BusinessFax = businessFax;
            this.CompanyPhone = companyPhone;
            this.AssistantPhone = assistantPhone;
            this.CarPhone = carPhone;
            this.OtherPhone = otherPhone;
            this.OtherFax = otherFax;
            this.CallbackPhone = callbackPhone;
            this.BusinessAddress = businessAddress;
            this.HomeAddress = homeAddress;
            this.OtherAddress = otherAddress;
            this.RingtoneIndex = ringtoneIndex;
        }

        /// <summary>
        /// Canonical URI of the contact
        /// </summary>
        /// <value>Canonical URI of the contact</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }


        /// <summary>
        /// Email of the contact
        /// </summary>
        /// <value>Email of the contact</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Internal identifier of the contact
        /// </summary>
        /// <value>Internal identifier of the contact</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long Id { get; set; }

        /// <summary>
        /// Notes for the contact
        /// </summary>
        /// <value>Notes for the contact</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// Company name of the contact
        /// </summary>
        /// <value>Company name of the contact</value>
        [DataMember(Name="company", EmitDefaultValue=false)]
        public string Company { get; set; }

        /// <summary>
        /// First name of the contact
        /// </summary>
        /// <value>First name of the contact</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Last name of the contact
        /// </summary>
        /// <value>Last name of the contact</value>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Job title of the contact
        /// </summary>
        /// <value>Job title of the contact</value>
        [DataMember(Name="jobTitle", EmitDefaultValue=false)]
        public string JobTitle { get; set; }

        /// <summary>
        /// Date of birth of the contact
        /// </summary>
        /// <value>Date of birth of the contact</value>
        [DataMember(Name="birthday", EmitDefaultValue=false)]
        public DateTime Birthday { get; set; }

        /// <summary>
        /// The contact home page URL
        /// </summary>
        /// <value>The contact home page URL</value>
        [DataMember(Name="webPage", EmitDefaultValue=false)]
        public string WebPage { get; set; }

        /// <summary>
        /// Middle name of the contact
        /// </summary>
        /// <value>Middle name of the contact</value>
        [DataMember(Name="middleName", EmitDefaultValue=false)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Nick name of the contact
        /// </summary>
        /// <value>Nick name of the contact</value>
        [DataMember(Name="nickName", EmitDefaultValue=false)]
        public string NickName { get; set; }

        /// <summary>
        /// 2nd email of the contact
        /// </summary>
        /// <value>2nd email of the contact</value>
        [DataMember(Name="email2", EmitDefaultValue=false)]
        public string Email2 { get; set; }

        /// <summary>
        /// 3rd email of the contact
        /// </summary>
        /// <value>3rd email of the contact</value>
        [DataMember(Name="email3", EmitDefaultValue=false)]
        public string Email3 { get; set; }

        /// <summary>
        /// Home phone number of the contact in e.164 (with \&quot;+\&quot;) format
        /// </summary>
        /// <value>Home phone number of the contact in e.164 (with \&quot;+\&quot;) format</value>
        [DataMember(Name="homePhone", EmitDefaultValue=false)]
        public string HomePhone { get; set; }

        /// <summary>
        /// 2nd home phone number of the contact in e.164 (with \&quot;+\&quot;) format
        /// </summary>
        /// <value>2nd home phone number of the contact in e.164 (with \&quot;+\&quot;) format</value>
        [DataMember(Name="homePhone2", EmitDefaultValue=false)]
        public string HomePhone2 { get; set; }

        /// <summary>
        /// Business phone of the contact in e.164 (with \&quot;+\&quot;) format
        /// </summary>
        /// <value>Business phone of the contact in e.164 (with \&quot;+\&quot;) format</value>
        [DataMember(Name="businessPhone", EmitDefaultValue=false)]
        public string BusinessPhone { get; set; }

        /// <summary>
        /// 2nd business phone of the contact in e.164 (with \&quot;+\&quot;) format
        /// </summary>
        /// <value>2nd business phone of the contact in e.164 (with \&quot;+\&quot;) format</value>
        [DataMember(Name="businessPhone2", EmitDefaultValue=false)]
        public string BusinessPhone2 { get; set; }

        /// <summary>
        /// Mobile phone of the contact in e.164 (with \&quot;+\&quot;) format
        /// </summary>
        /// <value>Mobile phone of the contact in e.164 (with \&quot;+\&quot;) format</value>
        [DataMember(Name="mobilePhone", EmitDefaultValue=false)]
        public string MobilePhone { get; set; }

        /// <summary>
        /// Business fax number of the contact in e.164 (with \&quot;+\&quot;) format
        /// </summary>
        /// <value>Business fax number of the contact in e.164 (with \&quot;+\&quot;) format</value>
        [DataMember(Name="businessFax", EmitDefaultValue=false)]
        public string BusinessFax { get; set; }

        /// <summary>
        /// Company number of the contact in e.164 (with \&quot;+\&quot;) format
        /// </summary>
        /// <value>Company number of the contact in e.164 (with \&quot;+\&quot;) format</value>
        [DataMember(Name="companyPhone", EmitDefaultValue=false)]
        public string CompanyPhone { get; set; }

        /// <summary>
        /// Phone number of the contact assistant in e.164 (with \&quot;+\&quot;) format
        /// </summary>
        /// <value>Phone number of the contact assistant in e.164 (with \&quot;+\&quot;) format</value>
        [DataMember(Name="assistantPhone", EmitDefaultValue=false)]
        public string AssistantPhone { get; set; }

        /// <summary>
        /// Car phone number of the contact in e.164 (with \&quot;+\&quot;) format
        /// </summary>
        /// <value>Car phone number of the contact in e.164 (with \&quot;+\&quot;) format</value>
        [DataMember(Name="carPhone", EmitDefaultValue=false)]
        public string CarPhone { get; set; }

        /// <summary>
        /// Other phone number of the contact in e.164 (with \&quot;+\&quot;) format
        /// </summary>
        /// <value>Other phone number of the contact in e.164 (with \&quot;+\&quot;) format</value>
        [DataMember(Name="otherPhone", EmitDefaultValue=false)]
        public string OtherPhone { get; set; }

        /// <summary>
        /// Other fax number of the contact in e.164 (with \&quot;+\&quot;) format
        /// </summary>
        /// <value>Other fax number of the contact in e.164 (with \&quot;+\&quot;) format</value>
        [DataMember(Name="otherFax", EmitDefaultValue=false)]
        public string OtherFax { get; set; }

        /// <summary>
        /// Callback phone number of the contact in e.164 (with \&quot;+\&quot;) format
        /// </summary>
        /// <value>Callback phone number of the contact in e.164 (with \&quot;+\&quot;) format</value>
        [DataMember(Name="callbackPhone", EmitDefaultValue=false)]
        public string CallbackPhone { get; set; }

        /// <summary>
        /// Gets or Sets BusinessAddress
        /// </summary>
        [DataMember(Name="businessAddress", EmitDefaultValue=false)]
        public ContactAddressInfo BusinessAddress { get; set; }

        /// <summary>
        /// Gets or Sets HomeAddress
        /// </summary>
        [DataMember(Name="homeAddress", EmitDefaultValue=false)]
        public ContactAddressInfo HomeAddress { get; set; }

        /// <summary>
        /// Gets or Sets OtherAddress
        /// </summary>
        [DataMember(Name="otherAddress", EmitDefaultValue=false)]
        public ContactAddressInfo OtherAddress { get; set; }

        /// <summary>
        /// Contact ringtone. Max number of symbols is 64
        /// </summary>
        /// <value>Contact ringtone. Max number of symbols is 64</value>
        [DataMember(Name="ringtoneIndex", EmitDefaultValue=false)]
        public string RingtoneIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PersonalContactResource {\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Availability: ").Append(Availability).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  JobTitle: ").Append(JobTitle).Append("\n");
            sb.Append("  Birthday: ").Append(Birthday).Append("\n");
            sb.Append("  WebPage: ").Append(WebPage).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  NickName: ").Append(NickName).Append("\n");
            sb.Append("  Email2: ").Append(Email2).Append("\n");
            sb.Append("  Email3: ").Append(Email3).Append("\n");
            sb.Append("  HomePhone: ").Append(HomePhone).Append("\n");
            sb.Append("  HomePhone2: ").Append(HomePhone2).Append("\n");
            sb.Append("  BusinessPhone: ").Append(BusinessPhone).Append("\n");
            sb.Append("  BusinessPhone2: ").Append(BusinessPhone2).Append("\n");
            sb.Append("  MobilePhone: ").Append(MobilePhone).Append("\n");
            sb.Append("  BusinessFax: ").Append(BusinessFax).Append("\n");
            sb.Append("  CompanyPhone: ").Append(CompanyPhone).Append("\n");
            sb.Append("  AssistantPhone: ").Append(AssistantPhone).Append("\n");
            sb.Append("  CarPhone: ").Append(CarPhone).Append("\n");
            sb.Append("  OtherPhone: ").Append(OtherPhone).Append("\n");
            sb.Append("  OtherFax: ").Append(OtherFax).Append("\n");
            sb.Append("  CallbackPhone: ").Append(CallbackPhone).Append("\n");
            sb.Append("  BusinessAddress: ").Append(BusinessAddress).Append("\n");
            sb.Append("  HomeAddress: ").Append(HomeAddress).Append("\n");
            sb.Append("  OtherAddress: ").Append(OtherAddress).Append("\n");
            sb.Append("  RingtoneIndex: ").Append(RingtoneIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PersonalContactResource);
        }

        /// <summary>
        /// Returns true if PersonalContactResource instances are equal
        /// </summary>
        /// <param name="input">Instance of PersonalContactResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PersonalContactResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.Availability == input.Availability ||
                    (this.Availability != null &&
                    this.Availability.Equals(input.Availability))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.JobTitle == input.JobTitle ||
                    (this.JobTitle != null &&
                    this.JobTitle.Equals(input.JobTitle))
                ) && 
                (
                    this.Birthday == input.Birthday ||
                    (this.Birthday != null &&
                    this.Birthday.Equals(input.Birthday))
                ) && 
                (
                    this.WebPage == input.WebPage ||
                    (this.WebPage != null &&
                    this.WebPage.Equals(input.WebPage))
                ) && 
                (
                    this.MiddleName == input.MiddleName ||
                    (this.MiddleName != null &&
                    this.MiddleName.Equals(input.MiddleName))
                ) && 
                (
                    this.NickName == input.NickName ||
                    (this.NickName != null &&
                    this.NickName.Equals(input.NickName))
                ) && 
                (
                    this.Email2 == input.Email2 ||
                    (this.Email2 != null &&
                    this.Email2.Equals(input.Email2))
                ) && 
                (
                    this.Email3 == input.Email3 ||
                    (this.Email3 != null &&
                    this.Email3.Equals(input.Email3))
                ) && 
                (
                    this.HomePhone == input.HomePhone ||
                    (this.HomePhone != null &&
                    this.HomePhone.Equals(input.HomePhone))
                ) && 
                (
                    this.HomePhone2 == input.HomePhone2 ||
                    (this.HomePhone2 != null &&
                    this.HomePhone2.Equals(input.HomePhone2))
                ) && 
                (
                    this.BusinessPhone == input.BusinessPhone ||
                    (this.BusinessPhone != null &&
                    this.BusinessPhone.Equals(input.BusinessPhone))
                ) && 
                (
                    this.BusinessPhone2 == input.BusinessPhone2 ||
                    (this.BusinessPhone2 != null &&
                    this.BusinessPhone2.Equals(input.BusinessPhone2))
                ) && 
                (
                    this.MobilePhone == input.MobilePhone ||
                    (this.MobilePhone != null &&
                    this.MobilePhone.Equals(input.MobilePhone))
                ) && 
                (
                    this.BusinessFax == input.BusinessFax ||
                    (this.BusinessFax != null &&
                    this.BusinessFax.Equals(input.BusinessFax))
                ) && 
                (
                    this.CompanyPhone == input.CompanyPhone ||
                    (this.CompanyPhone != null &&
                    this.CompanyPhone.Equals(input.CompanyPhone))
                ) && 
                (
                    this.AssistantPhone == input.AssistantPhone ||
                    (this.AssistantPhone != null &&
                    this.AssistantPhone.Equals(input.AssistantPhone))
                ) && 
                (
                    this.CarPhone == input.CarPhone ||
                    (this.CarPhone != null &&
                    this.CarPhone.Equals(input.CarPhone))
                ) && 
                (
                    this.OtherPhone == input.OtherPhone ||
                    (this.OtherPhone != null &&
                    this.OtherPhone.Equals(input.OtherPhone))
                ) && 
                (
                    this.OtherFax == input.OtherFax ||
                    (this.OtherFax != null &&
                    this.OtherFax.Equals(input.OtherFax))
                ) && 
                (
                    this.CallbackPhone == input.CallbackPhone ||
                    (this.CallbackPhone != null &&
                    this.CallbackPhone.Equals(input.CallbackPhone))
                ) && 
                (
                    this.BusinessAddress == input.BusinessAddress ||
                    (this.BusinessAddress != null &&
                    this.BusinessAddress.Equals(input.BusinessAddress))
                ) && 
                (
                    this.HomeAddress == input.HomeAddress ||
                    (this.HomeAddress != null &&
                    this.HomeAddress.Equals(input.HomeAddress))
                ) && 
                (
                    this.OtherAddress == input.OtherAddress ||
                    (this.OtherAddress != null &&
                    this.OtherAddress.Equals(input.OtherAddress))
                ) && 
                (
                    this.RingtoneIndex == input.RingtoneIndex ||
                    (this.RingtoneIndex != null &&
                    this.RingtoneIndex.Equals(input.RingtoneIndex))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.Availability != null)
                    hashCode = hashCode * 59 + this.Availability.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.Company != null)
                    hashCode = hashCode * 59 + this.Company.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.JobTitle != null)
                    hashCode = hashCode * 59 + this.JobTitle.GetHashCode();
                if (this.Birthday != null)
                    hashCode = hashCode * 59 + this.Birthday.GetHashCode();
                if (this.WebPage != null)
                    hashCode = hashCode * 59 + this.WebPage.GetHashCode();
                if (this.MiddleName != null)
                    hashCode = hashCode * 59 + this.MiddleName.GetHashCode();
                if (this.NickName != null)
                    hashCode = hashCode * 59 + this.NickName.GetHashCode();
                if (this.Email2 != null)
                    hashCode = hashCode * 59 + this.Email2.GetHashCode();
                if (this.Email3 != null)
                    hashCode = hashCode * 59 + this.Email3.GetHashCode();
                if (this.HomePhone != null)
                    hashCode = hashCode * 59 + this.HomePhone.GetHashCode();
                if (this.HomePhone2 != null)
                    hashCode = hashCode * 59 + this.HomePhone2.GetHashCode();
                if (this.BusinessPhone != null)
                    hashCode = hashCode * 59 + this.BusinessPhone.GetHashCode();
                if (this.BusinessPhone2 != null)
                    hashCode = hashCode * 59 + this.BusinessPhone2.GetHashCode();
                if (this.MobilePhone != null)
                    hashCode = hashCode * 59 + this.MobilePhone.GetHashCode();
                if (this.BusinessFax != null)
                    hashCode = hashCode * 59 + this.BusinessFax.GetHashCode();
                if (this.CompanyPhone != null)
                    hashCode = hashCode * 59 + this.CompanyPhone.GetHashCode();
                if (this.AssistantPhone != null)
                    hashCode = hashCode * 59 + this.AssistantPhone.GetHashCode();
                if (this.CarPhone != null)
                    hashCode = hashCode * 59 + this.CarPhone.GetHashCode();
                if (this.OtherPhone != null)
                    hashCode = hashCode * 59 + this.OtherPhone.GetHashCode();
                if (this.OtherFax != null)
                    hashCode = hashCode * 59 + this.OtherFax.GetHashCode();
                if (this.CallbackPhone != null)
                    hashCode = hashCode * 59 + this.CallbackPhone.GetHashCode();
                if (this.BusinessAddress != null)
                    hashCode = hashCode * 59 + this.BusinessAddress.GetHashCode();
                if (this.HomeAddress != null)
                    hashCode = hashCode * 59 + this.HomeAddress.GetHashCode();
                if (this.OtherAddress != null)
                    hashCode = hashCode * 59 + this.OtherAddress.GetHashCode();
                if (this.RingtoneIndex != null)
                    hashCode = hashCode * 59 + this.RingtoneIndex.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
