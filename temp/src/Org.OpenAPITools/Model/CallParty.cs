/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Information on a party of a call session
    /// </summary>
    [DataContract]
    public partial class CallParty :  IEquatable<CallParty>, IValidatableObject
    {
        /// <summary>
        /// Direction of a call
        /// </summary>
        /// <value>Direction of a call</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DirectionEnum
        {
            /// <summary>
            /// Enum Inbound for value: Inbound
            /// </summary>
            [EnumMember(Value = "Inbound")]
            Inbound = 1,

            /// <summary>
            /// Enum Outbound for value: Outbound
            /// </summary>
            [EnumMember(Value = "Outbound")]
            Outbound = 2

        }

        /// <summary>
        /// Direction of a call
        /// </summary>
        /// <value>Direction of a call</value>
        [DataMember(Name="direction", EmitDefaultValue=false)]
        public DirectionEnum? Direction { get; set; }
        /// <summary>
        /// A party&#39;s role in the conference scenarios. For calls of &#39;Conference&#39; type only
        /// </summary>
        /// <value>A party&#39;s role in the conference scenarios. For calls of &#39;Conference&#39; type only</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ConferenceRoleEnum
        {
            /// <summary>
            /// Enum Host for value: Host
            /// </summary>
            [EnumMember(Value = "Host")]
            Host = 1,

            /// <summary>
            /// Enum Participant for value: Participant
            /// </summary>
            [EnumMember(Value = "Participant")]
            Participant = 2

        }

        /// <summary>
        /// A party&#39;s role in the conference scenarios. For calls of &#39;Conference&#39; type only
        /// </summary>
        /// <value>A party&#39;s role in the conference scenarios. For calls of &#39;Conference&#39; type only</value>
        [DataMember(Name="conferenceRole", EmitDefaultValue=false)]
        public ConferenceRoleEnum? ConferenceRole { get; set; }
        /// <summary>
        /// A party&#39;s role in &#39;Ring Me&#39;/&#39;RingOut&#39; scenarios. For calls of &#39;Ringout&#39; type only
        /// </summary>
        /// <value>A party&#39;s role in &#39;Ring Me&#39;/&#39;RingOut&#39; scenarios. For calls of &#39;Ringout&#39; type only</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RingOutRoleEnum
        {
            /// <summary>
            /// Enum Initiator for value: Initiator
            /// </summary>
            [EnumMember(Value = "Initiator")]
            Initiator = 1,

            /// <summary>
            /// Enum Target for value: Target
            /// </summary>
            [EnumMember(Value = "Target")]
            Target = 2

        }

        /// <summary>
        /// A party&#39;s role in &#39;Ring Me&#39;/&#39;RingOut&#39; scenarios. For calls of &#39;Ringout&#39; type only
        /// </summary>
        /// <value>A party&#39;s role in &#39;Ring Me&#39;/&#39;RingOut&#39; scenarios. For calls of &#39;Ringout&#39; type only</value>
        [DataMember(Name="ringOutRole", EmitDefaultValue=false)]
        public RingOutRoleEnum? RingOutRole { get; set; }
        /// <summary>
        /// A party&#39;s role in &#39;Ring Me&#39;/&#39;RingOut&#39; scenarios. For calls of &#39;Ringme&#39; type only
        /// </summary>
        /// <value>A party&#39;s role in &#39;Ring Me&#39;/&#39;RingOut&#39; scenarios. For calls of &#39;Ringme&#39; type only</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RingMeRoleEnum
        {
            /// <summary>
            /// Enum Initiator for value: Initiator
            /// </summary>
            [EnumMember(Value = "Initiator")]
            Initiator = 1,

            /// <summary>
            /// Enum Target for value: Target
            /// </summary>
            [EnumMember(Value = "Target")]
            Target = 2

        }

        /// <summary>
        /// A party&#39;s role in &#39;Ring Me&#39;/&#39;RingOut&#39; scenarios. For calls of &#39;Ringme&#39; type only
        /// </summary>
        /// <value>A party&#39;s role in &#39;Ring Me&#39;/&#39;RingOut&#39; scenarios. For calls of &#39;Ringme&#39; type only</value>
        [DataMember(Name="ringMeRole", EmitDefaultValue=false)]
        public RingMeRoleEnum? RingMeRole { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CallParty" /> class.
        /// </summary>
        /// <param name="id">Internal identifier of a party.</param>
        /// <param name="status">status.</param>
        /// <param name="muted">Specifies if a call participant is muted or not. **Note:** If a call is also controlled via Hard phone or RingCentral App (not only through the API by calling call control methods) then it cannot be fully muted/unmuted via API only, in this case the action should be duplicated via Hard phone/RC App interfaces.</param>
        /// <param name="standAlone">If &#39;True&#39; then the party is not connected to a session voice conference, &#39;False&#39; means the party is connected to other parties in a session.</param>
        /// <param name="park">park.</param>
        /// <param name="from">from.</param>
        /// <param name="to">to.</param>
        /// <param name="owner">owner.</param>
        /// <param name="direction">Direction of a call.</param>
        /// <param name="conferenceRole">A party&#39;s role in the conference scenarios. For calls of &#39;Conference&#39; type only.</param>
        /// <param name="ringOutRole">A party&#39;s role in &#39;Ring Me&#39;/&#39;RingOut&#39; scenarios. For calls of &#39;Ringout&#39; type only.</param>
        /// <param name="ringMeRole">A party&#39;s role in &#39;Ring Me&#39;/&#39;RingOut&#39; scenarios. For calls of &#39;Ringme&#39; type only.</param>
        /// <param name="recordings">Active recordings list.</param>
        public CallParty(string id = default(string), CallStatusInfo status = default(CallStatusInfo), bool muted = default(bool), bool standAlone = default(bool), ParkInfo park = default(ParkInfo), PartyInfo from = default(PartyInfo), PartyInfo to = default(PartyInfo), OwnerInfo owner = default(OwnerInfo), DirectionEnum? direction = default(DirectionEnum?), ConferenceRoleEnum? conferenceRole = default(ConferenceRoleEnum?), RingOutRoleEnum? ringOutRole = default(RingOutRoleEnum?), RingMeRoleEnum? ringMeRole = default(RingMeRoleEnum?), List<RecordingInfo> recordings = default(List<RecordingInfo>))
        {
            this.Id = id;
            this.Status = status;
            this.Muted = muted;
            this.StandAlone = standAlone;
            this.Park = park;
            this.From = from;
            this.To = to;
            this.Owner = owner;
            this.Direction = direction;
            this.ConferenceRole = conferenceRole;
            this.RingOutRole = ringOutRole;
            this.RingMeRole = ringMeRole;
            this.Recordings = recordings;
        }

        /// <summary>
        /// Internal identifier of a party
        /// </summary>
        /// <value>Internal identifier of a party</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public CallStatusInfo Status { get; set; }

        /// <summary>
        /// Specifies if a call participant is muted or not. **Note:** If a call is also controlled via Hard phone or RingCentral App (not only through the API by calling call control methods) then it cannot be fully muted/unmuted via API only, in this case the action should be duplicated via Hard phone/RC App interfaces
        /// </summary>
        /// <value>Specifies if a call participant is muted or not. **Note:** If a call is also controlled via Hard phone or RingCentral App (not only through the API by calling call control methods) then it cannot be fully muted/unmuted via API only, in this case the action should be duplicated via Hard phone/RC App interfaces</value>
        [DataMember(Name="muted", EmitDefaultValue=false)]
        public bool Muted { get; set; }

        /// <summary>
        /// If &#39;True&#39; then the party is not connected to a session voice conference, &#39;False&#39; means the party is connected to other parties in a session
        /// </summary>
        /// <value>If &#39;True&#39; then the party is not connected to a session voice conference, &#39;False&#39; means the party is connected to other parties in a session</value>
        [DataMember(Name="standAlone", EmitDefaultValue=false)]
        public bool StandAlone { get; set; }

        /// <summary>
        /// Gets or Sets Park
        /// </summary>
        [DataMember(Name="park", EmitDefaultValue=false)]
        public ParkInfo Park { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public PartyInfo From { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public PartyInfo To { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name="owner", EmitDefaultValue=false)]
        public OwnerInfo Owner { get; set; }





        /// <summary>
        /// Active recordings list
        /// </summary>
        /// <value>Active recordings list</value>
        [DataMember(Name="recordings", EmitDefaultValue=false)]
        public List<RecordingInfo> Recordings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallParty {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Muted: ").Append(Muted).Append("\n");
            sb.Append("  StandAlone: ").Append(StandAlone).Append("\n");
            sb.Append("  Park: ").Append(Park).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  ConferenceRole: ").Append(ConferenceRole).Append("\n");
            sb.Append("  RingOutRole: ").Append(RingOutRole).Append("\n");
            sb.Append("  RingMeRole: ").Append(RingMeRole).Append("\n");
            sb.Append("  Recordings: ").Append(Recordings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallParty);
        }

        /// <summary>
        /// Returns true if CallParty instances are equal
        /// </summary>
        /// <param name="input">Instance of CallParty to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallParty input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Muted == input.Muted ||
                    (this.Muted != null &&
                    this.Muted.Equals(input.Muted))
                ) && 
                (
                    this.StandAlone == input.StandAlone ||
                    (this.StandAlone != null &&
                    this.StandAlone.Equals(input.StandAlone))
                ) && 
                (
                    this.Park == input.Park ||
                    (this.Park != null &&
                    this.Park.Equals(input.Park))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                ) && 
                (
                    this.ConferenceRole == input.ConferenceRole ||
                    (this.ConferenceRole != null &&
                    this.ConferenceRole.Equals(input.ConferenceRole))
                ) && 
                (
                    this.RingOutRole == input.RingOutRole ||
                    (this.RingOutRole != null &&
                    this.RingOutRole.Equals(input.RingOutRole))
                ) && 
                (
                    this.RingMeRole == input.RingMeRole ||
                    (this.RingMeRole != null &&
                    this.RingMeRole.Equals(input.RingMeRole))
                ) && 
                (
                    this.Recordings == input.Recordings ||
                    this.Recordings != null &&
                    input.Recordings != null &&
                    this.Recordings.SequenceEqual(input.Recordings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Muted != null)
                    hashCode = hashCode * 59 + this.Muted.GetHashCode();
                if (this.StandAlone != null)
                    hashCode = hashCode * 59 + this.StandAlone.GetHashCode();
                if (this.Park != null)
                    hashCode = hashCode * 59 + this.Park.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.Direction != null)
                    hashCode = hashCode * 59 + this.Direction.GetHashCode();
                if (this.ConferenceRole != null)
                    hashCode = hashCode * 59 + this.ConferenceRole.GetHashCode();
                if (this.RingOutRole != null)
                    hashCode = hashCode * 59 + this.RingOutRole.GetHashCode();
                if (this.RingMeRole != null)
                    hashCode = hashCode * 59 + this.RingMeRole.GetHashCode();
                if (this.Recordings != null)
                    hashCode = hashCode * 59 + this.Recordings.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
