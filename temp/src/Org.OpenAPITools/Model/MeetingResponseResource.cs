/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// MeetingResponseResource
    /// </summary>
    [DataContract]
    public partial class MeetingResponseResource :  IEquatable<MeetingResponseResource>, IValidatableObject
    {
        /// <summary>
        /// Defines MeetingType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MeetingTypeEnum
        {
            /// <summary>
            /// Enum Instant for value: Instant
            /// </summary>
            [EnumMember(Value = "Instant")]
            Instant = 1,

            /// <summary>
            /// Enum Scheduled for value: Scheduled
            /// </summary>
            [EnumMember(Value = "Scheduled")]
            Scheduled = 2,

            /// <summary>
            /// Enum ScheduledRecurring for value: ScheduledRecurring
            /// </summary>
            [EnumMember(Value = "ScheduledRecurring")]
            ScheduledRecurring = 3,

            /// <summary>
            /// Enum Recurring for value: Recurring
            /// </summary>
            [EnumMember(Value = "Recurring")]
            Recurring = 4

        }

        /// <summary>
        /// Gets or Sets MeetingType
        /// </summary>
        [DataMember(Name="meetingType", EmitDefaultValue=false)]
        public MeetingTypeEnum? MeetingType { get; set; }
        /// <summary>
        /// Defines AudioOptions
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AudioOptionsEnum
        {
            /// <summary>
            /// Enum Phone for value: Phone
            /// </summary>
            [EnumMember(Value = "Phone")]
            Phone = 1,

            /// <summary>
            /// Enum ComputerAudio for value: ComputerAudio
            /// </summary>
            [EnumMember(Value = "ComputerAudio")]
            ComputerAudio = 2

        }


        /// <summary>
        /// Gets or Sets AudioOptions
        /// </summary>
        [DataMember(Name="audioOptions", EmitDefaultValue=false)]
        public List<AudioOptionsEnum> AudioOptions { get; set; }
        /// <summary>
        /// Automatic record type
        /// </summary>
        /// <value>Automatic record type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AutoRecordTypeEnum
        {
            /// <summary>
            /// Enum Local for value: local
            /// </summary>
            [EnumMember(Value = "local")]
            Local = 1,

            /// <summary>
            /// Enum Cloud for value: cloud
            /// </summary>
            [EnumMember(Value = "cloud")]
            Cloud = 2,

            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 3

        }

        /// <summary>
        /// Automatic record type
        /// </summary>
        /// <value>Automatic record type</value>
        [DataMember(Name="autoRecordType", EmitDefaultValue=false)]
        public AutoRecordTypeEnum? AutoRecordType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MeetingResponseResource" /> class.
        /// </summary>
        /// <param name="uri">Link to a meeting resource.</param>
        /// <param name="uuid">Universally unique identifier of a meeting\&quot;.</param>
        /// <param name="id">Internal identifier of a meeting.</param>
        /// <param name="topic">Custom topic of a meeting.</param>
        /// <param name="meetingType">meetingType.</param>
        /// <param name="password">Meeting password.</param>
        /// <param name="h323Password">h323Password.</param>
        /// <param name="status">Status of a meeting.</param>
        /// <param name="links">links.</param>
        /// <param name="schedule">schedule.</param>
        /// <param name="host">host.</param>
        /// <param name="allowJoinBeforeHost">If true, then participants can join the meeting before host arrives (default to false).</param>
        /// <param name="startHostVideo">Starting meetings with host video on/off (true/false) (default to false).</param>
        /// <param name="startParticipantsVideo">Starting meetings with participant video on/off (true/false) (default to false).</param>
        /// <param name="audioOptions">audioOptions.</param>
        /// <param name="reccurence">reccurence.</param>
        /// <param name="autoRecordType">Automatic record type (default to AutoRecordTypeEnum.None).</param>
        /// <param name="enforceLogin">If true, then only signed-in users can join this meeting.</param>
        /// <param name="muteParticipantsOnEntry">If true, then participants are muted on entry.</param>
        /// <param name="enableWaitingRoom">If true, then the waiting room for participants is enabled.</param>
        /// <param name="globalDialInCountries">List of global dial-in countries (eg. US, UK, AU, etc.).</param>
        public MeetingResponseResource(string uri = default(string), string uuid = default(string), string id = default(string), string topic = default(string), MeetingTypeEnum? meetingType = default(MeetingTypeEnum?), string password = default(string), string h323Password = default(string), string status = default(string), MeetingLinks links = default(MeetingLinks), MeetingScheduleResource schedule = default(MeetingScheduleResource), HostInfoRequest host = default(HostInfoRequest), bool allowJoinBeforeHost = false, bool startHostVideo = false, bool startParticipantsVideo = false, List<AudioOptionsEnum> audioOptions = default(List<AudioOptionsEnum>), RecurrenceInfo reccurence = default(RecurrenceInfo), AutoRecordTypeEnum? autoRecordType = AutoRecordTypeEnum.None, bool enforceLogin = default(bool), bool muteParticipantsOnEntry = default(bool), bool enableWaitingRoom = default(bool), List<string> globalDialInCountries = default(List<string>))
        {
            this.Uri = uri;
            this.Uuid = uuid;
            this.Id = id;
            this.Topic = topic;
            this.MeetingType = meetingType;
            this.Password = password;
            this.H323Password = h323Password;
            this.Status = status;
            this.Links = links;
            this.Schedule = schedule;
            this.Host = host;
            // use default value if no "allowJoinBeforeHost" provided
            if (allowJoinBeforeHost == null)
            {
                this.AllowJoinBeforeHost = false;
            }
            else
            {
                this.AllowJoinBeforeHost = allowJoinBeforeHost;
            }
            // use default value if no "startHostVideo" provided
            if (startHostVideo == null)
            {
                this.StartHostVideo = false;
            }
            else
            {
                this.StartHostVideo = startHostVideo;
            }
            // use default value if no "startParticipantsVideo" provided
            if (startParticipantsVideo == null)
            {
                this.StartParticipantsVideo = false;
            }
            else
            {
                this.StartParticipantsVideo = startParticipantsVideo;
            }
            this.AudioOptions = audioOptions;
            this.Reccurence = reccurence;
            // use default value if no "autoRecordType" provided
            if (autoRecordType == null)
            {
                this.AutoRecordType = AutoRecordTypeEnum.None;
            }
            else
            {
                this.AutoRecordType = autoRecordType;
            }
            this.EnforceLogin = enforceLogin;
            this.MuteParticipantsOnEntry = muteParticipantsOnEntry;
            this.EnableWaitingRoom = enableWaitingRoom;
            this.GlobalDialInCountries = globalDialInCountries;
        }

        /// <summary>
        /// Link to a meeting resource
        /// </summary>
        /// <value>Link to a meeting resource</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Universally unique identifier of a meeting\&quot;
        /// </summary>
        /// <value>Universally unique identifier of a meeting\&quot;</value>
        [DataMember(Name="uuid", EmitDefaultValue=false)]
        public string Uuid { get; set; }

        /// <summary>
        /// Internal identifier of a meeting
        /// </summary>
        /// <value>Internal identifier of a meeting</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Custom topic of a meeting
        /// </summary>
        /// <value>Custom topic of a meeting</value>
        [DataMember(Name="topic", EmitDefaultValue=false)]
        public string Topic { get; set; }


        /// <summary>
        /// Meeting password
        /// </summary>
        /// <value>Meeting password</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets H323Password
        /// </summary>
        [DataMember(Name="h323Password", EmitDefaultValue=false)]
        public string H323Password { get; set; }

        /// <summary>
        /// Status of a meeting
        /// </summary>
        /// <value>Status of a meeting</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public MeetingLinks Links { get; set; }

        /// <summary>
        /// Gets or Sets Schedule
        /// </summary>
        [DataMember(Name="schedule", EmitDefaultValue=false)]
        public MeetingScheduleResource Schedule { get; set; }

        /// <summary>
        /// Gets or Sets Host
        /// </summary>
        [DataMember(Name="host", EmitDefaultValue=false)]
        public HostInfoRequest Host { get; set; }

        /// <summary>
        /// If true, then participants can join the meeting before host arrives
        /// </summary>
        /// <value>If true, then participants can join the meeting before host arrives</value>
        [DataMember(Name="allowJoinBeforeHost", EmitDefaultValue=false)]
        public bool AllowJoinBeforeHost { get; set; }

        /// <summary>
        /// Starting meetings with host video on/off (true/false)
        /// </summary>
        /// <value>Starting meetings with host video on/off (true/false)</value>
        [DataMember(Name="startHostVideo", EmitDefaultValue=false)]
        public bool StartHostVideo { get; set; }

        /// <summary>
        /// Starting meetings with participant video on/off (true/false)
        /// </summary>
        /// <value>Starting meetings with participant video on/off (true/false)</value>
        [DataMember(Name="startParticipantsVideo", EmitDefaultValue=false)]
        public bool StartParticipantsVideo { get; set; }


        /// <summary>
        /// Gets or Sets Reccurence
        /// </summary>
        [DataMember(Name="reccurence", EmitDefaultValue=false)]
        public RecurrenceInfo Reccurence { get; set; }


        /// <summary>
        /// If true, then only signed-in users can join this meeting
        /// </summary>
        /// <value>If true, then only signed-in users can join this meeting</value>
        [DataMember(Name="enforceLogin", EmitDefaultValue=false)]
        public bool EnforceLogin { get; set; }

        /// <summary>
        /// If true, then participants are muted on entry
        /// </summary>
        /// <value>If true, then participants are muted on entry</value>
        [DataMember(Name="muteParticipantsOnEntry", EmitDefaultValue=false)]
        public bool MuteParticipantsOnEntry { get; set; }

        /// <summary>
        /// If true, then the waiting room for participants is enabled
        /// </summary>
        /// <value>If true, then the waiting room for participants is enabled</value>
        [DataMember(Name="enableWaitingRoom", EmitDefaultValue=false)]
        public bool EnableWaitingRoom { get; set; }

        /// <summary>
        /// List of global dial-in countries (eg. US, UK, AU, etc.)
        /// </summary>
        /// <value>List of global dial-in countries (eg. US, UK, AU, etc.)</value>
        [DataMember(Name="globalDialInCountries", EmitDefaultValue=false)]
        public List<string> GlobalDialInCountries { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MeetingResponseResource {\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Topic: ").Append(Topic).Append("\n");
            sb.Append("  MeetingType: ").Append(MeetingType).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  H323Password: ").Append(H323Password).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Schedule: ").Append(Schedule).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  AllowJoinBeforeHost: ").Append(AllowJoinBeforeHost).Append("\n");
            sb.Append("  StartHostVideo: ").Append(StartHostVideo).Append("\n");
            sb.Append("  StartParticipantsVideo: ").Append(StartParticipantsVideo).Append("\n");
            sb.Append("  AudioOptions: ").Append(AudioOptions).Append("\n");
            sb.Append("  Reccurence: ").Append(Reccurence).Append("\n");
            sb.Append("  AutoRecordType: ").Append(AutoRecordType).Append("\n");
            sb.Append("  EnforceLogin: ").Append(EnforceLogin).Append("\n");
            sb.Append("  MuteParticipantsOnEntry: ").Append(MuteParticipantsOnEntry).Append("\n");
            sb.Append("  EnableWaitingRoom: ").Append(EnableWaitingRoom).Append("\n");
            sb.Append("  GlobalDialInCountries: ").Append(GlobalDialInCountries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MeetingResponseResource);
        }

        /// <summary>
        /// Returns true if MeetingResponseResource instances are equal
        /// </summary>
        /// <param name="input">Instance of MeetingResponseResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MeetingResponseResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Topic == input.Topic ||
                    (this.Topic != null &&
                    this.Topic.Equals(input.Topic))
                ) && 
                (
                    this.MeetingType == input.MeetingType ||
                    (this.MeetingType != null &&
                    this.MeetingType.Equals(input.MeetingType))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.H323Password == input.H323Password ||
                    (this.H323Password != null &&
                    this.H323Password.Equals(input.H323Password))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                ) && 
                (
                    this.Schedule == input.Schedule ||
                    (this.Schedule != null &&
                    this.Schedule.Equals(input.Schedule))
                ) && 
                (
                    this.Host == input.Host ||
                    (this.Host != null &&
                    this.Host.Equals(input.Host))
                ) && 
                (
                    this.AllowJoinBeforeHost == input.AllowJoinBeforeHost ||
                    (this.AllowJoinBeforeHost != null &&
                    this.AllowJoinBeforeHost.Equals(input.AllowJoinBeforeHost))
                ) && 
                (
                    this.StartHostVideo == input.StartHostVideo ||
                    (this.StartHostVideo != null &&
                    this.StartHostVideo.Equals(input.StartHostVideo))
                ) && 
                (
                    this.StartParticipantsVideo == input.StartParticipantsVideo ||
                    (this.StartParticipantsVideo != null &&
                    this.StartParticipantsVideo.Equals(input.StartParticipantsVideo))
                ) && 
                (
                    this.AudioOptions == input.AudioOptions ||
                    this.AudioOptions != null &&
                    input.AudioOptions != null &&
                    this.AudioOptions.SequenceEqual(input.AudioOptions)
                ) && 
                (
                    this.Reccurence == input.Reccurence ||
                    (this.Reccurence != null &&
                    this.Reccurence.Equals(input.Reccurence))
                ) && 
                (
                    this.AutoRecordType == input.AutoRecordType ||
                    (this.AutoRecordType != null &&
                    this.AutoRecordType.Equals(input.AutoRecordType))
                ) && 
                (
                    this.EnforceLogin == input.EnforceLogin ||
                    (this.EnforceLogin != null &&
                    this.EnforceLogin.Equals(input.EnforceLogin))
                ) && 
                (
                    this.MuteParticipantsOnEntry == input.MuteParticipantsOnEntry ||
                    (this.MuteParticipantsOnEntry != null &&
                    this.MuteParticipantsOnEntry.Equals(input.MuteParticipantsOnEntry))
                ) && 
                (
                    this.EnableWaitingRoom == input.EnableWaitingRoom ||
                    (this.EnableWaitingRoom != null &&
                    this.EnableWaitingRoom.Equals(input.EnableWaitingRoom))
                ) && 
                (
                    this.GlobalDialInCountries == input.GlobalDialInCountries ||
                    this.GlobalDialInCountries != null &&
                    input.GlobalDialInCountries != null &&
                    this.GlobalDialInCountries.SequenceEqual(input.GlobalDialInCountries)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.Uuid != null)
                    hashCode = hashCode * 59 + this.Uuid.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Topic != null)
                    hashCode = hashCode * 59 + this.Topic.GetHashCode();
                if (this.MeetingType != null)
                    hashCode = hashCode * 59 + this.MeetingType.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.H323Password != null)
                    hashCode = hashCode * 59 + this.H323Password.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                if (this.Schedule != null)
                    hashCode = hashCode * 59 + this.Schedule.GetHashCode();
                if (this.Host != null)
                    hashCode = hashCode * 59 + this.Host.GetHashCode();
                if (this.AllowJoinBeforeHost != null)
                    hashCode = hashCode * 59 + this.AllowJoinBeforeHost.GetHashCode();
                if (this.StartHostVideo != null)
                    hashCode = hashCode * 59 + this.StartHostVideo.GetHashCode();
                if (this.StartParticipantsVideo != null)
                    hashCode = hashCode * 59 + this.StartParticipantsVideo.GetHashCode();
                if (this.AudioOptions != null)
                    hashCode = hashCode * 59 + this.AudioOptions.GetHashCode();
                if (this.Reccurence != null)
                    hashCode = hashCode * 59 + this.Reccurence.GetHashCode();
                if (this.AutoRecordType != null)
                    hashCode = hashCode * 59 + this.AutoRecordType.GetHashCode();
                if (this.EnforceLogin != null)
                    hashCode = hashCode * 59 + this.EnforceLogin.GetHashCode();
                if (this.MuteParticipantsOnEntry != null)
                    hashCode = hashCode * 59 + this.MuteParticipantsOnEntry.GetHashCode();
                if (this.EnableWaitingRoom != null)
                    hashCode = hashCode * 59 + this.EnableWaitingRoom.GetHashCode();
                if (this.GlobalDialInCountries != null)
                    hashCode = hashCode * 59 + this.GlobalDialInCountries.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
