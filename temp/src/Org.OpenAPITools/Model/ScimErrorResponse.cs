/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ScimErrorResponse
    /// </summary>
    [DataContract]
    public partial class ScimErrorResponse :  IEquatable<ScimErrorResponse>, IValidatableObject
    {
        /// <summary>
        /// Defines Schemas
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SchemasEnum
        {
            /// <summary>
            /// Enum Urnietfparamsscimapimessages20Error for value: urn:ietf:params:scim:api:messages:2.0:Error
            /// </summary>
            [EnumMember(Value = "urn:ietf:params:scim:api:messages:2.0:Error")]
            Urnietfparamsscimapimessages20Error = 1

        }


        /// <summary>
        /// Gets or Sets Schemas
        /// </summary>
        [DataMember(Name="schemas", EmitDefaultValue=false)]
        public List<SchemasEnum> Schemas { get; set; }
        /// <summary>
        /// bad request type when status code is 400
        /// </summary>
        /// <value>bad request type when status code is 400</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScimTypeEnum
        {
            /// <summary>
            /// Enum Uniqueness for value: uniqueness
            /// </summary>
            [EnumMember(Value = "uniqueness")]
            Uniqueness = 1,

            /// <summary>
            /// Enum TooMany for value: tooMany
            /// </summary>
            [EnumMember(Value = "tooMany")]
            TooMany = 2,

            /// <summary>
            /// Enum Mutability for value: mutability
            /// </summary>
            [EnumMember(Value = "mutability")]
            Mutability = 3,

            /// <summary>
            /// Enum Sensitive for value: sensitive
            /// </summary>
            [EnumMember(Value = "sensitive")]
            Sensitive = 4,

            /// <summary>
            /// Enum InvalidSyntax for value: invalidSyntax
            /// </summary>
            [EnumMember(Value = "invalidSyntax")]
            InvalidSyntax = 5,

            /// <summary>
            /// Enum InvalidFilter for value: invalidFilter
            /// </summary>
            [EnumMember(Value = "invalidFilter")]
            InvalidFilter = 6,

            /// <summary>
            /// Enum InvalidPath for value: invalidPath
            /// </summary>
            [EnumMember(Value = "invalidPath")]
            InvalidPath = 7,

            /// <summary>
            /// Enum InvalidValue for value: invalidValue
            /// </summary>
            [EnumMember(Value = "invalidValue")]
            InvalidValue = 8,

            /// <summary>
            /// Enum InvalidVers for value: invalidVers
            /// </summary>
            [EnumMember(Value = "invalidVers")]
            InvalidVers = 9,

            /// <summary>
            /// Enum NoTarget for value: noTarget
            /// </summary>
            [EnumMember(Value = "noTarget")]
            NoTarget = 10

        }

        /// <summary>
        /// bad request type when status code is 400
        /// </summary>
        /// <value>bad request type when status code is 400</value>
        [DataMember(Name="scimType", EmitDefaultValue=false)]
        public ScimTypeEnum? ScimType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScimErrorResponse" /> class.
        /// </summary>
        /// <param name="detail">detail error message.</param>
        /// <param name="schemas">schemas.</param>
        /// <param name="scimType">bad request type when status code is 400.</param>
        /// <param name="status">same as HTTP status code, e.g. 400, 401, etc..</param>
        public ScimErrorResponse(string detail = default(string), List<SchemasEnum> schemas = default(List<SchemasEnum>), ScimTypeEnum? scimType = default(ScimTypeEnum?), string status = default(string))
        {
            this.Detail = detail;
            this.Schemas = schemas;
            this.ScimType = scimType;
            this.Status = status;
        }

        /// <summary>
        /// detail error message
        /// </summary>
        /// <value>detail error message</value>
        [DataMember(Name="detail", EmitDefaultValue=false)]
        public string Detail { get; set; }



        /// <summary>
        /// same as HTTP status code, e.g. 400, 401, etc.
        /// </summary>
        /// <value>same as HTTP status code, e.g. 400, 401, etc.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScimErrorResponse {\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("  Schemas: ").Append(Schemas).Append("\n");
            sb.Append("  ScimType: ").Append(ScimType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScimErrorResponse);
        }

        /// <summary>
        /// Returns true if ScimErrorResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ScimErrorResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScimErrorResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Detail == input.Detail ||
                    (this.Detail != null &&
                    this.Detail.Equals(input.Detail))
                ) && 
                (
                    this.Schemas == input.Schemas ||
                    this.Schemas != null &&
                    input.Schemas != null &&
                    this.Schemas.SequenceEqual(input.Schemas)
                ) && 
                (
                    this.ScimType == input.ScimType ||
                    (this.ScimType != null &&
                    this.ScimType.Equals(input.ScimType))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Detail != null)
                    hashCode = hashCode * 59 + this.Detail.GetHashCode();
                if (this.Schemas != null)
                    hashCode = hashCode * 59 + this.Schemas.GetHashCode();
                if (this.ScimType != null)
                    hashCode = hashCode * 59 + this.ScimType.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
