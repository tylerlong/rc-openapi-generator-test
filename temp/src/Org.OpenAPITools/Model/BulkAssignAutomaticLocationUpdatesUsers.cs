/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BulkAssignAutomaticLocationUpdatesUsers
    /// </summary>
    [DataContract]
    public partial class BulkAssignAutomaticLocationUpdatesUsers :  IEquatable<BulkAssignAutomaticLocationUpdatesUsers>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BulkAssignAutomaticLocationUpdatesUsers" /> class.
        /// </summary>
        /// <param name="enabledUserIds">enabledUserIds.</param>
        /// <param name="disabledUserIds">disabledUserIds.</param>
        public BulkAssignAutomaticLocationUpdatesUsers(List<string> enabledUserIds = default(List<string>), List<string> disabledUserIds = default(List<string>))
        {
            this.EnabledUserIds = enabledUserIds;
            this.DisabledUserIds = disabledUserIds;
        }

        /// <summary>
        /// Gets or Sets EnabledUserIds
        /// </summary>
        [DataMember(Name="enabledUserIds", EmitDefaultValue=false)]
        public List<string> EnabledUserIds { get; set; }

        /// <summary>
        /// Gets or Sets DisabledUserIds
        /// </summary>
        [DataMember(Name="disabledUserIds", EmitDefaultValue=false)]
        public List<string> DisabledUserIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BulkAssignAutomaticLocationUpdatesUsers {\n");
            sb.Append("  EnabledUserIds: ").Append(EnabledUserIds).Append("\n");
            sb.Append("  DisabledUserIds: ").Append(DisabledUserIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BulkAssignAutomaticLocationUpdatesUsers);
        }

        /// <summary>
        /// Returns true if BulkAssignAutomaticLocationUpdatesUsers instances are equal
        /// </summary>
        /// <param name="input">Instance of BulkAssignAutomaticLocationUpdatesUsers to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BulkAssignAutomaticLocationUpdatesUsers input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EnabledUserIds == input.EnabledUserIds ||
                    this.EnabledUserIds != null &&
                    input.EnabledUserIds != null &&
                    this.EnabledUserIds.SequenceEqual(input.EnabledUserIds)
                ) && 
                (
                    this.DisabledUserIds == input.DisabledUserIds ||
                    this.DisabledUserIds != null &&
                    input.DisabledUserIds != null &&
                    this.DisabledUserIds.SequenceEqual(input.DisabledUserIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EnabledUserIds != null)
                    hashCode = hashCode * 59 + this.EnabledUserIds.GetHashCode();
                if (this.DisabledUserIds != null)
                    hashCode = hashCode * 59 + this.DisabledUserIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
