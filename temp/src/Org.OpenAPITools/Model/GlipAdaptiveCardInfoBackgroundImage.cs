/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Specifies the background image of a card
    /// </summary>
    [DataContract]
    public partial class GlipAdaptiveCardInfoBackgroundImage :  IEquatable<GlipAdaptiveCardInfoBackgroundImage>, IValidatableObject
    {
        /// <summary>
        /// Must be &#x60;BackgroundImage&#x60;
        /// </summary>
        /// <value>Must be &#x60;BackgroundImage&#x60;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum BackgroundImage for value: BackgroundImage
            /// </summary>
            [EnumMember(Value = "BackgroundImage")]
            BackgroundImage = 1

        }

        /// <summary>
        /// Must be &#x60;BackgroundImage&#x60;
        /// </summary>
        /// <value>Must be &#x60;BackgroundImage&#x60;</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GlipAdaptiveCardInfoBackgroundImage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GlipAdaptiveCardInfoBackgroundImage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GlipAdaptiveCardInfoBackgroundImage" /> class.
        /// </summary>
        /// <param name="type">Must be &#x60;BackgroundImage&#x60;.</param>
        /// <param name="url">The URL/data URL of an image to be used as a background of a card. Acceptable formats are PNG, JPEG, and GIF (required).</param>
        /// <param name="fillMode">fillMode.</param>
        /// <param name="horizontalAlignment">horizontalAlignment.</param>
        /// <param name="verticalAlignment">verticalAlignment.</param>
        public GlipAdaptiveCardInfoBackgroundImage(TypeEnum? type = default(TypeEnum?), string url = default(string), ImageFillMode fillMode = default(ImageFillMode), HorizontalAlignment horizontalAlignment = default(HorizontalAlignment), VerticalAlignment verticalAlignment = default(VerticalAlignment))
        {
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new InvalidDataException("url is a required property for GlipAdaptiveCardInfoBackgroundImage and cannot be null");
            }
            else
            {
                this.Url = url;
            }

            this.Type = type;
            this.FillMode = fillMode;
            this.HorizontalAlignment = horizontalAlignment;
            this.VerticalAlignment = verticalAlignment;
        }


        /// <summary>
        /// The URL/data URL of an image to be used as a background of a card. Acceptable formats are PNG, JPEG, and GIF
        /// </summary>
        /// <value>The URL/data URL of an image to be used as a background of a card. Acceptable formats are PNG, JPEG, and GIF</value>
        [DataMember(Name="url", EmitDefaultValue=true)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets FillMode
        /// </summary>
        [DataMember(Name="fillMode", EmitDefaultValue=false)]
        public ImageFillMode FillMode { get; set; }

        /// <summary>
        /// Gets or Sets HorizontalAlignment
        /// </summary>
        [DataMember(Name="horizontalAlignment", EmitDefaultValue=false)]
        public HorizontalAlignment HorizontalAlignment { get; set; }

        /// <summary>
        /// Gets or Sets VerticalAlignment
        /// </summary>
        [DataMember(Name="verticalAlignment", EmitDefaultValue=false)]
        public VerticalAlignment VerticalAlignment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlipAdaptiveCardInfoBackgroundImage {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  FillMode: ").Append(FillMode).Append("\n");
            sb.Append("  HorizontalAlignment: ").Append(HorizontalAlignment).Append("\n");
            sb.Append("  VerticalAlignment: ").Append(VerticalAlignment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GlipAdaptiveCardInfoBackgroundImage);
        }

        /// <summary>
        /// Returns true if GlipAdaptiveCardInfoBackgroundImage instances are equal
        /// </summary>
        /// <param name="input">Instance of GlipAdaptiveCardInfoBackgroundImage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlipAdaptiveCardInfoBackgroundImage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.FillMode == input.FillMode ||
                    (this.FillMode != null &&
                    this.FillMode.Equals(input.FillMode))
                ) && 
                (
                    this.HorizontalAlignment == input.HorizontalAlignment ||
                    (this.HorizontalAlignment != null &&
                    this.HorizontalAlignment.Equals(input.HorizontalAlignment))
                ) && 
                (
                    this.VerticalAlignment == input.VerticalAlignment ||
                    (this.VerticalAlignment != null &&
                    this.VerticalAlignment.Equals(input.VerticalAlignment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.FillMode != null)
                    hashCode = hashCode * 59 + this.FillMode.GetHashCode();
                if (this.HorizontalAlignment != null)
                    hashCode = hashCode * 59 + this.HorizontalAlignment.GetHashCode();
                if (this.VerticalAlignment != null)
                    hashCode = hashCode * 59 + this.VerticalAlignment.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
