/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Session origin details
    /// </summary>
    [DataContract]
    public partial class OriginInfo :  IEquatable<OriginInfo>, IValidatableObject
    {
        /// <summary>
        /// Session origin type
        /// </summary>
        /// <value>Session origin type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Call for value: Call
            /// </summary>
            [EnumMember(Value = "Call")]
            Call = 1,

            /// <summary>
            /// Enum RingOut for value: RingOut
            /// </summary>
            [EnumMember(Value = "RingOut")]
            RingOut = 2,

            /// <summary>
            /// Enum RingMe for value: RingMe
            /// </summary>
            [EnumMember(Value = "RingMe")]
            RingMe = 3,

            /// <summary>
            /// Enum Conference for value: Conference
            /// </summary>
            [EnumMember(Value = "Conference")]
            Conference = 4,

            /// <summary>
            /// Enum GreetingsRecording for value: GreetingsRecording
            /// </summary>
            [EnumMember(Value = "GreetingsRecording")]
            GreetingsRecording = 5,

            /// <summary>
            /// Enum VerificationCall for value: VerificationCall
            /// </summary>
            [EnumMember(Value = "VerificationCall")]
            VerificationCall = 6,

            /// <summary>
            /// Enum Zoom for value: Zoom
            /// </summary>
            [EnumMember(Value = "Zoom")]
            Zoom = 7,

            /// <summary>
            /// Enum CallOut for value: CallOut
            /// </summary>
            [EnumMember(Value = "CallOut")]
            CallOut = 8

        }

        /// <summary>
        /// Session origin type
        /// </summary>
        /// <value>Session origin type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OriginInfo" /> class.
        /// </summary>
        /// <param name="type">Session origin type.</param>
        public OriginInfo(TypeEnum? type = default(TypeEnum?))
        {
            this.Type = type;
        }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OriginInfo {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OriginInfo);
        }

        /// <summary>
        /// Returns true if OriginInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of OriginInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OriginInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
