/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CreateWirelessPoint
    /// </summary>
    [DataContract]
    public partial class CreateWirelessPoint :  IEquatable<CreateWirelessPoint>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateWirelessPoint" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateWirelessPoint() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateWirelessPoint" /> class.
        /// </summary>
        /// <param name="bssid">Unique 48-bit identifier of wireless access point complying with MAC address conventions. The Mask is XX:XX:XX:XX:XX:XX, where X can be a symbol in the range of 0-9 or A-F (required).</param>
        /// <param name="name">Wireless access point name (required).</param>
        /// <param name="site">site.</param>
        /// <param name="emergencyAddress">emergencyAddress.</param>
        /// <param name="emergencyLocationId">Deprecated. Internal identifier of the emergency response location (address). Only one of a pair &#x60;emergencyAddress&#x60; or &#x60;emergencyLocationId&#x60; should be specified, otherwise the error is returned.</param>
        /// <param name="emergencyLocation">emergencyLocation.</param>
        public CreateWirelessPoint(string bssid = default(string), string name = default(string), AutomaticLocationUpdatesSiteInfo site = default(AutomaticLocationUpdatesSiteInfo), LocationUpdatesEmergencyAddressInfoRequest emergencyAddress = default(LocationUpdatesEmergencyAddressInfoRequest), string emergencyLocationId = default(string), ERLLocationInfo emergencyLocation = default(ERLLocationInfo))
        {
            // to ensure "bssid" is required (not null)
            if (bssid == null)
            {
                throw new InvalidDataException("bssid is a required property for CreateWirelessPoint and cannot be null");
            }
            else
            {
                this.Bssid = bssid;
            }

            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for CreateWirelessPoint and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            this.Site = site;
            this.EmergencyAddress = emergencyAddress;
            this.EmergencyLocationId = emergencyLocationId;
            this.EmergencyLocation = emergencyLocation;
        }

        /// <summary>
        /// Unique 48-bit identifier of wireless access point complying with MAC address conventions. The Mask is XX:XX:XX:XX:XX:XX, where X can be a symbol in the range of 0-9 or A-F
        /// </summary>
        /// <value>Unique 48-bit identifier of wireless access point complying with MAC address conventions. The Mask is XX:XX:XX:XX:XX:XX, where X can be a symbol in the range of 0-9 or A-F</value>
        [DataMember(Name="bssid", EmitDefaultValue=true)]
        public string Bssid { get; set; }

        /// <summary>
        /// Wireless access point name
        /// </summary>
        /// <value>Wireless access point name</value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Site
        /// </summary>
        [DataMember(Name="site", EmitDefaultValue=false)]
        public AutomaticLocationUpdatesSiteInfo Site { get; set; }

        /// <summary>
        /// Gets or Sets EmergencyAddress
        /// </summary>
        [DataMember(Name="emergencyAddress", EmitDefaultValue=false)]
        public LocationUpdatesEmergencyAddressInfoRequest EmergencyAddress { get; set; }

        /// <summary>
        /// Deprecated. Internal identifier of the emergency response location (address). Only one of a pair &#x60;emergencyAddress&#x60; or &#x60;emergencyLocationId&#x60; should be specified, otherwise the error is returned
        /// </summary>
        /// <value>Deprecated. Internal identifier of the emergency response location (address). Only one of a pair &#x60;emergencyAddress&#x60; or &#x60;emergencyLocationId&#x60; should be specified, otherwise the error is returned</value>
        [DataMember(Name="emergencyLocationId", EmitDefaultValue=false)]
        public string EmergencyLocationId { get; set; }

        /// <summary>
        /// Gets or Sets EmergencyLocation
        /// </summary>
        [DataMember(Name="emergencyLocation", EmitDefaultValue=false)]
        public ERLLocationInfo EmergencyLocation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateWirelessPoint {\n");
            sb.Append("  Bssid: ").Append(Bssid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Site: ").Append(Site).Append("\n");
            sb.Append("  EmergencyAddress: ").Append(EmergencyAddress).Append("\n");
            sb.Append("  EmergencyLocationId: ").Append(EmergencyLocationId).Append("\n");
            sb.Append("  EmergencyLocation: ").Append(EmergencyLocation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateWirelessPoint);
        }

        /// <summary>
        /// Returns true if CreateWirelessPoint instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateWirelessPoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateWirelessPoint input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Bssid == input.Bssid ||
                    (this.Bssid != null &&
                    this.Bssid.Equals(input.Bssid))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Site == input.Site ||
                    (this.Site != null &&
                    this.Site.Equals(input.Site))
                ) && 
                (
                    this.EmergencyAddress == input.EmergencyAddress ||
                    (this.EmergencyAddress != null &&
                    this.EmergencyAddress.Equals(input.EmergencyAddress))
                ) && 
                (
                    this.EmergencyLocationId == input.EmergencyLocationId ||
                    (this.EmergencyLocationId != null &&
                    this.EmergencyLocationId.Equals(input.EmergencyLocationId))
                ) && 
                (
                    this.EmergencyLocation == input.EmergencyLocation ||
                    (this.EmergencyLocation != null &&
                    this.EmergencyLocation.Equals(input.EmergencyLocation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Bssid != null)
                    hashCode = hashCode * 59 + this.Bssid.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Site != null)
                    hashCode = hashCode * 59 + this.Site.GetHashCode();
                if (this.EmergencyAddress != null)
                    hashCode = hashCode * 59 + this.EmergencyAddress.GetHashCode();
                if (this.EmergencyLocationId != null)
                    hashCode = hashCode * 59 + this.EmergencyLocationId.GetHashCode();
                if (this.EmergencyLocation != null)
                    hashCode = hashCode * 59 + this.EmergencyLocation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
