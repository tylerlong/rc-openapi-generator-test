/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Information on account billing plan
    /// </summary>
    [DataContract]
    public partial class BillingPlanInfo :  IEquatable<BillingPlanInfo>, IValidatableObject
    {
        /// <summary>
        /// Duration period
        /// </summary>
        /// <value>Duration period</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DurationUnitEnum
        {
            /// <summary>
            /// Enum Day for value: Day
            /// </summary>
            [EnumMember(Value = "Day")]
            Day = 1,

            /// <summary>
            /// Enum Month for value: Month
            /// </summary>
            [EnumMember(Value = "Month")]
            Month = 2,

            /// <summary>
            /// Enum Year for value: Year
            /// </summary>
            [EnumMember(Value = "Year")]
            Year = 3

        }

        /// <summary>
        /// Duration period
        /// </summary>
        /// <value>Duration period</value>
        [DataMember(Name="durationUnit", EmitDefaultValue=false)]
        public DurationUnitEnum? DurationUnit { get; set; }
        /// <summary>
        /// Billing plan type
        /// </summary>
        /// <value>Billing plan type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Initial for value: Initial
            /// </summary>
            [EnumMember(Value = "Initial")]
            Initial = 1,

            /// <summary>
            /// Enum Regular for value: Regular
            /// </summary>
            [EnumMember(Value = "Regular")]
            Regular = 2,

            /// <summary>
            /// Enum Suspended for value: Suspended
            /// </summary>
            [EnumMember(Value = "Suspended")]
            Suspended = 3,

            /// <summary>
            /// Enum Trial for value: Trial
            /// </summary>
            [EnumMember(Value = "Trial")]
            Trial = 4,

            /// <summary>
            /// Enum TrialNoCC for value: TrialNoCC
            /// </summary>
            [EnumMember(Value = "TrialNoCC")]
            TrialNoCC = 5,

            /// <summary>
            /// Enum Free for value: Free
            /// </summary>
            [EnumMember(Value = "Free")]
            Free = 6

        }

        /// <summary>
        /// Billing plan type
        /// </summary>
        /// <value>Billing plan type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BillingPlanInfo" /> class.
        /// </summary>
        /// <param name="id">Internal identifier of a billing plan.</param>
        /// <param name="name">Billing plan name.</param>
        /// <param name="durationUnit">Duration period.</param>
        /// <param name="duration">Number of duration units.</param>
        /// <param name="type">Billing plan type.</param>
        /// <param name="includedPhoneLines">Included digital lines count.</param>
        public BillingPlanInfo(string id = default(string), string name = default(string), DurationUnitEnum? durationUnit = default(DurationUnitEnum?), int duration = default(int), TypeEnum? type = default(TypeEnum?), int includedPhoneLines = default(int))
        {
            this.Id = id;
            this.Name = name;
            this.DurationUnit = durationUnit;
            this.Duration = duration;
            this.Type = type;
            this.IncludedPhoneLines = includedPhoneLines;
        }

        /// <summary>
        /// Internal identifier of a billing plan
        /// </summary>
        /// <value>Internal identifier of a billing plan</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Billing plan name
        /// </summary>
        /// <value>Billing plan name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Number of duration units
        /// </summary>
        /// <value>Number of duration units</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public int Duration { get; set; }


        /// <summary>
        /// Included digital lines count
        /// </summary>
        /// <value>Included digital lines count</value>
        [DataMember(Name="includedPhoneLines", EmitDefaultValue=false)]
        public int IncludedPhoneLines { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BillingPlanInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DurationUnit: ").Append(DurationUnit).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IncludedPhoneLines: ").Append(IncludedPhoneLines).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BillingPlanInfo);
        }

        /// <summary>
        /// Returns true if BillingPlanInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of BillingPlanInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillingPlanInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DurationUnit == input.DurationUnit ||
                    (this.DurationUnit != null &&
                    this.DurationUnit.Equals(input.DurationUnit))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.IncludedPhoneLines == input.IncludedPhoneLines ||
                    (this.IncludedPhoneLines != null &&
                    this.IncludedPhoneLines.Equals(input.IncludedPhoneLines))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.DurationUnit != null)
                    hashCode = hashCode * 59 + this.DurationUnit.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.IncludedPhoneLines != null)
                    hashCode = hashCode * 59 + this.IncludedPhoneLines.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
