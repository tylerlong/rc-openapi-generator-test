/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Account service information, including brand, service plan and billing plan
    /// </summary>
    [DataContract]
    public partial class ServiceInfo :  IEquatable<ServiceInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceInfo" /> class.
        /// </summary>
        /// <param name="uri">Canonical URI of a service info resource.</param>
        /// <param name="billingPlan">billingPlan.</param>
        /// <param name="brand">brand.</param>
        /// <param name="servicePlan">servicePlan.</param>
        /// <param name="targetServicePlan">targetServicePlan.</param>
        /// <param name="contractedCountry">contractedCountry.</param>
        public ServiceInfo(string uri = default(string), BillingPlanInfo billingPlan = default(BillingPlanInfo), BrandInfo brand = default(BrandInfo), ServicePlanInfo servicePlan = default(ServicePlanInfo), TargetServicePlanInfo targetServicePlan = default(TargetServicePlanInfo), ContractedCountryInfo contractedCountry = default(ContractedCountryInfo))
        {
            this.Uri = uri;
            this.BillingPlan = billingPlan;
            this.Brand = brand;
            this.ServicePlan = servicePlan;
            this.TargetServicePlan = targetServicePlan;
            this.ContractedCountry = contractedCountry;
        }

        /// <summary>
        /// Canonical URI of a service info resource
        /// </summary>
        /// <value>Canonical URI of a service info resource</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Gets or Sets BillingPlan
        /// </summary>
        [DataMember(Name="billingPlan", EmitDefaultValue=false)]
        public BillingPlanInfo BillingPlan { get; set; }

        /// <summary>
        /// Gets or Sets Brand
        /// </summary>
        [DataMember(Name="brand", EmitDefaultValue=false)]
        public BrandInfo Brand { get; set; }

        /// <summary>
        /// Gets or Sets ServicePlan
        /// </summary>
        [DataMember(Name="servicePlan", EmitDefaultValue=false)]
        public ServicePlanInfo ServicePlan { get; set; }

        /// <summary>
        /// Gets or Sets TargetServicePlan
        /// </summary>
        [DataMember(Name="targetServicePlan", EmitDefaultValue=false)]
        public TargetServicePlanInfo TargetServicePlan { get; set; }

        /// <summary>
        /// Gets or Sets ContractedCountry
        /// </summary>
        [DataMember(Name="contractedCountry", EmitDefaultValue=false)]
        public ContractedCountryInfo ContractedCountry { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServiceInfo {\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  BillingPlan: ").Append(BillingPlan).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  ServicePlan: ").Append(ServicePlan).Append("\n");
            sb.Append("  TargetServicePlan: ").Append(TargetServicePlan).Append("\n");
            sb.Append("  ContractedCountry: ").Append(ContractedCountry).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServiceInfo);
        }

        /// <summary>
        /// Returns true if ServiceInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ServiceInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.BillingPlan == input.BillingPlan ||
                    (this.BillingPlan != null &&
                    this.BillingPlan.Equals(input.BillingPlan))
                ) && 
                (
                    this.Brand == input.Brand ||
                    (this.Brand != null &&
                    this.Brand.Equals(input.Brand))
                ) && 
                (
                    this.ServicePlan == input.ServicePlan ||
                    (this.ServicePlan != null &&
                    this.ServicePlan.Equals(input.ServicePlan))
                ) && 
                (
                    this.TargetServicePlan == input.TargetServicePlan ||
                    (this.TargetServicePlan != null &&
                    this.TargetServicePlan.Equals(input.TargetServicePlan))
                ) && 
                (
                    this.ContractedCountry == input.ContractedCountry ||
                    (this.ContractedCountry != null &&
                    this.ContractedCountry.Equals(input.ContractedCountry))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.BillingPlan != null)
                    hashCode = hashCode * 59 + this.BillingPlan.GetHashCode();
                if (this.Brand != null)
                    hashCode = hashCode * 59 + this.Brand.GetHashCode();
                if (this.ServicePlan != null)
                    hashCode = hashCode * 59 + this.ServicePlan.GetHashCode();
                if (this.TargetServicePlan != null)
                    hashCode = hashCode * 59 + this.TargetServicePlan.GetHashCode();
                if (this.ContractedCountry != null)
                    hashCode = hashCode * 59 + this.ContractedCountry.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
