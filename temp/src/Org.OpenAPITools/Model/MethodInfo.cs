/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Shipping method information
    /// </summary>
    [DataContract]
    public partial class MethodInfo :  IEquatable<MethodInfo>, IValidatableObject
    {
        /// <summary>
        /// Method identifier. The default value is 1 (Ground)
        /// </summary>
        /// <value>Method identifier. The default value is 1 (Ground)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IdEnum
        {
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1 = 1,

            /// <summary>
            /// Enum _2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            _2 = 2,

            /// <summary>
            /// Enum _3 for value: 3
            /// </summary>
            [EnumMember(Value = "3")]
            _3 = 3

        }

        /// <summary>
        /// Method identifier. The default value is 1 (Ground)
        /// </summary>
        /// <value>Method identifier. The default value is 1 (Ground)</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public IdEnum? Id { get; set; }
        /// <summary>
        /// Method name, corresponding to the identifier
        /// </summary>
        /// <value>Method name, corresponding to the identifier</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NameEnum
        {
            /// <summary>
            /// Enum Ground for value: Ground
            /// </summary>
            [EnumMember(Value = "Ground")]
            Ground = 1,

            /// <summary>
            /// Enum _2Day for value: 2 Day
            /// </summary>
            [EnumMember(Value = "2 Day")]
            _2Day = 2,

            /// <summary>
            /// Enum Overnight for value: Overnight
            /// </summary>
            [EnumMember(Value = "Overnight")]
            Overnight = 3

        }

        /// <summary>
        /// Method name, corresponding to the identifier
        /// </summary>
        /// <value>Method name, corresponding to the identifier</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public NameEnum? Name { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MethodInfo" /> class.
        /// </summary>
        /// <param name="id">Method identifier. The default value is 1 (Ground).</param>
        /// <param name="name">Method name, corresponding to the identifier.</param>
        public MethodInfo(IdEnum? id = default(IdEnum?), NameEnum? name = default(NameEnum?))
        {
            this.Id = id;
            this.Name = name;
        }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MethodInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MethodInfo);
        }

        /// <summary>
        /// Returns true if MethodInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of MethodInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MethodInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
