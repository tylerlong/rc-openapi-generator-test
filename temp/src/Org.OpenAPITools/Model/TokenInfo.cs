/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TokenInfo
    /// </summary>
    [DataContract]
    public partial class TokenInfo :  IEquatable<TokenInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TokenInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenInfo" /> class.
        /// </summary>
        /// <param name="accessToken">OAuth access token to pass to subsequent API requests (required).</param>
        /// <param name="expiresIn">Issued access token TTL (time-to-live) in seconds (required).</param>
        /// <param name="refreshToken">OAuth refresh token (in case the one was issued) .</param>
        /// <param name="refreshTokenExpiresIn">Issued refresh token TTL (time-to-live) in seconds.</param>
        /// <param name="scope">List of permissions (space separated) granted to the application with this access token  (required).</param>
        /// <param name="tokenType">Type of token. The only supported value is &#x60;bearer&#x60;. This value should be used when specifying access token in &#x60;Authorization&#x60; header of subsequent API requests (required).</param>
        /// <param name="ownerId">Token owner (extension/user) identifier.</param>
        /// <param name="endpointId">Application instance identifier.</param>
        /// <param name="idToken">OIDC ID token (if OpenId Connect flow was activated during authorization).</param>
        public TokenInfo(string accessToken = default(string), int expiresIn = default(int), string refreshToken = default(string), int refreshTokenExpiresIn = default(int), string scope = default(string), string tokenType = default(string), string ownerId = default(string), string endpointId = default(string), string idToken = default(string))
        {
            // to ensure "accessToken" is required (not null)
            if (accessToken == null)
            {
                throw new InvalidDataException("accessToken is a required property for TokenInfo and cannot be null");
            }
            else
            {
                this.AccessToken = accessToken;
            }

            // to ensure "expiresIn" is required (not null)
            if (expiresIn == null)
            {
                throw new InvalidDataException("expiresIn is a required property for TokenInfo and cannot be null");
            }
            else
            {
                this.ExpiresIn = expiresIn;
            }

            // to ensure "scope" is required (not null)
            if (scope == null)
            {
                throw new InvalidDataException("scope is a required property for TokenInfo and cannot be null");
            }
            else
            {
                this.Scope = scope;
            }

            // to ensure "tokenType" is required (not null)
            if (tokenType == null)
            {
                throw new InvalidDataException("tokenType is a required property for TokenInfo and cannot be null");
            }
            else
            {
                this.TokenType = tokenType;
            }

            this.RefreshToken = refreshToken;
            this.RefreshTokenExpiresIn = refreshTokenExpiresIn;
            this.OwnerId = ownerId;
            this.EndpointId = endpointId;
            this.IdToken = idToken;
        }

        /// <summary>
        /// OAuth access token to pass to subsequent API requests
        /// </summary>
        /// <value>OAuth access token to pass to subsequent API requests</value>
        [DataMember(Name="access_token", EmitDefaultValue=true)]
        public string AccessToken { get; set; }

        /// <summary>
        /// Issued access token TTL (time-to-live) in seconds
        /// </summary>
        /// <value>Issued access token TTL (time-to-live) in seconds</value>
        [DataMember(Name="expires_in", EmitDefaultValue=true)]
        public int ExpiresIn { get; set; }

        /// <summary>
        /// OAuth refresh token (in case the one was issued) 
        /// </summary>
        /// <value>OAuth refresh token (in case the one was issued) </value>
        [DataMember(Name="refresh_token", EmitDefaultValue=false)]
        public string RefreshToken { get; set; }

        /// <summary>
        /// Issued refresh token TTL (time-to-live) in seconds
        /// </summary>
        /// <value>Issued refresh token TTL (time-to-live) in seconds</value>
        [DataMember(Name="refresh_token_expires_in", EmitDefaultValue=false)]
        public int RefreshTokenExpiresIn { get; set; }

        /// <summary>
        /// List of permissions (space separated) granted to the application with this access token 
        /// </summary>
        /// <value>List of permissions (space separated) granted to the application with this access token </value>
        [DataMember(Name="scope", EmitDefaultValue=true)]
        public string Scope { get; set; }

        /// <summary>
        /// Type of token. The only supported value is &#x60;bearer&#x60;. This value should be used when specifying access token in &#x60;Authorization&#x60; header of subsequent API requests
        /// </summary>
        /// <value>Type of token. The only supported value is &#x60;bearer&#x60;. This value should be used when specifying access token in &#x60;Authorization&#x60; header of subsequent API requests</value>
        [DataMember(Name="token_type", EmitDefaultValue=true)]
        public string TokenType { get; set; }

        /// <summary>
        /// Token owner (extension/user) identifier
        /// </summary>
        /// <value>Token owner (extension/user) identifier</value>
        [DataMember(Name="owner_id", EmitDefaultValue=false)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Application instance identifier
        /// </summary>
        /// <value>Application instance identifier</value>
        [DataMember(Name="endpoint_id", EmitDefaultValue=false)]
        public string EndpointId { get; set; }

        /// <summary>
        /// OIDC ID token (if OpenId Connect flow was activated during authorization)
        /// </summary>
        /// <value>OIDC ID token (if OpenId Connect flow was activated during authorization)</value>
        [DataMember(Name="id_token", EmitDefaultValue=false)]
        public string IdToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TokenInfo {\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  ExpiresIn: ").Append(ExpiresIn).Append("\n");
            sb.Append("  RefreshToken: ").Append(RefreshToken).Append("\n");
            sb.Append("  RefreshTokenExpiresIn: ").Append(RefreshTokenExpiresIn).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  TokenType: ").Append(TokenType).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  EndpointId: ").Append(EndpointId).Append("\n");
            sb.Append("  IdToken: ").Append(IdToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TokenInfo);
        }

        /// <summary>
        /// Returns true if TokenInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of TokenInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TokenInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccessToken == input.AccessToken ||
                    (this.AccessToken != null &&
                    this.AccessToken.Equals(input.AccessToken))
                ) && 
                (
                    this.ExpiresIn == input.ExpiresIn ||
                    (this.ExpiresIn != null &&
                    this.ExpiresIn.Equals(input.ExpiresIn))
                ) && 
                (
                    this.RefreshToken == input.RefreshToken ||
                    (this.RefreshToken != null &&
                    this.RefreshToken.Equals(input.RefreshToken))
                ) && 
                (
                    this.RefreshTokenExpiresIn == input.RefreshTokenExpiresIn ||
                    (this.RefreshTokenExpiresIn != null &&
                    this.RefreshTokenExpiresIn.Equals(input.RefreshTokenExpiresIn))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.TokenType == input.TokenType ||
                    (this.TokenType != null &&
                    this.TokenType.Equals(input.TokenType))
                ) && 
                (
                    this.OwnerId == input.OwnerId ||
                    (this.OwnerId != null &&
                    this.OwnerId.Equals(input.OwnerId))
                ) && 
                (
                    this.EndpointId == input.EndpointId ||
                    (this.EndpointId != null &&
                    this.EndpointId.Equals(input.EndpointId))
                ) && 
                (
                    this.IdToken == input.IdToken ||
                    (this.IdToken != null &&
                    this.IdToken.Equals(input.IdToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessToken != null)
                    hashCode = hashCode * 59 + this.AccessToken.GetHashCode();
                if (this.ExpiresIn != null)
                    hashCode = hashCode * 59 + this.ExpiresIn.GetHashCode();
                if (this.RefreshToken != null)
                    hashCode = hashCode * 59 + this.RefreshToken.GetHashCode();
                if (this.RefreshTokenExpiresIn != null)
                    hashCode = hashCode * 59 + this.RefreshTokenExpiresIn.GetHashCode();
                if (this.Scope != null)
                    hashCode = hashCode * 59 + this.Scope.GetHashCode();
                if (this.TokenType != null)
                    hashCode = hashCode * 59 + this.TokenType.GetHashCode();
                if (this.OwnerId != null)
                    hashCode = hashCode * 59 + this.OwnerId.GetHashCode();
                if (this.EndpointId != null)
                    hashCode = hashCode * 59 + this.EndpointId.GetHashCode();
                if (this.IdToken != null)
                    hashCode = hashCode * 59 + this.IdToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
