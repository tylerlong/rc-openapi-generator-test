/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ServiceProviderConfig
    /// </summary>
    [DataContract]
    public partial class ServiceProviderConfig :  IEquatable<ServiceProviderConfig>, IValidatableObject
    {
        /// <summary>
        /// Defines Schemas
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SchemasEnum
        {
            /// <summary>
            /// Enum Urnietfparamsscimschemascore20ServiceProviderConfig for value: urn:ietf:params:scim:schemas:core:2.0:ServiceProviderConfig
            /// </summary>
            [EnumMember(Value = "urn:ietf:params:scim:schemas:core:2.0:ServiceProviderConfig")]
            Urnietfparamsscimschemascore20ServiceProviderConfig = 1

        }


        /// <summary>
        /// Gets or Sets Schemas
        /// </summary>
        [DataMember(Name="schemas", EmitDefaultValue=false)]
        public List<SchemasEnum> Schemas { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceProviderConfig" /> class.
        /// </summary>
        /// <param name="authenticationSchemes">authenticationSchemes.</param>
        /// <param name="bulk">bulk.</param>
        /// <param name="changePassword">changePassword.</param>
        /// <param name="etag">etag.</param>
        /// <param name="filter">filter.</param>
        /// <param name="patch">patch.</param>
        /// <param name="schemas">schemas.</param>
        /// <param name="sort">sort.</param>
        /// <param name="xmlDataFormat">xmlDataFormat.</param>
        public ServiceProviderConfig(List<AuthenticationScheme> authenticationSchemes = default(List<AuthenticationScheme>), BulkSupported bulk = default(BulkSupported), Supported changePassword = default(Supported), Supported etag = default(Supported), FilterSupported filter = default(FilterSupported), Supported patch = default(Supported), List<SchemasEnum> schemas = default(List<SchemasEnum>), Supported sort = default(Supported), Supported xmlDataFormat = default(Supported))
        {
            this.AuthenticationSchemes = authenticationSchemes;
            this.Bulk = bulk;
            this.ChangePassword = changePassword;
            this.Etag = etag;
            this.Filter = filter;
            this.Patch = patch;
            this.Schemas = schemas;
            this.Sort = sort;
            this.XmlDataFormat = xmlDataFormat;
        }

        /// <summary>
        /// Gets or Sets AuthenticationSchemes
        /// </summary>
        [DataMember(Name="authenticationSchemes", EmitDefaultValue=false)]
        public List<AuthenticationScheme> AuthenticationSchemes { get; set; }

        /// <summary>
        /// Gets or Sets Bulk
        /// </summary>
        [DataMember(Name="bulk", EmitDefaultValue=false)]
        public BulkSupported Bulk { get; set; }

        /// <summary>
        /// Gets or Sets ChangePassword
        /// </summary>
        [DataMember(Name="changePassword", EmitDefaultValue=false)]
        public Supported ChangePassword { get; set; }

        /// <summary>
        /// Gets or Sets Etag
        /// </summary>
        [DataMember(Name="etag", EmitDefaultValue=false)]
        public Supported Etag { get; set; }

        /// <summary>
        /// Gets or Sets Filter
        /// </summary>
        [DataMember(Name="filter", EmitDefaultValue=false)]
        public FilterSupported Filter { get; set; }

        /// <summary>
        /// Gets or Sets Patch
        /// </summary>
        [DataMember(Name="patch", EmitDefaultValue=false)]
        public Supported Patch { get; set; }


        /// <summary>
        /// Gets or Sets Sort
        /// </summary>
        [DataMember(Name="sort", EmitDefaultValue=false)]
        public Supported Sort { get; set; }

        /// <summary>
        /// Gets or Sets XmlDataFormat
        /// </summary>
        [DataMember(Name="xmlDataFormat", EmitDefaultValue=false)]
        public Supported XmlDataFormat { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServiceProviderConfig {\n");
            sb.Append("  AuthenticationSchemes: ").Append(AuthenticationSchemes).Append("\n");
            sb.Append("  Bulk: ").Append(Bulk).Append("\n");
            sb.Append("  ChangePassword: ").Append(ChangePassword).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  Patch: ").Append(Patch).Append("\n");
            sb.Append("  Schemas: ").Append(Schemas).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  XmlDataFormat: ").Append(XmlDataFormat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServiceProviderConfig);
        }

        /// <summary>
        /// Returns true if ServiceProviderConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of ServiceProviderConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceProviderConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuthenticationSchemes == input.AuthenticationSchemes ||
                    this.AuthenticationSchemes != null &&
                    input.AuthenticationSchemes != null &&
                    this.AuthenticationSchemes.SequenceEqual(input.AuthenticationSchemes)
                ) && 
                (
                    this.Bulk == input.Bulk ||
                    (this.Bulk != null &&
                    this.Bulk.Equals(input.Bulk))
                ) && 
                (
                    this.ChangePassword == input.ChangePassword ||
                    (this.ChangePassword != null &&
                    this.ChangePassword.Equals(input.ChangePassword))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                ) && 
                (
                    this.Filter == input.Filter ||
                    (this.Filter != null &&
                    this.Filter.Equals(input.Filter))
                ) && 
                (
                    this.Patch == input.Patch ||
                    (this.Patch != null &&
                    this.Patch.Equals(input.Patch))
                ) && 
                (
                    this.Schemas == input.Schemas ||
                    this.Schemas != null &&
                    input.Schemas != null &&
                    this.Schemas.SequenceEqual(input.Schemas)
                ) && 
                (
                    this.Sort == input.Sort ||
                    (this.Sort != null &&
                    this.Sort.Equals(input.Sort))
                ) && 
                (
                    this.XmlDataFormat == input.XmlDataFormat ||
                    (this.XmlDataFormat != null &&
                    this.XmlDataFormat.Equals(input.XmlDataFormat))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthenticationSchemes != null)
                    hashCode = hashCode * 59 + this.AuthenticationSchemes.GetHashCode();
                if (this.Bulk != null)
                    hashCode = hashCode * 59 + this.Bulk.GetHashCode();
                if (this.ChangePassword != null)
                    hashCode = hashCode * 59 + this.ChangePassword.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                if (this.Filter != null)
                    hashCode = hashCode * 59 + this.Filter.GetHashCode();
                if (this.Patch != null)
                    hashCode = hashCode * 59 + this.Patch.GetHashCode();
                if (this.Schemas != null)
                    hashCode = hashCode * 59 + this.Schemas.GetHashCode();
                if (this.Sort != null)
                    hashCode = hashCode * 59 + this.Sort.GetHashCode();
                if (this.XmlDataFormat != null)
                    hashCode = hashCode * 59 + this.XmlDataFormat.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
