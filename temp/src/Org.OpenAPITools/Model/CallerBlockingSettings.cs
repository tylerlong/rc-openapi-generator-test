/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Returns the lists of blocked and allowed phone numbers
    /// </summary>
    [DataContract]
    public partial class CallerBlockingSettings :  IEquatable<CallerBlockingSettings>, IValidatableObject
    {
        /// <summary>
        /// Call blocking options: either specific or all calls and faxes
        /// </summary>
        /// <value>Call blocking options: either specific or all calls and faxes</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModeEnum
        {
            /// <summary>
            /// Enum Specific for value: Specific
            /// </summary>
            [EnumMember(Value = "Specific")]
            Specific = 1,

            /// <summary>
            /// Enum All for value: All
            /// </summary>
            [EnumMember(Value = "All")]
            All = 2

        }

        /// <summary>
        /// Call blocking options: either specific or all calls and faxes
        /// </summary>
        /// <value>Call blocking options: either specific or all calls and faxes</value>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public ModeEnum? Mode { get; set; }
        /// <summary>
        ///  Determines how to handle calls with no caller ID in &#39;Specific&#39; mode
        /// </summary>
        /// <value> Determines how to handle calls with no caller ID in &#39;Specific&#39; mode</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NoCallerIdEnum
        {
            /// <summary>
            /// Enum BlockCallsAndFaxes for value: BlockCallsAndFaxes
            /// </summary>
            [EnumMember(Value = "BlockCallsAndFaxes")]
            BlockCallsAndFaxes = 1,

            /// <summary>
            /// Enum BlockFaxes for value: BlockFaxes
            /// </summary>
            [EnumMember(Value = "BlockFaxes")]
            BlockFaxes = 2,

            /// <summary>
            /// Enum Allow for value: Allow
            /// </summary>
            [EnumMember(Value = "Allow")]
            Allow = 3

        }

        /// <summary>
        ///  Determines how to handle calls with no caller ID in &#39;Specific&#39; mode
        /// </summary>
        /// <value> Determines how to handle calls with no caller ID in &#39;Specific&#39; mode</value>
        [DataMember(Name="noCallerId", EmitDefaultValue=false)]
        public NoCallerIdEnum? NoCallerId { get; set; }
        /// <summary>
        /// Blocking settings for pay phones
        /// </summary>
        /// <value>Blocking settings for pay phones</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PayPhonesEnum
        {
            /// <summary>
            /// Enum Block for value: Block
            /// </summary>
            [EnumMember(Value = "Block")]
            Block = 1,

            /// <summary>
            /// Enum Allow for value: Allow
            /// </summary>
            [EnumMember(Value = "Allow")]
            Allow = 2

        }

        /// <summary>
        /// Blocking settings for pay phones
        /// </summary>
        /// <value>Blocking settings for pay phones</value>
        [DataMember(Name="payPhones", EmitDefaultValue=false)]
        public PayPhonesEnum? PayPhones { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CallerBlockingSettings" /> class.
        /// </summary>
        /// <param name="mode">Call blocking options: either specific or all calls and faxes.</param>
        /// <param name="noCallerId"> Determines how to handle calls with no caller ID in &#39;Specific&#39; mode.</param>
        /// <param name="payPhones">Blocking settings for pay phones.</param>
        /// <param name="greetings">List of greetings played for blocked callers.</param>
        public CallerBlockingSettings(ModeEnum? mode = default(ModeEnum?), NoCallerIdEnum? noCallerId = default(NoCallerIdEnum?), PayPhonesEnum? payPhones = default(PayPhonesEnum?), List<BlockedCallerGreetingInfo> greetings = default(List<BlockedCallerGreetingInfo>))
        {
            this.Mode = mode;
            this.NoCallerId = noCallerId;
            this.PayPhones = payPhones;
            this.Greetings = greetings;
        }




        /// <summary>
        /// List of greetings played for blocked callers
        /// </summary>
        /// <value>List of greetings played for blocked callers</value>
        [DataMember(Name="greetings", EmitDefaultValue=false)]
        public List<BlockedCallerGreetingInfo> Greetings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallerBlockingSettings {\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  NoCallerId: ").Append(NoCallerId).Append("\n");
            sb.Append("  PayPhones: ").Append(PayPhones).Append("\n");
            sb.Append("  Greetings: ").Append(Greetings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallerBlockingSettings);
        }

        /// <summary>
        /// Returns true if CallerBlockingSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of CallerBlockingSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallerBlockingSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.NoCallerId == input.NoCallerId ||
                    (this.NoCallerId != null &&
                    this.NoCallerId.Equals(input.NoCallerId))
                ) && 
                (
                    this.PayPhones == input.PayPhones ||
                    (this.PayPhones != null &&
                    this.PayPhones.Equals(input.PayPhones))
                ) && 
                (
                    this.Greetings == input.Greetings ||
                    this.Greetings != null &&
                    input.Greetings != null &&
                    this.Greetings.SequenceEqual(input.Greetings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.NoCallerId != null)
                    hashCode = hashCode * 59 + this.NoCallerId.GetHashCode();
                if (this.PayPhones != null)
                    hashCode = hashCode * 59 + this.PayPhones.GetHashCode();
                if (this.Greetings != null)
                    hashCode = hashCode * 59 + this.Greetings.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
