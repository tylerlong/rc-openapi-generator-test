/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CreateSubscriptionRequest
    /// </summary>
    [DataContract]
    public partial class CreateSubscriptionRequest :  IEquatable<CreateSubscriptionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSubscriptionRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateSubscriptionRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSubscriptionRequest" /> class.
        /// </summary>
        /// <param name="eventFilters">The list of event filter names corresponding to events the user is subscribed to (required).</param>
        /// <param name="deliveryMode">deliveryMode (required).</param>
        /// <param name="expiresIn">Subscription lifetime in seconds. For \&quot;WebHook\&quot; transport type max value might be set up to 315360000 seconds (10 years). For \&quot;RC/APNS\&quot; and \&quot;RC/GSM\&quot; transport types max subscription lifetime is 7776000 seconds (90 days). For \&quot;PubNub\&quot; transport type the max value is 900 seconds (15 minutes) .</param>
        public CreateSubscriptionRequest(List<string> eventFilters = default(List<string>), NotificationDeliveryMode deliveryMode = default(NotificationDeliveryMode), int expiresIn = default(int))
        {
            // to ensure "eventFilters" is required (not null)
            if (eventFilters == null)
            {
                throw new InvalidDataException("eventFilters is a required property for CreateSubscriptionRequest and cannot be null");
            }
            else
            {
                this.EventFilters = eventFilters;
            }

            // to ensure "deliveryMode" is required (not null)
            if (deliveryMode == null)
            {
                throw new InvalidDataException("deliveryMode is a required property for CreateSubscriptionRequest and cannot be null");
            }
            else
            {
                this.DeliveryMode = deliveryMode;
            }

            this.ExpiresIn = expiresIn;
        }

        /// <summary>
        /// The list of event filter names corresponding to events the user is subscribed to
        /// </summary>
        /// <value>The list of event filter names corresponding to events the user is subscribed to</value>
        [DataMember(Name="eventFilters", EmitDefaultValue=true)]
        public List<string> EventFilters { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryMode
        /// </summary>
        [DataMember(Name="deliveryMode", EmitDefaultValue=true)]
        public NotificationDeliveryMode DeliveryMode { get; set; }

        /// <summary>
        /// Subscription lifetime in seconds. For \&quot;WebHook\&quot; transport type max value might be set up to 315360000 seconds (10 years). For \&quot;RC/APNS\&quot; and \&quot;RC/GSM\&quot; transport types max subscription lifetime is 7776000 seconds (90 days). For \&quot;PubNub\&quot; transport type the max value is 900 seconds (15 minutes) 
        /// </summary>
        /// <value>Subscription lifetime in seconds. For \&quot;WebHook\&quot; transport type max value might be set up to 315360000 seconds (10 years). For \&quot;RC/APNS\&quot; and \&quot;RC/GSM\&quot; transport types max subscription lifetime is 7776000 seconds (90 days). For \&quot;PubNub\&quot; transport type the max value is 900 seconds (15 minutes) </value>
        [DataMember(Name="expiresIn", EmitDefaultValue=false)]
        public int ExpiresIn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateSubscriptionRequest {\n");
            sb.Append("  EventFilters: ").Append(EventFilters).Append("\n");
            sb.Append("  DeliveryMode: ").Append(DeliveryMode).Append("\n");
            sb.Append("  ExpiresIn: ").Append(ExpiresIn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateSubscriptionRequest);
        }

        /// <summary>
        /// Returns true if CreateSubscriptionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateSubscriptionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateSubscriptionRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EventFilters == input.EventFilters ||
                    this.EventFilters != null &&
                    input.EventFilters != null &&
                    this.EventFilters.SequenceEqual(input.EventFilters)
                ) && 
                (
                    this.DeliveryMode == input.DeliveryMode ||
                    (this.DeliveryMode != null &&
                    this.DeliveryMode.Equals(input.DeliveryMode))
                ) && 
                (
                    this.ExpiresIn == input.ExpiresIn ||
                    (this.ExpiresIn != null &&
                    this.ExpiresIn.Equals(input.ExpiresIn))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EventFilters != null)
                    hashCode = hashCode * 59 + this.EventFilters.GetHashCode();
                if (this.DeliveryMode != null)
                    hashCode = hashCode * 59 + this.DeliveryMode.GetHashCode();
                if (this.ExpiresIn != null)
                    hashCode = hashCode * 59 + this.ExpiresIn.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            yield break;
        }
    }

}
