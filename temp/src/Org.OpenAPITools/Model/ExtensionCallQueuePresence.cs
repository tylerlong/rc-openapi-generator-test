/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ExtensionCallQueuePresence
    /// </summary>
    [DataContract]
    public partial class ExtensionCallQueuePresence :  IEquatable<ExtensionCallQueuePresence>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtensionCallQueuePresence" /> class.
        /// </summary>
        /// <param name="callQueue">callQueue.</param>
        /// <param name="acceptCalls">Call queue agent availability for calls of this queue.</param>
        public ExtensionCallQueuePresence(PresenceCallQueueInfo callQueue = default(PresenceCallQueueInfo), bool acceptCalls = default(bool))
        {
            this.CallQueue = callQueue;
            this.AcceptCalls = acceptCalls;
        }

        /// <summary>
        /// Gets or Sets CallQueue
        /// </summary>
        [DataMember(Name="callQueue", EmitDefaultValue=false)]
        public PresenceCallQueueInfo CallQueue { get; set; }

        /// <summary>
        /// Call queue agent availability for calls of this queue
        /// </summary>
        /// <value>Call queue agent availability for calls of this queue</value>
        [DataMember(Name="acceptCalls", EmitDefaultValue=false)]
        public bool AcceptCalls { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExtensionCallQueuePresence {\n");
            sb.Append("  CallQueue: ").Append(CallQueue).Append("\n");
            sb.Append("  AcceptCalls: ").Append(AcceptCalls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExtensionCallQueuePresence);
        }

        /// <summary>
        /// Returns true if ExtensionCallQueuePresence instances are equal
        /// </summary>
        /// <param name="input">Instance of ExtensionCallQueuePresence to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExtensionCallQueuePresence input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CallQueue == input.CallQueue ||
                    (this.CallQueue != null &&
                    this.CallQueue.Equals(input.CallQueue))
                ) && 
                (
                    this.AcceptCalls == input.AcceptCalls ||
                    (this.AcceptCalls != null &&
                    this.AcceptCalls.Equals(input.AcceptCalls))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CallQueue != null)
                    hashCode = hashCode * 59 + this.CallQueue.GetHashCode();
                if (this.AcceptCalls != null)
                    hashCode = hashCode * 59 + this.AcceptCalls.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
