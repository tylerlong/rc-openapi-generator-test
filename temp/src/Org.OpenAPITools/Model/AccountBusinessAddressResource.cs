/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AccountBusinessAddressResource
    /// </summary>
    [DataContract]
    public partial class AccountBusinessAddressResource :  IEquatable<AccountBusinessAddressResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountBusinessAddressResource" /> class.
        /// </summary>
        /// <param name="uri">uri.</param>
        /// <param name="businessAddress">businessAddress.</param>
        /// <param name="company">company.</param>
        /// <param name="email">email.</param>
        /// <param name="mainSiteName">Custom site name.</param>
        public AccountBusinessAddressResource(string uri = default(string), ContactBusinessAddressInfo businessAddress = default(ContactBusinessAddressInfo), string company = default(string), string email = default(string), string mainSiteName = default(string))
        {
            this.Uri = uri;
            this.BusinessAddress = businessAddress;
            this.Company = company;
            this.Email = email;
            this.MainSiteName = mainSiteName;
        }

        /// <summary>
        /// Gets or Sets Uri
        /// </summary>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Gets or Sets BusinessAddress
        /// </summary>
        [DataMember(Name="businessAddress", EmitDefaultValue=false)]
        public ContactBusinessAddressInfo BusinessAddress { get; set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name="company", EmitDefaultValue=false)]
        public string Company { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Custom site name
        /// </summary>
        /// <value>Custom site name</value>
        [DataMember(Name="mainSiteName", EmitDefaultValue=false)]
        public string MainSiteName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountBusinessAddressResource {\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  BusinessAddress: ").Append(BusinessAddress).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  MainSiteName: ").Append(MainSiteName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountBusinessAddressResource);
        }

        /// <summary>
        /// Returns true if AccountBusinessAddressResource instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountBusinessAddressResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountBusinessAddressResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.BusinessAddress == input.BusinessAddress ||
                    (this.BusinessAddress != null &&
                    this.BusinessAddress.Equals(input.BusinessAddress))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.MainSiteName == input.MainSiteName ||
                    (this.MainSiteName != null &&
                    this.MainSiteName.Equals(input.MainSiteName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.BusinessAddress != null)
                    hashCode = hashCode * 59 + this.BusinessAddress.GetHashCode();
                if (this.Company != null)
                    hashCode = hashCode * 59 + this.Company.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.MainSiteName != null)
                    hashCode = hashCode * 59 + this.MainSiteName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
