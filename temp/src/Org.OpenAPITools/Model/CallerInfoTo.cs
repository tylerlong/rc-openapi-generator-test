/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CallerInfoTo
    /// </summary>
    [DataContract]
    public partial class CallerInfoTo :  IEquatable<CallerInfoTo>, IValidatableObject
    {
        /// <summary>
        /// Defines MessageStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MessageStatusEnum
        {
            /// <summary>
            /// Enum Sent for value: Sent
            /// </summary>
            [EnumMember(Value = "Sent")]
            Sent = 1,

            /// <summary>
            /// Enum SendingFailed for value: SendingFailed
            /// </summary>
            [EnumMember(Value = "SendingFailed")]
            SendingFailed = 2,

            /// <summary>
            /// Enum Queued for value: Queued
            /// </summary>
            [EnumMember(Value = "Queued")]
            Queued = 3

        }

        /// <summary>
        /// Gets or Sets MessageStatus
        /// </summary>
        [DataMember(Name="messageStatus", EmitDefaultValue=false)]
        public MessageStatusEnum? MessageStatus { get; set; }
        /// <summary>
        /// Defines FaxErrorCode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FaxErrorCodeEnum
        {
            /// <summary>
            /// Enum AllLinesInUse for value: AllLinesInUse
            /// </summary>
            [EnumMember(Value = "AllLinesInUse")]
            AllLinesInUse = 1,

            /// <summary>
            /// Enum Undefined for value: Undefined
            /// </summary>
            [EnumMember(Value = "Undefined")]
            Undefined = 2,

            /// <summary>
            /// Enum NoFaxSendPermission for value: NoFaxSendPermission
            /// </summary>
            [EnumMember(Value = "NoFaxSendPermission")]
            NoFaxSendPermission = 3,

            /// <summary>
            /// Enum NoInternationalPermission for value: NoInternationalPermission
            /// </summary>
            [EnumMember(Value = "NoInternationalPermission")]
            NoInternationalPermission = 4,

            /// <summary>
            /// Enum NoFaxMachine for value: NoFaxMachine
            /// </summary>
            [EnumMember(Value = "NoFaxMachine")]
            NoFaxMachine = 5,

            /// <summary>
            /// Enum NoAnswer for value: NoAnswer
            /// </summary>
            [EnumMember(Value = "NoAnswer")]
            NoAnswer = 6,

            /// <summary>
            /// Enum LineBusy for value: LineBusy
            /// </summary>
            [EnumMember(Value = "LineBusy")]
            LineBusy = 7,

            /// <summary>
            /// Enum CallerHungUp for value: CallerHungUp
            /// </summary>
            [EnumMember(Value = "CallerHungUp")]
            CallerHungUp = 8,

            /// <summary>
            /// Enum NotEnoughCredits for value: NotEnoughCredits
            /// </summary>
            [EnumMember(Value = "NotEnoughCredits")]
            NotEnoughCredits = 9,

            /// <summary>
            /// Enum SentPartially for value: SentPartially
            /// </summary>
            [EnumMember(Value = "SentPartially")]
            SentPartially = 10,

            /// <summary>
            /// Enum InternationalCallingDisabled for value: InternationalCallingDisabled
            /// </summary>
            [EnumMember(Value = "InternationalCallingDisabled")]
            InternationalCallingDisabled = 11,

            /// <summary>
            /// Enum DestinationCountryDisabled for value: DestinationCountryDisabled
            /// </summary>
            [EnumMember(Value = "DestinationCountryDisabled")]
            DestinationCountryDisabled = 12,

            /// <summary>
            /// Enum UnknownCountryCode for value: UnknownCountryCode
            /// </summary>
            [EnumMember(Value = "UnknownCountryCode")]
            UnknownCountryCode = 13,

            /// <summary>
            /// Enum NotAccepted for value: NotAccepted
            /// </summary>
            [EnumMember(Value = "NotAccepted")]
            NotAccepted = 14,

            /// <summary>
            /// Enum InvalidNumber for value: InvalidNumber
            /// </summary>
            [EnumMember(Value = "InvalidNumber")]
            InvalidNumber = 15,

            /// <summary>
            /// Enum CallDeclined for value: CallDeclined
            /// </summary>
            [EnumMember(Value = "CallDeclined")]
            CallDeclined = 16,

            /// <summary>
            /// Enum TooManyCallsPerLine for value: TooManyCallsPerLine
            /// </summary>
            [EnumMember(Value = "TooManyCallsPerLine")]
            TooManyCallsPerLine = 17,

            /// <summary>
            /// Enum CallFailed for value: CallFailed
            /// </summary>
            [EnumMember(Value = "CallFailed")]
            CallFailed = 18,

            /// <summary>
            /// Enum RenderingFailed for value: RenderingFailed
            /// </summary>
            [EnumMember(Value = "RenderingFailed")]
            RenderingFailed = 19,

            /// <summary>
            /// Enum TooManyPages for value: TooManyPages
            /// </summary>
            [EnumMember(Value = "TooManyPages")]
            TooManyPages = 20,

            /// <summary>
            /// Enum ReturnToDBQueue for value: ReturnToDBQueue
            /// </summary>
            [EnumMember(Value = "ReturnToDBQueue")]
            ReturnToDBQueue = 21,

            /// <summary>
            /// Enum NoCallTime for value: NoCallTime
            /// </summary>
            [EnumMember(Value = "NoCallTime")]
            NoCallTime = 22,

            /// <summary>
            /// Enum WrongNumber for value: WrongNumber
            /// </summary>
            [EnumMember(Value = "WrongNumber")]
            WrongNumber = 23,

            /// <summary>
            /// Enum ProhibitedNumber for value: ProhibitedNumber
            /// </summary>
            [EnumMember(Value = "ProhibitedNumber")]
            ProhibitedNumber = 24,

            /// <summary>
            /// Enum InternalError for value: InternalError
            /// </summary>
            [EnumMember(Value = "InternalError")]
            InternalError = 25,

            /// <summary>
            /// Enum FaxSendingProhibited for value: FaxSendingProhibited
            /// </summary>
            [EnumMember(Value = "FaxSendingProhibited")]
            FaxSendingProhibited = 26,

            /// <summary>
            /// Enum ThePhoneIsBlacklisted for value: ThePhoneIsBlacklisted
            /// </summary>
            [EnumMember(Value = "ThePhoneIsBlacklisted")]
            ThePhoneIsBlacklisted = 27,

            /// <summary>
            /// Enum UserNotFound for value: UserNotFound
            /// </summary>
            [EnumMember(Value = "UserNotFound")]
            UserNotFound = 28,

            /// <summary>
            /// Enum ConvertError for value: ConvertError
            /// </summary>
            [EnumMember(Value = "ConvertError")]
            ConvertError = 29,

            /// <summary>
            /// Enum DBGeneralError for value: DBGeneralError
            /// </summary>
            [EnumMember(Value = "DBGeneralError")]
            DBGeneralError = 30,

            /// <summary>
            /// Enum SkypeBillingFailed for value: SkypeBillingFailed
            /// </summary>
            [EnumMember(Value = "SkypeBillingFailed")]
            SkypeBillingFailed = 31,

            /// <summary>
            /// Enum AccountSuspended for value: AccountSuspended
            /// </summary>
            [EnumMember(Value = "AccountSuspended")]
            AccountSuspended = 32,

            /// <summary>
            /// Enum ProhibitedDestination for value: ProhibitedDestination
            /// </summary>
            [EnumMember(Value = "ProhibitedDestination")]
            ProhibitedDestination = 33,

            /// <summary>
            /// Enum InternationalDisabled for value: InternationalDisabled
            /// </summary>
            [EnumMember(Value = "InternationalDisabled")]
            InternationalDisabled = 34

        }

        /// <summary>
        /// Gets or Sets FaxErrorCode
        /// </summary>
        [DataMember(Name="faxErrorCode", EmitDefaultValue=false)]
        public FaxErrorCodeEnum? FaxErrorCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CallerInfoTo" /> class.
        /// </summary>
        /// <param name="phoneNumber">phoneNumber.</param>
        /// <param name="name">name.</param>
        /// <param name="location">location.</param>
        /// <param name="messageStatus">messageStatus.</param>
        /// <param name="faxErrorCode">faxErrorCode.</param>
        public CallerInfoTo(string phoneNumber = default(string), string name = default(string), string location = default(string), MessageStatusEnum? messageStatus = default(MessageStatusEnum?), FaxErrorCodeEnum? faxErrorCode = default(FaxErrorCodeEnum?))
        {
            this.PhoneNumber = phoneNumber;
            this.Name = name;
            this.Location = location;
            this.MessageStatus = messageStatus;
            this.FaxErrorCode = faxErrorCode;
        }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name="phoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallerInfoTo {\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  MessageStatus: ").Append(MessageStatus).Append("\n");
            sb.Append("  FaxErrorCode: ").Append(FaxErrorCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallerInfoTo);
        }

        /// <summary>
        /// Returns true if CallerInfoTo instances are equal
        /// </summary>
        /// <param name="input">Instance of CallerInfoTo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallerInfoTo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.MessageStatus == input.MessageStatus ||
                    (this.MessageStatus != null &&
                    this.MessageStatus.Equals(input.MessageStatus))
                ) && 
                (
                    this.FaxErrorCode == input.FaxErrorCode ||
                    (this.FaxErrorCode != null &&
                    this.FaxErrorCode.Equals(input.FaxErrorCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.MessageStatus != null)
                    hashCode = hashCode * 59 + this.MessageStatus.GetHashCode();
                if (this.FaxErrorCode != null)
                    hashCode = hashCode * 59 + this.FaxErrorCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
