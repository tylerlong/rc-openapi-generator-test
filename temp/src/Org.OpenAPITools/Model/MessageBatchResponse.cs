/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Batch of A2P SMS messages. This object provides a specification to send message(s) to many recipients. It contains top-level attributes which apply to all messages. In addition to that, it is possible to override this attribute for each message. This way a single API call may be used to send individual messages to many recipients 
    /// </summary>
    [DataContract]
    public partial class MessageBatchResponse :  IEquatable<MessageBatchResponse>, IValidatableObject
    {
        /// <summary>
        /// Current status of a message batch
        /// </summary>
        /// <value>Current status of a message batch</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Processing for value: Processing
            /// </summary>
            [EnumMember(Value = "Processing")]
            Processing = 1,

            /// <summary>
            /// Enum Completed for value: Completed
            /// </summary>
            [EnumMember(Value = "Completed")]
            Completed = 2

        }

        /// <summary>
        /// Current status of a message batch
        /// </summary>
        /// <value>Current status of a message batch</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageBatchResponse" /> class.
        /// </summary>
        /// <param name="from">Phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format from which the messages are going to be sent.</param>
        /// <param name="batchSize">Total number of messages in the accepted batch.</param>
        /// <param name="processedCount">Total number of messages currently processed in the batch.</param>
        /// <param name="lastModifiedTime">The last time the batch was processed. .</param>
        /// <param name="status">Current status of a message batch.</param>
        /// <param name="creationTime">The time at which the batch was created .</param>
        /// <param name="rejected">The list of rejected/invalid recipients.</param>
        /// <param name="cost">The estimated batch cost for completed batch. Calculated after batch processing is completed. .</param>
        public MessageBatchResponse(string from = default(string), int batchSize = default(int), int processedCount = default(int), DateTime lastModifiedTime = default(DateTime), StatusEnum? status = default(StatusEnum?), DateTime creationTime = default(DateTime), List<RejectedRecipientResponseResource> rejected = default(List<RejectedRecipientResponseResource>), double cost = default(double))
        {
            this.From = from;
            this.BatchSize = batchSize;
            this.ProcessedCount = processedCount;
            this.LastModifiedTime = lastModifiedTime;
            this.Status = status;
            this.CreationTime = creationTime;
            this.Rejected = rejected;
            this.Cost = cost;
        }

        /// <summary>
        /// Unique identifier of the message batch
        /// </summary>
        /// <value>Unique identifier of the message batch</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// Phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format from which the messages are going to be sent
        /// </summary>
        /// <value>Phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format from which the messages are going to be sent</value>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public string From { get; set; }

        /// <summary>
        /// Total number of messages in the accepted batch
        /// </summary>
        /// <value>Total number of messages in the accepted batch</value>
        [DataMember(Name="batchSize", EmitDefaultValue=false)]
        public int BatchSize { get; set; }

        /// <summary>
        /// Total number of messages currently processed in the batch
        /// </summary>
        /// <value>Total number of messages currently processed in the batch</value>
        [DataMember(Name="processedCount", EmitDefaultValue=false)]
        public int ProcessedCount { get; set; }

        /// <summary>
        /// The last time the batch was processed. 
        /// </summary>
        /// <value>The last time the batch was processed. </value>
        [DataMember(Name="lastModifiedTime", EmitDefaultValue=false)]
        public DateTime LastModifiedTime { get; set; }


        /// <summary>
        /// The time at which the batch was created 
        /// </summary>
        /// <value>The time at which the batch was created </value>
        [DataMember(Name="creationTime", EmitDefaultValue=false)]
        public DateTime CreationTime { get; set; }

        /// <summary>
        /// The list of rejected/invalid recipients
        /// </summary>
        /// <value>The list of rejected/invalid recipients</value>
        [DataMember(Name="rejected", EmitDefaultValue=false)]
        public List<RejectedRecipientResponseResource> Rejected { get; set; }

        /// <summary>
        /// The estimated batch cost for completed batch. Calculated after batch processing is completed. 
        /// </summary>
        /// <value>The estimated batch cost for completed batch. Calculated after batch processing is completed. </value>
        [DataMember(Name="cost", EmitDefaultValue=false)]
        public double Cost { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MessageBatchResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  BatchSize: ").Append(BatchSize).Append("\n");
            sb.Append("  ProcessedCount: ").Append(ProcessedCount).Append("\n");
            sb.Append("  LastModifiedTime: ").Append(LastModifiedTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CreationTime: ").Append(CreationTime).Append("\n");
            sb.Append("  Rejected: ").Append(Rejected).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MessageBatchResponse);
        }

        /// <summary>
        /// Returns true if MessageBatchResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of MessageBatchResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessageBatchResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.BatchSize == input.BatchSize ||
                    (this.BatchSize != null &&
                    this.BatchSize.Equals(input.BatchSize))
                ) && 
                (
                    this.ProcessedCount == input.ProcessedCount ||
                    (this.ProcessedCount != null &&
                    this.ProcessedCount.Equals(input.ProcessedCount))
                ) && 
                (
                    this.LastModifiedTime == input.LastModifiedTime ||
                    (this.LastModifiedTime != null &&
                    this.LastModifiedTime.Equals(input.LastModifiedTime))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.CreationTime == input.CreationTime ||
                    (this.CreationTime != null &&
                    this.CreationTime.Equals(input.CreationTime))
                ) && 
                (
                    this.Rejected == input.Rejected ||
                    this.Rejected != null &&
                    input.Rejected != null &&
                    this.Rejected.SequenceEqual(input.Rejected)
                ) && 
                (
                    this.Cost == input.Cost ||
                    (this.Cost != null &&
                    this.Cost.Equals(input.Cost))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.BatchSize != null)
                    hashCode = hashCode * 59 + this.BatchSize.GetHashCode();
                if (this.ProcessedCount != null)
                    hashCode = hashCode * 59 + this.ProcessedCount.GetHashCode();
                if (this.LastModifiedTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedTime.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.CreationTime != null)
                    hashCode = hashCode * 59 + this.CreationTime.GetHashCode();
                if (this.Rejected != null)
                    hashCode = hashCode * 59 + this.Rejected.GetHashCode();
                if (this.Cost != null)
                    hashCode = hashCode * 59 + this.Cost.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
