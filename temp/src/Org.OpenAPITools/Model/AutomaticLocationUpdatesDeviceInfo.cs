/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AutomaticLocationUpdatesDeviceInfo
    /// </summary>
    [DataContract]
    public partial class AutomaticLocationUpdatesDeviceInfo :  IEquatable<AutomaticLocationUpdatesDeviceInfo>, IValidatableObject
    {
        /// <summary>
        /// Device type
        /// </summary>
        /// <value>Device type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum HardPhone for value: HardPhone
            /// </summary>
            [EnumMember(Value = "HardPhone")]
            HardPhone = 1,

            /// <summary>
            /// Enum SoftPhone for value: SoftPhone
            /// </summary>
            [EnumMember(Value = "SoftPhone")]
            SoftPhone = 2,

            /// <summary>
            /// Enum OtherPhone for value: OtherPhone
            /// </summary>
            [EnumMember(Value = "OtherPhone")]
            OtherPhone = 3

        }

        /// <summary>
        /// Device type
        /// </summary>
        /// <value>Device type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AutomaticLocationUpdatesDeviceInfo" /> class.
        /// </summary>
        /// <param name="id">Internal identifier of a device.</param>
        /// <param name="type">Device type (default to TypeEnum.HardPhone).</param>
        /// <param name="serial">Serial number for HardPhone (is returned only when the phone is shipped and provisioned).</param>
        /// <param name="featureEnabled">Specifies if Automatic Location Updates feature is enabled.</param>
        /// <param name="name">Device name.</param>
        /// <param name="model">model.</param>
        /// <param name="site">site.</param>
        /// <param name="phoneLines">Phone lines information.</param>
        public AutomaticLocationUpdatesDeviceInfo(string id = default(string), TypeEnum? type = TypeEnum.HardPhone, string serial = default(string), bool featureEnabled = default(bool), string name = default(string), AutomaticLocationUpdatesModelInfo model = default(AutomaticLocationUpdatesModelInfo), AutomaticLocationUpdatesSiteInfo site = default(AutomaticLocationUpdatesSiteInfo), List<AutomaticLocationUpdatesPhoneLine> phoneLines = default(List<AutomaticLocationUpdatesPhoneLine>))
        {
            this.Id = id;
            // use default value if no "type" provided
            if (type == null)
            {
                this.Type = TypeEnum.HardPhone;
            }
            else
            {
                this.Type = type;
            }
            this.Serial = serial;
            this.FeatureEnabled = featureEnabled;
            this.Name = name;
            this.Model = model;
            this.Site = site;
            this.PhoneLines = phoneLines;
        }

        /// <summary>
        /// Internal identifier of a device
        /// </summary>
        /// <value>Internal identifier of a device</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// Serial number for HardPhone (is returned only when the phone is shipped and provisioned)
        /// </summary>
        /// <value>Serial number for HardPhone (is returned only when the phone is shipped and provisioned)</value>
        [DataMember(Name="serial", EmitDefaultValue=false)]
        public string Serial { get; set; }

        /// <summary>
        /// Specifies if Automatic Location Updates feature is enabled
        /// </summary>
        /// <value>Specifies if Automatic Location Updates feature is enabled</value>
        [DataMember(Name="featureEnabled", EmitDefaultValue=false)]
        public bool FeatureEnabled { get; set; }

        /// <summary>
        /// Device name
        /// </summary>
        /// <value>Device name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name="model", EmitDefaultValue=false)]
        public AutomaticLocationUpdatesModelInfo Model { get; set; }

        /// <summary>
        /// Gets or Sets Site
        /// </summary>
        [DataMember(Name="site", EmitDefaultValue=false)]
        public AutomaticLocationUpdatesSiteInfo Site { get; set; }

        /// <summary>
        /// Phone lines information
        /// </summary>
        /// <value>Phone lines information</value>
        [DataMember(Name="phoneLines", EmitDefaultValue=false)]
        public List<AutomaticLocationUpdatesPhoneLine> PhoneLines { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AutomaticLocationUpdatesDeviceInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Serial: ").Append(Serial).Append("\n");
            sb.Append("  FeatureEnabled: ").Append(FeatureEnabled).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Site: ").Append(Site).Append("\n");
            sb.Append("  PhoneLines: ").Append(PhoneLines).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AutomaticLocationUpdatesDeviceInfo);
        }

        /// <summary>
        /// Returns true if AutomaticLocationUpdatesDeviceInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of AutomaticLocationUpdatesDeviceInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AutomaticLocationUpdatesDeviceInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Serial == input.Serial ||
                    (this.Serial != null &&
                    this.Serial.Equals(input.Serial))
                ) && 
                (
                    this.FeatureEnabled == input.FeatureEnabled ||
                    (this.FeatureEnabled != null &&
                    this.FeatureEnabled.Equals(input.FeatureEnabled))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) && 
                (
                    this.Site == input.Site ||
                    (this.Site != null &&
                    this.Site.Equals(input.Site))
                ) && 
                (
                    this.PhoneLines == input.PhoneLines ||
                    this.PhoneLines != null &&
                    input.PhoneLines != null &&
                    this.PhoneLines.SequenceEqual(input.PhoneLines)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Serial != null)
                    hashCode = hashCode * 59 + this.Serial.GetHashCode();
                if (this.FeatureEnabled != null)
                    hashCode = hashCode * 59 + this.FeatureEnabled.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Model != null)
                    hashCode = hashCode * 59 + this.Model.GetHashCode();
                if (this.Site != null)
                    hashCode = hashCode * 59 + this.Site.GetHashCode();
                if (this.PhoneLines != null)
                    hashCode = hashCode * 59 + this.PhoneLines.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
