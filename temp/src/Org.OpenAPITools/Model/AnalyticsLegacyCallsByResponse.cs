/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AnalyticsLegacyCallsByResponse
    /// </summary>
    [DataContract]
    public partial class AnalyticsLegacyCallsByResponse :  IEquatable<AnalyticsLegacyCallsByResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsLegacyCallsByResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AnalyticsLegacyCallsByResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsLegacyCallsByResponse" /> class.
        /// </summary>
        /// <param name="answered">answered (required).</param>
        /// <param name="notAnswered">notAnswered (required).</param>
        /// <param name="connected">connected (required).</param>
        /// <param name="notConnected">notConnected (required).</param>
        public AnalyticsLegacyCallsByResponse(double answered = default(double), double notAnswered = default(double), double connected = default(double), double notConnected = default(double))
        {
            // to ensure "answered" is required (not null)
            if (answered == null)
            {
                throw new InvalidDataException("answered is a required property for AnalyticsLegacyCallsByResponse and cannot be null");
            }
            else
            {
                this.Answered = answered;
            }

            // to ensure "notAnswered" is required (not null)
            if (notAnswered == null)
            {
                throw new InvalidDataException("notAnswered is a required property for AnalyticsLegacyCallsByResponse and cannot be null");
            }
            else
            {
                this.NotAnswered = notAnswered;
            }

            // to ensure "connected" is required (not null)
            if (connected == null)
            {
                throw new InvalidDataException("connected is a required property for AnalyticsLegacyCallsByResponse and cannot be null");
            }
            else
            {
                this.Connected = connected;
            }

            // to ensure "notConnected" is required (not null)
            if (notConnected == null)
            {
                throw new InvalidDataException("notConnected is a required property for AnalyticsLegacyCallsByResponse and cannot be null");
            }
            else
            {
                this.NotConnected = notConnected;
            }

        }

        /// <summary>
        /// Gets or Sets Answered
        /// </summary>
        [DataMember(Name="answered", EmitDefaultValue=true)]
        public double Answered { get; set; }

        /// <summary>
        /// Gets or Sets NotAnswered
        /// </summary>
        [DataMember(Name="notAnswered", EmitDefaultValue=true)]
        public double NotAnswered { get; set; }

        /// <summary>
        /// Gets or Sets Connected
        /// </summary>
        [DataMember(Name="connected", EmitDefaultValue=true)]
        public double Connected { get; set; }

        /// <summary>
        /// Gets or Sets NotConnected
        /// </summary>
        [DataMember(Name="notConnected", EmitDefaultValue=true)]
        public double NotConnected { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnalyticsLegacyCallsByResponse {\n");
            sb.Append("  Answered: ").Append(Answered).Append("\n");
            sb.Append("  NotAnswered: ").Append(NotAnswered).Append("\n");
            sb.Append("  Connected: ").Append(Connected).Append("\n");
            sb.Append("  NotConnected: ").Append(NotConnected).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AnalyticsLegacyCallsByResponse);
        }

        /// <summary>
        /// Returns true if AnalyticsLegacyCallsByResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AnalyticsLegacyCallsByResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnalyticsLegacyCallsByResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Answered == input.Answered ||
                    (this.Answered != null &&
                    this.Answered.Equals(input.Answered))
                ) && 
                (
                    this.NotAnswered == input.NotAnswered ||
                    (this.NotAnswered != null &&
                    this.NotAnswered.Equals(input.NotAnswered))
                ) && 
                (
                    this.Connected == input.Connected ||
                    (this.Connected != null &&
                    this.Connected.Equals(input.Connected))
                ) && 
                (
                    this.NotConnected == input.NotConnected ||
                    (this.NotConnected != null &&
                    this.NotConnected.Equals(input.NotConnected))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Answered != null)
                    hashCode = hashCode * 59 + this.Answered.GetHashCode();
                if (this.NotAnswered != null)
                    hashCode = hashCode * 59 + this.NotAnswered.GetHashCode();
                if (this.Connected != null)
                    hashCode = hashCode * 59 + this.Connected.GetHashCode();
                if (this.NotConnected != null)
                    hashCode = hashCode * 59 + this.NotConnected.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
