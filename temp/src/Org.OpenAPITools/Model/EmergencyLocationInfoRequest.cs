/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// EmergencyLocationInfoRequest
    /// </summary>
    [DataContract]
    public partial class EmergencyLocationInfoRequest :  IEquatable<EmergencyLocationInfoRequest>, IValidatableObject
    {
        /// <summary>
        /// Emergency address status
        /// </summary>
        /// <value>Emergency address status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AddressStatusEnum
        {
            /// <summary>
            /// Enum Valid for value: Valid
            /// </summary>
            [EnumMember(Value = "Valid")]
            Valid = 1,

            /// <summary>
            /// Enum Invalid for value: Invalid
            /// </summary>
            [EnumMember(Value = "Invalid")]
            Invalid = 2

        }

        /// <summary>
        /// Emergency address status
        /// </summary>
        /// <value>Emergency address status</value>
        [DataMember(Name="addressStatus", EmitDefaultValue=false)]
        public AddressStatusEnum? AddressStatus { get; set; }
        /// <summary>
        /// Status of emergency response location usage.
        /// </summary>
        /// <value>Status of emergency response location usage.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UsageStatusEnum
        {
            /// <summary>
            /// Enum Active for value: Active
            /// </summary>
            [EnumMember(Value = "Active")]
            Active = 1,

            /// <summary>
            /// Enum Inactive for value: Inactive
            /// </summary>
            [EnumMember(Value = "Inactive")]
            Inactive = 2

        }

        /// <summary>
        /// Status of emergency response location usage.
        /// </summary>
        /// <value>Status of emergency response location usage.</value>
        [DataMember(Name="usageStatus", EmitDefaultValue=false)]
        public UsageStatusEnum? UsageStatus { get; set; }
        /// <summary>
        /// Visibility of an emergency response location. If &#x60;Private&#x60; is set, then location is visible only for restricted number of users, specified in &#x60;owners&#x60; array
        /// </summary>
        /// <value>Visibility of an emergency response location. If &#x60;Private&#x60; is set, then location is visible only for restricted number of users, specified in &#x60;owners&#x60; array</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VisibilityEnum
        {
            /// <summary>
            /// Enum Public for value: Public
            /// </summary>
            [EnumMember(Value = "Public")]
            Public = 1

        }

        /// <summary>
        /// Visibility of an emergency response location. If &#x60;Private&#x60; is set, then location is visible only for restricted number of users, specified in &#x60;owners&#x60; array
        /// </summary>
        /// <value>Visibility of an emergency response location. If &#x60;Private&#x60; is set, then location is visible only for restricted number of users, specified in &#x60;owners&#x60; array</value>
        [DataMember(Name="visibility", EmitDefaultValue=false)]
        public VisibilityEnum? Visibility { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmergencyLocationInfoRequest" /> class.
        /// </summary>
        /// <param name="id">Internal identifier of the emergency response location.</param>
        /// <param name="address">address.</param>
        /// <param name="name">Emergency response location name.</param>
        /// <param name="site">site.</param>
        /// <param name="addressStatus">Emergency address status.</param>
        /// <param name="usageStatus">Status of emergency response location usage..</param>
        /// <param name="visibility">Visibility of an emergency response location. If &#x60;Private&#x60; is set, then location is visible only for restricted number of users, specified in &#x60;owners&#x60; array (default to VisibilityEnum.Public).</param>
        public EmergencyLocationInfoRequest(string id = default(string), EmergencyLocationAddressInfo address = default(EmergencyLocationAddressInfo), string name = default(string), ShortSiteInfo site = default(ShortSiteInfo), AddressStatusEnum? addressStatus = default(AddressStatusEnum?), UsageStatusEnum? usageStatus = default(UsageStatusEnum?), VisibilityEnum? visibility = VisibilityEnum.Public)
        {
            this.Id = id;
            this.Address = address;
            this.Name = name;
            this.Site = site;
            this.AddressStatus = addressStatus;
            this.UsageStatus = usageStatus;
            // use default value if no "visibility" provided
            if (visibility == null)
            {
                this.Visibility = VisibilityEnum.Public;
            }
            else
            {
                this.Visibility = visibility;
            }
        }

        /// <summary>
        /// Internal identifier of the emergency response location
        /// </summary>
        /// <value>Internal identifier of the emergency response location</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public EmergencyLocationAddressInfo Address { get; set; }

        /// <summary>
        /// Emergency response location name
        /// </summary>
        /// <value>Emergency response location name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Site
        /// </summary>
        [DataMember(Name="site", EmitDefaultValue=false)]
        public ShortSiteInfo Site { get; set; }




        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmergencyLocationInfoRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Site: ").Append(Site).Append("\n");
            sb.Append("  AddressStatus: ").Append(AddressStatus).Append("\n");
            sb.Append("  UsageStatus: ").Append(UsageStatus).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmergencyLocationInfoRequest);
        }

        /// <summary>
        /// Returns true if EmergencyLocationInfoRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of EmergencyLocationInfoRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmergencyLocationInfoRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Site == input.Site ||
                    (this.Site != null &&
                    this.Site.Equals(input.Site))
                ) && 
                (
                    this.AddressStatus == input.AddressStatus ||
                    (this.AddressStatus != null &&
                    this.AddressStatus.Equals(input.AddressStatus))
                ) && 
                (
                    this.UsageStatus == input.UsageStatus ||
                    (this.UsageStatus != null &&
                    this.UsageStatus.Equals(input.UsageStatus))
                ) && 
                (
                    this.Visibility == input.Visibility ||
                    (this.Visibility != null &&
                    this.Visibility.Equals(input.Visibility))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Site != null)
                    hashCode = hashCode * 59 + this.Site.GetHashCode();
                if (this.AddressStatus != null)
                    hashCode = hashCode * 59 + this.AddressStatus.GetHashCode();
                if (this.UsageStatus != null)
                    hashCode = hashCode * 59 + this.UsageStatus.GetHashCode();
                if (this.Visibility != null)
                    hashCode = hashCode * 59 + this.Visibility.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
