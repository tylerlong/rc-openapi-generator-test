/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// NotificationDeliveryMode
    /// </summary>
    [DataContract]
    public partial class NotificationDeliveryMode :  IEquatable<NotificationDeliveryMode>, IValidatableObject
    {
        /// <summary>
        /// Notifications transport name, e.g. \&quot;WebHook\&quot;
        /// </summary>
        /// <value>Notifications transport name, e.g. \&quot;WebHook\&quot;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TransportTypeEnum
        {
            /// <summary>
            /// Enum PubNub for value: PubNub
            /// </summary>
            [EnumMember(Value = "PubNub")]
            PubNub = 1,

            /// <summary>
            /// Enum RCAPNS for value: RC/APNS
            /// </summary>
            [EnumMember(Value = "RC/APNS")]
            RCAPNS = 2,

            /// <summary>
            /// Enum RCGCM for value: RC/GCM
            /// </summary>
            [EnumMember(Value = "RC/GCM")]
            RCGCM = 3,

            /// <summary>
            /// Enum WebHook for value: WebHook
            /// </summary>
            [EnumMember(Value = "WebHook")]
            WebHook = 4

        }

        /// <summary>
        /// Notifications transport name, e.g. \&quot;WebHook\&quot;
        /// </summary>
        /// <value>Notifications transport name, e.g. \&quot;WebHook\&quot;</value>
        [DataMember(Name="transportType", EmitDefaultValue=true)]
        public TransportTypeEnum TransportType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationDeliveryMode" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NotificationDeliveryMode() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationDeliveryMode" /> class.
        /// </summary>
        /// <param name="transportType">Notifications transport name, e.g. \&quot;WebHook\&quot; (required).</param>
        /// <param name="address">For a \&quot;WebHook\&quot; transport - URL of a consumer service (cannot be changed during subscription update).</param>
        /// <param name="encryption">Optional parameter. Specifies if the message will be encrypted or not. If request contains any presence event filter the value by default is &#39;true&#39; (even if specified as &#39;false&#39;). If request contains only message event filters the value by default is &#39;false&#39; .</param>
        /// <param name="certificateName">Certificate name (for \&quot;RC/APNS\&quot; and \&quot;RC/GCM\&quot; transport types only).</param>
        /// <param name="registrationId">Registration identifier (for \&quot;RC/APNS\&quot; and \&quot;RC/GCM\&quot; transport types only).</param>
        /// <param name="verificationToken">Subscription verification token ensuring data security (For \&quot;Webhook\&quot; transport type only).</param>
        public NotificationDeliveryMode(TransportTypeEnum transportType = default(TransportTypeEnum), string address = default(string), bool encryption = default(bool), string certificateName = default(string), string registrationId = default(string), string verificationToken = default(string))
        {
            // to ensure "transportType" is required (not null)
            if (transportType == null)
            {
                throw new InvalidDataException("transportType is a required property for NotificationDeliveryMode and cannot be null");
            }
            else
            {
                this.TransportType = transportType;
            }

            this.Address = address;
            this.Encryption = encryption;
            this.CertificateName = certificateName;
            this.RegistrationId = registrationId;
            this.VerificationToken = verificationToken;
        }


        /// <summary>
        /// For a \&quot;WebHook\&quot; transport - URL of a consumer service (cannot be changed during subscription update)
        /// </summary>
        /// <value>For a \&quot;WebHook\&quot; transport - URL of a consumer service (cannot be changed during subscription update)</value>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// Optional parameter. Specifies if the message will be encrypted or not. If request contains any presence event filter the value by default is &#39;true&#39; (even if specified as &#39;false&#39;). If request contains only message event filters the value by default is &#39;false&#39; 
        /// </summary>
        /// <value>Optional parameter. Specifies if the message will be encrypted or not. If request contains any presence event filter the value by default is &#39;true&#39; (even if specified as &#39;false&#39;). If request contains only message event filters the value by default is &#39;false&#39; </value>
        [DataMember(Name="encryption", EmitDefaultValue=false)]
        public bool Encryption { get; set; }

        /// <summary>
        /// Certificate name (for \&quot;RC/APNS\&quot; and \&quot;RC/GCM\&quot; transport types only)
        /// </summary>
        /// <value>Certificate name (for \&quot;RC/APNS\&quot; and \&quot;RC/GCM\&quot; transport types only)</value>
        [DataMember(Name="certificateName", EmitDefaultValue=false)]
        public string CertificateName { get; set; }

        /// <summary>
        /// Registration identifier (for \&quot;RC/APNS\&quot; and \&quot;RC/GCM\&quot; transport types only)
        /// </summary>
        /// <value>Registration identifier (for \&quot;RC/APNS\&quot; and \&quot;RC/GCM\&quot; transport types only)</value>
        [DataMember(Name="registrationId", EmitDefaultValue=false)]
        public string RegistrationId { get; set; }

        /// <summary>
        /// Subscription verification token ensuring data security (For \&quot;Webhook\&quot; transport type only)
        /// </summary>
        /// <value>Subscription verification token ensuring data security (For \&quot;Webhook\&quot; transport type only)</value>
        [DataMember(Name="verificationToken", EmitDefaultValue=false)]
        public string VerificationToken { get; set; }

        /// <summary>
        /// PubNub subscriber credentials required to subscribe to the channel (for \&quot;PubNub\&quot; transport type only)
        /// </summary>
        /// <value>PubNub subscriber credentials required to subscribe to the channel (for \&quot;PubNub\&quot; transport type only)</value>
        [DataMember(Name="subscriberKey", EmitDefaultValue=false)]
        public string SubscriberKey { get; private set; }

        /// <summary>
        /// PubNub subscriber credentials required to subscribe to the channel (for \&quot;PubNub\&quot; transport type only)
        /// </summary>
        /// <value>PubNub subscriber credentials required to subscribe to the channel (for \&quot;PubNub\&quot; transport type only)</value>
        [DataMember(Name="secretKey", EmitDefaultValue=false)]
        public string SecretKey { get; private set; }

        /// <summary>
        /// Encryption algorithm \&quot;AES\&quot; (for \&quot;PubNub\&quot; transport type only)
        /// </summary>
        /// <value>Encryption algorithm \&quot;AES\&quot; (for \&quot;PubNub\&quot; transport type only)</value>
        [DataMember(Name="encryptionAlgorithm", EmitDefaultValue=false)]
        public string EncryptionAlgorithm { get; private set; }

        /// <summary>
        /// Key for notification message decryption (for \&quot;PubNub\&quot; transport type only)
        /// </summary>
        /// <value>Key for notification message decryption (for \&quot;PubNub\&quot; transport type only)</value>
        [DataMember(Name="encryptionKey", EmitDefaultValue=false)]
        public string EncryptionKey { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NotificationDeliveryMode {\n");
            sb.Append("  TransportType: ").Append(TransportType).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Encryption: ").Append(Encryption).Append("\n");
            sb.Append("  CertificateName: ").Append(CertificateName).Append("\n");
            sb.Append("  RegistrationId: ").Append(RegistrationId).Append("\n");
            sb.Append("  VerificationToken: ").Append(VerificationToken).Append("\n");
            sb.Append("  SubscriberKey: ").Append(SubscriberKey).Append("\n");
            sb.Append("  SecretKey: ").Append(SecretKey).Append("\n");
            sb.Append("  EncryptionAlgorithm: ").Append(EncryptionAlgorithm).Append("\n");
            sb.Append("  EncryptionKey: ").Append(EncryptionKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NotificationDeliveryMode);
        }

        /// <summary>
        /// Returns true if NotificationDeliveryMode instances are equal
        /// </summary>
        /// <param name="input">Instance of NotificationDeliveryMode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotificationDeliveryMode input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TransportType == input.TransportType ||
                    (this.TransportType != null &&
                    this.TransportType.Equals(input.TransportType))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Encryption == input.Encryption ||
                    (this.Encryption != null &&
                    this.Encryption.Equals(input.Encryption))
                ) && 
                (
                    this.CertificateName == input.CertificateName ||
                    (this.CertificateName != null &&
                    this.CertificateName.Equals(input.CertificateName))
                ) && 
                (
                    this.RegistrationId == input.RegistrationId ||
                    (this.RegistrationId != null &&
                    this.RegistrationId.Equals(input.RegistrationId))
                ) && 
                (
                    this.VerificationToken == input.VerificationToken ||
                    (this.VerificationToken != null &&
                    this.VerificationToken.Equals(input.VerificationToken))
                ) && 
                (
                    this.SubscriberKey == input.SubscriberKey ||
                    (this.SubscriberKey != null &&
                    this.SubscriberKey.Equals(input.SubscriberKey))
                ) && 
                (
                    this.SecretKey == input.SecretKey ||
                    (this.SecretKey != null &&
                    this.SecretKey.Equals(input.SecretKey))
                ) && 
                (
                    this.EncryptionAlgorithm == input.EncryptionAlgorithm ||
                    (this.EncryptionAlgorithm != null &&
                    this.EncryptionAlgorithm.Equals(input.EncryptionAlgorithm))
                ) && 
                (
                    this.EncryptionKey == input.EncryptionKey ||
                    (this.EncryptionKey != null &&
                    this.EncryptionKey.Equals(input.EncryptionKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransportType != null)
                    hashCode = hashCode * 59 + this.TransportType.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Encryption != null)
                    hashCode = hashCode * 59 + this.Encryption.GetHashCode();
                if (this.CertificateName != null)
                    hashCode = hashCode * 59 + this.CertificateName.GetHashCode();
                if (this.RegistrationId != null)
                    hashCode = hashCode * 59 + this.RegistrationId.GetHashCode();
                if (this.VerificationToken != null)
                    hashCode = hashCode * 59 + this.VerificationToken.GetHashCode();
                if (this.SubscriberKey != null)
                    hashCode = hashCode * 59 + this.SubscriberKey.GetHashCode();
                if (this.SecretKey != null)
                    hashCode = hashCode * 59 + this.SecretKey.GetHashCode();
                if (this.EncryptionAlgorithm != null)
                    hashCode = hashCode * 59 + this.EncryptionAlgorithm.GetHashCode();
                if (this.EncryptionKey != null)
                    hashCode = hashCode * 59 + this.EncryptionKey.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
