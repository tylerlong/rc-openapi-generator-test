/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AccountHistoryPublicRecord
    /// </summary>
    [DataContract]
    public partial class AccountHistoryPublicRecord :  IEquatable<AccountHistoryPublicRecord>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountHistoryPublicRecord" /> class.
        /// </summary>
        /// <param name="id">Internal record identifier.</param>
        /// <param name="eventTime">Timestamp of an event (provided by a client), RFC3339 date-time format, UTC time zone..</param>
        /// <param name="initiator">initiator.</param>
        /// <param name="actionId">Action type.</param>
        /// <param name="eventType">Operation: \&quot;CREATE\&quot;, \&quot;UPDATE\&quot;, or \&quot;DELETE\&quot;.</param>
        /// <param name="accountId">Account which is related with the particular record..</param>
        /// <param name="accountName">Account (company) name.</param>
        /// <param name="target">target.</param>
        /// <param name="clientIp">IP-address of a client. If not specified RCClientIp header value is used.</param>
        /// <param name="comment">Custom top-level comment.</param>
        /// <param name="details">details.</param>
        public AccountHistoryPublicRecord(string id = default(string), DateTime eventTime = default(DateTime), AccountHistoryRecordPublicInitiator initiator = default(AccountHistoryRecordPublicInitiator), string actionId = default(string), string eventType = default(string), string accountId = default(string), string accountName = default(string), AccountHistoryRecordTarget target = default(AccountHistoryRecordTarget), string clientIp = default(string), string comment = default(string), AccountHistoryRecordPublicDetails details = default(AccountHistoryRecordPublicDetails))
        {
            this.Id = id;
            this.EventTime = eventTime;
            this.Initiator = initiator;
            this.ActionId = actionId;
            this.EventType = eventType;
            this.AccountId = accountId;
            this.AccountName = accountName;
            this.Target = target;
            this.ClientIp = clientIp;
            this.Comment = comment;
            this.Details = details;
        }

        /// <summary>
        /// Internal record identifier
        /// </summary>
        /// <value>Internal record identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Timestamp of an event (provided by a client), RFC3339 date-time format, UTC time zone.
        /// </summary>
        /// <value>Timestamp of an event (provided by a client), RFC3339 date-time format, UTC time zone.</value>
        [DataMember(Name="eventTime", EmitDefaultValue=false)]
        public DateTime EventTime { get; set; }

        /// <summary>
        /// Gets or Sets Initiator
        /// </summary>
        [DataMember(Name="initiator", EmitDefaultValue=false)]
        public AccountHistoryRecordPublicInitiator Initiator { get; set; }

        /// <summary>
        /// Action type
        /// </summary>
        /// <value>Action type</value>
        [DataMember(Name="actionId", EmitDefaultValue=false)]
        public string ActionId { get; set; }

        /// <summary>
        /// Operation: \&quot;CREATE\&quot;, \&quot;UPDATE\&quot;, or \&quot;DELETE\&quot;
        /// </summary>
        /// <value>Operation: \&quot;CREATE\&quot;, \&quot;UPDATE\&quot;, or \&quot;DELETE\&quot;</value>
        [DataMember(Name="eventType", EmitDefaultValue=false)]
        public string EventType { get; set; }

        /// <summary>
        /// Account which is related with the particular record.
        /// </summary>
        /// <value>Account which is related with the particular record.</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Account (company) name
        /// </summary>
        /// <value>Account (company) name</value>
        [DataMember(Name="accountName", EmitDefaultValue=false)]
        public string AccountName { get; set; }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [DataMember(Name="target", EmitDefaultValue=false)]
        public AccountHistoryRecordTarget Target { get; set; }

        /// <summary>
        /// IP-address of a client. If not specified RCClientIp header value is used
        /// </summary>
        /// <value>IP-address of a client. If not specified RCClientIp header value is used</value>
        [DataMember(Name="clientIp", EmitDefaultValue=false)]
        public string ClientIp { get; set; }

        /// <summary>
        /// Custom top-level comment
        /// </summary>
        /// <value>Custom top-level comment</value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public AccountHistoryRecordPublicDetails Details { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountHistoryPublicRecord {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EventTime: ").Append(EventTime).Append("\n");
            sb.Append("  Initiator: ").Append(Initiator).Append("\n");
            sb.Append("  ActionId: ").Append(ActionId).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  ClientIp: ").Append(ClientIp).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountHistoryPublicRecord);
        }

        /// <summary>
        /// Returns true if AccountHistoryPublicRecord instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountHistoryPublicRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountHistoryPublicRecord input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.EventTime == input.EventTime ||
                    (this.EventTime != null &&
                    this.EventTime.Equals(input.EventTime))
                ) && 
                (
                    this.Initiator == input.Initiator ||
                    (this.Initiator != null &&
                    this.Initiator.Equals(input.Initiator))
                ) && 
                (
                    this.ActionId == input.ActionId ||
                    (this.ActionId != null &&
                    this.ActionId.Equals(input.ActionId))
                ) && 
                (
                    this.EventType == input.EventType ||
                    (this.EventType != null &&
                    this.EventType.Equals(input.EventType))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.Target == input.Target ||
                    (this.Target != null &&
                    this.Target.Equals(input.Target))
                ) && 
                (
                    this.ClientIp == input.ClientIp ||
                    (this.ClientIp != null &&
                    this.ClientIp.Equals(input.ClientIp))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.Equals(input.Details))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.EventTime != null)
                    hashCode = hashCode * 59 + this.EventTime.GetHashCode();
                if (this.Initiator != null)
                    hashCode = hashCode * 59 + this.Initiator.GetHashCode();
                if (this.ActionId != null)
                    hashCode = hashCode * 59 + this.ActionId.GetHashCode();
                if (this.EventType != null)
                    hashCode = hashCode * 59 + this.EventType.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.AccountName != null)
                    hashCode = hashCode * 59 + this.AccountName.GetHashCode();
                if (this.Target != null)
                    hashCode = hashCode * 59 + this.Target.GetHashCode();
                if (this.ClientIp != null)
                    hashCode = hashCode * 59 + this.ClientIp.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
