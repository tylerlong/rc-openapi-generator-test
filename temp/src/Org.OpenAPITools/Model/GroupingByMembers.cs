/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// This grouping allows to specify the &#x60;groupByMembers&#x60; option. The response data will be grouped by users and will only include users that belong to the scope selected in &#x60;groupByMembers&#x60; field
    /// </summary>
    [DataContract]
    public partial class GroupingByMembers :  IEquatable<GroupingByMembers>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets GroupByMembers
        /// </summary>
        [DataMember(Name="groupByMembers", EmitDefaultValue=true)]
        public MembersGroupingOptions GroupByMembers { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupingByMembers" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GroupingByMembers() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupingByMembers" /> class.
        /// </summary>
        /// <param name="groupByMembers">groupByMembers (required).</param>
        /// <param name="keys">This field can be used to further limit the users selection by specifying unique identifiers of corresponding entities. For example, providing unique queue ids along with &#x60;Queue&#x60; in &#x60;groupByMembers&#x60; field will limit the response to users that are queue agents in at least one of these queues.</param>
        public GroupingByMembers(MembersGroupingOptions groupByMembers = default(MembersGroupingOptions), List<string> keys = default(List<string>))
        {
            // to ensure "groupByMembers" is required (not null)
            if (groupByMembers == null)
            {
                throw new InvalidDataException("groupByMembers is a required property for GroupingByMembers and cannot be null");
            }
            else
            {
                this.GroupByMembers = groupByMembers;
            }

            this.Keys = keys;
        }


        /// <summary>
        /// This field can be used to further limit the users selection by specifying unique identifiers of corresponding entities. For example, providing unique queue ids along with &#x60;Queue&#x60; in &#x60;groupByMembers&#x60; field will limit the response to users that are queue agents in at least one of these queues
        /// </summary>
        /// <value>This field can be used to further limit the users selection by specifying unique identifiers of corresponding entities. For example, providing unique queue ids along with &#x60;Queue&#x60; in &#x60;groupByMembers&#x60; field will limit the response to users that are queue agents in at least one of these queues</value>
        [DataMember(Name="keys", EmitDefaultValue=false)]
        public List<string> Keys { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GroupingByMembers {\n");
            sb.Append("  GroupByMembers: ").Append(GroupByMembers).Append("\n");
            sb.Append("  Keys: ").Append(Keys).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupingByMembers);
        }

        /// <summary>
        /// Returns true if GroupingByMembers instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupingByMembers to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupingByMembers input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GroupByMembers == input.GroupByMembers ||
                    (this.GroupByMembers != null &&
                    this.GroupByMembers.Equals(input.GroupByMembers))
                ) && 
                (
                    this.Keys == input.Keys ||
                    this.Keys != null &&
                    input.Keys != null &&
                    this.Keys.SequenceEqual(input.Keys)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GroupByMembers != null)
                    hashCode = hashCode * 59 + this.GroupByMembers.GetHashCode();
                if (this.Keys != null)
                    hashCode = hashCode * 59 + this.Keys.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
