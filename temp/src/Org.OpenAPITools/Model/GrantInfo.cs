/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GrantInfo
    /// </summary>
    [DataContract]
    public partial class GrantInfo :  IEquatable<GrantInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GrantInfo" /> class.
        /// </summary>
        /// <param name="uri">Canonical URI of a grant.</param>
        /// <param name="extension">extension.</param>
        /// <param name="callPickup">Specifies if picking up of other extensions&#39; calls is allowed for the extension. If &#39;Presence&#39; feature is disabled for the given extension, the flag is not returned.</param>
        /// <param name="callMonitoring">Specifies if monitoring of other extensions&#39; calls is allowed for the extension. If &#39;CallMonitoring&#39; feature is disabled for the given extension, the flag is not returned.</param>
        /// <param name="callOnBehalfOf">Specifies whether the current extension is able to make or receive calls on behalf of the user referenced in extension object.</param>
        /// <param name="callDelegation">Specifies whether the current extension can delegate a call to the user referenced in extension object.</param>
        /// <param name="groupPaging">Specifies whether the current extension is allowed to call Paging Only group referenced to in extension object.</param>
        /// <param name="callQueueSetup">Specifies whether the current extension is assigned as a Full-Access manager in the call queue referenced in extension object.</param>
        /// <param name="callQueueMembersSetup">Specifies whether the current extension is assigned as a Members-Only manager in the call queue referenced in extension object.</param>
        /// <param name="callQueueMessages">Specifies whether the current extension is assigned as a Messages Manager in the queue referenced in extension object.</param>
        public GrantInfo(string uri = default(string), ExtensionInfoGrants extension = default(ExtensionInfoGrants), bool callPickup = default(bool), bool callMonitoring = default(bool), bool callOnBehalfOf = default(bool), bool callDelegation = default(bool), bool groupPaging = default(bool), bool callQueueSetup = default(bool), bool callQueueMembersSetup = default(bool), bool callQueueMessages = default(bool))
        {
            this.Uri = uri;
            this.Extension = extension;
            this.CallPickup = callPickup;
            this.CallMonitoring = callMonitoring;
            this.CallOnBehalfOf = callOnBehalfOf;
            this.CallDelegation = callDelegation;
            this.GroupPaging = groupPaging;
            this.CallQueueSetup = callQueueSetup;
            this.CallQueueMembersSetup = callQueueMembersSetup;
            this.CallQueueMessages = callQueueMessages;
        }

        /// <summary>
        /// Canonical URI of a grant
        /// </summary>
        /// <value>Canonical URI of a grant</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Gets or Sets Extension
        /// </summary>
        [DataMember(Name="extension", EmitDefaultValue=false)]
        public ExtensionInfoGrants Extension { get; set; }

        /// <summary>
        /// Specifies if picking up of other extensions&#39; calls is allowed for the extension. If &#39;Presence&#39; feature is disabled for the given extension, the flag is not returned
        /// </summary>
        /// <value>Specifies if picking up of other extensions&#39; calls is allowed for the extension. If &#39;Presence&#39; feature is disabled for the given extension, the flag is not returned</value>
        [DataMember(Name="callPickup", EmitDefaultValue=false)]
        public bool CallPickup { get; set; }

        /// <summary>
        /// Specifies if monitoring of other extensions&#39; calls is allowed for the extension. If &#39;CallMonitoring&#39; feature is disabled for the given extension, the flag is not returned
        /// </summary>
        /// <value>Specifies if monitoring of other extensions&#39; calls is allowed for the extension. If &#39;CallMonitoring&#39; feature is disabled for the given extension, the flag is not returned</value>
        [DataMember(Name="callMonitoring", EmitDefaultValue=false)]
        public bool CallMonitoring { get; set; }

        /// <summary>
        /// Specifies whether the current extension is able to make or receive calls on behalf of the user referenced in extension object
        /// </summary>
        /// <value>Specifies whether the current extension is able to make or receive calls on behalf of the user referenced in extension object</value>
        [DataMember(Name="callOnBehalfOf", EmitDefaultValue=false)]
        public bool CallOnBehalfOf { get; set; }

        /// <summary>
        /// Specifies whether the current extension can delegate a call to the user referenced in extension object
        /// </summary>
        /// <value>Specifies whether the current extension can delegate a call to the user referenced in extension object</value>
        [DataMember(Name="callDelegation", EmitDefaultValue=false)]
        public bool CallDelegation { get; set; }

        /// <summary>
        /// Specifies whether the current extension is allowed to call Paging Only group referenced to in extension object
        /// </summary>
        /// <value>Specifies whether the current extension is allowed to call Paging Only group referenced to in extension object</value>
        [DataMember(Name="groupPaging", EmitDefaultValue=false)]
        public bool GroupPaging { get; set; }

        /// <summary>
        /// Specifies whether the current extension is assigned as a Full-Access manager in the call queue referenced in extension object
        /// </summary>
        /// <value>Specifies whether the current extension is assigned as a Full-Access manager in the call queue referenced in extension object</value>
        [DataMember(Name="callQueueSetup", EmitDefaultValue=false)]
        public bool CallQueueSetup { get; set; }

        /// <summary>
        /// Specifies whether the current extension is assigned as a Members-Only manager in the call queue referenced in extension object
        /// </summary>
        /// <value>Specifies whether the current extension is assigned as a Members-Only manager in the call queue referenced in extension object</value>
        [DataMember(Name="callQueueMembersSetup", EmitDefaultValue=false)]
        public bool CallQueueMembersSetup { get; set; }

        /// <summary>
        /// Specifies whether the current extension is assigned as a Messages Manager in the queue referenced in extension object
        /// </summary>
        /// <value>Specifies whether the current extension is assigned as a Messages Manager in the queue referenced in extension object</value>
        [DataMember(Name="callQueueMessages", EmitDefaultValue=false)]
        public bool CallQueueMessages { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GrantInfo {\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("  CallPickup: ").Append(CallPickup).Append("\n");
            sb.Append("  CallMonitoring: ").Append(CallMonitoring).Append("\n");
            sb.Append("  CallOnBehalfOf: ").Append(CallOnBehalfOf).Append("\n");
            sb.Append("  CallDelegation: ").Append(CallDelegation).Append("\n");
            sb.Append("  GroupPaging: ").Append(GroupPaging).Append("\n");
            sb.Append("  CallQueueSetup: ").Append(CallQueueSetup).Append("\n");
            sb.Append("  CallQueueMembersSetup: ").Append(CallQueueMembersSetup).Append("\n");
            sb.Append("  CallQueueMessages: ").Append(CallQueueMessages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GrantInfo);
        }

        /// <summary>
        /// Returns true if GrantInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of GrantInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GrantInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.Extension == input.Extension ||
                    (this.Extension != null &&
                    this.Extension.Equals(input.Extension))
                ) && 
                (
                    this.CallPickup == input.CallPickup ||
                    (this.CallPickup != null &&
                    this.CallPickup.Equals(input.CallPickup))
                ) && 
                (
                    this.CallMonitoring == input.CallMonitoring ||
                    (this.CallMonitoring != null &&
                    this.CallMonitoring.Equals(input.CallMonitoring))
                ) && 
                (
                    this.CallOnBehalfOf == input.CallOnBehalfOf ||
                    (this.CallOnBehalfOf != null &&
                    this.CallOnBehalfOf.Equals(input.CallOnBehalfOf))
                ) && 
                (
                    this.CallDelegation == input.CallDelegation ||
                    (this.CallDelegation != null &&
                    this.CallDelegation.Equals(input.CallDelegation))
                ) && 
                (
                    this.GroupPaging == input.GroupPaging ||
                    (this.GroupPaging != null &&
                    this.GroupPaging.Equals(input.GroupPaging))
                ) && 
                (
                    this.CallQueueSetup == input.CallQueueSetup ||
                    (this.CallQueueSetup != null &&
                    this.CallQueueSetup.Equals(input.CallQueueSetup))
                ) && 
                (
                    this.CallQueueMembersSetup == input.CallQueueMembersSetup ||
                    (this.CallQueueMembersSetup != null &&
                    this.CallQueueMembersSetup.Equals(input.CallQueueMembersSetup))
                ) && 
                (
                    this.CallQueueMessages == input.CallQueueMessages ||
                    (this.CallQueueMessages != null &&
                    this.CallQueueMessages.Equals(input.CallQueueMessages))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.Extension != null)
                    hashCode = hashCode * 59 + this.Extension.GetHashCode();
                if (this.CallPickup != null)
                    hashCode = hashCode * 59 + this.CallPickup.GetHashCode();
                if (this.CallMonitoring != null)
                    hashCode = hashCode * 59 + this.CallMonitoring.GetHashCode();
                if (this.CallOnBehalfOf != null)
                    hashCode = hashCode * 59 + this.CallOnBehalfOf.GetHashCode();
                if (this.CallDelegation != null)
                    hashCode = hashCode * 59 + this.CallDelegation.GetHashCode();
                if (this.GroupPaging != null)
                    hashCode = hashCode * 59 + this.GroupPaging.GetHashCode();
                if (this.CallQueueSetup != null)
                    hashCode = hashCode * 59 + this.CallQueueSetup.GetHashCode();
                if (this.CallQueueMembersSetup != null)
                    hashCode = hashCode * 59 + this.CallQueueMembersSetup.GetHashCode();
                if (this.CallQueueMessages != null)
                    hashCode = hashCode * 59 + this.CallQueueMessages.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
