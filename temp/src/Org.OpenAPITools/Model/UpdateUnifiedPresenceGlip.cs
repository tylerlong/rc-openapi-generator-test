/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// UpdateUnifiedPresenceGlip
    /// </summary>
    [DataContract]
    public partial class UpdateUnifiedPresenceGlip :  IEquatable<UpdateUnifiedPresenceGlip>, IValidatableObject
    {
        /// <summary>
        /// Visibility setting allowing other users to see Glip presence status
        /// </summary>
        /// <value>Visibility setting allowing other users to see Glip presence status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VisibilityEnum
        {
            /// <summary>
            /// Enum Visible for value: Visible
            /// </summary>
            [EnumMember(Value = "Visible")]
            Visible = 1,

            /// <summary>
            /// Enum Invisible for value: Invisible
            /// </summary>
            [EnumMember(Value = "Invisible")]
            Invisible = 2

        }

        /// <summary>
        /// Visibility setting allowing other users to see Glip presence status
        /// </summary>
        /// <value>Visibility setting allowing other users to see Glip presence status</value>
        [DataMember(Name="visibility", EmitDefaultValue=false)]
        public VisibilityEnum? Visibility { get; set; }
        /// <summary>
        /// Availability setting specifying whether to receive Glip notifications or not
        /// </summary>
        /// <value>Availability setting specifying whether to receive Glip notifications or not</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AvailabilityEnum
        {
            /// <summary>
            /// Enum Available for value: Available
            /// </summary>
            [EnumMember(Value = "Available")]
            Available = 1,

            /// <summary>
            /// Enum DND for value: DND
            /// </summary>
            [EnumMember(Value = "DND")]
            DND = 2

        }

        /// <summary>
        /// Availability setting specifying whether to receive Glip notifications or not
        /// </summary>
        /// <value>Availability setting specifying whether to receive Glip notifications or not</value>
        [DataMember(Name="availability", EmitDefaultValue=false)]
        public AvailabilityEnum? Availability { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateUnifiedPresenceGlip" /> class.
        /// </summary>
        /// <param name="visibility">Visibility setting allowing other users to see Glip presence status.</param>
        /// <param name="availability">Availability setting specifying whether to receive Glip notifications or not.</param>
        public UpdateUnifiedPresenceGlip(VisibilityEnum? visibility = default(VisibilityEnum?), AvailabilityEnum? availability = default(AvailabilityEnum?))
        {
            this.Visibility = visibility;
            this.Availability = availability;
        }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateUnifiedPresenceGlip {\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("  Availability: ").Append(Availability).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateUnifiedPresenceGlip);
        }

        /// <summary>
        /// Returns true if UpdateUnifiedPresenceGlip instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateUnifiedPresenceGlip to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateUnifiedPresenceGlip input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Visibility == input.Visibility ||
                    (this.Visibility != null &&
                    this.Visibility.Equals(input.Visibility))
                ) && 
                (
                    this.Availability == input.Availability ||
                    (this.Availability != null &&
                    this.Availability.Equals(input.Availability))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Visibility != null)
                    hashCode = hashCode * 59 + this.Visibility.GetHashCode();
                if (this.Availability != null)
                    hashCode = hashCode * 59 + this.Availability.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
