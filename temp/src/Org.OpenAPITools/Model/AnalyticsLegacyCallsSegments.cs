/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AnalyticsLegacyCallsSegments
    /// </summary>
    [DataContract]
    public partial class AnalyticsLegacyCallsSegments :  IEquatable<AnalyticsLegacyCallsSegments>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsLegacyCallsSegments" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AnalyticsLegacyCallsSegments() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsLegacyCallsSegments" /> class.
        /// </summary>
        /// <param name="ringing">ringing (required).</param>
        /// <param name="liveTalk">liveTalk (required).</param>
        /// <param name="holds">holds (required).</param>
        /// <param name="parks">parks (required).</param>
        /// <param name="transfers">transfers (required).</param>
        /// <param name="ivrPrompts">ivrPrompts (required).</param>
        /// <param name="voicemail">voicemail (required).</param>
        /// <param name="vmGreetings">vmGreetings (required).</param>
        /// <param name="setup">setup (required).</param>
        public AnalyticsLegacyCallsSegments(double ringing = default(double), double liveTalk = default(double), double holds = default(double), double parks = default(double), double transfers = default(double), double ivrPrompts = default(double), double voicemail = default(double), double vmGreetings = default(double), double setup = default(double))
        {
            // to ensure "ringing" is required (not null)
            if (ringing == null)
            {
                throw new InvalidDataException("ringing is a required property for AnalyticsLegacyCallsSegments and cannot be null");
            }
            else
            {
                this.Ringing = ringing;
            }

            // to ensure "liveTalk" is required (not null)
            if (liveTalk == null)
            {
                throw new InvalidDataException("liveTalk is a required property for AnalyticsLegacyCallsSegments and cannot be null");
            }
            else
            {
                this.LiveTalk = liveTalk;
            }

            // to ensure "holds" is required (not null)
            if (holds == null)
            {
                throw new InvalidDataException("holds is a required property for AnalyticsLegacyCallsSegments and cannot be null");
            }
            else
            {
                this.Holds = holds;
            }

            // to ensure "parks" is required (not null)
            if (parks == null)
            {
                throw new InvalidDataException("parks is a required property for AnalyticsLegacyCallsSegments and cannot be null");
            }
            else
            {
                this.Parks = parks;
            }

            // to ensure "transfers" is required (not null)
            if (transfers == null)
            {
                throw new InvalidDataException("transfers is a required property for AnalyticsLegacyCallsSegments and cannot be null");
            }
            else
            {
                this.Transfers = transfers;
            }

            // to ensure "ivrPrompts" is required (not null)
            if (ivrPrompts == null)
            {
                throw new InvalidDataException("ivrPrompts is a required property for AnalyticsLegacyCallsSegments and cannot be null");
            }
            else
            {
                this.IvrPrompts = ivrPrompts;
            }

            // to ensure "voicemail" is required (not null)
            if (voicemail == null)
            {
                throw new InvalidDataException("voicemail is a required property for AnalyticsLegacyCallsSegments and cannot be null");
            }
            else
            {
                this.Voicemail = voicemail;
            }

            // to ensure "vmGreetings" is required (not null)
            if (vmGreetings == null)
            {
                throw new InvalidDataException("vmGreetings is a required property for AnalyticsLegacyCallsSegments and cannot be null");
            }
            else
            {
                this.VmGreetings = vmGreetings;
            }

            // to ensure "setup" is required (not null)
            if (setup == null)
            {
                throw new InvalidDataException("setup is a required property for AnalyticsLegacyCallsSegments and cannot be null");
            }
            else
            {
                this.Setup = setup;
            }

        }

        /// <summary>
        /// Gets or Sets Ringing
        /// </summary>
        [DataMember(Name="ringing", EmitDefaultValue=true)]
        public double Ringing { get; set; }

        /// <summary>
        /// Gets or Sets LiveTalk
        /// </summary>
        [DataMember(Name="liveTalk", EmitDefaultValue=true)]
        public double LiveTalk { get; set; }

        /// <summary>
        /// Gets or Sets Holds
        /// </summary>
        [DataMember(Name="holds", EmitDefaultValue=true)]
        public double Holds { get; set; }

        /// <summary>
        /// Gets or Sets Parks
        /// </summary>
        [DataMember(Name="parks", EmitDefaultValue=true)]
        public double Parks { get; set; }

        /// <summary>
        /// Gets or Sets Transfers
        /// </summary>
        [DataMember(Name="transfers", EmitDefaultValue=true)]
        public double Transfers { get; set; }

        /// <summary>
        /// Gets or Sets IvrPrompts
        /// </summary>
        [DataMember(Name="ivrPrompts", EmitDefaultValue=true)]
        public double IvrPrompts { get; set; }

        /// <summary>
        /// Gets or Sets Voicemail
        /// </summary>
        [DataMember(Name="voicemail", EmitDefaultValue=true)]
        public double Voicemail { get; set; }

        /// <summary>
        /// Gets or Sets VmGreetings
        /// </summary>
        [DataMember(Name="vmGreetings", EmitDefaultValue=true)]
        public double VmGreetings { get; set; }

        /// <summary>
        /// Gets or Sets Setup
        /// </summary>
        [DataMember(Name="setup", EmitDefaultValue=true)]
        public double Setup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnalyticsLegacyCallsSegments {\n");
            sb.Append("  Ringing: ").Append(Ringing).Append("\n");
            sb.Append("  LiveTalk: ").Append(LiveTalk).Append("\n");
            sb.Append("  Holds: ").Append(Holds).Append("\n");
            sb.Append("  Parks: ").Append(Parks).Append("\n");
            sb.Append("  Transfers: ").Append(Transfers).Append("\n");
            sb.Append("  IvrPrompts: ").Append(IvrPrompts).Append("\n");
            sb.Append("  Voicemail: ").Append(Voicemail).Append("\n");
            sb.Append("  VmGreetings: ").Append(VmGreetings).Append("\n");
            sb.Append("  Setup: ").Append(Setup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AnalyticsLegacyCallsSegments);
        }

        /// <summary>
        /// Returns true if AnalyticsLegacyCallsSegments instances are equal
        /// </summary>
        /// <param name="input">Instance of AnalyticsLegacyCallsSegments to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnalyticsLegacyCallsSegments input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Ringing == input.Ringing ||
                    (this.Ringing != null &&
                    this.Ringing.Equals(input.Ringing))
                ) && 
                (
                    this.LiveTalk == input.LiveTalk ||
                    (this.LiveTalk != null &&
                    this.LiveTalk.Equals(input.LiveTalk))
                ) && 
                (
                    this.Holds == input.Holds ||
                    (this.Holds != null &&
                    this.Holds.Equals(input.Holds))
                ) && 
                (
                    this.Parks == input.Parks ||
                    (this.Parks != null &&
                    this.Parks.Equals(input.Parks))
                ) && 
                (
                    this.Transfers == input.Transfers ||
                    (this.Transfers != null &&
                    this.Transfers.Equals(input.Transfers))
                ) && 
                (
                    this.IvrPrompts == input.IvrPrompts ||
                    (this.IvrPrompts != null &&
                    this.IvrPrompts.Equals(input.IvrPrompts))
                ) && 
                (
                    this.Voicemail == input.Voicemail ||
                    (this.Voicemail != null &&
                    this.Voicemail.Equals(input.Voicemail))
                ) && 
                (
                    this.VmGreetings == input.VmGreetings ||
                    (this.VmGreetings != null &&
                    this.VmGreetings.Equals(input.VmGreetings))
                ) && 
                (
                    this.Setup == input.Setup ||
                    (this.Setup != null &&
                    this.Setup.Equals(input.Setup))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ringing != null)
                    hashCode = hashCode * 59 + this.Ringing.GetHashCode();
                if (this.LiveTalk != null)
                    hashCode = hashCode * 59 + this.LiveTalk.GetHashCode();
                if (this.Holds != null)
                    hashCode = hashCode * 59 + this.Holds.GetHashCode();
                if (this.Parks != null)
                    hashCode = hashCode * 59 + this.Parks.GetHashCode();
                if (this.Transfers != null)
                    hashCode = hashCode * 59 + this.Transfers.GetHashCode();
                if (this.IvrPrompts != null)
                    hashCode = hashCode * 59 + this.IvrPrompts.GetHashCode();
                if (this.Voicemail != null)
                    hashCode = hashCode * 59 + this.Voicemail.GetHashCode();
                if (this.VmGreetings != null)
                    hashCode = hashCode * 59 + this.VmGreetings.GetHashCode();
                if (this.Setup != null)
                    hashCode = hashCode * 59 + this.Setup.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
