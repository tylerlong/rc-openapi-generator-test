/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Schedule when an answering rule should be applied
    /// </summary>
    [DataContract]
    public partial class CompanyAnsweringRuleScheduleInfo :  IEquatable<CompanyAnsweringRuleScheduleInfo>, IValidatableObject
    {
        /// <summary>
        /// Reference to Business Hours or After Hours schedule &#x3D; [&#39;BusinessHours&#39;, &#39;AfterHours&#39;]
        /// </summary>
        /// <value>Reference to Business Hours or After Hours schedule &#x3D; [&#39;BusinessHours&#39;, &#39;AfterHours&#39;]</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RefEnum
        {
            /// <summary>
            /// Enum BusinessHours for value: BusinessHours
            /// </summary>
            [EnumMember(Value = "BusinessHours")]
            BusinessHours = 1,

            /// <summary>
            /// Enum AfterHours for value: AfterHours
            /// </summary>
            [EnumMember(Value = "AfterHours")]
            AfterHours = 2

        }

        /// <summary>
        /// Reference to Business Hours or After Hours schedule &#x3D; [&#39;BusinessHours&#39;, &#39;AfterHours&#39;]
        /// </summary>
        /// <value>Reference to Business Hours or After Hours schedule &#x3D; [&#39;BusinessHours&#39;, &#39;AfterHours&#39;]</value>
        [DataMember(Name="ref", EmitDefaultValue=false)]
        public RefEnum? Ref { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyAnsweringRuleScheduleInfo" /> class.
        /// </summary>
        /// <param name="weeklyRanges">weeklyRanges.</param>
        /// <param name="ranges">Specific data ranges. If specified, weeklyRanges cannot be specified.</param>
        /// <param name="_ref">Reference to Business Hours or After Hours schedule &#x3D; [&#39;BusinessHours&#39;, &#39;AfterHours&#39;].</param>
        public CompanyAnsweringRuleScheduleInfo(CompanyAnsweringRuleWeeklyScheduleInfoRequest weeklyRanges = default(CompanyAnsweringRuleWeeklyScheduleInfoRequest), List<RangesInfo> ranges = default(List<RangesInfo>), RefEnum? _ref = default(RefEnum?))
        {
            this.WeeklyRanges = weeklyRanges;
            this.Ranges = ranges;
            this.Ref = _ref;
        }

        /// <summary>
        /// Gets or Sets WeeklyRanges
        /// </summary>
        [DataMember(Name="weeklyRanges", EmitDefaultValue=false)]
        public CompanyAnsweringRuleWeeklyScheduleInfoRequest WeeklyRanges { get; set; }

        /// <summary>
        /// Specific data ranges. If specified, weeklyRanges cannot be specified
        /// </summary>
        /// <value>Specific data ranges. If specified, weeklyRanges cannot be specified</value>
        [DataMember(Name="ranges", EmitDefaultValue=false)]
        public List<RangesInfo> Ranges { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompanyAnsweringRuleScheduleInfo {\n");
            sb.Append("  WeeklyRanges: ").Append(WeeklyRanges).Append("\n");
            sb.Append("  Ranges: ").Append(Ranges).Append("\n");
            sb.Append("  Ref: ").Append(Ref).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompanyAnsweringRuleScheduleInfo);
        }

        /// <summary>
        /// Returns true if CompanyAnsweringRuleScheduleInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of CompanyAnsweringRuleScheduleInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompanyAnsweringRuleScheduleInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.WeeklyRanges == input.WeeklyRanges ||
                    (this.WeeklyRanges != null &&
                    this.WeeklyRanges.Equals(input.WeeklyRanges))
                ) && 
                (
                    this.Ranges == input.Ranges ||
                    this.Ranges != null &&
                    input.Ranges != null &&
                    this.Ranges.SequenceEqual(input.Ranges)
                ) && 
                (
                    this.Ref == input.Ref ||
                    (this.Ref != null &&
                    this.Ref.Equals(input.Ref))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WeeklyRanges != null)
                    hashCode = hashCode * 59 + this.WeeklyRanges.GetHashCode();
                if (this.Ranges != null)
                    hashCode = hashCode * 59 + this.Ranges.GetHashCode();
                if (this.Ref != null)
                    hashCode = hashCode * 59 + this.Ref.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
