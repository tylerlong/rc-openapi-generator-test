/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Limits which are effective for the account
    /// </summary>
    [DataContract]
    public partial class AccountLimits :  IEquatable<AccountLimits>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountLimits" /> class.
        /// </summary>
        /// <param name="freeSoftPhoneLinesPerExtension">Max number of free softphone phone lines per user extension.</param>
        /// <param name="meetingSize">Max number of participants in RingCentral meeting hosted by this account&#39;s user.</param>
        /// <param name="cloudRecordingStorage">Meetings recording cloud storage limitation in Gb.</param>
        /// <param name="maxMonitoredExtensionsPerUser">Max number of extensions which can be included in the list of users monitored for Presence.</param>
        /// <param name="maxExtensionNumberLength">Max length of extension numbers of an account; the supported value is up to 8 symbols, depends on account type.</param>
        /// <param name="siteCodeLength">Length of a site code.</param>
        /// <param name="shortExtensionNumberLength">Length of a short extension number.</param>
        public AccountLimits(int freeSoftPhoneLinesPerExtension = default(int), int meetingSize = default(int), int cloudRecordingStorage = default(int), int maxMonitoredExtensionsPerUser = default(int), int maxExtensionNumberLength = default(int), int siteCodeLength = default(int), int shortExtensionNumberLength = default(int))
        {
            this.FreeSoftPhoneLinesPerExtension = freeSoftPhoneLinesPerExtension;
            this.MeetingSize = meetingSize;
            this.CloudRecordingStorage = cloudRecordingStorage;
            this.MaxMonitoredExtensionsPerUser = maxMonitoredExtensionsPerUser;
            this.MaxExtensionNumberLength = maxExtensionNumberLength;
            this.SiteCodeLength = siteCodeLength;
            this.ShortExtensionNumberLength = shortExtensionNumberLength;
        }

        /// <summary>
        /// Max number of free softphone phone lines per user extension
        /// </summary>
        /// <value>Max number of free softphone phone lines per user extension</value>
        [DataMember(Name="freeSoftPhoneLinesPerExtension", EmitDefaultValue=false)]
        public int FreeSoftPhoneLinesPerExtension { get; set; }

        /// <summary>
        /// Max number of participants in RingCentral meeting hosted by this account&#39;s user
        /// </summary>
        /// <value>Max number of participants in RingCentral meeting hosted by this account&#39;s user</value>
        [DataMember(Name="meetingSize", EmitDefaultValue=false)]
        public int MeetingSize { get; set; }

        /// <summary>
        /// Meetings recording cloud storage limitation in Gb
        /// </summary>
        /// <value>Meetings recording cloud storage limitation in Gb</value>
        [DataMember(Name="cloudRecordingStorage", EmitDefaultValue=false)]
        public int CloudRecordingStorage { get; set; }

        /// <summary>
        /// Max number of extensions which can be included in the list of users monitored for Presence
        /// </summary>
        /// <value>Max number of extensions which can be included in the list of users monitored for Presence</value>
        [DataMember(Name="maxMonitoredExtensionsPerUser", EmitDefaultValue=false)]
        public int MaxMonitoredExtensionsPerUser { get; set; }

        /// <summary>
        /// Max length of extension numbers of an account; the supported value is up to 8 symbols, depends on account type
        /// </summary>
        /// <value>Max length of extension numbers of an account; the supported value is up to 8 symbols, depends on account type</value>
        [DataMember(Name="maxExtensionNumberLength", EmitDefaultValue=false)]
        public int MaxExtensionNumberLength { get; set; }

        /// <summary>
        /// Length of a site code
        /// </summary>
        /// <value>Length of a site code</value>
        [DataMember(Name="siteCodeLength", EmitDefaultValue=false)]
        public int SiteCodeLength { get; set; }

        /// <summary>
        /// Length of a short extension number
        /// </summary>
        /// <value>Length of a short extension number</value>
        [DataMember(Name="shortExtensionNumberLength", EmitDefaultValue=false)]
        public int ShortExtensionNumberLength { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountLimits {\n");
            sb.Append("  FreeSoftPhoneLinesPerExtension: ").Append(FreeSoftPhoneLinesPerExtension).Append("\n");
            sb.Append("  MeetingSize: ").Append(MeetingSize).Append("\n");
            sb.Append("  CloudRecordingStorage: ").Append(CloudRecordingStorage).Append("\n");
            sb.Append("  MaxMonitoredExtensionsPerUser: ").Append(MaxMonitoredExtensionsPerUser).Append("\n");
            sb.Append("  MaxExtensionNumberLength: ").Append(MaxExtensionNumberLength).Append("\n");
            sb.Append("  SiteCodeLength: ").Append(SiteCodeLength).Append("\n");
            sb.Append("  ShortExtensionNumberLength: ").Append(ShortExtensionNumberLength).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountLimits);
        }

        /// <summary>
        /// Returns true if AccountLimits instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountLimits to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountLimits input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FreeSoftPhoneLinesPerExtension == input.FreeSoftPhoneLinesPerExtension ||
                    (this.FreeSoftPhoneLinesPerExtension != null &&
                    this.FreeSoftPhoneLinesPerExtension.Equals(input.FreeSoftPhoneLinesPerExtension))
                ) && 
                (
                    this.MeetingSize == input.MeetingSize ||
                    (this.MeetingSize != null &&
                    this.MeetingSize.Equals(input.MeetingSize))
                ) && 
                (
                    this.CloudRecordingStorage == input.CloudRecordingStorage ||
                    (this.CloudRecordingStorage != null &&
                    this.CloudRecordingStorage.Equals(input.CloudRecordingStorage))
                ) && 
                (
                    this.MaxMonitoredExtensionsPerUser == input.MaxMonitoredExtensionsPerUser ||
                    (this.MaxMonitoredExtensionsPerUser != null &&
                    this.MaxMonitoredExtensionsPerUser.Equals(input.MaxMonitoredExtensionsPerUser))
                ) && 
                (
                    this.MaxExtensionNumberLength == input.MaxExtensionNumberLength ||
                    (this.MaxExtensionNumberLength != null &&
                    this.MaxExtensionNumberLength.Equals(input.MaxExtensionNumberLength))
                ) && 
                (
                    this.SiteCodeLength == input.SiteCodeLength ||
                    (this.SiteCodeLength != null &&
                    this.SiteCodeLength.Equals(input.SiteCodeLength))
                ) && 
                (
                    this.ShortExtensionNumberLength == input.ShortExtensionNumberLength ||
                    (this.ShortExtensionNumberLength != null &&
                    this.ShortExtensionNumberLength.Equals(input.ShortExtensionNumberLength))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FreeSoftPhoneLinesPerExtension != null)
                    hashCode = hashCode * 59 + this.FreeSoftPhoneLinesPerExtension.GetHashCode();
                if (this.MeetingSize != null)
                    hashCode = hashCode * 59 + this.MeetingSize.GetHashCode();
                if (this.CloudRecordingStorage != null)
                    hashCode = hashCode * 59 + this.CloudRecordingStorage.GetHashCode();
                if (this.MaxMonitoredExtensionsPerUser != null)
                    hashCode = hashCode * 59 + this.MaxMonitoredExtensionsPerUser.GetHashCode();
                if (this.MaxExtensionNumberLength != null)
                    hashCode = hashCode * 59 + this.MaxExtensionNumberLength.GetHashCode();
                if (this.SiteCodeLength != null)
                    hashCode = hashCode * 59 + this.SiteCodeLength.GetHashCode();
                if (this.ShortExtensionNumberLength != null)
                    hashCode = hashCode * 59 + this.ShortExtensionNumberLength.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
