/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Shipping address for the order. If it coincides with the Emergency Service Address, then can be omitted. By default the same value as the emergencyServiceAddress. Multiple addresses can be specified; in case the order contains several devices, they can be delivered to different addresses
    /// </summary>
    [DataContract]
    public partial class ShippingAddressInfo :  IEquatable<ShippingAddressInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingAddressInfo" /> class.
        /// </summary>
        /// <param name="customerName">Name of a primary contact person (receiver).</param>
        /// <param name="additionalCustomerName">Name of an additional contact person. Should be specified for countries except the US, Canada, the UK and Australia..</param>
        /// <param name="customerEmail">Email of a primary contact person (receiver). Should be specified for countries except the US, Canada, the UK and Australia..</param>
        /// <param name="additionalCustomerEmail">Email of an additional contact person. Should be specified for countries except the US, Canada, the UK and Australia..</param>
        /// <param name="customerPhone">Phone number of a primary contact person (receiver). Should be specified for countries except the US, Canada, the UK and Australia.</param>
        /// <param name="additionalCustomerPhone">Phone number of an additional contact person. Should be specified for countries except the US, Canada, the UK &amp; Australia..</param>
        /// <param name="street">Street address, line 1 - street address, P.O. box, company name, c/o.</param>
        /// <param name="street2">Street address, line 2 - apartment, suite, unit, building, floor, etc..</param>
        /// <param name="city">City name.</param>
        /// <param name="state">State/province name.</param>
        /// <param name="stateId">Internal identifier of a state.</param>
        /// <param name="stateIsoCode">ISO code of a state.</param>
        /// <param name="stateName">Full name of a state.</param>
        /// <param name="countryId">Internal identifier of a country.</param>
        /// <param name="countryIsoCode">ISO code of a country.</param>
        /// <param name="country">Country name.</param>
        /// <param name="countryName">Full name of a country.</param>
        /// <param name="zip">Zip code.</param>
        /// <param name="taxId">National taxpayer identification number. Should be specified for Brazil (CNPJ/CPF number) and Argentina (CUIT number)..</param>
        public ShippingAddressInfo(string customerName = default(string), string additionalCustomerName = default(string), string customerEmail = default(string), string additionalCustomerEmail = default(string), string customerPhone = default(string), string additionalCustomerPhone = default(string), string street = default(string), string street2 = default(string), string city = default(string), string state = default(string), string stateId = default(string), string stateIsoCode = default(string), string stateName = default(string), string countryId = default(string), string countryIsoCode = default(string), string country = default(string), string countryName = default(string), string zip = default(string), string taxId = default(string))
        {
            this.CustomerName = customerName;
            this.AdditionalCustomerName = additionalCustomerName;
            this.CustomerEmail = customerEmail;
            this.AdditionalCustomerEmail = additionalCustomerEmail;
            this.CustomerPhone = customerPhone;
            this.AdditionalCustomerPhone = additionalCustomerPhone;
            this.Street = street;
            this.Street2 = street2;
            this.City = city;
            this.State = state;
            this.StateId = stateId;
            this.StateIsoCode = stateIsoCode;
            this.StateName = stateName;
            this.CountryId = countryId;
            this.CountryIsoCode = countryIsoCode;
            this.Country = country;
            this.CountryName = countryName;
            this.Zip = zip;
            this.TaxId = taxId;
        }

        /// <summary>
        /// Name of a primary contact person (receiver)
        /// </summary>
        /// <value>Name of a primary contact person (receiver)</value>
        [DataMember(Name="customerName", EmitDefaultValue=false)]
        public string CustomerName { get; set; }

        /// <summary>
        /// Name of an additional contact person. Should be specified for countries except the US, Canada, the UK and Australia.
        /// </summary>
        /// <value>Name of an additional contact person. Should be specified for countries except the US, Canada, the UK and Australia.</value>
        [DataMember(Name="additionalCustomerName", EmitDefaultValue=false)]
        public string AdditionalCustomerName { get; set; }

        /// <summary>
        /// Email of a primary contact person (receiver). Should be specified for countries except the US, Canada, the UK and Australia.
        /// </summary>
        /// <value>Email of a primary contact person (receiver). Should be specified for countries except the US, Canada, the UK and Australia.</value>
        [DataMember(Name="customerEmail", EmitDefaultValue=false)]
        public string CustomerEmail { get; set; }

        /// <summary>
        /// Email of an additional contact person. Should be specified for countries except the US, Canada, the UK and Australia.
        /// </summary>
        /// <value>Email of an additional contact person. Should be specified for countries except the US, Canada, the UK and Australia.</value>
        [DataMember(Name="additionalCustomerEmail", EmitDefaultValue=false)]
        public string AdditionalCustomerEmail { get; set; }

        /// <summary>
        /// Phone number of a primary contact person (receiver). Should be specified for countries except the US, Canada, the UK and Australia
        /// </summary>
        /// <value>Phone number of a primary contact person (receiver). Should be specified for countries except the US, Canada, the UK and Australia</value>
        [DataMember(Name="customerPhone", EmitDefaultValue=false)]
        public string CustomerPhone { get; set; }

        /// <summary>
        /// Phone number of an additional contact person. Should be specified for countries except the US, Canada, the UK &amp; Australia.
        /// </summary>
        /// <value>Phone number of an additional contact person. Should be specified for countries except the US, Canada, the UK &amp; Australia.</value>
        [DataMember(Name="additionalCustomerPhone", EmitDefaultValue=false)]
        public string AdditionalCustomerPhone { get; set; }

        /// <summary>
        /// Street address, line 1 - street address, P.O. box, company name, c/o
        /// </summary>
        /// <value>Street address, line 1 - street address, P.O. box, company name, c/o</value>
        [DataMember(Name="street", EmitDefaultValue=false)]
        public string Street { get; set; }

        /// <summary>
        /// Street address, line 2 - apartment, suite, unit, building, floor, etc.
        /// </summary>
        /// <value>Street address, line 2 - apartment, suite, unit, building, floor, etc.</value>
        [DataMember(Name="street2", EmitDefaultValue=false)]
        public string Street2 { get; set; }

        /// <summary>
        /// City name
        /// </summary>
        /// <value>City name</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// State/province name
        /// </summary>
        /// <value>State/province name</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Internal identifier of a state
        /// </summary>
        /// <value>Internal identifier of a state</value>
        [DataMember(Name="stateId", EmitDefaultValue=false)]
        public string StateId { get; set; }

        /// <summary>
        /// ISO code of a state
        /// </summary>
        /// <value>ISO code of a state</value>
        [DataMember(Name="stateIsoCode", EmitDefaultValue=false)]
        public string StateIsoCode { get; set; }

        /// <summary>
        /// Full name of a state
        /// </summary>
        /// <value>Full name of a state</value>
        [DataMember(Name="stateName", EmitDefaultValue=false)]
        public string StateName { get; set; }

        /// <summary>
        /// Internal identifier of a country
        /// </summary>
        /// <value>Internal identifier of a country</value>
        [DataMember(Name="countryId", EmitDefaultValue=false)]
        public string CountryId { get; set; }

        /// <summary>
        /// ISO code of a country
        /// </summary>
        /// <value>ISO code of a country</value>
        [DataMember(Name="countryIsoCode", EmitDefaultValue=false)]
        public string CountryIsoCode { get; set; }

        /// <summary>
        /// Country name
        /// </summary>
        /// <value>Country name</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Full name of a country
        /// </summary>
        /// <value>Full name of a country</value>
        [DataMember(Name="countryName", EmitDefaultValue=false)]
        public string CountryName { get; set; }

        /// <summary>
        /// Zip code
        /// </summary>
        /// <value>Zip code</value>
        [DataMember(Name="zip", EmitDefaultValue=false)]
        public string Zip { get; set; }

        /// <summary>
        /// National taxpayer identification number. Should be specified for Brazil (CNPJ/CPF number) and Argentina (CUIT number).
        /// </summary>
        /// <value>National taxpayer identification number. Should be specified for Brazil (CNPJ/CPF number) and Argentina (CUIT number).</value>
        [DataMember(Name="taxId", EmitDefaultValue=false)]
        public string TaxId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShippingAddressInfo {\n");
            sb.Append("  CustomerName: ").Append(CustomerName).Append("\n");
            sb.Append("  AdditionalCustomerName: ").Append(AdditionalCustomerName).Append("\n");
            sb.Append("  CustomerEmail: ").Append(CustomerEmail).Append("\n");
            sb.Append("  AdditionalCustomerEmail: ").Append(AdditionalCustomerEmail).Append("\n");
            sb.Append("  CustomerPhone: ").Append(CustomerPhone).Append("\n");
            sb.Append("  AdditionalCustomerPhone: ").Append(AdditionalCustomerPhone).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  Street2: ").Append(Street2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  StateId: ").Append(StateId).Append("\n");
            sb.Append("  StateIsoCode: ").Append(StateIsoCode).Append("\n");
            sb.Append("  StateName: ").Append(StateName).Append("\n");
            sb.Append("  CountryId: ").Append(CountryId).Append("\n");
            sb.Append("  CountryIsoCode: ").Append(CountryIsoCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  CountryName: ").Append(CountryName).Append("\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("  TaxId: ").Append(TaxId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShippingAddressInfo);
        }

        /// <summary>
        /// Returns true if ShippingAddressInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ShippingAddressInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShippingAddressInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CustomerName == input.CustomerName ||
                    (this.CustomerName != null &&
                    this.CustomerName.Equals(input.CustomerName))
                ) && 
                (
                    this.AdditionalCustomerName == input.AdditionalCustomerName ||
                    (this.AdditionalCustomerName != null &&
                    this.AdditionalCustomerName.Equals(input.AdditionalCustomerName))
                ) && 
                (
                    this.CustomerEmail == input.CustomerEmail ||
                    (this.CustomerEmail != null &&
                    this.CustomerEmail.Equals(input.CustomerEmail))
                ) && 
                (
                    this.AdditionalCustomerEmail == input.AdditionalCustomerEmail ||
                    (this.AdditionalCustomerEmail != null &&
                    this.AdditionalCustomerEmail.Equals(input.AdditionalCustomerEmail))
                ) && 
                (
                    this.CustomerPhone == input.CustomerPhone ||
                    (this.CustomerPhone != null &&
                    this.CustomerPhone.Equals(input.CustomerPhone))
                ) && 
                (
                    this.AdditionalCustomerPhone == input.AdditionalCustomerPhone ||
                    (this.AdditionalCustomerPhone != null &&
                    this.AdditionalCustomerPhone.Equals(input.AdditionalCustomerPhone))
                ) && 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.Street2 == input.Street2 ||
                    (this.Street2 != null &&
                    this.Street2.Equals(input.Street2))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.StateId == input.StateId ||
                    (this.StateId != null &&
                    this.StateId.Equals(input.StateId))
                ) && 
                (
                    this.StateIsoCode == input.StateIsoCode ||
                    (this.StateIsoCode != null &&
                    this.StateIsoCode.Equals(input.StateIsoCode))
                ) && 
                (
                    this.StateName == input.StateName ||
                    (this.StateName != null &&
                    this.StateName.Equals(input.StateName))
                ) && 
                (
                    this.CountryId == input.CountryId ||
                    (this.CountryId != null &&
                    this.CountryId.Equals(input.CountryId))
                ) && 
                (
                    this.CountryIsoCode == input.CountryIsoCode ||
                    (this.CountryIsoCode != null &&
                    this.CountryIsoCode.Equals(input.CountryIsoCode))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.CountryName == input.CountryName ||
                    (this.CountryName != null &&
                    this.CountryName.Equals(input.CountryName))
                ) && 
                (
                    this.Zip == input.Zip ||
                    (this.Zip != null &&
                    this.Zip.Equals(input.Zip))
                ) && 
                (
                    this.TaxId == input.TaxId ||
                    (this.TaxId != null &&
                    this.TaxId.Equals(input.TaxId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomerName != null)
                    hashCode = hashCode * 59 + this.CustomerName.GetHashCode();
                if (this.AdditionalCustomerName != null)
                    hashCode = hashCode * 59 + this.AdditionalCustomerName.GetHashCode();
                if (this.CustomerEmail != null)
                    hashCode = hashCode * 59 + this.CustomerEmail.GetHashCode();
                if (this.AdditionalCustomerEmail != null)
                    hashCode = hashCode * 59 + this.AdditionalCustomerEmail.GetHashCode();
                if (this.CustomerPhone != null)
                    hashCode = hashCode * 59 + this.CustomerPhone.GetHashCode();
                if (this.AdditionalCustomerPhone != null)
                    hashCode = hashCode * 59 + this.AdditionalCustomerPhone.GetHashCode();
                if (this.Street != null)
                    hashCode = hashCode * 59 + this.Street.GetHashCode();
                if (this.Street2 != null)
                    hashCode = hashCode * 59 + this.Street2.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.StateId != null)
                    hashCode = hashCode * 59 + this.StateId.GetHashCode();
                if (this.StateIsoCode != null)
                    hashCode = hashCode * 59 + this.StateIsoCode.GetHashCode();
                if (this.StateName != null)
                    hashCode = hashCode * 59 + this.StateName.GetHashCode();
                if (this.CountryId != null)
                    hashCode = hashCode * 59 + this.CountryId.GetHashCode();
                if (this.CountryIsoCode != null)
                    hashCode = hashCode * 59 + this.CountryIsoCode.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.CountryName != null)
                    hashCode = hashCode * 59 + this.CountryName.GetHashCode();
                if (this.Zip != null)
                    hashCode = hashCode * 59 + this.Zip.GetHashCode();
                if (this.TaxId != null)
                    hashCode = hashCode * 59 + this.TaxId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
