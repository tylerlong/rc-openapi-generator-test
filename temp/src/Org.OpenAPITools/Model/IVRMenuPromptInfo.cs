/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Prompt metadata
    /// </summary>
    [DataContract]
    public partial class IVRMenuPromptInfo :  IEquatable<IVRMenuPromptInfo>, IValidatableObject
    {
        /// <summary>
        /// Prompt mode: custom media or text
        /// </summary>
        /// <value>Prompt mode: custom media or text</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModeEnum
        {
            /// <summary>
            /// Enum Audio for value: Audio
            /// </summary>
            [EnumMember(Value = "Audio")]
            Audio = 1,

            /// <summary>
            /// Enum TextToSpeech for value: TextToSpeech
            /// </summary>
            [EnumMember(Value = "TextToSpeech")]
            TextToSpeech = 2

        }

        /// <summary>
        /// Prompt mode: custom media or text
        /// </summary>
        /// <value>Prompt mode: custom media or text</value>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public ModeEnum? Mode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IVRMenuPromptInfo" /> class.
        /// </summary>
        /// <param name="mode">Prompt mode: custom media or text.</param>
        /// <param name="audio">audio.</param>
        /// <param name="text">For &#39;TextToSpeech&#39; mode only. Prompt text.</param>
        /// <param name="language">language.</param>
        public IVRMenuPromptInfo(ModeEnum? mode = default(ModeEnum?), AudioPromptInfo audio = default(AudioPromptInfo), string text = default(string), PromptLanguageInfo language = default(PromptLanguageInfo))
        {
            this.Mode = mode;
            this.Audio = audio;
            this.Text = text;
            this.Language = language;
        }


        /// <summary>
        /// Gets or Sets Audio
        /// </summary>
        [DataMember(Name="audio", EmitDefaultValue=false)]
        public AudioPromptInfo Audio { get; set; }

        /// <summary>
        /// For &#39;TextToSpeech&#39; mode only. Prompt text
        /// </summary>
        /// <value>For &#39;TextToSpeech&#39; mode only. Prompt text</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public PromptLanguageInfo Language { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IVRMenuPromptInfo {\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Audio: ").Append(Audio).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IVRMenuPromptInfo);
        }

        /// <summary>
        /// Returns true if IVRMenuPromptInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of IVRMenuPromptInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IVRMenuPromptInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.Audio == input.Audio ||
                    (this.Audio != null &&
                    this.Audio.Equals(input.Audio))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.Audio != null)
                    hashCode = hashCode * 59 + this.Audio.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
