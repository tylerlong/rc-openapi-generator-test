/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Information on profile image
    /// </summary>
    [DataContract]
    public partial class ProfileImageInfo :  IEquatable<ProfileImageInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileImageInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProfileImageInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileImageInfo" /> class.
        /// </summary>
        /// <param name="uri">Link to a profile image. If an image is not uploaded for an extension, only uri is returned (required).</param>
        /// <param name="etag">Identifier of an image.</param>
        /// <param name="lastModified">The datetime when an image was last updated in ISO 8601 format, for example 2016-03-10T18:07:52.534Z.</param>
        /// <param name="contentType">The type of an image.</param>
        /// <param name="scales">List of URIs to profile images in different dimensions.</param>
        public ProfileImageInfo(string uri = default(string), string etag = default(string), DateTime lastModified = default(DateTime), string contentType = default(string), List<ProfileImageInfoURI> scales = default(List<ProfileImageInfoURI>))
        {
            // to ensure "uri" is required (not null)
            if (uri == null)
            {
                throw new InvalidDataException("uri is a required property for ProfileImageInfo and cannot be null");
            }
            else
            {
                this.Uri = uri;
            }

            this.Etag = etag;
            this.LastModified = lastModified;
            this.ContentType = contentType;
            this.Scales = scales;
        }

        /// <summary>
        /// Link to a profile image. If an image is not uploaded for an extension, only uri is returned
        /// </summary>
        /// <value>Link to a profile image. If an image is not uploaded for an extension, only uri is returned</value>
        [DataMember(Name="uri", EmitDefaultValue=true)]
        public string Uri { get; set; }

        /// <summary>
        /// Identifier of an image
        /// </summary>
        /// <value>Identifier of an image</value>
        [DataMember(Name="etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// The datetime when an image was last updated in ISO 8601 format, for example 2016-03-10T18:07:52.534Z
        /// </summary>
        /// <value>The datetime when an image was last updated in ISO 8601 format, for example 2016-03-10T18:07:52.534Z</value>
        [DataMember(Name="lastModified", EmitDefaultValue=false)]
        public DateTime LastModified { get; set; }

        /// <summary>
        /// The type of an image
        /// </summary>
        /// <value>The type of an image</value>
        [DataMember(Name="contentType", EmitDefaultValue=false)]
        public string ContentType { get; set; }

        /// <summary>
        /// List of URIs to profile images in different dimensions
        /// </summary>
        /// <value>List of URIs to profile images in different dimensions</value>
        [DataMember(Name="scales", EmitDefaultValue=false)]
        public List<ProfileImageInfoURI> Scales { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProfileImageInfo {\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Scales: ").Append(Scales).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProfileImageInfo);
        }

        /// <summary>
        /// Returns true if ProfileImageInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ProfileImageInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProfileImageInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                ) && 
                (
                    this.Scales == input.Scales ||
                    this.Scales != null &&
                    input.Scales != null &&
                    this.Scales.SequenceEqual(input.Scales)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.ContentType != null)
                    hashCode = hashCode * 59 + this.ContentType.GetHashCode();
                if (this.Scales != null)
                    hashCode = hashCode * 59 + this.Scales.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
