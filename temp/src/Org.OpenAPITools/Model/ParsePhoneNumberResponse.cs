/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ParsePhoneNumberResponse
    /// </summary>
    [DataContract]
    public partial class ParsePhoneNumberResponse :  IEquatable<ParsePhoneNumberResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParsePhoneNumberResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ParsePhoneNumberResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ParsePhoneNumberResponse" /> class.
        /// </summary>
        /// <param name="uri">Canonical URI of a resource.</param>
        /// <param name="homeCountry">homeCountry (required).</param>
        /// <param name="phoneNumbers">Parsed phone numbers data (required).</param>
        public ParsePhoneNumberResponse(string uri = default(string), GetCountryInfoNumberParser homeCountry = default(GetCountryInfoNumberParser), List<PhoneNumberInfoNumberParser> phoneNumbers = default(List<PhoneNumberInfoNumberParser>))
        {
            // to ensure "homeCountry" is required (not null)
            if (homeCountry == null)
            {
                throw new InvalidDataException("homeCountry is a required property for ParsePhoneNumberResponse and cannot be null");
            }
            else
            {
                this.HomeCountry = homeCountry;
            }

            // to ensure "phoneNumbers" is required (not null)
            if (phoneNumbers == null)
            {
                throw new InvalidDataException("phoneNumbers is a required property for ParsePhoneNumberResponse and cannot be null");
            }
            else
            {
                this.PhoneNumbers = phoneNumbers;
            }

            this.Uri = uri;
        }

        /// <summary>
        /// Canonical URI of a resource
        /// </summary>
        /// <value>Canonical URI of a resource</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Gets or Sets HomeCountry
        /// </summary>
        [DataMember(Name="homeCountry", EmitDefaultValue=true)]
        public GetCountryInfoNumberParser HomeCountry { get; set; }

        /// <summary>
        /// Parsed phone numbers data
        /// </summary>
        /// <value>Parsed phone numbers data</value>
        [DataMember(Name="phoneNumbers", EmitDefaultValue=true)]
        public List<PhoneNumberInfoNumberParser> PhoneNumbers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParsePhoneNumberResponse {\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  HomeCountry: ").Append(HomeCountry).Append("\n");
            sb.Append("  PhoneNumbers: ").Append(PhoneNumbers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParsePhoneNumberResponse);
        }

        /// <summary>
        /// Returns true if ParsePhoneNumberResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ParsePhoneNumberResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParsePhoneNumberResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.HomeCountry == input.HomeCountry ||
                    (this.HomeCountry != null &&
                    this.HomeCountry.Equals(input.HomeCountry))
                ) && 
                (
                    this.PhoneNumbers == input.PhoneNumbers ||
                    this.PhoneNumbers != null &&
                    input.PhoneNumbers != null &&
                    this.PhoneNumbers.SequenceEqual(input.PhoneNumbers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.HomeCountry != null)
                    hashCode = hashCode * 59 + this.HomeCountry.GetHashCode();
                if (this.PhoneNumbers != null)
                    hashCode = hashCode * 59 + this.PhoneNumbers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
