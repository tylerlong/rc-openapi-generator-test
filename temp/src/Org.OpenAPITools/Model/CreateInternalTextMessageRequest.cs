/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CreateInternalTextMessageRequest
    /// </summary>
    [DataContract]
    public partial class CreateInternalTextMessageRequest :  IEquatable<CreateInternalTextMessageRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateInternalTextMessageRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateInternalTextMessageRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateInternalTextMessageRequest" /> class.
        /// </summary>
        /// <param name="from">from.</param>
        /// <param name="replyOn">Internal identifier of a message this message replies to.</param>
        /// <param name="text">Text of a pager message. Max length is 1024 symbols (2-byte UTF-16 encoded). If a character is encoded in 4 bytes in UTF-16 it is treated as 2 characters, thus restricting the maximum message length to 512 symbols (required).</param>
        /// <param name="to">Optional if replyOn parameter is specified. Receiver of a pager message..</param>
        public CreateInternalTextMessageRequest(PagerCallerInfoRequest from = default(PagerCallerInfoRequest), int replyOn = default(int), string text = default(string), List<PagerCallerInfoRequest> to = default(List<PagerCallerInfoRequest>))
        {
            // to ensure "text" is required (not null)
            if (text == null)
            {
                throw new InvalidDataException("text is a required property for CreateInternalTextMessageRequest and cannot be null");
            }
            else
            {
                this.Text = text;
            }

            this.From = from;
            this.ReplyOn = replyOn;
            this.To = to;
        }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public PagerCallerInfoRequest From { get; set; }

        /// <summary>
        /// Internal identifier of a message this message replies to
        /// </summary>
        /// <value>Internal identifier of a message this message replies to</value>
        [DataMember(Name="replyOn", EmitDefaultValue=false)]
        public int ReplyOn { get; set; }

        /// <summary>
        /// Text of a pager message. Max length is 1024 symbols (2-byte UTF-16 encoded). If a character is encoded in 4 bytes in UTF-16 it is treated as 2 characters, thus restricting the maximum message length to 512 symbols
        /// </summary>
        /// <value>Text of a pager message. Max length is 1024 symbols (2-byte UTF-16 encoded). If a character is encoded in 4 bytes in UTF-16 it is treated as 2 characters, thus restricting the maximum message length to 512 symbols</value>
        [DataMember(Name="text", EmitDefaultValue=true)]
        public string Text { get; set; }

        /// <summary>
        /// Optional if replyOn parameter is specified. Receiver of a pager message.
        /// </summary>
        /// <value>Optional if replyOn parameter is specified. Receiver of a pager message.</value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public List<PagerCallerInfoRequest> To { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateInternalTextMessageRequest {\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  ReplyOn: ").Append(ReplyOn).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateInternalTextMessageRequest);
        }

        /// <summary>
        /// Returns true if CreateInternalTextMessageRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateInternalTextMessageRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateInternalTextMessageRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.ReplyOn == input.ReplyOn ||
                    (this.ReplyOn != null &&
                    this.ReplyOn.Equals(input.ReplyOn))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.To == input.To ||
                    this.To != null &&
                    input.To != null &&
                    this.To.SequenceEqual(input.To)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.ReplyOn != null)
                    hashCode = hashCode * 59 + this.ReplyOn.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
