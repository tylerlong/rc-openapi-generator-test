/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// EmailRecipientInfo
    /// </summary>
    [DataContract]
    public partial class EmailRecipientInfo :  IEquatable<EmailRecipientInfo>, IValidatableObject
    {
        /// <summary>
        /// Current state of an extension
        /// </summary>
        /// <value>Current state of an extension</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Enabled for value: Enabled
            /// </summary>
            [EnumMember(Value = "Enabled")]
            Enabled = 1,

            /// <summary>
            /// Enum Disable for value: Disable
            /// </summary>
            [EnumMember(Value = "Disable")]
            Disable = 2,

            /// <summary>
            /// Enum NotActivated for value: NotActivated
            /// </summary>
            [EnumMember(Value = "NotActivated")]
            NotActivated = 3,

            /// <summary>
            /// Enum Unassigned for value: Unassigned
            /// </summary>
            [EnumMember(Value = "Unassigned")]
            Unassigned = 4

        }

        /// <summary>
        /// Current state of an extension
        /// </summary>
        /// <value>Current state of an extension</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Call queue manager permission
        /// </summary>
        /// <value>Call queue manager permission</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PermissionEnum
        {
            /// <summary>
            /// Enum FullAccess for value: FullAccess
            /// </summary>
            [EnumMember(Value = "FullAccess")]
            FullAccess = 1,

            /// <summary>
            /// Enum Messages for value: Messages
            /// </summary>
            [EnumMember(Value = "Messages")]
            Messages = 2,

            /// <summary>
            /// Enum MemberManagement for value: MemberManagement
            /// </summary>
            [EnumMember(Value = "MemberManagement")]
            MemberManagement = 3

        }

        /// <summary>
        /// Call queue manager permission
        /// </summary>
        /// <value>Call queue manager permission</value>
        [DataMember(Name="permission", EmitDefaultValue=false)]
        public PermissionEnum? Permission { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailRecipientInfo" /> class.
        /// </summary>
        /// <param name="extensionId">Internal identifier of an extension.</param>
        /// <param name="fullName">User full name.</param>
        /// <param name="extensionNumber">User extension number.</param>
        /// <param name="status">Current state of an extension.</param>
        /// <param name="emailAddresses">List of user email addresses from extension notification settings. By default main email address from contact information is returned.</param>
        /// <param name="permission">Call queue manager permission.</param>
        public EmailRecipientInfo(string extensionId = default(string), string fullName = default(string), string extensionNumber = default(string), StatusEnum? status = default(StatusEnum?), List<string> emailAddresses = default(List<string>), PermissionEnum? permission = default(PermissionEnum?))
        {
            this.ExtensionId = extensionId;
            this.FullName = fullName;
            this.ExtensionNumber = extensionNumber;
            this.Status = status;
            this.EmailAddresses = emailAddresses;
            this.Permission = permission;
        }

        /// <summary>
        /// Internal identifier of an extension
        /// </summary>
        /// <value>Internal identifier of an extension</value>
        [DataMember(Name="extensionId", EmitDefaultValue=false)]
        public string ExtensionId { get; set; }

        /// <summary>
        /// User full name
        /// </summary>
        /// <value>User full name</value>
        [DataMember(Name="fullName", EmitDefaultValue=false)]
        public string FullName { get; set; }

        /// <summary>
        /// User extension number
        /// </summary>
        /// <value>User extension number</value>
        [DataMember(Name="extensionNumber", EmitDefaultValue=false)]
        public string ExtensionNumber { get; set; }


        /// <summary>
        /// List of user email addresses from extension notification settings. By default main email address from contact information is returned
        /// </summary>
        /// <value>List of user email addresses from extension notification settings. By default main email address from contact information is returned</value>
        [DataMember(Name="emailAddresses", EmitDefaultValue=false)]
        public List<string> EmailAddresses { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailRecipientInfo {\n");
            sb.Append("  ExtensionId: ").Append(ExtensionId).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  ExtensionNumber: ").Append(ExtensionNumber).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  EmailAddresses: ").Append(EmailAddresses).Append("\n");
            sb.Append("  Permission: ").Append(Permission).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailRecipientInfo);
        }

        /// <summary>
        /// Returns true if EmailRecipientInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailRecipientInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailRecipientInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExtensionId == input.ExtensionId ||
                    (this.ExtensionId != null &&
                    this.ExtensionId.Equals(input.ExtensionId))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.ExtensionNumber == input.ExtensionNumber ||
                    (this.ExtensionNumber != null &&
                    this.ExtensionNumber.Equals(input.ExtensionNumber))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.EmailAddresses == input.EmailAddresses ||
                    this.EmailAddresses != null &&
                    input.EmailAddresses != null &&
                    this.EmailAddresses.SequenceEqual(input.EmailAddresses)
                ) && 
                (
                    this.Permission == input.Permission ||
                    (this.Permission != null &&
                    this.Permission.Equals(input.Permission))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExtensionId != null)
                    hashCode = hashCode * 59 + this.ExtensionId.GetHashCode();
                if (this.FullName != null)
                    hashCode = hashCode * 59 + this.FullName.GetHashCode();
                if (this.ExtensionNumber != null)
                    hashCode = hashCode * 59 + this.ExtensionNumber.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.EmailAddresses != null)
                    hashCode = hashCode * 59 + this.EmailAddresses.GetHashCode();
                if (this.Permission != null)
                    hashCode = hashCode * 59 + this.Permission.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
