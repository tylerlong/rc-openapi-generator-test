/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CreateSipRegistrationResponse
    /// </summary>
    [DataContract]
    public partial class CreateSipRegistrationResponse :  IEquatable<CreateSipRegistrationResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSipRegistrationResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateSipRegistrationResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSipRegistrationResponse" /> class.
        /// </summary>
        /// <param name="device">device.</param>
        /// <param name="sipInfo">SIP settings for device (required).</param>
        /// <param name="sipInfoPstn">SIP PSTN settings for device.</param>
        /// <param name="sipFlags">sipFlags (required).</param>
        /// <param name="sipErrorCodes">sipErrorCodes.</param>
        public CreateSipRegistrationResponse(SipRegistrationDeviceInfo device = default(SipRegistrationDeviceInfo), List<SIPInfoResponse> sipInfo = default(List<SIPInfoResponse>), List<SIPInfoResponse> sipInfoPstn = default(List<SIPInfoResponse>), SIPFlagsResponse sipFlags = default(SIPFlagsResponse), List<string> sipErrorCodes = default(List<string>))
        {
            // to ensure "sipInfo" is required (not null)
            if (sipInfo == null)
            {
                throw new InvalidDataException("sipInfo is a required property for CreateSipRegistrationResponse and cannot be null");
            }
            else
            {
                this.SipInfo = sipInfo;
            }

            // to ensure "sipFlags" is required (not null)
            if (sipFlags == null)
            {
                throw new InvalidDataException("sipFlags is a required property for CreateSipRegistrationResponse and cannot be null");
            }
            else
            {
                this.SipFlags = sipFlags;
            }

            this.Device = device;
            this.SipInfoPstn = sipInfoPstn;
            this.SipErrorCodes = sipErrorCodes;
        }

        /// <summary>
        /// Gets or Sets Device
        /// </summary>
        [DataMember(Name="device", EmitDefaultValue=false)]
        public SipRegistrationDeviceInfo Device { get; set; }

        /// <summary>
        /// SIP settings for device
        /// </summary>
        /// <value>SIP settings for device</value>
        [DataMember(Name="sipInfo", EmitDefaultValue=true)]
        public List<SIPInfoResponse> SipInfo { get; set; }

        /// <summary>
        /// SIP PSTN settings for device
        /// </summary>
        /// <value>SIP PSTN settings for device</value>
        [DataMember(Name="sipInfoPstn", EmitDefaultValue=false)]
        public List<SIPInfoResponse> SipInfoPstn { get; set; }

        /// <summary>
        /// Gets or Sets SipFlags
        /// </summary>
        [DataMember(Name="sipFlags", EmitDefaultValue=true)]
        public SIPFlagsResponse SipFlags { get; set; }

        /// <summary>
        /// Gets or Sets SipErrorCodes
        /// </summary>
        [DataMember(Name="sipErrorCodes", EmitDefaultValue=false)]
        public List<string> SipErrorCodes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateSipRegistrationResponse {\n");
            sb.Append("  Device: ").Append(Device).Append("\n");
            sb.Append("  SipInfo: ").Append(SipInfo).Append("\n");
            sb.Append("  SipInfoPstn: ").Append(SipInfoPstn).Append("\n");
            sb.Append("  SipFlags: ").Append(SipFlags).Append("\n");
            sb.Append("  SipErrorCodes: ").Append(SipErrorCodes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateSipRegistrationResponse);
        }

        /// <summary>
        /// Returns true if CreateSipRegistrationResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateSipRegistrationResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateSipRegistrationResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Device == input.Device ||
                    (this.Device != null &&
                    this.Device.Equals(input.Device))
                ) && 
                (
                    this.SipInfo == input.SipInfo ||
                    this.SipInfo != null &&
                    input.SipInfo != null &&
                    this.SipInfo.SequenceEqual(input.SipInfo)
                ) && 
                (
                    this.SipInfoPstn == input.SipInfoPstn ||
                    this.SipInfoPstn != null &&
                    input.SipInfoPstn != null &&
                    this.SipInfoPstn.SequenceEqual(input.SipInfoPstn)
                ) && 
                (
                    this.SipFlags == input.SipFlags ||
                    (this.SipFlags != null &&
                    this.SipFlags.Equals(input.SipFlags))
                ) && 
                (
                    this.SipErrorCodes == input.SipErrorCodes ||
                    this.SipErrorCodes != null &&
                    input.SipErrorCodes != null &&
                    this.SipErrorCodes.SequenceEqual(input.SipErrorCodes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Device != null)
                    hashCode = hashCode * 59 + this.Device.GetHashCode();
                if (this.SipInfo != null)
                    hashCode = hashCode * 59 + this.SipInfo.GetHashCode();
                if (this.SipInfoPstn != null)
                    hashCode = hashCode * 59 + this.SipInfoPstn.GetHashCode();
                if (this.SipFlags != null)
                    hashCode = hashCode * 59 + this.SipFlags.GetHashCode();
                if (this.SipErrorCodes != null)
                    hashCode = hashCode * 59 + this.SipErrorCodes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
