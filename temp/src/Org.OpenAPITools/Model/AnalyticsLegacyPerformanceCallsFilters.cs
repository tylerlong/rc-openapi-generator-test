/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Optional filters that limit the scope of calls to be aggregated (joined via AND)
    /// </summary>
    [DataContract]
    public partial class AnalyticsLegacyPerformanceCallsFilters :  IEquatable<AnalyticsLegacyPerformanceCallsFilters>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name="direction", EmitDefaultValue=false)]
        public AnalyticsLegacyDirection? Direction { get; set; }
        /// <summary>
        /// Gets or Sets Origin
        /// </summary>
        [DataMember(Name="origin", EmitDefaultValue=false)]
        public AnalyticsLegacyOrigin? Origin { get; set; }
        /// <summary>
        /// Gets or Sets CallResponse
        /// </summary>
        [DataMember(Name="callResponse", EmitDefaultValue=false)]
        public AnalyticsLegacyCallResponse? CallResponse { get; set; }
        /// <summary>
        /// Gets or Sets CompanyHours
        /// </summary>
        [DataMember(Name="companyHours", EmitDefaultValue=false)]
        public AnalyticsLegacyPerformanceCallsCompanyHours? CompanyHours { get; set; }
        /// <summary>
        /// Gets or Sets QueueSla
        /// </summary>
        [DataMember(Name="queueSla", EmitDefaultValue=false)]
        public AnalyticsLegacyQueueSla? QueueSla { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsLegacyPerformanceCallsFilters" /> class.
        /// </summary>
        /// <param name="direction">direction.</param>
        /// <param name="origin">origin.</param>
        /// <param name="callResponse">callResponse.</param>
        /// <param name="callResult">Aggregation of calls by the nature of call result (joined via OR).</param>
        /// <param name="callSegments">Aggregation of calls by presence of specific segment (joined via OR).</param>
        /// <param name="callActions">Aggregation of calls by presence of specific action (joined via OR).</param>
        /// <param name="companyHours">companyHours.</param>
        /// <param name="callDuration">callDuration.</param>
        /// <param name="timeSpent">timeSpent.</param>
        /// <param name="callerExtensionIds">List of extension Ids from which users specified in groupBy received calls, items are joined via OR condition.</param>
        /// <param name="calledExtensionIds">List of extension Ids to which users specified in groupBy placed calls, items are joined via OR condition.</param>
        /// <param name="calledNumbers">The direct company numbers the caller called (joined via OR).</param>
        /// <param name="queueSla">queueSla.</param>
        /// <param name="callType">This filter allows to get aggregation of calls based on how the call started from the callee perspective (joined via OR). If the call is outbound relative to the grouping scope, callType is Outbound.</param>
        public AnalyticsLegacyPerformanceCallsFilters(AnalyticsLegacyDirection? direction = default(AnalyticsLegacyDirection?), AnalyticsLegacyOrigin? origin = default(AnalyticsLegacyOrigin?), AnalyticsLegacyCallResponse? callResponse = default(AnalyticsLegacyCallResponse?), List<AnalyticsLegacyCallResultType> callResult = default(List<AnalyticsLegacyCallResultType>), List<AnalyticsLegacyCallSegmentFilter> callSegments = default(List<AnalyticsLegacyCallSegmentFilter>), List<AnalyticsLegacyCallActionFilter> callActions = default(List<AnalyticsLegacyCallActionFilter>), AnalyticsLegacyPerformanceCallsCompanyHours? companyHours = default(AnalyticsLegacyPerformanceCallsCompanyHours?), AnalyticsLegacyPerformanceCallsFilterByLength callDuration = default(AnalyticsLegacyPerformanceCallsFilterByLength), AnalyticsLegacyPerformanceCallsFilterTimeSpentByMailbox timeSpent = default(AnalyticsLegacyPerformanceCallsFilterTimeSpentByMailbox), List<string> callerExtensionIds = default(List<string>), List<string> calledExtensionIds = default(List<string>), List<string> calledNumbers = default(List<string>), AnalyticsLegacyQueueSla? queueSla = default(AnalyticsLegacyQueueSla?), List<AnalyticsLegacyCallType> callType = default(List<AnalyticsLegacyCallType>))
        {
            this.Direction = direction;
            this.Origin = origin;
            this.CallResponse = callResponse;
            this.CallResult = callResult;
            this.CallSegments = callSegments;
            this.CallActions = callActions;
            this.CompanyHours = companyHours;
            this.CallDuration = callDuration;
            this.TimeSpent = timeSpent;
            this.CallerExtensionIds = callerExtensionIds;
            this.CalledExtensionIds = calledExtensionIds;
            this.CalledNumbers = calledNumbers;
            this.QueueSla = queueSla;
            this.CallType = callType;
        }




        /// <summary>
        /// Aggregation of calls by the nature of call result (joined via OR)
        /// </summary>
        /// <value>Aggregation of calls by the nature of call result (joined via OR)</value>
        [DataMember(Name="callResult", EmitDefaultValue=false)]
        public List<AnalyticsLegacyCallResultType> CallResult { get; set; }

        /// <summary>
        /// Aggregation of calls by presence of specific segment (joined via OR)
        /// </summary>
        /// <value>Aggregation of calls by presence of specific segment (joined via OR)</value>
        [DataMember(Name="callSegments", EmitDefaultValue=false)]
        public List<AnalyticsLegacyCallSegmentFilter> CallSegments { get; set; }

        /// <summary>
        /// Aggregation of calls by presence of specific action (joined via OR)
        /// </summary>
        /// <value>Aggregation of calls by presence of specific action (joined via OR)</value>
        [DataMember(Name="callActions", EmitDefaultValue=false)]
        public List<AnalyticsLegacyCallActionFilter> CallActions { get; set; }


        /// <summary>
        /// Gets or Sets CallDuration
        /// </summary>
        [DataMember(Name="callDuration", EmitDefaultValue=false)]
        public AnalyticsLegacyPerformanceCallsFilterByLength CallDuration { get; set; }

        /// <summary>
        /// Gets or Sets TimeSpent
        /// </summary>
        [DataMember(Name="timeSpent", EmitDefaultValue=false)]
        public AnalyticsLegacyPerformanceCallsFilterTimeSpentByMailbox TimeSpent { get; set; }

        /// <summary>
        /// List of extension Ids from which users specified in groupBy received calls, items are joined via OR condition
        /// </summary>
        /// <value>List of extension Ids from which users specified in groupBy received calls, items are joined via OR condition</value>
        [DataMember(Name="callerExtensionIds", EmitDefaultValue=false)]
        public List<string> CallerExtensionIds { get; set; }

        /// <summary>
        /// List of extension Ids to which users specified in groupBy placed calls, items are joined via OR condition
        /// </summary>
        /// <value>List of extension Ids to which users specified in groupBy placed calls, items are joined via OR condition</value>
        [DataMember(Name="calledExtensionIds", EmitDefaultValue=false)]
        public List<string> CalledExtensionIds { get; set; }

        /// <summary>
        /// The direct company numbers the caller called (joined via OR)
        /// </summary>
        /// <value>The direct company numbers the caller called (joined via OR)</value>
        [DataMember(Name="calledNumbers", EmitDefaultValue=false)]
        public List<string> CalledNumbers { get; set; }


        /// <summary>
        /// This filter allows to get aggregation of calls based on how the call started from the callee perspective (joined via OR). If the call is outbound relative to the grouping scope, callType is Outbound
        /// </summary>
        /// <value>This filter allows to get aggregation of calls based on how the call started from the callee perspective (joined via OR). If the call is outbound relative to the grouping scope, callType is Outbound</value>
        [DataMember(Name="callType", EmitDefaultValue=false)]
        public List<AnalyticsLegacyCallType> CallType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnalyticsLegacyPerformanceCallsFilters {\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  CallResponse: ").Append(CallResponse).Append("\n");
            sb.Append("  CallResult: ").Append(CallResult).Append("\n");
            sb.Append("  CallSegments: ").Append(CallSegments).Append("\n");
            sb.Append("  CallActions: ").Append(CallActions).Append("\n");
            sb.Append("  CompanyHours: ").Append(CompanyHours).Append("\n");
            sb.Append("  CallDuration: ").Append(CallDuration).Append("\n");
            sb.Append("  TimeSpent: ").Append(TimeSpent).Append("\n");
            sb.Append("  CallerExtensionIds: ").Append(CallerExtensionIds).Append("\n");
            sb.Append("  CalledExtensionIds: ").Append(CalledExtensionIds).Append("\n");
            sb.Append("  CalledNumbers: ").Append(CalledNumbers).Append("\n");
            sb.Append("  QueueSla: ").Append(QueueSla).Append("\n");
            sb.Append("  CallType: ").Append(CallType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AnalyticsLegacyPerformanceCallsFilters);
        }

        /// <summary>
        /// Returns true if AnalyticsLegacyPerformanceCallsFilters instances are equal
        /// </summary>
        /// <param name="input">Instance of AnalyticsLegacyPerformanceCallsFilters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnalyticsLegacyPerformanceCallsFilters input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                ) && 
                (
                    this.Origin == input.Origin ||
                    (this.Origin != null &&
                    this.Origin.Equals(input.Origin))
                ) && 
                (
                    this.CallResponse == input.CallResponse ||
                    (this.CallResponse != null &&
                    this.CallResponse.Equals(input.CallResponse))
                ) && 
                (
                    this.CallResult == input.CallResult ||
                    this.CallResult != null &&
                    input.CallResult != null &&
                    this.CallResult.SequenceEqual(input.CallResult)
                ) && 
                (
                    this.CallSegments == input.CallSegments ||
                    this.CallSegments != null &&
                    input.CallSegments != null &&
                    this.CallSegments.SequenceEqual(input.CallSegments)
                ) && 
                (
                    this.CallActions == input.CallActions ||
                    this.CallActions != null &&
                    input.CallActions != null &&
                    this.CallActions.SequenceEqual(input.CallActions)
                ) && 
                (
                    this.CompanyHours == input.CompanyHours ||
                    (this.CompanyHours != null &&
                    this.CompanyHours.Equals(input.CompanyHours))
                ) && 
                (
                    this.CallDuration == input.CallDuration ||
                    (this.CallDuration != null &&
                    this.CallDuration.Equals(input.CallDuration))
                ) && 
                (
                    this.TimeSpent == input.TimeSpent ||
                    (this.TimeSpent != null &&
                    this.TimeSpent.Equals(input.TimeSpent))
                ) && 
                (
                    this.CallerExtensionIds == input.CallerExtensionIds ||
                    this.CallerExtensionIds != null &&
                    input.CallerExtensionIds != null &&
                    this.CallerExtensionIds.SequenceEqual(input.CallerExtensionIds)
                ) && 
                (
                    this.CalledExtensionIds == input.CalledExtensionIds ||
                    this.CalledExtensionIds != null &&
                    input.CalledExtensionIds != null &&
                    this.CalledExtensionIds.SequenceEqual(input.CalledExtensionIds)
                ) && 
                (
                    this.CalledNumbers == input.CalledNumbers ||
                    this.CalledNumbers != null &&
                    input.CalledNumbers != null &&
                    this.CalledNumbers.SequenceEqual(input.CalledNumbers)
                ) && 
                (
                    this.QueueSla == input.QueueSla ||
                    (this.QueueSla != null &&
                    this.QueueSla.Equals(input.QueueSla))
                ) && 
                (
                    this.CallType == input.CallType ||
                    this.CallType != null &&
                    input.CallType != null &&
                    this.CallType.SequenceEqual(input.CallType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Direction != null)
                    hashCode = hashCode * 59 + this.Direction.GetHashCode();
                if (this.Origin != null)
                    hashCode = hashCode * 59 + this.Origin.GetHashCode();
                if (this.CallResponse != null)
                    hashCode = hashCode * 59 + this.CallResponse.GetHashCode();
                if (this.CallResult != null)
                    hashCode = hashCode * 59 + this.CallResult.GetHashCode();
                if (this.CallSegments != null)
                    hashCode = hashCode * 59 + this.CallSegments.GetHashCode();
                if (this.CallActions != null)
                    hashCode = hashCode * 59 + this.CallActions.GetHashCode();
                if (this.CompanyHours != null)
                    hashCode = hashCode * 59 + this.CompanyHours.GetHashCode();
                if (this.CallDuration != null)
                    hashCode = hashCode * 59 + this.CallDuration.GetHashCode();
                if (this.TimeSpent != null)
                    hashCode = hashCode * 59 + this.TimeSpent.GetHashCode();
                if (this.CallerExtensionIds != null)
                    hashCode = hashCode * 59 + this.CallerExtensionIds.GetHashCode();
                if (this.CalledExtensionIds != null)
                    hashCode = hashCode * 59 + this.CalledExtensionIds.GetHashCode();
                if (this.CalledNumbers != null)
                    hashCode = hashCode * 59 + this.CalledNumbers.GetHashCode();
                if (this.QueueSla != null)
                    hashCode = hashCode * 59 + this.QueueSla.GetHashCode();
                if (this.CallType != null)
                    hashCode = hashCode * 59 + this.CallType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
