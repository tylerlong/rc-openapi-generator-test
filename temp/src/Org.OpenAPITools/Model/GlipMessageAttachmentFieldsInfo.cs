/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GlipMessageAttachmentFieldsInfo
    /// </summary>
    [DataContract]
    public partial class GlipMessageAttachmentFieldsInfo :  IEquatable<GlipMessageAttachmentFieldsInfo>, IValidatableObject
    {
        /// <summary>
        /// Style of width span applied to a field
        /// </summary>
        /// <value>Style of width span applied to a field</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StyleEnum
        {
            /// <summary>
            /// Enum Short for value: Short
            /// </summary>
            [EnumMember(Value = "Short")]
            Short = 1,

            /// <summary>
            /// Enum Long for value: Long
            /// </summary>
            [EnumMember(Value = "Long")]
            Long = 2

        }

        /// <summary>
        /// Style of width span applied to a field
        /// </summary>
        /// <value>Style of width span applied to a field</value>
        [DataMember(Name="style", EmitDefaultValue=false)]
        public StyleEnum? Style { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GlipMessageAttachmentFieldsInfo" /> class.
        /// </summary>
        /// <param name="title">Title of an individual field.</param>
        /// <param name="value">Value of an individual field (supports Markdown).</param>
        /// <param name="style">Style of width span applied to a field (default to StyleEnum.Short).</param>
        public GlipMessageAttachmentFieldsInfo(string title = default(string), string value = default(string), StyleEnum? style = StyleEnum.Short)
        {
            this.Title = title;
            this.Value = value;
            // use default value if no "style" provided
            if (style == null)
            {
                this.Style = StyleEnum.Short;
            }
            else
            {
                this.Style = style;
            }
        }

        /// <summary>
        /// Title of an individual field
        /// </summary>
        /// <value>Title of an individual field</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Value of an individual field (supports Markdown)
        /// </summary>
        /// <value>Value of an individual field (supports Markdown)</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlipMessageAttachmentFieldsInfo {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Style: ").Append(Style).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GlipMessageAttachmentFieldsInfo);
        }

        /// <summary>
        /// Returns true if GlipMessageAttachmentFieldsInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of GlipMessageAttachmentFieldsInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlipMessageAttachmentFieldsInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Style == input.Style ||
                    (this.Style != null &&
                    this.Style.Equals(input.Style))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Style != null)
                    hashCode = hashCode * 59 + this.Style.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
