/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GlipWebhookInfo
    /// </summary>
    [DataContract]
    public partial class GlipWebhookInfo :  IEquatable<GlipWebhookInfo>, IValidatableObject
    {
        /// <summary>
        /// Current status of a webhook
        /// </summary>
        /// <value>Current status of a webhook</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Active for value: Active
            /// </summary>
            [EnumMember(Value = "Active")]
            Active = 1,

            /// <summary>
            /// Enum Suspended for value: Suspended
            /// </summary>
            [EnumMember(Value = "Suspended")]
            Suspended = 2,

            /// <summary>
            /// Enum Deleted for value: Deleted
            /// </summary>
            [EnumMember(Value = "Deleted")]
            Deleted = 3

        }

        /// <summary>
        /// Current status of a webhook
        /// </summary>
        /// <value>Current status of a webhook</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GlipWebhookInfo" /> class.
        /// </summary>
        /// <param name="id">Internal identifier of a webhook.</param>
        /// <param name="creatorId">Internal identifier of the user who created a webhook.</param>
        /// <param name="groupIds">Internal identifiers of groups where a webhook has been created.</param>
        /// <param name="creationTime">Webhook creation time in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.</param>
        /// <param name="lastModifiedTime">Webhook last update time in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.</param>
        /// <param name="uri">Public link to send a webhook payload.</param>
        /// <param name="status">Current status of a webhook.</param>
        public GlipWebhookInfo(string id = default(string), string creatorId = default(string), List<string> groupIds = default(List<string>), DateTime creationTime = default(DateTime), DateTime lastModifiedTime = default(DateTime), string uri = default(string), StatusEnum? status = default(StatusEnum?))
        {
            this.Id = id;
            this.CreatorId = creatorId;
            this.GroupIds = groupIds;
            this.CreationTime = creationTime;
            this.LastModifiedTime = lastModifiedTime;
            this.Uri = uri;
            this.Status = status;
        }

        /// <summary>
        /// Internal identifier of a webhook
        /// </summary>
        /// <value>Internal identifier of a webhook</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Internal identifier of the user who created a webhook
        /// </summary>
        /// <value>Internal identifier of the user who created a webhook</value>
        [DataMember(Name="creatorId", EmitDefaultValue=false)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Internal identifiers of groups where a webhook has been created
        /// </summary>
        /// <value>Internal identifiers of groups where a webhook has been created</value>
        [DataMember(Name="groupIds", EmitDefaultValue=false)]
        public List<string> GroupIds { get; set; }

        /// <summary>
        /// Webhook creation time in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format
        /// </summary>
        /// <value>Webhook creation time in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format</value>
        [DataMember(Name="creationTime", EmitDefaultValue=false)]
        public DateTime CreationTime { get; set; }

        /// <summary>
        /// Webhook last update time in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format
        /// </summary>
        /// <value>Webhook last update time in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format</value>
        [DataMember(Name="lastModifiedTime", EmitDefaultValue=false)]
        public DateTime LastModifiedTime { get; set; }

        /// <summary>
        /// Public link to send a webhook payload
        /// </summary>
        /// <value>Public link to send a webhook payload</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlipWebhookInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatorId: ").Append(CreatorId).Append("\n");
            sb.Append("  GroupIds: ").Append(GroupIds).Append("\n");
            sb.Append("  CreationTime: ").Append(CreationTime).Append("\n");
            sb.Append("  LastModifiedTime: ").Append(LastModifiedTime).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GlipWebhookInfo);
        }

        /// <summary>
        /// Returns true if GlipWebhookInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of GlipWebhookInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlipWebhookInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreatorId == input.CreatorId ||
                    (this.CreatorId != null &&
                    this.CreatorId.Equals(input.CreatorId))
                ) && 
                (
                    this.GroupIds == input.GroupIds ||
                    this.GroupIds != null &&
                    input.GroupIds != null &&
                    this.GroupIds.SequenceEqual(input.GroupIds)
                ) && 
                (
                    this.CreationTime == input.CreationTime ||
                    (this.CreationTime != null &&
                    this.CreationTime.Equals(input.CreationTime))
                ) && 
                (
                    this.LastModifiedTime == input.LastModifiedTime ||
                    (this.LastModifiedTime != null &&
                    this.LastModifiedTime.Equals(input.LastModifiedTime))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CreatorId != null)
                    hashCode = hashCode * 59 + this.CreatorId.GetHashCode();
                if (this.GroupIds != null)
                    hashCode = hashCode * 59 + this.GroupIds.GetHashCode();
                if (this.CreationTime != null)
                    hashCode = hashCode * 59 + this.CreationTime.GetHashCode();
                if (this.LastModifiedTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedTime.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
