/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ExtensionCreationResponse
    /// </summary>
    [DataContract]
    public partial class ExtensionCreationResponse :  IEquatable<ExtensionCreationResponse>, IValidatableObject
    {
        /// <summary>
        /// Specifies extension configuration wizard state (web service setup). The default value is &#39;NotStarted&#39;
        /// </summary>
        /// <value>Specifies extension configuration wizard state (web service setup). The default value is &#39;NotStarted&#39;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SetupWizardStateEnum
        {
            /// <summary>
            /// Enum NotStarted for value: NotStarted
            /// </summary>
            [EnumMember(Value = "NotStarted")]
            NotStarted = 1,

            /// <summary>
            /// Enum Incomplete for value: Incomplete
            /// </summary>
            [EnumMember(Value = "Incomplete")]
            Incomplete = 2,

            /// <summary>
            /// Enum Completed for value: Completed
            /// </summary>
            [EnumMember(Value = "Completed")]
            Completed = 3

        }

        /// <summary>
        /// Specifies extension configuration wizard state (web service setup). The default value is &#39;NotStarted&#39;
        /// </summary>
        /// <value>Specifies extension configuration wizard state (web service setup). The default value is &#39;NotStarted&#39;</value>
        [DataMember(Name="setupWizardState", EmitDefaultValue=false)]
        public SetupWizardStateEnum? SetupWizardState { get; set; }
        /// <summary>
        /// Extension current state. If &#39;Unassigned&#39; is specified, then extensions without ‘extensionNumber’ are returned. If not specified, then all extensions are returned
        /// </summary>
        /// <value>Extension current state. If &#39;Unassigned&#39; is specified, then extensions without ‘extensionNumber’ are returned. If not specified, then all extensions are returned</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Enabled for value: Enabled
            /// </summary>
            [EnumMember(Value = "Enabled")]
            Enabled = 1,

            /// <summary>
            /// Enum Disabled for value: Disabled
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled = 2,

            /// <summary>
            /// Enum Frozen for value: Frozen
            /// </summary>
            [EnumMember(Value = "Frozen")]
            Frozen = 3,

            /// <summary>
            /// Enum NotActivated for value: NotActivated
            /// </summary>
            [EnumMember(Value = "NotActivated")]
            NotActivated = 4,

            /// <summary>
            /// Enum Unassigned for value: Unassigned
            /// </summary>
            [EnumMember(Value = "Unassigned")]
            Unassigned = 5

        }

        /// <summary>
        /// Extension current state. If &#39;Unassigned&#39; is specified, then extensions without ‘extensionNumber’ are returned. If not specified, then all extensions are returned
        /// </summary>
        /// <value>Extension current state. If &#39;Unassigned&#39; is specified, then extensions without ‘extensionNumber’ are returned. If not specified, then all extensions are returned</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Extension type. Please note that legacy &#39;Department&#39; extension type corresponds to &#39;Call Queue&#39; extensions in modern RingCentral product terminology
        /// </summary>
        /// <value>Extension type. Please note that legacy &#39;Department&#39; extension type corresponds to &#39;Call Queue&#39; extensions in modern RingCentral product terminology</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum User for value: User
            /// </summary>
            [EnumMember(Value = "User")]
            User = 1,

            /// <summary>
            /// Enum VirtualUser for value: VirtualUser
            /// </summary>
            [EnumMember(Value = "VirtualUser")]
            VirtualUser = 2,

            /// <summary>
            /// Enum DigitalUser for value: DigitalUser
            /// </summary>
            [EnumMember(Value = "DigitalUser")]
            DigitalUser = 3,

            /// <summary>
            /// Enum Department for value: Department
            /// </summary>
            [EnumMember(Value = "Department")]
            Department = 4,

            /// <summary>
            /// Enum Announcement for value: Announcement
            /// </summary>
            [EnumMember(Value = "Announcement")]
            Announcement = 5,

            /// <summary>
            /// Enum Voicemail for value: Voicemail
            /// </summary>
            [EnumMember(Value = "Voicemail")]
            Voicemail = 6,

            /// <summary>
            /// Enum SharedLinesGroup for value: SharedLinesGroup
            /// </summary>
            [EnumMember(Value = "SharedLinesGroup")]
            SharedLinesGroup = 7,

            /// <summary>
            /// Enum PagingOnly for value: PagingOnly
            /// </summary>
            [EnumMember(Value = "PagingOnly")]
            PagingOnly = 8,

            /// <summary>
            /// Enum ParkLocation for value: ParkLocation
            /// </summary>
            [EnumMember(Value = "ParkLocation")]
            ParkLocation = 9,

            /// <summary>
            /// Enum Limited for value: Limited
            /// </summary>
            [EnumMember(Value = "Limited")]
            Limited = 10

        }

        /// <summary>
        /// Extension type. Please note that legacy &#39;Department&#39; extension type corresponds to &#39;Call Queue&#39; extensions in modern RingCentral product terminology
        /// </summary>
        /// <value>Extension type. Please note that legacy &#39;Department&#39; extension type corresponds to &#39;Call Queue&#39; extensions in modern RingCentral product terminology</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtensionCreationResponse" /> class.
        /// </summary>
        /// <param name="id">Internal identifier of an extension.</param>
        /// <param name="uri">Canonical URI of an extension.</param>
        /// <param name="contact">contact.</param>
        /// <param name="customFields">customFields.</param>
        /// <param name="extensionNumber">Number of extension.</param>
        /// <param name="name">Extension name. For user extension types the value is a combination of the specified first name and last name.</param>
        /// <param name="partnerId">For Partner Applications Internal identifier of an extension created by partner. The RingCentral supports the mapping of accounts and stores the corresponding account ID/extension ID for each partner ID of a client application. In request URIs partner IDs are accepted instead of regular RingCentral native IDs as path parameters using pid &#x3D; XXX clause. Though in response URIs contain the corresponding account IDs and extension IDs. In all request and response bodies these values are reflected via partnerId attributes of account and extension.</param>
        /// <param name="permissions">permissions.</param>
        /// <param name="profileImage">profileImage.</param>
        /// <param name="references">List of non-RC internal identifiers assigned to an extension.</param>
        /// <param name="regionalSettings">regionalSettings.</param>
        /// <param name="serviceFeatures">Extension service features returned in response only when the logged-in user requests his/her own extension info, see also Extension Service Features.</param>
        /// <param name="setupWizardState">Specifies extension configuration wizard state (web service setup). The default value is &#39;NotStarted&#39;.</param>
        /// <param name="site">site.</param>
        /// <param name="status">Extension current state. If &#39;Unassigned&#39; is specified, then extensions without ‘extensionNumber’ are returned. If not specified, then all extensions are returned.</param>
        /// <param name="statusInfo">statusInfo.</param>
        /// <param name="type">Extension type. Please note that legacy &#39;Department&#39; extension type corresponds to &#39;Call Queue&#39; extensions in modern RingCentral product terminology.</param>
        /// <param name="hidden">Hides extension from showing in company directory. Supported for extensions of User type only.</param>
        public ExtensionCreationResponse(long id = default(long), string uri = default(string), ContactInfo contact = default(ContactInfo), List<CustomFieldInfo> customFields = default(List<CustomFieldInfo>), string extensionNumber = default(string), string name = default(string), string partnerId = default(string), ExtensionPermissions permissions = default(ExtensionPermissions), ProfileImageInfo profileImage = default(ProfileImageInfo), List<ReferenceInfo> references = default(List<ReferenceInfo>), RegionalSettings regionalSettings = default(RegionalSettings), List<ExtensionServiceFeatureInfo> serviceFeatures = default(List<ExtensionServiceFeatureInfo>), SetupWizardStateEnum? setupWizardState = default(SetupWizardStateEnum?), AutomaticLocationUpdatesSiteInfo site = default(AutomaticLocationUpdatesSiteInfo), StatusEnum? status = default(StatusEnum?), ExtensionStatusInfo statusInfo = default(ExtensionStatusInfo), TypeEnum? type = default(TypeEnum?), bool hidden = default(bool))
        {
            this.Id = id;
            this.Uri = uri;
            this.Contact = contact;
            this.CustomFields = customFields;
            this.ExtensionNumber = extensionNumber;
            this.Name = name;
            this.PartnerId = partnerId;
            this.Permissions = permissions;
            this.ProfileImage = profileImage;
            this.References = references;
            this.RegionalSettings = regionalSettings;
            this.ServiceFeatures = serviceFeatures;
            this.SetupWizardState = setupWizardState;
            this.Site = site;
            this.Status = status;
            this.StatusInfo = statusInfo;
            this.Type = type;
            this.Hidden = hidden;
        }

        /// <summary>
        /// Internal identifier of an extension
        /// </summary>
        /// <value>Internal identifier of an extension</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long Id { get; set; }

        /// <summary>
        /// Canonical URI of an extension
        /// </summary>
        /// <value>Canonical URI of an extension</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Gets or Sets Contact
        /// </summary>
        [DataMember(Name="contact", EmitDefaultValue=false)]
        public ContactInfo Contact { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name="customFields", EmitDefaultValue=false)]
        public List<CustomFieldInfo> CustomFields { get; set; }

        /// <summary>
        /// Number of extension
        /// </summary>
        /// <value>Number of extension</value>
        [DataMember(Name="extensionNumber", EmitDefaultValue=false)]
        public string ExtensionNumber { get; set; }

        /// <summary>
        /// Extension name. For user extension types the value is a combination of the specified first name and last name
        /// </summary>
        /// <value>Extension name. For user extension types the value is a combination of the specified first name and last name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// For Partner Applications Internal identifier of an extension created by partner. The RingCentral supports the mapping of accounts and stores the corresponding account ID/extension ID for each partner ID of a client application. In request URIs partner IDs are accepted instead of regular RingCentral native IDs as path parameters using pid &#x3D; XXX clause. Though in response URIs contain the corresponding account IDs and extension IDs. In all request and response bodies these values are reflected via partnerId attributes of account and extension
        /// </summary>
        /// <value>For Partner Applications Internal identifier of an extension created by partner. The RingCentral supports the mapping of accounts and stores the corresponding account ID/extension ID for each partner ID of a client application. In request URIs partner IDs are accepted instead of regular RingCentral native IDs as path parameters using pid &#x3D; XXX clause. Though in response URIs contain the corresponding account IDs and extension IDs. In all request and response bodies these values are reflected via partnerId attributes of account and extension</value>
        [DataMember(Name="partnerId", EmitDefaultValue=false)]
        public string PartnerId { get; set; }

        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [DataMember(Name="permissions", EmitDefaultValue=false)]
        public ExtensionPermissions Permissions { get; set; }

        /// <summary>
        /// Gets or Sets ProfileImage
        /// </summary>
        [DataMember(Name="profileImage", EmitDefaultValue=false)]
        public ProfileImageInfo ProfileImage { get; set; }

        /// <summary>
        /// List of non-RC internal identifiers assigned to an extension
        /// </summary>
        /// <value>List of non-RC internal identifiers assigned to an extension</value>
        [DataMember(Name="references", EmitDefaultValue=false)]
        public List<ReferenceInfo> References { get; set; }

        /// <summary>
        /// Gets or Sets RegionalSettings
        /// </summary>
        [DataMember(Name="regionalSettings", EmitDefaultValue=false)]
        public RegionalSettings RegionalSettings { get; set; }

        /// <summary>
        /// Extension service features returned in response only when the logged-in user requests his/her own extension info, see also Extension Service Features
        /// </summary>
        /// <value>Extension service features returned in response only when the logged-in user requests his/her own extension info, see also Extension Service Features</value>
        [DataMember(Name="serviceFeatures", EmitDefaultValue=false)]
        public List<ExtensionServiceFeatureInfo> ServiceFeatures { get; set; }


        /// <summary>
        /// Gets or Sets Site
        /// </summary>
        [DataMember(Name="site", EmitDefaultValue=false)]
        public AutomaticLocationUpdatesSiteInfo Site { get; set; }


        /// <summary>
        /// Gets or Sets StatusInfo
        /// </summary>
        [DataMember(Name="statusInfo", EmitDefaultValue=false)]
        public ExtensionStatusInfo StatusInfo { get; set; }


        /// <summary>
        /// Hides extension from showing in company directory. Supported for extensions of User type only
        /// </summary>
        /// <value>Hides extension from showing in company directory. Supported for extensions of User type only</value>
        [DataMember(Name="hidden", EmitDefaultValue=false)]
        public bool Hidden { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExtensionCreationResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  ExtensionNumber: ").Append(ExtensionNumber).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PartnerId: ").Append(PartnerId).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  ProfileImage: ").Append(ProfileImage).Append("\n");
            sb.Append("  References: ").Append(References).Append("\n");
            sb.Append("  RegionalSettings: ").Append(RegionalSettings).Append("\n");
            sb.Append("  ServiceFeatures: ").Append(ServiceFeatures).Append("\n");
            sb.Append("  SetupWizardState: ").Append(SetupWizardState).Append("\n");
            sb.Append("  Site: ").Append(Site).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusInfo: ").Append(StatusInfo).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExtensionCreationResponse);
        }

        /// <summary>
        /// Returns true if ExtensionCreationResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ExtensionCreationResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExtensionCreationResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.Contact == input.Contact ||
                    (this.Contact != null &&
                    this.Contact.Equals(input.Contact))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    input.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                ) && 
                (
                    this.ExtensionNumber == input.ExtensionNumber ||
                    (this.ExtensionNumber != null &&
                    this.ExtensionNumber.Equals(input.ExtensionNumber))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PartnerId == input.PartnerId ||
                    (this.PartnerId != null &&
                    this.PartnerId.Equals(input.PartnerId))
                ) && 
                (
                    this.Permissions == input.Permissions ||
                    (this.Permissions != null &&
                    this.Permissions.Equals(input.Permissions))
                ) && 
                (
                    this.ProfileImage == input.ProfileImage ||
                    (this.ProfileImage != null &&
                    this.ProfileImage.Equals(input.ProfileImage))
                ) && 
                (
                    this.References == input.References ||
                    this.References != null &&
                    input.References != null &&
                    this.References.SequenceEqual(input.References)
                ) && 
                (
                    this.RegionalSettings == input.RegionalSettings ||
                    (this.RegionalSettings != null &&
                    this.RegionalSettings.Equals(input.RegionalSettings))
                ) && 
                (
                    this.ServiceFeatures == input.ServiceFeatures ||
                    this.ServiceFeatures != null &&
                    input.ServiceFeatures != null &&
                    this.ServiceFeatures.SequenceEqual(input.ServiceFeatures)
                ) && 
                (
                    this.SetupWizardState == input.SetupWizardState ||
                    (this.SetupWizardState != null &&
                    this.SetupWizardState.Equals(input.SetupWizardState))
                ) && 
                (
                    this.Site == input.Site ||
                    (this.Site != null &&
                    this.Site.Equals(input.Site))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusInfo == input.StatusInfo ||
                    (this.StatusInfo != null &&
                    this.StatusInfo.Equals(input.StatusInfo))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Hidden == input.Hidden ||
                    (this.Hidden != null &&
                    this.Hidden.Equals(input.Hidden))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.Contact != null)
                    hashCode = hashCode * 59 + this.Contact.GetHashCode();
                if (this.CustomFields != null)
                    hashCode = hashCode * 59 + this.CustomFields.GetHashCode();
                if (this.ExtensionNumber != null)
                    hashCode = hashCode * 59 + this.ExtensionNumber.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PartnerId != null)
                    hashCode = hashCode * 59 + this.PartnerId.GetHashCode();
                if (this.Permissions != null)
                    hashCode = hashCode * 59 + this.Permissions.GetHashCode();
                if (this.ProfileImage != null)
                    hashCode = hashCode * 59 + this.ProfileImage.GetHashCode();
                if (this.References != null)
                    hashCode = hashCode * 59 + this.References.GetHashCode();
                if (this.RegionalSettings != null)
                    hashCode = hashCode * 59 + this.RegionalSettings.GetHashCode();
                if (this.ServiceFeatures != null)
                    hashCode = hashCode * 59 + this.ServiceFeatures.GetHashCode();
                if (this.SetupWizardState != null)
                    hashCode = hashCode * 59 + this.SetupWizardState.GetHashCode();
                if (this.Site != null)
                    hashCode = hashCode * 59 + this.Site.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StatusInfo != null)
                    hashCode = hashCode * 59 + this.StatusInfo.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Hidden != null)
                    hashCode = hashCode * 59 + this.Hidden.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
