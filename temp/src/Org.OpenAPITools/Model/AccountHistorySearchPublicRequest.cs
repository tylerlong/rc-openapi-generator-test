/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AccountHistorySearchPublicRequest
    /// </summary>
    [DataContract]
    public partial class AccountHistorySearchPublicRequest :  IEquatable<AccountHistorySearchPublicRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines ActionIds
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionIdsEnum
        {
            /// <summary>
            /// Enum SECRETINFO for value: CHANGE_SECRET_INFO
            /// </summary>
            [EnumMember(Value = "CHANGE_SECRET_INFO")]
            SECRETINFO = 1,

            /// <summary>
            /// Enum USERINFO for value: CHANGE_USER_INFO
            /// </summary>
            [EnumMember(Value = "CHANGE_USER_INFO")]
            USERINFO = 2

        }


        /// <summary>
        /// List of action IDs (exact keys) to search for. Or you can use the excludeActionIds option.
        /// </summary>
        /// <value>List of action IDs (exact keys) to search for. Or you can use the excludeActionIds option.</value>
        [DataMember(Name="actionIds", EmitDefaultValue=false)]
        public List<ActionIdsEnum> ActionIds { get; set; }
        /// <summary>
        /// Defines ExcludeActionIds
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ExcludeActionIdsEnum
        {
            /// <summary>
            /// Enum SECRETINFO for value: CHANGE_SECRET_INFO
            /// </summary>
            [EnumMember(Value = "CHANGE_SECRET_INFO")]
            SECRETINFO = 1,

            /// <summary>
            /// Enum USERINFO for value: CHANGE_USER_INFO
            /// </summary>
            [EnumMember(Value = "CHANGE_USER_INFO")]
            USERINFO = 2

        }


        /// <summary>
        /// List of action IDs (exact keys) to exclude from your search. Or you can use the actionIds option.
        /// </summary>
        /// <value>List of action IDs (exact keys) to exclude from your search. Or you can use the actionIds option.</value>
        [DataMember(Name="excludeActionIds", EmitDefaultValue=false)]
        public List<ExcludeActionIdsEnum> ExcludeActionIds { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountHistorySearchPublicRequest" /> class.
        /// </summary>
        /// <param name="eventTimeFrom">UTC formatted datetime (RFC3339)  2019-10-12T07:20:50.52Z  Default: current time.</param>
        /// <param name="eventTimeTo">UTC formatted datetime (RFC3339)  2019-10-12T07:20:50.52Z  Default: dateFrom + 24h.</param>
        /// <param name="initiatorIds">List of extension IDs who is the user of changes..</param>
        /// <param name="page">Page number of the page you want to jump to..</param>
        /// <param name="perPage">Number of records returned per page..</param>
        /// <param name="targetIds">List of extension IDs (users) affected by this action..</param>
        /// <param name="siteId">A filter to apply by site ID.</param>
        /// <param name="actionIds">List of action IDs (exact keys) to search for. Or you can use the excludeActionIds option..</param>
        /// <param name="searchString">List of fields to apply search on:  initiator.name initiator.role initiator.extensionNumber target.name target.extensionNumber details.parameters.value.</param>
        /// <param name="excludeActionIds">List of action IDs (exact keys) to exclude from your search. Or you can use the actionIds option..</param>
        public AccountHistorySearchPublicRequest(DateTime eventTimeFrom = default(DateTime), DateTime eventTimeTo = default(DateTime), List<string> initiatorIds = default(List<string>), int page = default(int), int perPage = default(int), List<string> targetIds = default(List<string>), string siteId = default(string), List<ActionIdsEnum> actionIds = default(List<ActionIdsEnum>), string searchString = default(string), List<ExcludeActionIdsEnum> excludeActionIds = default(List<ExcludeActionIdsEnum>))
        {
            this.EventTimeFrom = eventTimeFrom;
            this.EventTimeTo = eventTimeTo;
            this.InitiatorIds = initiatorIds;
            this.Page = page;
            this.PerPage = perPage;
            this.TargetIds = targetIds;
            this.SiteId = siteId;
            this.ActionIds = actionIds;
            this.SearchString = searchString;
            this.ExcludeActionIds = excludeActionIds;
        }

        /// <summary>
        /// UTC formatted datetime (RFC3339)  2019-10-12T07:20:50.52Z  Default: current time
        /// </summary>
        /// <value>UTC formatted datetime (RFC3339)  2019-10-12T07:20:50.52Z  Default: current time</value>
        [DataMember(Name="eventTimeFrom", EmitDefaultValue=false)]
        public DateTime EventTimeFrom { get; set; }

        /// <summary>
        /// UTC formatted datetime (RFC3339)  2019-10-12T07:20:50.52Z  Default: dateFrom + 24h
        /// </summary>
        /// <value>UTC formatted datetime (RFC3339)  2019-10-12T07:20:50.52Z  Default: dateFrom + 24h</value>
        [DataMember(Name="eventTimeTo", EmitDefaultValue=false)]
        public DateTime EventTimeTo { get; set; }

        /// <summary>
        /// List of extension IDs who is the user of changes.
        /// </summary>
        /// <value>List of extension IDs who is the user of changes.</value>
        [DataMember(Name="initiatorIds", EmitDefaultValue=false)]
        public List<string> InitiatorIds { get; set; }

        /// <summary>
        /// Page number of the page you want to jump to.
        /// </summary>
        /// <value>Page number of the page you want to jump to.</value>
        [DataMember(Name="page", EmitDefaultValue=false)]
        public int Page { get; set; }

        /// <summary>
        /// Number of records returned per page.
        /// </summary>
        /// <value>Number of records returned per page.</value>
        [DataMember(Name="perPage", EmitDefaultValue=false)]
        public int PerPage { get; set; }

        /// <summary>
        /// List of extension IDs (users) affected by this action.
        /// </summary>
        /// <value>List of extension IDs (users) affected by this action.</value>
        [DataMember(Name="targetIds", EmitDefaultValue=false)]
        public List<string> TargetIds { get; set; }

        /// <summary>
        /// A filter to apply by site ID
        /// </summary>
        /// <value>A filter to apply by site ID</value>
        [DataMember(Name="siteId", EmitDefaultValue=false)]
        public string SiteId { get; set; }


        /// <summary>
        /// List of fields to apply search on:  initiator.name initiator.role initiator.extensionNumber target.name target.extensionNumber details.parameters.value
        /// </summary>
        /// <value>List of fields to apply search on:  initiator.name initiator.role initiator.extensionNumber target.name target.extensionNumber details.parameters.value</value>
        [DataMember(Name="searchString", EmitDefaultValue=false)]
        public string SearchString { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountHistorySearchPublicRequest {\n");
            sb.Append("  EventTimeFrom: ").Append(EventTimeFrom).Append("\n");
            sb.Append("  EventTimeTo: ").Append(EventTimeTo).Append("\n");
            sb.Append("  InitiatorIds: ").Append(InitiatorIds).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  PerPage: ").Append(PerPage).Append("\n");
            sb.Append("  TargetIds: ").Append(TargetIds).Append("\n");
            sb.Append("  SiteId: ").Append(SiteId).Append("\n");
            sb.Append("  ActionIds: ").Append(ActionIds).Append("\n");
            sb.Append("  SearchString: ").Append(SearchString).Append("\n");
            sb.Append("  ExcludeActionIds: ").Append(ExcludeActionIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountHistorySearchPublicRequest);
        }

        /// <summary>
        /// Returns true if AccountHistorySearchPublicRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountHistorySearchPublicRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountHistorySearchPublicRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EventTimeFrom == input.EventTimeFrom ||
                    (this.EventTimeFrom != null &&
                    this.EventTimeFrom.Equals(input.EventTimeFrom))
                ) && 
                (
                    this.EventTimeTo == input.EventTimeTo ||
                    (this.EventTimeTo != null &&
                    this.EventTimeTo.Equals(input.EventTimeTo))
                ) && 
                (
                    this.InitiatorIds == input.InitiatorIds ||
                    this.InitiatorIds != null &&
                    input.InitiatorIds != null &&
                    this.InitiatorIds.SequenceEqual(input.InitiatorIds)
                ) && 
                (
                    this.Page == input.Page ||
                    (this.Page != null &&
                    this.Page.Equals(input.Page))
                ) && 
                (
                    this.PerPage == input.PerPage ||
                    (this.PerPage != null &&
                    this.PerPage.Equals(input.PerPage))
                ) && 
                (
                    this.TargetIds == input.TargetIds ||
                    this.TargetIds != null &&
                    input.TargetIds != null &&
                    this.TargetIds.SequenceEqual(input.TargetIds)
                ) && 
                (
                    this.SiteId == input.SiteId ||
                    (this.SiteId != null &&
                    this.SiteId.Equals(input.SiteId))
                ) && 
                (
                    this.ActionIds == input.ActionIds ||
                    this.ActionIds != null &&
                    input.ActionIds != null &&
                    this.ActionIds.SequenceEqual(input.ActionIds)
                ) && 
                (
                    this.SearchString == input.SearchString ||
                    (this.SearchString != null &&
                    this.SearchString.Equals(input.SearchString))
                ) && 
                (
                    this.ExcludeActionIds == input.ExcludeActionIds ||
                    this.ExcludeActionIds != null &&
                    input.ExcludeActionIds != null &&
                    this.ExcludeActionIds.SequenceEqual(input.ExcludeActionIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EventTimeFrom != null)
                    hashCode = hashCode * 59 + this.EventTimeFrom.GetHashCode();
                if (this.EventTimeTo != null)
                    hashCode = hashCode * 59 + this.EventTimeTo.GetHashCode();
                if (this.InitiatorIds != null)
                    hashCode = hashCode * 59 + this.InitiatorIds.GetHashCode();
                if (this.Page != null)
                    hashCode = hashCode * 59 + this.Page.GetHashCode();
                if (this.PerPage != null)
                    hashCode = hashCode * 59 + this.PerPage.GetHashCode();
                if (this.TargetIds != null)
                    hashCode = hashCode * 59 + this.TargetIds.GetHashCode();
                if (this.SiteId != null)
                    hashCode = hashCode * 59 + this.SiteId.GetHashCode();
                if (this.ActionIds != null)
                    hashCode = hashCode * 59 + this.ActionIds.GetHashCode();
                if (this.SearchString != null)
                    hashCode = hashCode * 59 + this.SearchString.GetHashCode();
                if (this.ExcludeActionIds != null)
                    hashCode = hashCode * 59 + this.ExcludeActionIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
