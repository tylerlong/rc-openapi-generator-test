/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CreateCustomUserGreetingRequest
    /// </summary>
    [DataContract]
    public partial class CreateCustomUserGreetingRequest :  IEquatable<CreateCustomUserGreetingRequest>, IValidatableObject
    {
        /// <summary>
        /// Type of a greeting, specifying the case when the greeting is played.
        /// </summary>
        /// <value>Type of a greeting, specifying the case when the greeting is played.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Introductory for value: Introductory
            /// </summary>
            [EnumMember(Value = "Introductory")]
            Introductory = 1,

            /// <summary>
            /// Enum Announcement for value: Announcement
            /// </summary>
            [EnumMember(Value = "Announcement")]
            Announcement = 2,

            /// <summary>
            /// Enum ConnectingMessage for value: ConnectingMessage
            /// </summary>
            [EnumMember(Value = "ConnectingMessage")]
            ConnectingMessage = 3,

            /// <summary>
            /// Enum ConnectingAudio for value: ConnectingAudio
            /// </summary>
            [EnumMember(Value = "ConnectingAudio")]
            ConnectingAudio = 4,

            /// <summary>
            /// Enum Voicemail for value: Voicemail
            /// </summary>
            [EnumMember(Value = "Voicemail")]
            Voicemail = 5,

            /// <summary>
            /// Enum Unavailable for value: Unavailable
            /// </summary>
            [EnumMember(Value = "Unavailable")]
            Unavailable = 6,

            /// <summary>
            /// Enum HoldMusic for value: HoldMusic
            /// </summary>
            [EnumMember(Value = "HoldMusic")]
            HoldMusic = 7

        }

        /// <summary>
        /// Type of a greeting, specifying the case when the greeting is played.
        /// </summary>
        /// <value>Type of a greeting, specifying the case when the greeting is played.</value>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCustomUserGreetingRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateCustomUserGreetingRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCustomUserGreetingRequest" /> class.
        /// </summary>
        /// <param name="type">Type of a greeting, specifying the case when the greeting is played. (required).</param>
        /// <param name="answeringRuleId">Internal identifier of an answering rule.</param>
        /// <param name="binary">Media file to upload (required).</param>
        public CreateCustomUserGreetingRequest(TypeEnum type = default(TypeEnum), string answeringRuleId = default(string), System.IO.Stream binary = default(System.IO.Stream))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for CreateCustomUserGreetingRequest and cannot be null");
            }
            else
            {
                this.Type = type;
            }

            // to ensure "binary" is required (not null)
            if (binary == null)
            {
                throw new InvalidDataException("binary is a required property for CreateCustomUserGreetingRequest and cannot be null");
            }
            else
            {
                this.Binary = binary;
            }

            this.AnsweringRuleId = answeringRuleId;
        }


        /// <summary>
        /// Internal identifier of an answering rule
        /// </summary>
        /// <value>Internal identifier of an answering rule</value>
        [DataMember(Name="answeringRuleId", EmitDefaultValue=false)]
        public string AnsweringRuleId { get; set; }

        /// <summary>
        /// Media file to upload
        /// </summary>
        /// <value>Media file to upload</value>
        [DataMember(Name="binary", EmitDefaultValue=true)]
        public System.IO.Stream Binary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateCustomUserGreetingRequest {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AnsweringRuleId: ").Append(AnsweringRuleId).Append("\n");
            sb.Append("  Binary: ").Append(Binary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateCustomUserGreetingRequest);
        }

        /// <summary>
        /// Returns true if CreateCustomUserGreetingRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateCustomUserGreetingRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateCustomUserGreetingRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.AnsweringRuleId == input.AnsweringRuleId ||
                    (this.AnsweringRuleId != null &&
                    this.AnsweringRuleId.Equals(input.AnsweringRuleId))
                ) && 
                (
                    this.Binary == input.Binary ||
                    (this.Binary != null &&
                    this.Binary.Equals(input.Binary))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.AnsweringRuleId != null)
                    hashCode = hashCode * 59 + this.AnsweringRuleId.GetHashCode();
                if (this.Binary != null)
                    hashCode = hashCode * 59 + this.Binary.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
