/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Call queue service level settings
    /// </summary>
    [DataContract]
    public partial class CallQueueServiceLevelSettings :  IEquatable<CallQueueServiceLevelSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CallQueueServiceLevelSettings" /> class.
        /// </summary>
        /// <param name="slaGoal">Target percentage of calls that must be answered by agents within the service level time threshold.</param>
        /// <param name="slaThresholdSeconds">The period of time in seconds that is considered to be an acceptable service level.</param>
        /// <param name="includeAbandonedCalls">Includes abandoned calls (when callers hang up prior to being served by an agent) into service-level calculation.</param>
        /// <param name="abandonedThresholdSeconds">Abandoned calls that are shorter than the defined period of time in seconds will not be included into the calculation of Service Level.</param>
        public CallQueueServiceLevelSettings(int slaGoal = default(int), int slaThresholdSeconds = default(int), bool includeAbandonedCalls = default(bool), int abandonedThresholdSeconds = default(int))
        {
            this.SlaGoal = slaGoal;
            this.SlaThresholdSeconds = slaThresholdSeconds;
            this.IncludeAbandonedCalls = includeAbandonedCalls;
            this.AbandonedThresholdSeconds = abandonedThresholdSeconds;
        }

        /// <summary>
        /// Target percentage of calls that must be answered by agents within the service level time threshold
        /// </summary>
        /// <value>Target percentage of calls that must be answered by agents within the service level time threshold</value>
        [DataMember(Name="slaGoal", EmitDefaultValue=false)]
        public int SlaGoal { get; set; }

        /// <summary>
        /// The period of time in seconds that is considered to be an acceptable service level
        /// </summary>
        /// <value>The period of time in seconds that is considered to be an acceptable service level</value>
        [DataMember(Name="slaThresholdSeconds", EmitDefaultValue=false)]
        public int SlaThresholdSeconds { get; set; }

        /// <summary>
        /// Includes abandoned calls (when callers hang up prior to being served by an agent) into service-level calculation
        /// </summary>
        /// <value>Includes abandoned calls (when callers hang up prior to being served by an agent) into service-level calculation</value>
        [DataMember(Name="includeAbandonedCalls", EmitDefaultValue=false)]
        public bool IncludeAbandonedCalls { get; set; }

        /// <summary>
        /// Abandoned calls that are shorter than the defined period of time in seconds will not be included into the calculation of Service Level
        /// </summary>
        /// <value>Abandoned calls that are shorter than the defined period of time in seconds will not be included into the calculation of Service Level</value>
        [DataMember(Name="abandonedThresholdSeconds", EmitDefaultValue=false)]
        public int AbandonedThresholdSeconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallQueueServiceLevelSettings {\n");
            sb.Append("  SlaGoal: ").Append(SlaGoal).Append("\n");
            sb.Append("  SlaThresholdSeconds: ").Append(SlaThresholdSeconds).Append("\n");
            sb.Append("  IncludeAbandonedCalls: ").Append(IncludeAbandonedCalls).Append("\n");
            sb.Append("  AbandonedThresholdSeconds: ").Append(AbandonedThresholdSeconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallQueueServiceLevelSettings);
        }

        /// <summary>
        /// Returns true if CallQueueServiceLevelSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of CallQueueServiceLevelSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallQueueServiceLevelSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SlaGoal == input.SlaGoal ||
                    (this.SlaGoal != null &&
                    this.SlaGoal.Equals(input.SlaGoal))
                ) && 
                (
                    this.SlaThresholdSeconds == input.SlaThresholdSeconds ||
                    (this.SlaThresholdSeconds != null &&
                    this.SlaThresholdSeconds.Equals(input.SlaThresholdSeconds))
                ) && 
                (
                    this.IncludeAbandonedCalls == input.IncludeAbandonedCalls ||
                    (this.IncludeAbandonedCalls != null &&
                    this.IncludeAbandonedCalls.Equals(input.IncludeAbandonedCalls))
                ) && 
                (
                    this.AbandonedThresholdSeconds == input.AbandonedThresholdSeconds ||
                    (this.AbandonedThresholdSeconds != null &&
                    this.AbandonedThresholdSeconds.Equals(input.AbandonedThresholdSeconds))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SlaGoal != null)
                    hashCode = hashCode * 59 + this.SlaGoal.GetHashCode();
                if (this.SlaThresholdSeconds != null)
                    hashCode = hashCode * 59 + this.SlaThresholdSeconds.GetHashCode();
                if (this.IncludeAbandonedCalls != null)
                    hashCode = hashCode * 59 + this.IncludeAbandonedCalls.GetHashCode();
                if (this.AbandonedThresholdSeconds != null)
                    hashCode = hashCode * 59 + this.AbandonedThresholdSeconds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
