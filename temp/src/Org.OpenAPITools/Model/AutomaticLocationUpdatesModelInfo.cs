/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// HardPhone model information
    /// </summary>
    [DataContract]
    public partial class AutomaticLocationUpdatesModelInfo :  IEquatable<AutomaticLocationUpdatesModelInfo>, IValidatableObject
    {
        /// <summary>
        /// Defines Features
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FeaturesEnum
        {
            /// <summary>
            /// Enum BLA for value: BLA
            /// </summary>
            [EnumMember(Value = "BLA")]
            BLA = 1,

            /// <summary>
            /// Enum Intercom for value: Intercom
            /// </summary>
            [EnumMember(Value = "Intercom")]
            Intercom = 2,

            /// <summary>
            /// Enum Paging for value: Paging
            /// </summary>
            [EnumMember(Value = "Paging")]
            Paging = 3,

            /// <summary>
            /// Enum HELD for value: HELD
            /// </summary>
            [EnumMember(Value = "HELD")]
            HELD = 4

        }


        /// <summary>
        /// Device feature or multiple features supported
        /// </summary>
        /// <value>Device feature or multiple features supported</value>
        [DataMember(Name="features", EmitDefaultValue=false)]
        public List<FeaturesEnum> Features { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AutomaticLocationUpdatesModelInfo" /> class.
        /// </summary>
        /// <param name="id">Device model identifier.</param>
        /// <param name="name">Device name.</param>
        /// <param name="features">Device feature or multiple features supported.</param>
        public AutomaticLocationUpdatesModelInfo(string id = default(string), string name = default(string), List<FeaturesEnum> features = default(List<FeaturesEnum>))
        {
            this.Id = id;
            this.Name = name;
            this.Features = features;
        }

        /// <summary>
        /// Device model identifier
        /// </summary>
        /// <value>Device model identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Device name
        /// </summary>
        /// <value>Device name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AutomaticLocationUpdatesModelInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AutomaticLocationUpdatesModelInfo);
        }

        /// <summary>
        /// Returns true if AutomaticLocationUpdatesModelInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of AutomaticLocationUpdatesModelInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AutomaticLocationUpdatesModelInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Features == input.Features ||
                    this.Features != null &&
                    input.Features != null &&
                    this.Features.SequenceEqual(input.Features)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Features != null)
                    hashCode = hashCode * 59 + this.Features.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
