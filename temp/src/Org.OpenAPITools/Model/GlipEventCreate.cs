/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GlipEventCreate
    /// </summary>
    [DataContract]
    public partial class GlipEventCreate :  IEquatable<GlipEventCreate>, IValidatableObject
    {
        /// <summary>
        /// Event recurrence settings. For non-periodic events the value is &#39;None&#39;. Must be greater or equal to event duration: 1- Day/Weekday; 7 - Week; 28 - Month; 365 - Year
        /// </summary>
        /// <value>Event recurrence settings. For non-periodic events the value is &#39;None&#39;. Must be greater or equal to event duration: 1- Day/Weekday; 7 - Week; 28 - Month; 365 - Year</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RecurrenceEnum
        {
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,

            /// <summary>
            /// Enum Day for value: Day
            /// </summary>
            [EnumMember(Value = "Day")]
            Day = 2,

            /// <summary>
            /// Enum Weekday for value: Weekday
            /// </summary>
            [EnumMember(Value = "Weekday")]
            Weekday = 3,

            /// <summary>
            /// Enum Week for value: Week
            /// </summary>
            [EnumMember(Value = "Week")]
            Week = 4,

            /// <summary>
            /// Enum Month for value: Month
            /// </summary>
            [EnumMember(Value = "Month")]
            Month = 5,

            /// <summary>
            /// Enum Year for value: Year
            /// </summary>
            [EnumMember(Value = "Year")]
            Year = 6

        }

        /// <summary>
        /// Event recurrence settings. For non-periodic events the value is &#39;None&#39;. Must be greater or equal to event duration: 1- Day/Weekday; 7 - Week; 28 - Month; 365 - Year
        /// </summary>
        /// <value>Event recurrence settings. For non-periodic events the value is &#39;None&#39;. Must be greater or equal to event duration: 1- Day/Weekday; 7 - Week; 28 - Month; 365 - Year</value>
        [DataMember(Name="recurrence", EmitDefaultValue=false)]
        public RecurrenceEnum? Recurrence { get; set; }
        /// <summary>
        /// Iterations end datetime for periodic events.
        /// </summary>
        /// <value>Iterations end datetime for periodic events.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EndingOnEnum
        {
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,

            /// <summary>
            /// Enum Count for value: Count
            /// </summary>
            [EnumMember(Value = "Count")]
            Count = 2,

            /// <summary>
            /// Enum Date for value: Date
            /// </summary>
            [EnumMember(Value = "Date")]
            Date = 3

        }

        /// <summary>
        /// Iterations end datetime for periodic events.
        /// </summary>
        /// <value>Iterations end datetime for periodic events.</value>
        [DataMember(Name="endingOn", EmitDefaultValue=false)]
        public EndingOnEnum? EndingOn { get; set; }
        /// <summary>
        /// Color of Event title (including its presentation in Calendar)
        /// </summary>
        /// <value>Color of Event title (including its presentation in Calendar)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ColorEnum
        {
            /// <summary>
            /// Enum Black for value: Black
            /// </summary>
            [EnumMember(Value = "Black")]
            Black = 1,

            /// <summary>
            /// Enum Red for value: Red
            /// </summary>
            [EnumMember(Value = "Red")]
            Red = 2,

            /// <summary>
            /// Enum Orange for value: Orange
            /// </summary>
            [EnumMember(Value = "Orange")]
            Orange = 3,

            /// <summary>
            /// Enum Yellow for value: Yellow
            /// </summary>
            [EnumMember(Value = "Yellow")]
            Yellow = 4,

            /// <summary>
            /// Enum Green for value: Green
            /// </summary>
            [EnumMember(Value = "Green")]
            Green = 5,

            /// <summary>
            /// Enum Blue for value: Blue
            /// </summary>
            [EnumMember(Value = "Blue")]
            Blue = 6,

            /// <summary>
            /// Enum Purple for value: Purple
            /// </summary>
            [EnumMember(Value = "Purple")]
            Purple = 7,

            /// <summary>
            /// Enum Magenta for value: Magenta
            /// </summary>
            [EnumMember(Value = "Magenta")]
            Magenta = 8

        }

        /// <summary>
        /// Color of Event title (including its presentation in Calendar)
        /// </summary>
        /// <value>Color of Event title (including its presentation in Calendar)</value>
        [DataMember(Name="color", EmitDefaultValue=false)]
        public ColorEnum? Color { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GlipEventCreate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GlipEventCreate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GlipEventCreate" /> class.
        /// </summary>
        /// <param name="id">Internal identifier of an event.</param>
        /// <param name="creatorId">Internal identifier of a person created an event.</param>
        /// <param name="title">Event title (required).</param>
        /// <param name="startTime">Datetime of starting an event (required).</param>
        /// <param name="endTime">Datetime of ending an event (required).</param>
        /// <param name="allDay">Indicates whether event has some specific time slot or lasts for whole day(s) (default to false).</param>
        /// <param name="recurrence">Event recurrence settings. For non-periodic events the value is &#39;None&#39;. Must be greater or equal to event duration: 1- Day/Weekday; 7 - Week; 28 - Month; 365 - Year.</param>
        /// <param name="endingCondition">Condition of ending.</param>
        /// <param name="endingAfter">Count of iterations. For periodic events only. Value range is 1 - 10. Must be specified if &#39;endingCondition&#39; is &#39;Count&#39;.</param>
        /// <param name="endingOn">Iterations end datetime for periodic events. (default to EndingOnEnum.None).</param>
        /// <param name="color">Color of Event title (including its presentation in Calendar) (default to ColorEnum.Black).</param>
        /// <param name="location">Event location.</param>
        /// <param name="description">Event details.</param>
        public GlipEventCreate(string id = default(string), string creatorId = default(string), string title = default(string), string startTime = default(string), string endTime = default(string), bool allDay = false, RecurrenceEnum? recurrence = default(RecurrenceEnum?), string endingCondition = default(string), int endingAfter = default(int), EndingOnEnum? endingOn = EndingOnEnum.None, ColorEnum? color = ColorEnum.Black, string location = default(string), string description = default(string))
        {
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new InvalidDataException("title is a required property for GlipEventCreate and cannot be null");
            }
            else
            {
                this.Title = title;
            }

            // to ensure "startTime" is required (not null)
            if (startTime == null)
            {
                throw new InvalidDataException("startTime is a required property for GlipEventCreate and cannot be null");
            }
            else
            {
                this.StartTime = startTime;
            }

            // to ensure "endTime" is required (not null)
            if (endTime == null)
            {
                throw new InvalidDataException("endTime is a required property for GlipEventCreate and cannot be null");
            }
            else
            {
                this.EndTime = endTime;
            }

            this.Id = id;
            this.CreatorId = creatorId;
            // use default value if no "allDay" provided
            if (allDay == null)
            {
                this.AllDay = false;
            }
            else
            {
                this.AllDay = allDay;
            }
            this.Recurrence = recurrence;
            this.EndingCondition = endingCondition;
            this.EndingAfter = endingAfter;
            // use default value if no "endingOn" provided
            if (endingOn == null)
            {
                this.EndingOn = EndingOnEnum.None;
            }
            else
            {
                this.EndingOn = endingOn;
            }
            // use default value if no "color" provided
            if (color == null)
            {
                this.Color = ColorEnum.Black;
            }
            else
            {
                this.Color = color;
            }
            this.Location = location;
            this.Description = description;
        }

        /// <summary>
        /// Internal identifier of an event
        /// </summary>
        /// <value>Internal identifier of an event</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Internal identifier of a person created an event
        /// </summary>
        /// <value>Internal identifier of a person created an event</value>
        [DataMember(Name="creatorId", EmitDefaultValue=false)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Event title
        /// </summary>
        /// <value>Event title</value>
        [DataMember(Name="title", EmitDefaultValue=true)]
        public string Title { get; set; }

        /// <summary>
        /// Datetime of starting an event
        /// </summary>
        /// <value>Datetime of starting an event</value>
        [DataMember(Name="startTime", EmitDefaultValue=true)]
        public string StartTime { get; set; }

        /// <summary>
        /// Datetime of ending an event
        /// </summary>
        /// <value>Datetime of ending an event</value>
        [DataMember(Name="endTime", EmitDefaultValue=true)]
        public string EndTime { get; set; }

        /// <summary>
        /// Indicates whether event has some specific time slot or lasts for whole day(s)
        /// </summary>
        /// <value>Indicates whether event has some specific time slot or lasts for whole day(s)</value>
        [DataMember(Name="allDay", EmitDefaultValue=false)]
        public bool AllDay { get; set; }


        /// <summary>
        /// Condition of ending
        /// </summary>
        /// <value>Condition of ending</value>
        [DataMember(Name="endingCondition", EmitDefaultValue=false)]
        public string EndingCondition { get; set; }

        /// <summary>
        /// Count of iterations. For periodic events only. Value range is 1 - 10. Must be specified if &#39;endingCondition&#39; is &#39;Count&#39;
        /// </summary>
        /// <value>Count of iterations. For periodic events only. Value range is 1 - 10. Must be specified if &#39;endingCondition&#39; is &#39;Count&#39;</value>
        [DataMember(Name="endingAfter", EmitDefaultValue=false)]
        public int EndingAfter { get; set; }



        /// <summary>
        /// Event location
        /// </summary>
        /// <value>Event location</value>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }

        /// <summary>
        /// Event details
        /// </summary>
        /// <value>Event details</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlipEventCreate {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatorId: ").Append(CreatorId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  AllDay: ").Append(AllDay).Append("\n");
            sb.Append("  Recurrence: ").Append(Recurrence).Append("\n");
            sb.Append("  EndingCondition: ").Append(EndingCondition).Append("\n");
            sb.Append("  EndingAfter: ").Append(EndingAfter).Append("\n");
            sb.Append("  EndingOn: ").Append(EndingOn).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GlipEventCreate);
        }

        /// <summary>
        /// Returns true if GlipEventCreate instances are equal
        /// </summary>
        /// <param name="input">Instance of GlipEventCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlipEventCreate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreatorId == input.CreatorId ||
                    (this.CreatorId != null &&
                    this.CreatorId.Equals(input.CreatorId))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.AllDay == input.AllDay ||
                    (this.AllDay != null &&
                    this.AllDay.Equals(input.AllDay))
                ) && 
                (
                    this.Recurrence == input.Recurrence ||
                    (this.Recurrence != null &&
                    this.Recurrence.Equals(input.Recurrence))
                ) && 
                (
                    this.EndingCondition == input.EndingCondition ||
                    (this.EndingCondition != null &&
                    this.EndingCondition.Equals(input.EndingCondition))
                ) && 
                (
                    this.EndingAfter == input.EndingAfter ||
                    (this.EndingAfter != null &&
                    this.EndingAfter.Equals(input.EndingAfter))
                ) && 
                (
                    this.EndingOn == input.EndingOn ||
                    (this.EndingOn != null &&
                    this.EndingOn.Equals(input.EndingOn))
                ) && 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CreatorId != null)
                    hashCode = hashCode * 59 + this.CreatorId.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.AllDay != null)
                    hashCode = hashCode * 59 + this.AllDay.GetHashCode();
                if (this.Recurrence != null)
                    hashCode = hashCode * 59 + this.Recurrence.GetHashCode();
                if (this.EndingCondition != null)
                    hashCode = hashCode * 59 + this.EndingCondition.GetHashCode();
                if (this.EndingAfter != null)
                    hashCode = hashCode * 59 + this.EndingAfter.GetHashCode();
                if (this.EndingOn != null)
                    hashCode = hashCode * 59 + this.EndingOn.GetHashCode();
                if (this.Color != null)
                    hashCode = hashCode * 59 + this.Color.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
