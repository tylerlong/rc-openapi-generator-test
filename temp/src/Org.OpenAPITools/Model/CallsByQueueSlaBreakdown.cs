/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Result breakdown by queue SLA
    /// </summary>
    [DataContract]
    public partial class CallsByQueueSlaBreakdown :  IEquatable<CallsByQueueSlaBreakdown>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CallsByQueueSlaBreakdown" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallsByQueueSlaBreakdown() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CallsByQueueSlaBreakdown" /> class.
        /// </summary>
        /// <param name="inSla">Value for InSla queue SLA (required).</param>
        /// <param name="outOfSla">Value for OutSla queue SLA (required).</param>
        public CallsByQueueSlaBreakdown(double inSla = default(double), double outOfSla = default(double))
        {
            // to ensure "inSla" is required (not null)
            if (inSla == null)
            {
                throw new InvalidDataException("inSla is a required property for CallsByQueueSlaBreakdown and cannot be null");
            }
            else
            {
                this.InSla = inSla;
            }

            // to ensure "outOfSla" is required (not null)
            if (outOfSla == null)
            {
                throw new InvalidDataException("outOfSla is a required property for CallsByQueueSlaBreakdown and cannot be null");
            }
            else
            {
                this.OutOfSla = outOfSla;
            }

        }

        /// <summary>
        /// Value for InSla queue SLA
        /// </summary>
        /// <value>Value for InSla queue SLA</value>
        [DataMember(Name="inSla", EmitDefaultValue=true)]
        public double InSla { get; set; }

        /// <summary>
        /// Value for OutSla queue SLA
        /// </summary>
        /// <value>Value for OutSla queue SLA</value>
        [DataMember(Name="outOfSla", EmitDefaultValue=true)]
        public double OutOfSla { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsByQueueSlaBreakdown {\n");
            sb.Append("  InSla: ").Append(InSla).Append("\n");
            sb.Append("  OutOfSla: ").Append(OutOfSla).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallsByQueueSlaBreakdown);
        }

        /// <summary>
        /// Returns true if CallsByQueueSlaBreakdown instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsByQueueSlaBreakdown to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsByQueueSlaBreakdown input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InSla == input.InSla ||
                    (this.InSla != null &&
                    this.InSla.Equals(input.InSla))
                ) && 
                (
                    this.OutOfSla == input.OutOfSla ||
                    (this.OutOfSla != null &&
                    this.OutOfSla.Equals(input.OutOfSla))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InSla != null)
                    hashCode = hashCode * 59 + this.InSla.GetHashCode();
                if (this.OutOfSla != null)
                    hashCode = hashCode * 59 + this.OutOfSla.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
