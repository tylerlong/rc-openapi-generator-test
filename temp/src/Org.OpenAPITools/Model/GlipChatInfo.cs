/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GlipChatInfo
    /// </summary>
    [DataContract]
    public partial class GlipChatInfo :  IEquatable<GlipChatInfo>, IValidatableObject
    {
        /// <summary>
        /// Type of a chat
        /// </summary>
        /// <value>Type of a chat</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Everyone for value: Everyone
            /// </summary>
            [EnumMember(Value = "Everyone")]
            Everyone = 1,

            /// <summary>
            /// Enum Team for value: Team
            /// </summary>
            [EnumMember(Value = "Team")]
            Team = 2,

            /// <summary>
            /// Enum Group for value: Group
            /// </summary>
            [EnumMember(Value = "Group")]
            Group = 3,

            /// <summary>
            /// Enum Direct for value: Direct
            /// </summary>
            [EnumMember(Value = "Direct")]
            Direct = 4,

            /// <summary>
            /// Enum Personal for value: Personal
            /// </summary>
            [EnumMember(Value = "Personal")]
            Personal = 5

        }

        /// <summary>
        /// Type of a chat
        /// </summary>
        /// <value>Type of a chat</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// For &#39;Team&#39; chat type only. Team status.
        /// </summary>
        /// <value>For &#39;Team&#39; chat type only. Team status.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Active for value: Active
            /// </summary>
            [EnumMember(Value = "Active")]
            Active = 1,

            /// <summary>
            /// Enum Archived for value: Archived
            /// </summary>
            [EnumMember(Value = "Archived")]
            Archived = 2

        }

        /// <summary>
        /// For &#39;Team&#39; chat type only. Team status.
        /// </summary>
        /// <value>For &#39;Team&#39; chat type only. Team status.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GlipChatInfo" /> class.
        /// </summary>
        /// <param name="id">Internal identifier of a chat.</param>
        /// <param name="type">Type of a chat.</param>
        /// <param name="_public">For &#39;Team&#39; chat type only. Team access level..</param>
        /// <param name="name">For &#39;Team&#39;,&#39;Everyone&#39; chats types only. Chat name..</param>
        /// <param name="description">For &#39;Team&#39;,&#39;Everyone&#39; chats types only. Chat description..</param>
        /// <param name="status">For &#39;Team&#39; chat type only. Team status..</param>
        /// <param name="creationTime">Chat creation datetime in ISO 8601 format.</param>
        /// <param name="lastModifiedTime">Chat last change datetime in ISO 8601 format.</param>
        /// <param name="members">members.</param>
        public GlipChatInfo(string id = default(string), TypeEnum? type = default(TypeEnum?), bool _public = default(bool), string name = default(string), string description = default(string), StatusEnum? status = default(StatusEnum?), DateTime creationTime = default(DateTime), DateTime lastModifiedTime = default(DateTime), List<GlipMemberInfo> members = default(List<GlipMemberInfo>))
        {
            this.Id = id;
            this.Type = type;
            this.Public = _public;
            this.Name = name;
            this.Description = description;
            this.Status = status;
            this.CreationTime = creationTime;
            this.LastModifiedTime = lastModifiedTime;
            this.Members = members;
        }

        /// <summary>
        /// Internal identifier of a chat
        /// </summary>
        /// <value>Internal identifier of a chat</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// For &#39;Team&#39; chat type only. Team access level.
        /// </summary>
        /// <value>For &#39;Team&#39; chat type only. Team access level.</value>
        [DataMember(Name="public", EmitDefaultValue=false)]
        public bool Public { get; set; }

        /// <summary>
        /// For &#39;Team&#39;,&#39;Everyone&#39; chats types only. Chat name.
        /// </summary>
        /// <value>For &#39;Team&#39;,&#39;Everyone&#39; chats types only. Chat name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// For &#39;Team&#39;,&#39;Everyone&#39; chats types only. Chat description.
        /// </summary>
        /// <value>For &#39;Team&#39;,&#39;Everyone&#39; chats types only. Chat description.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }


        /// <summary>
        /// Chat creation datetime in ISO 8601 format
        /// </summary>
        /// <value>Chat creation datetime in ISO 8601 format</value>
        [DataMember(Name="creationTime", EmitDefaultValue=false)]
        public DateTime CreationTime { get; set; }

        /// <summary>
        /// Chat last change datetime in ISO 8601 format
        /// </summary>
        /// <value>Chat last change datetime in ISO 8601 format</value>
        [DataMember(Name="lastModifiedTime", EmitDefaultValue=false)]
        public DateTime LastModifiedTime { get; set; }

        /// <summary>
        /// Gets or Sets Members
        /// </summary>
        [DataMember(Name="members", EmitDefaultValue=false)]
        public List<GlipMemberInfo> Members { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlipChatInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Public: ").Append(Public).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CreationTime: ").Append(CreationTime).Append("\n");
            sb.Append("  LastModifiedTime: ").Append(LastModifiedTime).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GlipChatInfo);
        }

        /// <summary>
        /// Returns true if GlipChatInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of GlipChatInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlipChatInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Public == input.Public ||
                    (this.Public != null &&
                    this.Public.Equals(input.Public))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.CreationTime == input.CreationTime ||
                    (this.CreationTime != null &&
                    this.CreationTime.Equals(input.CreationTime))
                ) && 
                (
                    this.LastModifiedTime == input.LastModifiedTime ||
                    (this.LastModifiedTime != null &&
                    this.LastModifiedTime.Equals(input.LastModifiedTime))
                ) && 
                (
                    this.Members == input.Members ||
                    this.Members != null &&
                    input.Members != null &&
                    this.Members.SequenceEqual(input.Members)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Public != null)
                    hashCode = hashCode * 59 + this.Public.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.CreationTime != null)
                    hashCode = hashCode * 59 + this.CreationTime.GetHashCode();
                if (this.LastModifiedTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedTime.GetHashCode();
                if (this.Members != null)
                    hashCode = hashCode * 59 + this.Members.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
