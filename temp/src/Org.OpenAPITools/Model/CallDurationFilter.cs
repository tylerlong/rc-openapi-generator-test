/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Filtering of calls based on the overall call length
    /// </summary>
    [DataContract]
    public partial class CallDurationFilter :  IEquatable<CallDurationFilter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CallDurationFilter" /> class.
        /// </summary>
        /// <param name="minSeconds">Minimum duration of call in seconds.</param>
        /// <param name="maxSeconds">Maximum duration of call in seconds.</param>
        public CallDurationFilter(long minSeconds = default(long), long maxSeconds = default(long))
        {
            this.MinSeconds = minSeconds;
            this.MaxSeconds = maxSeconds;
        }

        /// <summary>
        /// Minimum duration of call in seconds
        /// </summary>
        /// <value>Minimum duration of call in seconds</value>
        [DataMember(Name="minSeconds", EmitDefaultValue=false)]
        public long MinSeconds { get; set; }

        /// <summary>
        /// Maximum duration of call in seconds
        /// </summary>
        /// <value>Maximum duration of call in seconds</value>
        [DataMember(Name="maxSeconds", EmitDefaultValue=false)]
        public long MaxSeconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallDurationFilter {\n");
            sb.Append("  MinSeconds: ").Append(MinSeconds).Append("\n");
            sb.Append("  MaxSeconds: ").Append(MaxSeconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallDurationFilter);
        }

        /// <summary>
        /// Returns true if CallDurationFilter instances are equal
        /// </summary>
        /// <param name="input">Instance of CallDurationFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallDurationFilter input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MinSeconds == input.MinSeconds ||
                    (this.MinSeconds != null &&
                    this.MinSeconds.Equals(input.MinSeconds))
                ) && 
                (
                    this.MaxSeconds == input.MaxSeconds ||
                    (this.MaxSeconds != null &&
                    this.MaxSeconds.Equals(input.MaxSeconds))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MinSeconds != null)
                    hashCode = hashCode * 59 + this.MinSeconds.GetHashCode();
                if (this.MaxSeconds != null)
                    hashCode = hashCode * 59 + this.MaxSeconds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
