/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ExtensionCallerIdInfoRequest
    /// </summary>
    [DataContract]
    public partial class ExtensionCallerIdInfoRequest :  IEquatable<ExtensionCallerIdInfoRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtensionCallerIdInfoRequest" /> class.
        /// </summary>
        /// <param name="uri">Canonical URL of a caller ID resource.</param>
        /// <param name="byDevice">byDevice.</param>
        /// <param name="byFeature">byFeature.</param>
        /// <param name="extensionNameForOutboundCalls">If &#39;True&#39;, then user first name and last name will be used as caller ID when making outbound calls from extension.</param>
        /// <param name="extensionNumberForInternalCalls">If &#39;True&#39;, then extension number will be used as caller ID when making internal calls.</param>
        public ExtensionCallerIdInfoRequest(string uri = default(string), List<CallerIdByDeviceRequest> byDevice = default(List<CallerIdByDeviceRequest>), List<CallerIdByFeatureRequest> byFeature = default(List<CallerIdByFeatureRequest>), bool extensionNameForOutboundCalls = default(bool), bool extensionNumberForInternalCalls = default(bool))
        {
            this.Uri = uri;
            this.ByDevice = byDevice;
            this.ByFeature = byFeature;
            this.ExtensionNameForOutboundCalls = extensionNameForOutboundCalls;
            this.ExtensionNumberForInternalCalls = extensionNumberForInternalCalls;
        }

        /// <summary>
        /// Canonical URL of a caller ID resource
        /// </summary>
        /// <value>Canonical URL of a caller ID resource</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Gets or Sets ByDevice
        /// </summary>
        [DataMember(Name="byDevice", EmitDefaultValue=false)]
        public List<CallerIdByDeviceRequest> ByDevice { get; set; }

        /// <summary>
        /// Gets or Sets ByFeature
        /// </summary>
        [DataMember(Name="byFeature", EmitDefaultValue=false)]
        public List<CallerIdByFeatureRequest> ByFeature { get; set; }

        /// <summary>
        /// If &#39;True&#39;, then user first name and last name will be used as caller ID when making outbound calls from extension
        /// </summary>
        /// <value>If &#39;True&#39;, then user first name and last name will be used as caller ID when making outbound calls from extension</value>
        [DataMember(Name="extensionNameForOutboundCalls", EmitDefaultValue=false)]
        public bool ExtensionNameForOutboundCalls { get; set; }

        /// <summary>
        /// If &#39;True&#39;, then extension number will be used as caller ID when making internal calls
        /// </summary>
        /// <value>If &#39;True&#39;, then extension number will be used as caller ID when making internal calls</value>
        [DataMember(Name="extensionNumberForInternalCalls", EmitDefaultValue=false)]
        public bool ExtensionNumberForInternalCalls { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExtensionCallerIdInfoRequest {\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  ByDevice: ").Append(ByDevice).Append("\n");
            sb.Append("  ByFeature: ").Append(ByFeature).Append("\n");
            sb.Append("  ExtensionNameForOutboundCalls: ").Append(ExtensionNameForOutboundCalls).Append("\n");
            sb.Append("  ExtensionNumberForInternalCalls: ").Append(ExtensionNumberForInternalCalls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExtensionCallerIdInfoRequest);
        }

        /// <summary>
        /// Returns true if ExtensionCallerIdInfoRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ExtensionCallerIdInfoRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExtensionCallerIdInfoRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.ByDevice == input.ByDevice ||
                    this.ByDevice != null &&
                    input.ByDevice != null &&
                    this.ByDevice.SequenceEqual(input.ByDevice)
                ) && 
                (
                    this.ByFeature == input.ByFeature ||
                    this.ByFeature != null &&
                    input.ByFeature != null &&
                    this.ByFeature.SequenceEqual(input.ByFeature)
                ) && 
                (
                    this.ExtensionNameForOutboundCalls == input.ExtensionNameForOutboundCalls ||
                    (this.ExtensionNameForOutboundCalls != null &&
                    this.ExtensionNameForOutboundCalls.Equals(input.ExtensionNameForOutboundCalls))
                ) && 
                (
                    this.ExtensionNumberForInternalCalls == input.ExtensionNumberForInternalCalls ||
                    (this.ExtensionNumberForInternalCalls != null &&
                    this.ExtensionNumberForInternalCalls.Equals(input.ExtensionNumberForInternalCalls))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.ByDevice != null)
                    hashCode = hashCode * 59 + this.ByDevice.GetHashCode();
                if (this.ByFeature != null)
                    hashCode = hashCode * 59 + this.ByFeature.GetHashCode();
                if (this.ExtensionNameForOutboundCalls != null)
                    hashCode = hashCode * 59 + this.ExtensionNameForOutboundCalls.GetHashCode();
                if (this.ExtensionNumberForInternalCalls != null)
                    hashCode = hashCode * 59 + this.ExtensionNumberForInternalCalls.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
