/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// UpdateConferencingInfoRequest
    /// </summary>
    [DataContract]
    public partial class UpdateConferencingInfoRequest :  IEquatable<UpdateConferencingInfoRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateConferencingInfoRequest" /> class.
        /// </summary>
        /// <param name="phoneNumbers">Multiple dial-in phone numbers to connect to audio conference service, relevant for user&#39;s brand. Each number is given with the country and location information, in order to let the user choose the less expensive way to connect to a conference. The first number in the list is the primary conference number, that is default and domestic.</param>
        /// <param name="allowJoinBeforeHost">Determines if host user allows conference participants to join before the host.</param>
        public UpdateConferencingInfoRequest(List<ConferencePhoneNumberInfo> phoneNumbers = default(List<ConferencePhoneNumberInfo>), bool allowJoinBeforeHost = default(bool))
        {
            this.PhoneNumbers = phoneNumbers;
            this.AllowJoinBeforeHost = allowJoinBeforeHost;
        }

        /// <summary>
        /// Multiple dial-in phone numbers to connect to audio conference service, relevant for user&#39;s brand. Each number is given with the country and location information, in order to let the user choose the less expensive way to connect to a conference. The first number in the list is the primary conference number, that is default and domestic
        /// </summary>
        /// <value>Multiple dial-in phone numbers to connect to audio conference service, relevant for user&#39;s brand. Each number is given with the country and location information, in order to let the user choose the less expensive way to connect to a conference. The first number in the list is the primary conference number, that is default and domestic</value>
        [DataMember(Name="phoneNumbers", EmitDefaultValue=false)]
        public List<ConferencePhoneNumberInfo> PhoneNumbers { get; set; }

        /// <summary>
        /// Determines if host user allows conference participants to join before the host
        /// </summary>
        /// <value>Determines if host user allows conference participants to join before the host</value>
        [DataMember(Name="allowJoinBeforeHost", EmitDefaultValue=false)]
        public bool AllowJoinBeforeHost { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateConferencingInfoRequest {\n");
            sb.Append("  PhoneNumbers: ").Append(PhoneNumbers).Append("\n");
            sb.Append("  AllowJoinBeforeHost: ").Append(AllowJoinBeforeHost).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateConferencingInfoRequest);
        }

        /// <summary>
        /// Returns true if UpdateConferencingInfoRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateConferencingInfoRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateConferencingInfoRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PhoneNumbers == input.PhoneNumbers ||
                    this.PhoneNumbers != null &&
                    input.PhoneNumbers != null &&
                    this.PhoneNumbers.SequenceEqual(input.PhoneNumbers)
                ) && 
                (
                    this.AllowJoinBeforeHost == input.AllowJoinBeforeHost ||
                    (this.AllowJoinBeforeHost != null &&
                    this.AllowJoinBeforeHost.Equals(input.AllowJoinBeforeHost))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PhoneNumbers != null)
                    hashCode = hashCode * 59 + this.PhoneNumbers.GetHashCode();
                if (this.AllowJoinBeforeHost != null)
                    hashCode = hashCode * 59 + this.AllowJoinBeforeHost.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
