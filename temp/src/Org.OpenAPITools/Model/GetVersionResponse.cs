/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GetVersionResponse
    /// </summary>
    [DataContract]
    public partial class GetVersionResponse :  IEquatable<GetVersionResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetVersionResponse" /> class.
        /// </summary>
        /// <param name="uri">Canonical URI of the version info resource.</param>
        /// <param name="versionString">Version of the RingCentral REST API.</param>
        /// <param name="releaseDate">Release date of this version.</param>
        /// <param name="uriString">URI part determining the current version.</param>
        public GetVersionResponse(string uri = default(string), string versionString = default(string), string releaseDate = default(string), string uriString = default(string))
        {
            this.Uri = uri;
            this.VersionString = versionString;
            this.ReleaseDate = releaseDate;
            this.UriString = uriString;
        }

        /// <summary>
        /// Canonical URI of the version info resource
        /// </summary>
        /// <value>Canonical URI of the version info resource</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Version of the RingCentral REST API
        /// </summary>
        /// <value>Version of the RingCentral REST API</value>
        [DataMember(Name="versionString", EmitDefaultValue=false)]
        public string VersionString { get; set; }

        /// <summary>
        /// Release date of this version
        /// </summary>
        /// <value>Release date of this version</value>
        [DataMember(Name="releaseDate", EmitDefaultValue=false)]
        public string ReleaseDate { get; set; }

        /// <summary>
        /// URI part determining the current version
        /// </summary>
        /// <value>URI part determining the current version</value>
        [DataMember(Name="uriString", EmitDefaultValue=false)]
        public string UriString { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetVersionResponse {\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  VersionString: ").Append(VersionString).Append("\n");
            sb.Append("  ReleaseDate: ").Append(ReleaseDate).Append("\n");
            sb.Append("  UriString: ").Append(UriString).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetVersionResponse);
        }

        /// <summary>
        /// Returns true if GetVersionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetVersionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetVersionResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.VersionString == input.VersionString ||
                    (this.VersionString != null &&
                    this.VersionString.Equals(input.VersionString))
                ) && 
                (
                    this.ReleaseDate == input.ReleaseDate ||
                    (this.ReleaseDate != null &&
                    this.ReleaseDate.Equals(input.ReleaseDate))
                ) && 
                (
                    this.UriString == input.UriString ||
                    (this.UriString != null &&
                    this.UriString.Equals(input.UriString))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.VersionString != null)
                    hashCode = hashCode * 59 + this.VersionString.GetHashCode();
                if (this.ReleaseDate != null)
                    hashCode = hashCode * 59 + this.ReleaseDate.GetHashCode();
                if (this.UriString != null)
                    hashCode = hashCode * 59 + this.UriString.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
