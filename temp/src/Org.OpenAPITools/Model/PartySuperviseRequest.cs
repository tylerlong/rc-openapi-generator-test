/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PartySuperviseRequest
    /// </summary>
    [DataContract]
    public partial class PartySuperviseRequest :  IEquatable<PartySuperviseRequest>, IValidatableObject
    {
        /// <summary>
        /// Supervising mode
        /// </summary>
        /// <value>Supervising mode</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModeEnum
        {
            /// <summary>
            /// Enum Listen for value: Listen
            /// </summary>
            [EnumMember(Value = "Listen")]
            Listen = 1

        }

        /// <summary>
        /// Supervising mode
        /// </summary>
        /// <value>Supervising mode</value>
        [DataMember(Name="mode", EmitDefaultValue=true)]
        public ModeEnum Mode { get; set; }
        /// <summary>
        /// Specifies session description protocol (SDP) setting. The possible values are &#39;sendOnly&#39; (only sending) meaning one-way audio streaming; and &#39;sendRecv&#39; (sending/receiving) meaning two-way audio streaming
        /// </summary>
        /// <value>Specifies session description protocol (SDP) setting. The possible values are &#39;sendOnly&#39; (only sending) meaning one-way audio streaming; and &#39;sendRecv&#39; (sending/receiving) meaning two-way audio streaming</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MediaSDPEnum
        {
            /// <summary>
            /// Enum SendOnly for value: sendOnly
            /// </summary>
            [EnumMember(Value = "sendOnly")]
            SendOnly = 1,

            /// <summary>
            /// Enum SendRecv for value: sendRecv
            /// </summary>
            [EnumMember(Value = "sendRecv")]
            SendRecv = 2

        }

        /// <summary>
        /// Specifies session description protocol (SDP) setting. The possible values are &#39;sendOnly&#39; (only sending) meaning one-way audio streaming; and &#39;sendRecv&#39; (sending/receiving) meaning two-way audio streaming
        /// </summary>
        /// <value>Specifies session description protocol (SDP) setting. The possible values are &#39;sendOnly&#39; (only sending) meaning one-way audio streaming; and &#39;sendRecv&#39; (sending/receiving) meaning two-way audio streaming</value>
        [DataMember(Name="mediaSDP", EmitDefaultValue=false)]
        public MediaSDPEnum? MediaSDP { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PartySuperviseRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PartySuperviseRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PartySuperviseRequest" /> class.
        /// </summary>
        /// <param name="mode">Supervising mode (required).</param>
        /// <param name="supervisorDeviceId">Internal identifier of a supervisor&#39;s device (required).</param>
        /// <param name="agentExtensionId">Mailbox ID of a user that will be monitored (required).</param>
        /// <param name="autoAnswer">Specifies if auto-answer SIP header should be sent. If auto-answer is set to &#39;True&#39;, the call is automatically answered by the supervising party, if set to &#39;False&#39; - then the supervising party has to accept or decline the monitored call (default to true).</param>
        /// <param name="mediaSDP">Specifies session description protocol (SDP) setting. The possible values are &#39;sendOnly&#39; (only sending) meaning one-way audio streaming; and &#39;sendRecv&#39; (sending/receiving) meaning two-way audio streaming.</param>
        public PartySuperviseRequest(ModeEnum mode = default(ModeEnum), string supervisorDeviceId = default(string), string agentExtensionId = default(string), bool autoAnswer = true, MediaSDPEnum? mediaSDP = default(MediaSDPEnum?))
        {
            // to ensure "mode" is required (not null)
            if (mode == null)
            {
                throw new InvalidDataException("mode is a required property for PartySuperviseRequest and cannot be null");
            }
            else
            {
                this.Mode = mode;
            }

            // to ensure "supervisorDeviceId" is required (not null)
            if (supervisorDeviceId == null)
            {
                throw new InvalidDataException("supervisorDeviceId is a required property for PartySuperviseRequest and cannot be null");
            }
            else
            {
                this.SupervisorDeviceId = supervisorDeviceId;
            }

            // to ensure "agentExtensionId" is required (not null)
            if (agentExtensionId == null)
            {
                throw new InvalidDataException("agentExtensionId is a required property for PartySuperviseRequest and cannot be null");
            }
            else
            {
                this.AgentExtensionId = agentExtensionId;
            }

            // use default value if no "autoAnswer" provided
            if (autoAnswer == null)
            {
                this.AutoAnswer = true;
            }
            else
            {
                this.AutoAnswer = autoAnswer;
            }
            this.MediaSDP = mediaSDP;
        }


        /// <summary>
        /// Internal identifier of a supervisor&#39;s device
        /// </summary>
        /// <value>Internal identifier of a supervisor&#39;s device</value>
        [DataMember(Name="supervisorDeviceId", EmitDefaultValue=true)]
        public string SupervisorDeviceId { get; set; }

        /// <summary>
        /// Mailbox ID of a user that will be monitored
        /// </summary>
        /// <value>Mailbox ID of a user that will be monitored</value>
        [DataMember(Name="agentExtensionId", EmitDefaultValue=true)]
        public string AgentExtensionId { get; set; }

        /// <summary>
        /// Specifies if auto-answer SIP header should be sent. If auto-answer is set to &#39;True&#39;, the call is automatically answered by the supervising party, if set to &#39;False&#39; - then the supervising party has to accept or decline the monitored call
        /// </summary>
        /// <value>Specifies if auto-answer SIP header should be sent. If auto-answer is set to &#39;True&#39;, the call is automatically answered by the supervising party, if set to &#39;False&#39; - then the supervising party has to accept or decline the monitored call</value>
        [DataMember(Name="autoAnswer", EmitDefaultValue=false)]
        public bool AutoAnswer { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PartySuperviseRequest {\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  SupervisorDeviceId: ").Append(SupervisorDeviceId).Append("\n");
            sb.Append("  AgentExtensionId: ").Append(AgentExtensionId).Append("\n");
            sb.Append("  AutoAnswer: ").Append(AutoAnswer).Append("\n");
            sb.Append("  MediaSDP: ").Append(MediaSDP).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PartySuperviseRequest);
        }

        /// <summary>
        /// Returns true if PartySuperviseRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PartySuperviseRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PartySuperviseRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.SupervisorDeviceId == input.SupervisorDeviceId ||
                    (this.SupervisorDeviceId != null &&
                    this.SupervisorDeviceId.Equals(input.SupervisorDeviceId))
                ) && 
                (
                    this.AgentExtensionId == input.AgentExtensionId ||
                    (this.AgentExtensionId != null &&
                    this.AgentExtensionId.Equals(input.AgentExtensionId))
                ) && 
                (
                    this.AutoAnswer == input.AutoAnswer ||
                    (this.AutoAnswer != null &&
                    this.AutoAnswer.Equals(input.AutoAnswer))
                ) && 
                (
                    this.MediaSDP == input.MediaSDP ||
                    (this.MediaSDP != null &&
                    this.MediaSDP.Equals(input.MediaSDP))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.SupervisorDeviceId != null)
                    hashCode = hashCode * 59 + this.SupervisorDeviceId.GetHashCode();
                if (this.AgentExtensionId != null)
                    hashCode = hashCode * 59 + this.AgentExtensionId.GetHashCode();
                if (this.AutoAnswer != null)
                    hashCode = hashCode * 59 + this.AutoAnswer.GetHashCode();
                if (this.MediaSDP != null)
                    hashCode = hashCode * 59 + this.MediaSDP.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
