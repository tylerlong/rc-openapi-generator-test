/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Opt-out record
    /// </summary>
    [DataContract]
    public partial class OptOutResponse :  IEquatable<OptOutResponse>, IValidatableObject
    {
        /// <summary>
        /// Status of a phone number
        /// </summary>
        /// <value>Status of a phone number</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum OptIn for value: OptIn
            /// </summary>
            [EnumMember(Value = "OptIn")]
            OptIn = 1,

            /// <summary>
            /// Enum OptOut for value: OptOut
            /// </summary>
            [EnumMember(Value = "OptOut")]
            OptOut = 2

        }

        /// <summary>
        /// Status of a phone number
        /// </summary>
        /// <value>Status of a phone number</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Defines Source
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SourceEnum
        {
            /// <summary>
            /// Enum Recipient for value: Recipient
            /// </summary>
            [EnumMember(Value = "Recipient")]
            Recipient = 1,

            /// <summary>
            /// Enum Account for value: Account
            /// </summary>
            [EnumMember(Value = "Account")]
            Account = 2,

            /// <summary>
            /// Enum Upstream for value: Upstream
            /// </summary>
            [EnumMember(Value = "Upstream")]
            Upstream = 3,

            /// <summary>
            /// Enum Carrier for value: Carrier
            /// </summary>
            [EnumMember(Value = "Carrier")]
            Carrier = 4

        }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public SourceEnum? Source { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OptOutResponse" /> class.
        /// </summary>
        /// <param name="from">Phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format from which the recipient has opted out.</param>
        /// <param name="to">Phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format which is opted out.</param>
        /// <param name="status">Status of a phone number.</param>
        /// <param name="source">source.</param>
        public OptOutResponse(string from = default(string), string to = default(string), StatusEnum? status = default(StatusEnum?), SourceEnum? source = default(SourceEnum?))
        {
            this.From = from;
            this.To = to;
            this.Status = status;
            this.Source = source;
        }

        /// <summary>
        /// Phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format from which the recipient has opted out
        /// </summary>
        /// <value>Phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format from which the recipient has opted out</value>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public string From { get; set; }

        /// <summary>
        /// Phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format which is opted out
        /// </summary>
        /// <value>Phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format which is opted out</value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public string To { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OptOutResponse {\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptOutResponse);
        }

        /// <summary>
        /// Returns true if OptOutResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of OptOutResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptOutResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
