/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Call session information
    /// </summary>
    [DataContract]
    public partial class CallSessionObject :  IEquatable<CallSessionObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CallSessionObject" /> class.
        /// </summary>
        /// <param name="id">Internal identifier of a call session.</param>
        /// <param name="origin">origin.</param>
        /// <param name="voiceCallToken">For calls of &#39;Conference&#39; type only.</param>
        /// <param name="parties">parties.</param>
        /// <param name="creationTime">Date and time of the latest session update represented in Unix time format.</param>
        public CallSessionObject(string id = default(string), OriginInfo origin = default(OriginInfo), string voiceCallToken = default(string), List<CallParty> parties = default(List<CallParty>), string creationTime = default(string))
        {
            this.Id = id;
            this.Origin = origin;
            this.VoiceCallToken = voiceCallToken;
            this.Parties = parties;
            this.CreationTime = creationTime;
        }

        /// <summary>
        /// Internal identifier of a call session
        /// </summary>
        /// <value>Internal identifier of a call session</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Origin
        /// </summary>
        [DataMember(Name="origin", EmitDefaultValue=false)]
        public OriginInfo Origin { get; set; }

        /// <summary>
        /// For calls of &#39;Conference&#39; type only
        /// </summary>
        /// <value>For calls of &#39;Conference&#39; type only</value>
        [DataMember(Name="voiceCallToken", EmitDefaultValue=false)]
        public string VoiceCallToken { get; set; }

        /// <summary>
        /// Gets or Sets Parties
        /// </summary>
        [DataMember(Name="parties", EmitDefaultValue=false)]
        public List<CallParty> Parties { get; set; }

        /// <summary>
        /// Date and time of the latest session update represented in Unix time format
        /// </summary>
        /// <value>Date and time of the latest session update represented in Unix time format</value>
        [DataMember(Name="creationTime", EmitDefaultValue=false)]
        public string CreationTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallSessionObject {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  VoiceCallToken: ").Append(VoiceCallToken).Append("\n");
            sb.Append("  Parties: ").Append(Parties).Append("\n");
            sb.Append("  CreationTime: ").Append(CreationTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallSessionObject);
        }

        /// <summary>
        /// Returns true if CallSessionObject instances are equal
        /// </summary>
        /// <param name="input">Instance of CallSessionObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallSessionObject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Origin == input.Origin ||
                    (this.Origin != null &&
                    this.Origin.Equals(input.Origin))
                ) && 
                (
                    this.VoiceCallToken == input.VoiceCallToken ||
                    (this.VoiceCallToken != null &&
                    this.VoiceCallToken.Equals(input.VoiceCallToken))
                ) && 
                (
                    this.Parties == input.Parties ||
                    this.Parties != null &&
                    input.Parties != null &&
                    this.Parties.SequenceEqual(input.Parties)
                ) && 
                (
                    this.CreationTime == input.CreationTime ||
                    (this.CreationTime != null &&
                    this.CreationTime.Equals(input.CreationTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Origin != null)
                    hashCode = hashCode * 59 + this.Origin.GetHashCode();
                if (this.VoiceCallToken != null)
                    hashCode = hashCode * 59 + this.VoiceCallToken.GetHashCode();
                if (this.Parties != null)
                    hashCode = hashCode * 59 + this.Parties.GetHashCode();
                if (this.CreationTime != null)
                    hashCode = hashCode * 59 + this.CreationTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
