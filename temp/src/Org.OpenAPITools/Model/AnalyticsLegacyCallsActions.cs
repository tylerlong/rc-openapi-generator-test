/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AnalyticsLegacyCallsActions
    /// </summary>
    [DataContract]
    public partial class AnalyticsLegacyCallsActions :  IEquatable<AnalyticsLegacyCallsActions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsLegacyCallsActions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AnalyticsLegacyCallsActions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsLegacyCallsActions" /> class.
        /// </summary>
        /// <param name="parksOn">parksOn (required).</param>
        /// <param name="parksOff">parksOff (required).</param>
        /// <param name="holdsOn">holdsOn (required).</param>
        /// <param name="holdsOff">holdsOff (required).</param>
        /// <param name="blindTransfer">blindTransfer (required).</param>
        /// <param name="warmTransfer">warmTransfer (required).</param>
        /// <param name="dtmfTransfer">dtmfTransfer (required).</param>
        public AnalyticsLegacyCallsActions(double parksOn = default(double), double parksOff = default(double), double holdsOn = default(double), double holdsOff = default(double), double blindTransfer = default(double), double warmTransfer = default(double), double dtmfTransfer = default(double))
        {
            // to ensure "parksOn" is required (not null)
            if (parksOn == null)
            {
                throw new InvalidDataException("parksOn is a required property for AnalyticsLegacyCallsActions and cannot be null");
            }
            else
            {
                this.ParksOn = parksOn;
            }

            // to ensure "parksOff" is required (not null)
            if (parksOff == null)
            {
                throw new InvalidDataException("parksOff is a required property for AnalyticsLegacyCallsActions and cannot be null");
            }
            else
            {
                this.ParksOff = parksOff;
            }

            // to ensure "holdsOn" is required (not null)
            if (holdsOn == null)
            {
                throw new InvalidDataException("holdsOn is a required property for AnalyticsLegacyCallsActions and cannot be null");
            }
            else
            {
                this.HoldsOn = holdsOn;
            }

            // to ensure "holdsOff" is required (not null)
            if (holdsOff == null)
            {
                throw new InvalidDataException("holdsOff is a required property for AnalyticsLegacyCallsActions and cannot be null");
            }
            else
            {
                this.HoldsOff = holdsOff;
            }

            // to ensure "blindTransfer" is required (not null)
            if (blindTransfer == null)
            {
                throw new InvalidDataException("blindTransfer is a required property for AnalyticsLegacyCallsActions and cannot be null");
            }
            else
            {
                this.BlindTransfer = blindTransfer;
            }

            // to ensure "warmTransfer" is required (not null)
            if (warmTransfer == null)
            {
                throw new InvalidDataException("warmTransfer is a required property for AnalyticsLegacyCallsActions and cannot be null");
            }
            else
            {
                this.WarmTransfer = warmTransfer;
            }

            // to ensure "dtmfTransfer" is required (not null)
            if (dtmfTransfer == null)
            {
                throw new InvalidDataException("dtmfTransfer is a required property for AnalyticsLegacyCallsActions and cannot be null");
            }
            else
            {
                this.DtmfTransfer = dtmfTransfer;
            }

        }

        /// <summary>
        /// Gets or Sets ParksOn
        /// </summary>
        [DataMember(Name="parksOn", EmitDefaultValue=true)]
        public double ParksOn { get; set; }

        /// <summary>
        /// Gets or Sets ParksOff
        /// </summary>
        [DataMember(Name="parksOff", EmitDefaultValue=true)]
        public double ParksOff { get; set; }

        /// <summary>
        /// Gets or Sets HoldsOn
        /// </summary>
        [DataMember(Name="holdsOn", EmitDefaultValue=true)]
        public double HoldsOn { get; set; }

        /// <summary>
        /// Gets or Sets HoldsOff
        /// </summary>
        [DataMember(Name="holdsOff", EmitDefaultValue=true)]
        public double HoldsOff { get; set; }

        /// <summary>
        /// Gets or Sets BlindTransfer
        /// </summary>
        [DataMember(Name="blindTransfer", EmitDefaultValue=true)]
        public double BlindTransfer { get; set; }

        /// <summary>
        /// Gets or Sets WarmTransfer
        /// </summary>
        [DataMember(Name="warmTransfer", EmitDefaultValue=true)]
        public double WarmTransfer { get; set; }

        /// <summary>
        /// Gets or Sets DtmfTransfer
        /// </summary>
        [DataMember(Name="dtmfTransfer", EmitDefaultValue=true)]
        public double DtmfTransfer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnalyticsLegacyCallsActions {\n");
            sb.Append("  ParksOn: ").Append(ParksOn).Append("\n");
            sb.Append("  ParksOff: ").Append(ParksOff).Append("\n");
            sb.Append("  HoldsOn: ").Append(HoldsOn).Append("\n");
            sb.Append("  HoldsOff: ").Append(HoldsOff).Append("\n");
            sb.Append("  BlindTransfer: ").Append(BlindTransfer).Append("\n");
            sb.Append("  WarmTransfer: ").Append(WarmTransfer).Append("\n");
            sb.Append("  DtmfTransfer: ").Append(DtmfTransfer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AnalyticsLegacyCallsActions);
        }

        /// <summary>
        /// Returns true if AnalyticsLegacyCallsActions instances are equal
        /// </summary>
        /// <param name="input">Instance of AnalyticsLegacyCallsActions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnalyticsLegacyCallsActions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ParksOn == input.ParksOn ||
                    (this.ParksOn != null &&
                    this.ParksOn.Equals(input.ParksOn))
                ) && 
                (
                    this.ParksOff == input.ParksOff ||
                    (this.ParksOff != null &&
                    this.ParksOff.Equals(input.ParksOff))
                ) && 
                (
                    this.HoldsOn == input.HoldsOn ||
                    (this.HoldsOn != null &&
                    this.HoldsOn.Equals(input.HoldsOn))
                ) && 
                (
                    this.HoldsOff == input.HoldsOff ||
                    (this.HoldsOff != null &&
                    this.HoldsOff.Equals(input.HoldsOff))
                ) && 
                (
                    this.BlindTransfer == input.BlindTransfer ||
                    (this.BlindTransfer != null &&
                    this.BlindTransfer.Equals(input.BlindTransfer))
                ) && 
                (
                    this.WarmTransfer == input.WarmTransfer ||
                    (this.WarmTransfer != null &&
                    this.WarmTransfer.Equals(input.WarmTransfer))
                ) && 
                (
                    this.DtmfTransfer == input.DtmfTransfer ||
                    (this.DtmfTransfer != null &&
                    this.DtmfTransfer.Equals(input.DtmfTransfer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ParksOn != null)
                    hashCode = hashCode * 59 + this.ParksOn.GetHashCode();
                if (this.ParksOff != null)
                    hashCode = hashCode * 59 + this.ParksOff.GetHashCode();
                if (this.HoldsOn != null)
                    hashCode = hashCode * 59 + this.HoldsOn.GetHashCode();
                if (this.HoldsOff != null)
                    hashCode = hashCode * 59 + this.HoldsOff.GetHashCode();
                if (this.BlindTransfer != null)
                    hashCode = hashCode * 59 + this.BlindTransfer.GetHashCode();
                if (this.WarmTransfer != null)
                    hashCode = hashCode * 59 + this.WarmTransfer.GetHashCode();
                if (this.DtmfTransfer != null)
                    hashCode = hashCode * 59 + this.DtmfTransfer.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
