/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// NotificationSettings
    /// </summary>
    [DataContract]
    public partial class NotificationSettings :  IEquatable<NotificationSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationSettings" /> class.
        /// </summary>
        /// <param name="uri">Canonical URI of notifications settings resource.</param>
        /// <param name="emailRecipients">List of extensions specified as email notification recipients. Returned only for call queues where queue managers are assigned as user extensions..</param>
        /// <param name="emailAddresses">List of notification recipient email addresses.</param>
        /// <param name="includeManagers">Specifies if managers&#39; emails are included in the list of emails to which notifications are sent.</param>
        /// <param name="smsEmailAddresses">List of notification recipient email addresses.</param>
        /// <param name="advancedMode">Specifies notifications settings mode. If &#39;True&#39; then advanced mode is on, it allows using different emails and/or phone numbers for each notification type. If &#39;False&#39; then basic mode is on. Advanced mode settings are returned in both modes, if specified once, but if basic mode is switched on, they are not applied .</param>
        /// <param name="voicemails">voicemails.</param>
        /// <param name="inboundFaxes">inboundFaxes.</param>
        /// <param name="outboundFaxes">outboundFaxes.</param>
        /// <param name="inboundTexts">inboundTexts.</param>
        /// <param name="missedCalls">missedCalls.</param>
        public NotificationSettings(string uri = default(string), List<EmailRecipientInfo> emailRecipients = default(List<EmailRecipientInfo>), List<string> emailAddresses = default(List<string>), bool includeManagers = default(bool), List<string> smsEmailAddresses = default(List<string>), bool advancedMode = default(bool), VoicemailsInfo voicemails = default(VoicemailsInfo), InboundFaxesInfo inboundFaxes = default(InboundFaxesInfo), OutboundFaxesInfo outboundFaxes = default(OutboundFaxesInfo), InboundTextsInfo inboundTexts = default(InboundTextsInfo), MissedCallsInfo missedCalls = default(MissedCallsInfo))
        {
            this.Uri = uri;
            this.EmailRecipients = emailRecipients;
            this.EmailAddresses = emailAddresses;
            this.IncludeManagers = includeManagers;
            this.SmsEmailAddresses = smsEmailAddresses;
            this.AdvancedMode = advancedMode;
            this.Voicemails = voicemails;
            this.InboundFaxes = inboundFaxes;
            this.OutboundFaxes = outboundFaxes;
            this.InboundTexts = inboundTexts;
            this.MissedCalls = missedCalls;
        }

        /// <summary>
        /// Canonical URI of notifications settings resource
        /// </summary>
        /// <value>Canonical URI of notifications settings resource</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// List of extensions specified as email notification recipients. Returned only for call queues where queue managers are assigned as user extensions.
        /// </summary>
        /// <value>List of extensions specified as email notification recipients. Returned only for call queues where queue managers are assigned as user extensions.</value>
        [DataMember(Name="emailRecipients", EmitDefaultValue=false)]
        public List<EmailRecipientInfo> EmailRecipients { get; set; }

        /// <summary>
        /// List of notification recipient email addresses
        /// </summary>
        /// <value>List of notification recipient email addresses</value>
        [DataMember(Name="emailAddresses", EmitDefaultValue=false)]
        public List<string> EmailAddresses { get; set; }

        /// <summary>
        /// Specifies if managers&#39; emails are included in the list of emails to which notifications are sent
        /// </summary>
        /// <value>Specifies if managers&#39; emails are included in the list of emails to which notifications are sent</value>
        [DataMember(Name="includeManagers", EmitDefaultValue=false)]
        public bool IncludeManagers { get; set; }

        /// <summary>
        /// List of notification recipient email addresses
        /// </summary>
        /// <value>List of notification recipient email addresses</value>
        [DataMember(Name="smsEmailAddresses", EmitDefaultValue=false)]
        public List<string> SmsEmailAddresses { get; set; }

        /// <summary>
        /// Specifies notifications settings mode. If &#39;True&#39; then advanced mode is on, it allows using different emails and/or phone numbers for each notification type. If &#39;False&#39; then basic mode is on. Advanced mode settings are returned in both modes, if specified once, but if basic mode is switched on, they are not applied 
        /// </summary>
        /// <value>Specifies notifications settings mode. If &#39;True&#39; then advanced mode is on, it allows using different emails and/or phone numbers for each notification type. If &#39;False&#39; then basic mode is on. Advanced mode settings are returned in both modes, if specified once, but if basic mode is switched on, they are not applied </value>
        [DataMember(Name="advancedMode", EmitDefaultValue=false)]
        public bool AdvancedMode { get; set; }

        /// <summary>
        /// Gets or Sets Voicemails
        /// </summary>
        [DataMember(Name="voicemails", EmitDefaultValue=false)]
        public VoicemailsInfo Voicemails { get; set; }

        /// <summary>
        /// Gets or Sets InboundFaxes
        /// </summary>
        [DataMember(Name="inboundFaxes", EmitDefaultValue=false)]
        public InboundFaxesInfo InboundFaxes { get; set; }

        /// <summary>
        /// Gets or Sets OutboundFaxes
        /// </summary>
        [DataMember(Name="outboundFaxes", EmitDefaultValue=false)]
        public OutboundFaxesInfo OutboundFaxes { get; set; }

        /// <summary>
        /// Gets or Sets InboundTexts
        /// </summary>
        [DataMember(Name="inboundTexts", EmitDefaultValue=false)]
        public InboundTextsInfo InboundTexts { get; set; }

        /// <summary>
        /// Gets or Sets MissedCalls
        /// </summary>
        [DataMember(Name="missedCalls", EmitDefaultValue=false)]
        public MissedCallsInfo MissedCalls { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NotificationSettings {\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  EmailRecipients: ").Append(EmailRecipients).Append("\n");
            sb.Append("  EmailAddresses: ").Append(EmailAddresses).Append("\n");
            sb.Append("  IncludeManagers: ").Append(IncludeManagers).Append("\n");
            sb.Append("  SmsEmailAddresses: ").Append(SmsEmailAddresses).Append("\n");
            sb.Append("  AdvancedMode: ").Append(AdvancedMode).Append("\n");
            sb.Append("  Voicemails: ").Append(Voicemails).Append("\n");
            sb.Append("  InboundFaxes: ").Append(InboundFaxes).Append("\n");
            sb.Append("  OutboundFaxes: ").Append(OutboundFaxes).Append("\n");
            sb.Append("  InboundTexts: ").Append(InboundTexts).Append("\n");
            sb.Append("  MissedCalls: ").Append(MissedCalls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NotificationSettings);
        }

        /// <summary>
        /// Returns true if NotificationSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of NotificationSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotificationSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.EmailRecipients == input.EmailRecipients ||
                    this.EmailRecipients != null &&
                    input.EmailRecipients != null &&
                    this.EmailRecipients.SequenceEqual(input.EmailRecipients)
                ) && 
                (
                    this.EmailAddresses == input.EmailAddresses ||
                    this.EmailAddresses != null &&
                    input.EmailAddresses != null &&
                    this.EmailAddresses.SequenceEqual(input.EmailAddresses)
                ) && 
                (
                    this.IncludeManagers == input.IncludeManagers ||
                    (this.IncludeManagers != null &&
                    this.IncludeManagers.Equals(input.IncludeManagers))
                ) && 
                (
                    this.SmsEmailAddresses == input.SmsEmailAddresses ||
                    this.SmsEmailAddresses != null &&
                    input.SmsEmailAddresses != null &&
                    this.SmsEmailAddresses.SequenceEqual(input.SmsEmailAddresses)
                ) && 
                (
                    this.AdvancedMode == input.AdvancedMode ||
                    (this.AdvancedMode != null &&
                    this.AdvancedMode.Equals(input.AdvancedMode))
                ) && 
                (
                    this.Voicemails == input.Voicemails ||
                    (this.Voicemails != null &&
                    this.Voicemails.Equals(input.Voicemails))
                ) && 
                (
                    this.InboundFaxes == input.InboundFaxes ||
                    (this.InboundFaxes != null &&
                    this.InboundFaxes.Equals(input.InboundFaxes))
                ) && 
                (
                    this.OutboundFaxes == input.OutboundFaxes ||
                    (this.OutboundFaxes != null &&
                    this.OutboundFaxes.Equals(input.OutboundFaxes))
                ) && 
                (
                    this.InboundTexts == input.InboundTexts ||
                    (this.InboundTexts != null &&
                    this.InboundTexts.Equals(input.InboundTexts))
                ) && 
                (
                    this.MissedCalls == input.MissedCalls ||
                    (this.MissedCalls != null &&
                    this.MissedCalls.Equals(input.MissedCalls))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.EmailRecipients != null)
                    hashCode = hashCode * 59 + this.EmailRecipients.GetHashCode();
                if (this.EmailAddresses != null)
                    hashCode = hashCode * 59 + this.EmailAddresses.GetHashCode();
                if (this.IncludeManagers != null)
                    hashCode = hashCode * 59 + this.IncludeManagers.GetHashCode();
                if (this.SmsEmailAddresses != null)
                    hashCode = hashCode * 59 + this.SmsEmailAddresses.GetHashCode();
                if (this.AdvancedMode != null)
                    hashCode = hashCode * 59 + this.AdvancedMode.GetHashCode();
                if (this.Voicemails != null)
                    hashCode = hashCode * 59 + this.Voicemails.GetHashCode();
                if (this.InboundFaxes != null)
                    hashCode = hashCode * 59 + this.InboundFaxes.GetHashCode();
                if (this.OutboundFaxes != null)
                    hashCode = hashCode * 59 + this.OutboundFaxes.GetHashCode();
                if (this.InboundTexts != null)
                    hashCode = hashCode * 59 + this.InboundTexts.GetHashCode();
                if (this.MissedCalls != null)
                    hashCode = hashCode * 59 + this.MissedCalls.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
