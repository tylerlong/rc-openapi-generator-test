/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AutomaticRecordingResource
    /// </summary>
    [DataContract]
    public partial class AutomaticRecordingResource :  IEquatable<AutomaticRecordingResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AutomaticRecordingResource" /> class.
        /// </summary>
        /// <param name="enabled">Flag for controlling Automatic Call Recording settings.</param>
        /// <param name="outboundCallTones">Flag for controlling &#39;Play Call Recording Announcement for Outbound Calls&#39; settings.</param>
        /// <param name="outboundCallAnnouncement">Flag for controlling &#39;Play periodic tones for outbound calls&#39; settings.</param>
        /// <param name="allowMute">Flag for controlling &#39;Allow mute in auto call recording&#39; settings.</param>
        /// <param name="extensionCount">Total amount of extension that are used in call recordings.</param>
        /// <param name="retentionPeriod">Retention period of a call recording, the default value is 90 days.</param>
        /// <param name="maxNumberLimit">Max number of automatic call recordings per account, the default value is 100 000.</param>
        public AutomaticRecordingResource(bool enabled = default(bool), bool outboundCallTones = default(bool), bool outboundCallAnnouncement = default(bool), bool allowMute = default(bool), int extensionCount = default(int), int retentionPeriod = default(int), int maxNumberLimit = default(int))
        {
            this.Enabled = enabled;
            this.OutboundCallTones = outboundCallTones;
            this.OutboundCallAnnouncement = outboundCallAnnouncement;
            this.AllowMute = allowMute;
            this.ExtensionCount = extensionCount;
            this.RetentionPeriod = retentionPeriod;
            this.MaxNumberLimit = maxNumberLimit;
        }

        /// <summary>
        /// Flag for controlling Automatic Call Recording settings
        /// </summary>
        /// <value>Flag for controlling Automatic Call Recording settings</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Flag for controlling &#39;Play Call Recording Announcement for Outbound Calls&#39; settings
        /// </summary>
        /// <value>Flag for controlling &#39;Play Call Recording Announcement for Outbound Calls&#39; settings</value>
        [DataMember(Name="outboundCallTones", EmitDefaultValue=false)]
        public bool OutboundCallTones { get; set; }

        /// <summary>
        /// Flag for controlling &#39;Play periodic tones for outbound calls&#39; settings
        /// </summary>
        /// <value>Flag for controlling &#39;Play periodic tones for outbound calls&#39; settings</value>
        [DataMember(Name="outboundCallAnnouncement", EmitDefaultValue=false)]
        public bool OutboundCallAnnouncement { get; set; }

        /// <summary>
        /// Flag for controlling &#39;Allow mute in auto call recording&#39; settings
        /// </summary>
        /// <value>Flag for controlling &#39;Allow mute in auto call recording&#39; settings</value>
        [DataMember(Name="allowMute", EmitDefaultValue=false)]
        public bool AllowMute { get; set; }

        /// <summary>
        /// Total amount of extension that are used in call recordings
        /// </summary>
        /// <value>Total amount of extension that are used in call recordings</value>
        [DataMember(Name="extensionCount", EmitDefaultValue=false)]
        public int ExtensionCount { get; set; }

        /// <summary>
        /// Retention period of a call recording, the default value is 90 days
        /// </summary>
        /// <value>Retention period of a call recording, the default value is 90 days</value>
        [DataMember(Name="retentionPeriod", EmitDefaultValue=false)]
        public int RetentionPeriod { get; set; }

        /// <summary>
        /// Max number of automatic call recordings per account, the default value is 100 000
        /// </summary>
        /// <value>Max number of automatic call recordings per account, the default value is 100 000</value>
        [DataMember(Name="maxNumberLimit", EmitDefaultValue=false)]
        public int MaxNumberLimit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AutomaticRecordingResource {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  OutboundCallTones: ").Append(OutboundCallTones).Append("\n");
            sb.Append("  OutboundCallAnnouncement: ").Append(OutboundCallAnnouncement).Append("\n");
            sb.Append("  AllowMute: ").Append(AllowMute).Append("\n");
            sb.Append("  ExtensionCount: ").Append(ExtensionCount).Append("\n");
            sb.Append("  RetentionPeriod: ").Append(RetentionPeriod).Append("\n");
            sb.Append("  MaxNumberLimit: ").Append(MaxNumberLimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AutomaticRecordingResource);
        }

        /// <summary>
        /// Returns true if AutomaticRecordingResource instances are equal
        /// </summary>
        /// <param name="input">Instance of AutomaticRecordingResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AutomaticRecordingResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.OutboundCallTones == input.OutboundCallTones ||
                    (this.OutboundCallTones != null &&
                    this.OutboundCallTones.Equals(input.OutboundCallTones))
                ) && 
                (
                    this.OutboundCallAnnouncement == input.OutboundCallAnnouncement ||
                    (this.OutboundCallAnnouncement != null &&
                    this.OutboundCallAnnouncement.Equals(input.OutboundCallAnnouncement))
                ) && 
                (
                    this.AllowMute == input.AllowMute ||
                    (this.AllowMute != null &&
                    this.AllowMute.Equals(input.AllowMute))
                ) && 
                (
                    this.ExtensionCount == input.ExtensionCount ||
                    (this.ExtensionCount != null &&
                    this.ExtensionCount.Equals(input.ExtensionCount))
                ) && 
                (
                    this.RetentionPeriod == input.RetentionPeriod ||
                    (this.RetentionPeriod != null &&
                    this.RetentionPeriod.Equals(input.RetentionPeriod))
                ) && 
                (
                    this.MaxNumberLimit == input.MaxNumberLimit ||
                    (this.MaxNumberLimit != null &&
                    this.MaxNumberLimit.Equals(input.MaxNumberLimit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.OutboundCallTones != null)
                    hashCode = hashCode * 59 + this.OutboundCallTones.GetHashCode();
                if (this.OutboundCallAnnouncement != null)
                    hashCode = hashCode * 59 + this.OutboundCallAnnouncement.GetHashCode();
                if (this.AllowMute != null)
                    hashCode = hashCode * 59 + this.AllowMute.GetHashCode();
                if (this.ExtensionCount != null)
                    hashCode = hashCode * 59 + this.ExtensionCount.GetHashCode();
                if (this.RetentionPeriod != null)
                    hashCode = hashCode * 59 + this.RetentionPeriod.GetHashCode();
                if (this.MaxNumberLimit != null)
                    hashCode = hashCode * 59 + this.MaxNumberLimit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
