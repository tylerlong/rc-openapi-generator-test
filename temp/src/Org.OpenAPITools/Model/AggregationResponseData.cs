/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Aggregation result
    /// </summary>
    [DataContract]
    public partial class AggregationResponseData :  IEquatable<AggregationResponseData>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets GroupedBy
        /// </summary>
        [DataMember(Name="groupedBy", EmitDefaultValue=true)]
        public GroupingOptions GroupedBy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AggregationResponseData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AggregationResponseData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AggregationResponseData" /> class.
        /// </summary>
        /// <param name="groupedBy">groupedBy (required).</param>
        /// <param name="records">A list of call aggregations as per the grouping and filtering options specified in the request.</param>
        public AggregationResponseData(GroupingOptions groupedBy = default(GroupingOptions), List<AggregationResponseRecord> records = default(List<AggregationResponseRecord>))
        {
            // to ensure "groupedBy" is required (not null)
            if (groupedBy == null)
            {
                throw new InvalidDataException("groupedBy is a required property for AggregationResponseData and cannot be null");
            }
            else
            {
                this.GroupedBy = groupedBy;
            }

            this.Records = records;
        }


        /// <summary>
        /// A list of call aggregations as per the grouping and filtering options specified in the request
        /// </summary>
        /// <value>A list of call aggregations as per the grouping and filtering options specified in the request</value>
        [DataMember(Name="records", EmitDefaultValue=false)]
        public List<AggregationResponseRecord> Records { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AggregationResponseData {\n");
            sb.Append("  GroupedBy: ").Append(GroupedBy).Append("\n");
            sb.Append("  Records: ").Append(Records).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AggregationResponseData);
        }

        /// <summary>
        /// Returns true if AggregationResponseData instances are equal
        /// </summary>
        /// <param name="input">Instance of AggregationResponseData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AggregationResponseData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GroupedBy == input.GroupedBy ||
                    (this.GroupedBy != null &&
                    this.GroupedBy.Equals(input.GroupedBy))
                ) && 
                (
                    this.Records == input.Records ||
                    this.Records != null &&
                    input.Records != null &&
                    this.Records.SequenceEqual(input.Records)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GroupedBy != null)
                    hashCode = hashCode * 59 + this.GroupedBy.GetHashCode();
                if (this.Records != null)
                    hashCode = hashCode * 59 + this.Records.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
