/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Description of an error occurred during request processing. This data type can be used only in readonly mode, no writing is allowed
    /// </summary>
    [DataContract]
    public partial class ADGError :  IEquatable<ADGError>, IValidatableObject
    {
        /// <summary>
        /// Code that characterizes this error. Code uniqly identifies the source of the error.
        /// </summary>
        /// <value>Code that characterizes this error. Code uniqly identifies the source of the error.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ErrorCodeEnum
        {
            /// <summary>
            /// Enum _000httpStatus503descriptionServicetemporaryunavailable for value: ErrorCode{code='ADG-000', httpStatus=503, description='Service temporary unavailable.'}
            /// </summary>
            [EnumMember(Value = "ErrorCode{code='ADG-000', httpStatus=503, description='Service temporary unavailable.'}")]
            _000httpStatus503descriptionServicetemporaryunavailable = 1,

            /// <summary>
            /// Enum _010httpStatus503descriptionFederationdatatemporaryunavailable for value: ErrorCode{code='ADG-010', httpStatus=503, description='Federation data temporary unavailable.'}
            /// </summary>
            [EnumMember(Value = "ErrorCode{code='ADG-010', httpStatus=503, description='Federation data temporary unavailable.'}")]
            _010httpStatus503descriptionFederationdatatemporaryunavailable = 2,

            /// <summary>
            /// Enum _001httpStatus500descriptionServiceinternalerror for value: ErrorCode{code='ADG-001', httpStatus=500, description='Service internal error.'}
            /// </summary>
            [EnumMember(Value = "ErrorCode{code='ADG-001', httpStatus=500, description='Service internal error.'}")]
            _001httpStatus500descriptionServiceinternalerror = 3,

            /// <summary>
            /// Enum _100httpStatus403descriptionInsufficientpermissions for value: ErrorCode{code='ADG-100', httpStatus=403, description='Insufficient permissions.'}
            /// </summary>
            [EnumMember(Value = "ErrorCode{code='ADG-100', httpStatus=403, description='Insufficient permissions.'}")]
            _100httpStatus403descriptionInsufficientpermissions = 4,

            /// <summary>
            /// Enum _101httpStatus403descriptionUnauthorizedaccess for value: ErrorCode{code='ADG-101', httpStatus=403, description='Unauthorized access.'}
            /// </summary>
            [EnumMember(Value = "ErrorCode{code='ADG-101', httpStatus=403, description='Unauthorized access.'}")]
            _101httpStatus403descriptionUnauthorizedaccess = 5,

            /// <summary>
            /// Enum _102httpStatus405descriptionMethodnotallowed for value: ErrorCode{code='ADG-102', httpStatus=405, description='Method not allowed.'}
            /// </summary>
            [EnumMember(Value = "ErrorCode{code='ADG-102', httpStatus=405, description='Method not allowed.'}")]
            _102httpStatus405descriptionMethodnotallowed = 6,

            /// <summary>
            /// Enum _111httpStatus400descriptionNeedContentTypeheader for value: ErrorCode{code='ADG-111', httpStatus=400, description='Need Content-Type header.'}
            /// </summary>
            [EnumMember(Value = "ErrorCode{code='ADG-111', httpStatus=400, description='Need Content-Type header.'}")]
            _111httpStatus400descriptionNeedContentTypeheader = 7,

            /// <summary>
            /// Enum _112httpStatus400descriptionRequestbodyisinvalid for value: ErrorCode{code='ADG-112', httpStatus=400, description='Request body is invalid.'}
            /// </summary>
            [EnumMember(Value = "ErrorCode{code='ADG-112', httpStatus=400, description='Request body is invalid.'}")]
            _112httpStatus400descriptionRequestbodyisinvalid = 8,

            /// <summary>
            /// Enum _121httpStatus400descriptionParameterparamNameisinvalidadditionalInfo for value: ErrorCode{code='ADG-121', httpStatus=400, description='Parameter [${paramName}]is invalid. ${additionalInfo:-}'}
            /// </summary>
            [EnumMember(Value = "ErrorCode{code='ADG-121', httpStatus=400, description='Parameter [${paramName}]is invalid. ${additionalInfo:-}'}")]
            _121httpStatus400descriptionParameterparamNameisinvalidadditionalInfo = 9,

            /// <summary>
            /// Enum _115httpStatus415descriptionUnsupportedMediaType for value: ErrorCode{code='ADG-115', httpStatus=415, description='Unsupported Media Type.'}
            /// </summary>
            [EnumMember(Value = "ErrorCode{code='ADG-115', httpStatus=415, description='Unsupported Media Type.'}")]
            _115httpStatus415descriptionUnsupportedMediaType = 10,

            /// <summary>
            /// Enum _105httpStatus404descriptionCurrentaccountisnotlinkedtoanyfederation for value: ErrorCode{code='ADG-105', httpStatus=404, description='Current account is not linked to any federation.'}
            /// </summary>
            [EnumMember(Value = "ErrorCode{code='ADG-105', httpStatus=404, description='Current account is not linked to any federation.'}")]
            _105httpStatus404descriptionCurrentaccountisnotlinkedtoanyfederation = 11,

            /// <summary>
            /// Enum _107httpStatus404descriptionAccountnotfound for value: ErrorCode{code='ADG-107', httpStatus=404, description='Account not found.'}
            /// </summary>
            [EnumMember(Value = "ErrorCode{code='ADG-107', httpStatus=404, description='Account not found.'}")]
            _107httpStatus404descriptionAccountnotfound = 12,

            /// <summary>
            /// Enum _122httpStatus404descriptionContactnotfound for value: ErrorCode{code='ADG-122', httpStatus=404, description='Contact not found.'}
            /// </summary>
            [EnumMember(Value = "ErrorCode{code='ADG-122', httpStatus=404, description='Contact not found.'}")]
            _122httpStatus404descriptionContactnotfound = 13,

            /// <summary>
            /// Enum _200httpStatus404descriptionInvalidURI for value: ErrorCode{code='ADG-200', httpStatus=404, description='Invalid URI'}
            /// </summary>
            [EnumMember(Value = "ErrorCode{code='ADG-200', httpStatus=404, description='Invalid URI'}")]
            _200httpStatus404descriptionInvalidURI = 14

        }

        /// <summary>
        /// Code that characterizes this error. Code uniqly identifies the source of the error.
        /// </summary>
        /// <value>Code that characterizes this error. Code uniqly identifies the source of the error.</value>
        [DataMember(Name="errorCode", EmitDefaultValue=false)]
        public ErrorCodeEnum? ErrorCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ADGError" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public ADGError()
        {
        }


        /// <summary>
        /// Message that describes the error. This message can be used in UI.
        /// </summary>
        /// <value>Message that describes the error. This message can be used in UI.</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ADGError {\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ADGError);
        }

        /// <summary>
        /// Returns true if ADGError instances are equal
        /// </summary>
        /// <param name="input">Instance of ADGError to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ADGError input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ErrorCode == input.ErrorCode ||
                    (this.ErrorCode != null &&
                    this.ErrorCode.Equals(input.ErrorCode))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ErrorCode != null)
                    hashCode = hashCode * 59 + this.ErrorCode.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
