/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Message footer information
    /// </summary>
    [DataContract]
    public partial class GlipMessageAttachmentFootnoteInfo :  IEquatable<GlipMessageAttachmentFootnoteInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GlipMessageAttachmentFootnoteInfo" /> class.
        /// </summary>
        /// <param name="text">Text of a footer.</param>
        /// <param name="iconUri">Link to an icon displayed to the left of a footer; sized 32x32px.</param>
        /// <param name="time">Message creation datetime in ISO 8601 format including timezone, for example *2016-03-10T18:07:52.534Z*.</param>
        public GlipMessageAttachmentFootnoteInfo(string text = default(string), string iconUri = default(string), DateTime time = default(DateTime))
        {
            this.Text = text;
            this.IconUri = iconUri;
            this.Time = time;
        }

        /// <summary>
        /// Text of a footer
        /// </summary>
        /// <value>Text of a footer</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Link to an icon displayed to the left of a footer; sized 32x32px
        /// </summary>
        /// <value>Link to an icon displayed to the left of a footer; sized 32x32px</value>
        [DataMember(Name="iconUri", EmitDefaultValue=false)]
        public string IconUri { get; set; }

        /// <summary>
        /// Message creation datetime in ISO 8601 format including timezone, for example *2016-03-10T18:07:52.534Z*
        /// </summary>
        /// <value>Message creation datetime in ISO 8601 format including timezone, for example *2016-03-10T18:07:52.534Z*</value>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public DateTime Time { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlipMessageAttachmentFootnoteInfo {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  IconUri: ").Append(IconUri).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GlipMessageAttachmentFootnoteInfo);
        }

        /// <summary>
        /// Returns true if GlipMessageAttachmentFootnoteInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of GlipMessageAttachmentFootnoteInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlipMessageAttachmentFootnoteInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.IconUri == input.IconUri ||
                    (this.IconUri != null &&
                    this.IconUri.Equals(input.IconUri))
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.IconUri != null)
                    hashCode = hashCode * 59 + this.IconUri.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
