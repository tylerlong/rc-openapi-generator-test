/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// RolesCountryResource
    /// </summary>
    [DataContract]
    public partial class RolesCountryResource :  IEquatable<RolesCountryResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RolesCountryResource" /> class.
        /// </summary>
        /// <param name="uri">uri.</param>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="isoCode">isoCode.</param>
        /// <param name="callingCode">callingCode.</param>
        /// <param name="emergencyCalling">emergencyCalling.</param>
        /// <param name="numberSelling">numberSelling.</param>
        /// <param name="loginAllowed">loginAllowed.</param>
        /// <param name="freeSoftphoneLine">freeSoftphoneLine.</param>
        /// <param name="signupAllowed">signupAllowed.</param>
        public RolesCountryResource(string uri = default(string), string id = default(string), string name = default(string), string isoCode = default(string), string callingCode = default(string), bool emergencyCalling = default(bool), bool numberSelling = default(bool), bool loginAllowed = default(bool), bool freeSoftphoneLine = default(bool), bool signupAllowed = default(bool))
        {
            this.Uri = uri;
            this.Id = id;
            this.Name = name;
            this.IsoCode = isoCode;
            this.CallingCode = callingCode;
            this.EmergencyCalling = emergencyCalling;
            this.NumberSelling = numberSelling;
            this.LoginAllowed = loginAllowed;
            this.FreeSoftphoneLine = freeSoftphoneLine;
            this.SignupAllowed = signupAllowed;
        }

        /// <summary>
        /// Gets or Sets Uri
        /// </summary>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets IsoCode
        /// </summary>
        [DataMember(Name="isoCode", EmitDefaultValue=false)]
        public string IsoCode { get; set; }

        /// <summary>
        /// Gets or Sets CallingCode
        /// </summary>
        [DataMember(Name="callingCode", EmitDefaultValue=false)]
        public string CallingCode { get; set; }

        /// <summary>
        /// Gets or Sets EmergencyCalling
        /// </summary>
        [DataMember(Name="emergencyCalling", EmitDefaultValue=false)]
        public bool EmergencyCalling { get; set; }

        /// <summary>
        /// Gets or Sets NumberSelling
        /// </summary>
        [DataMember(Name="numberSelling", EmitDefaultValue=false)]
        public bool NumberSelling { get; set; }

        /// <summary>
        /// Gets or Sets LoginAllowed
        /// </summary>
        [DataMember(Name="loginAllowed", EmitDefaultValue=false)]
        public bool LoginAllowed { get; set; }

        /// <summary>
        /// Gets or Sets FreeSoftphoneLine
        /// </summary>
        [DataMember(Name="freeSoftphoneLine", EmitDefaultValue=false)]
        public bool FreeSoftphoneLine { get; set; }

        /// <summary>
        /// Gets or Sets SignupAllowed
        /// </summary>
        [DataMember(Name="signupAllowed", EmitDefaultValue=false)]
        public bool SignupAllowed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RolesCountryResource {\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IsoCode: ").Append(IsoCode).Append("\n");
            sb.Append("  CallingCode: ").Append(CallingCode).Append("\n");
            sb.Append("  EmergencyCalling: ").Append(EmergencyCalling).Append("\n");
            sb.Append("  NumberSelling: ").Append(NumberSelling).Append("\n");
            sb.Append("  LoginAllowed: ").Append(LoginAllowed).Append("\n");
            sb.Append("  FreeSoftphoneLine: ").Append(FreeSoftphoneLine).Append("\n");
            sb.Append("  SignupAllowed: ").Append(SignupAllowed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RolesCountryResource);
        }

        /// <summary>
        /// Returns true if RolesCountryResource instances are equal
        /// </summary>
        /// <param name="input">Instance of RolesCountryResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RolesCountryResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.IsoCode == input.IsoCode ||
                    (this.IsoCode != null &&
                    this.IsoCode.Equals(input.IsoCode))
                ) && 
                (
                    this.CallingCode == input.CallingCode ||
                    (this.CallingCode != null &&
                    this.CallingCode.Equals(input.CallingCode))
                ) && 
                (
                    this.EmergencyCalling == input.EmergencyCalling ||
                    (this.EmergencyCalling != null &&
                    this.EmergencyCalling.Equals(input.EmergencyCalling))
                ) && 
                (
                    this.NumberSelling == input.NumberSelling ||
                    (this.NumberSelling != null &&
                    this.NumberSelling.Equals(input.NumberSelling))
                ) && 
                (
                    this.LoginAllowed == input.LoginAllowed ||
                    (this.LoginAllowed != null &&
                    this.LoginAllowed.Equals(input.LoginAllowed))
                ) && 
                (
                    this.FreeSoftphoneLine == input.FreeSoftphoneLine ||
                    (this.FreeSoftphoneLine != null &&
                    this.FreeSoftphoneLine.Equals(input.FreeSoftphoneLine))
                ) && 
                (
                    this.SignupAllowed == input.SignupAllowed ||
                    (this.SignupAllowed != null &&
                    this.SignupAllowed.Equals(input.SignupAllowed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.IsoCode != null)
                    hashCode = hashCode * 59 + this.IsoCode.GetHashCode();
                if (this.CallingCode != null)
                    hashCode = hashCode * 59 + this.CallingCode.GetHashCode();
                if (this.EmergencyCalling != null)
                    hashCode = hashCode * 59 + this.EmergencyCalling.GetHashCode();
                if (this.NumberSelling != null)
                    hashCode = hashCode * 59 + this.NumberSelling.GetHashCode();
                if (this.LoginAllowed != null)
                    hashCode = hashCode * 59 + this.LoginAllowed.GetHashCode();
                if (this.FreeSoftphoneLine != null)
                    hashCode = hashCode * 59 + this.FreeSoftphoneLine.GetHashCode();
                if (this.SignupAllowed != null)
                    hashCode = hashCode * 59 + this.SignupAllowed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
