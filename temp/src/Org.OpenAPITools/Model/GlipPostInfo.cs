/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GlipPostInfo
    /// </summary>
    [DataContract]
    public partial class GlipPostInfo :  IEquatable<GlipPostInfo>, IValidatableObject
    {
        /// <summary>
        /// Type of a post
        /// </summary>
        /// <value>Type of a post</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum TextMessage for value: TextMessage
            /// </summary>
            [EnumMember(Value = "TextMessage")]
            TextMessage = 1,

            /// <summary>
            /// Enum PersonJoined for value: PersonJoined
            /// </summary>
            [EnumMember(Value = "PersonJoined")]
            PersonJoined = 2,

            /// <summary>
            /// Enum PersonsAdded for value: PersonsAdded
            /// </summary>
            [EnumMember(Value = "PersonsAdded")]
            PersonsAdded = 3

        }

        /// <summary>
        /// Type of a post
        /// </summary>
        /// <value>Type of a post</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GlipPostInfo" /> class.
        /// </summary>
        /// <param name="id">Internal identifier of a post.</param>
        /// <param name="groupId">Internal identifier of a group a post belongs to.</param>
        /// <param name="type">Type of a post.</param>
        /// <param name="text">For &#39;TextMessage&#39; post type only. Text of a message.</param>
        /// <param name="creatorId">Internal identifier of a user - author of a post.</param>
        /// <param name="addedPersonIds">For &#39;PersonsAdded&#39; post type only. Identifiers of persons added to a group.</param>
        /// <param name="creationTime">Post creation datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.</param>
        /// <param name="lastModifiedTime">Post last modification datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.</param>
        /// <param name="attachments">List of posted attachments.</param>
        /// <param name="mentions">mentions.</param>
        /// <param name="activity">Label of activity type.</param>
        /// <param name="title">Title of a message. (Can be set for bot&#39;s messages only).</param>
        /// <param name="iconUri">Link to an image used as an icon for this message.</param>
        /// <param name="iconEmoji">Emoji used as an icon for this message.</param>
        public GlipPostInfo(string id = default(string), string groupId = default(string), TypeEnum? type = default(TypeEnum?), string text = default(string), string creatorId = default(string), List<string> addedPersonIds = default(List<string>), DateTime creationTime = default(DateTime), DateTime lastModifiedTime = default(DateTime), List<GlipMessageAttachmentInfo> attachments = default(List<GlipMessageAttachmentInfo>), List<GlipMentionsInfo> mentions = default(List<GlipMentionsInfo>), string activity = default(string), string title = default(string), string iconUri = default(string), string iconEmoji = default(string))
        {
            this.Id = id;
            this.GroupId = groupId;
            this.Type = type;
            this.Text = text;
            this.CreatorId = creatorId;
            this.AddedPersonIds = addedPersonIds;
            this.CreationTime = creationTime;
            this.LastModifiedTime = lastModifiedTime;
            this.Attachments = attachments;
            this.Mentions = mentions;
            this.Activity = activity;
            this.Title = title;
            this.IconUri = iconUri;
            this.IconEmoji = iconEmoji;
        }

        /// <summary>
        /// Internal identifier of a post
        /// </summary>
        /// <value>Internal identifier of a post</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Internal identifier of a group a post belongs to
        /// </summary>
        /// <value>Internal identifier of a group a post belongs to</value>
        [DataMember(Name="groupId", EmitDefaultValue=false)]
        public string GroupId { get; set; }


        /// <summary>
        /// For &#39;TextMessage&#39; post type only. Text of a message
        /// </summary>
        /// <value>For &#39;TextMessage&#39; post type only. Text of a message</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Internal identifier of a user - author of a post
        /// </summary>
        /// <value>Internal identifier of a user - author of a post</value>
        [DataMember(Name="creatorId", EmitDefaultValue=false)]
        public string CreatorId { get; set; }

        /// <summary>
        /// For &#39;PersonsAdded&#39; post type only. Identifiers of persons added to a group
        /// </summary>
        /// <value>For &#39;PersonsAdded&#39; post type only. Identifiers of persons added to a group</value>
        [DataMember(Name="addedPersonIds", EmitDefaultValue=false)]
        public List<string> AddedPersonIds { get; set; }

        /// <summary>
        /// Post creation datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format
        /// </summary>
        /// <value>Post creation datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format</value>
        [DataMember(Name="creationTime", EmitDefaultValue=false)]
        public DateTime CreationTime { get; set; }

        /// <summary>
        /// Post last modification datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format
        /// </summary>
        /// <value>Post last modification datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format</value>
        [DataMember(Name="lastModifiedTime", EmitDefaultValue=false)]
        public DateTime LastModifiedTime { get; set; }

        /// <summary>
        /// List of posted attachments
        /// </summary>
        /// <value>List of posted attachments</value>
        [DataMember(Name="attachments", EmitDefaultValue=false)]
        public List<GlipMessageAttachmentInfo> Attachments { get; set; }

        /// <summary>
        /// Gets or Sets Mentions
        /// </summary>
        [DataMember(Name="mentions", EmitDefaultValue=false)]
        public List<GlipMentionsInfo> Mentions { get; set; }

        /// <summary>
        /// Label of activity type
        /// </summary>
        /// <value>Label of activity type</value>
        [DataMember(Name="activity", EmitDefaultValue=false)]
        public string Activity { get; set; }

        /// <summary>
        /// Title of a message. (Can be set for bot&#39;s messages only)
        /// </summary>
        /// <value>Title of a message. (Can be set for bot&#39;s messages only)</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Link to an image used as an icon for this message
        /// </summary>
        /// <value>Link to an image used as an icon for this message</value>
        [DataMember(Name="iconUri", EmitDefaultValue=false)]
        public string IconUri { get; set; }

        /// <summary>
        /// Emoji used as an icon for this message
        /// </summary>
        /// <value>Emoji used as an icon for this message</value>
        [DataMember(Name="iconEmoji", EmitDefaultValue=false)]
        public string IconEmoji { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlipPostInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  CreatorId: ").Append(CreatorId).Append("\n");
            sb.Append("  AddedPersonIds: ").Append(AddedPersonIds).Append("\n");
            sb.Append("  CreationTime: ").Append(CreationTime).Append("\n");
            sb.Append("  LastModifiedTime: ").Append(LastModifiedTime).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  Mentions: ").Append(Mentions).Append("\n");
            sb.Append("  Activity: ").Append(Activity).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  IconUri: ").Append(IconUri).Append("\n");
            sb.Append("  IconEmoji: ").Append(IconEmoji).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GlipPostInfo);
        }

        /// <summary>
        /// Returns true if GlipPostInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of GlipPostInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlipPostInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.CreatorId == input.CreatorId ||
                    (this.CreatorId != null &&
                    this.CreatorId.Equals(input.CreatorId))
                ) && 
                (
                    this.AddedPersonIds == input.AddedPersonIds ||
                    this.AddedPersonIds != null &&
                    input.AddedPersonIds != null &&
                    this.AddedPersonIds.SequenceEqual(input.AddedPersonIds)
                ) && 
                (
                    this.CreationTime == input.CreationTime ||
                    (this.CreationTime != null &&
                    this.CreationTime.Equals(input.CreationTime))
                ) && 
                (
                    this.LastModifiedTime == input.LastModifiedTime ||
                    (this.LastModifiedTime != null &&
                    this.LastModifiedTime.Equals(input.LastModifiedTime))
                ) && 
                (
                    this.Attachments == input.Attachments ||
                    this.Attachments != null &&
                    input.Attachments != null &&
                    this.Attachments.SequenceEqual(input.Attachments)
                ) && 
                (
                    this.Mentions == input.Mentions ||
                    this.Mentions != null &&
                    input.Mentions != null &&
                    this.Mentions.SequenceEqual(input.Mentions)
                ) && 
                (
                    this.Activity == input.Activity ||
                    (this.Activity != null &&
                    this.Activity.Equals(input.Activity))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.IconUri == input.IconUri ||
                    (this.IconUri != null &&
                    this.IconUri.Equals(input.IconUri))
                ) && 
                (
                    this.IconEmoji == input.IconEmoji ||
                    (this.IconEmoji != null &&
                    this.IconEmoji.Equals(input.IconEmoji))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.GroupId != null)
                    hashCode = hashCode * 59 + this.GroupId.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.CreatorId != null)
                    hashCode = hashCode * 59 + this.CreatorId.GetHashCode();
                if (this.AddedPersonIds != null)
                    hashCode = hashCode * 59 + this.AddedPersonIds.GetHashCode();
                if (this.CreationTime != null)
                    hashCode = hashCode * 59 + this.CreationTime.GetHashCode();
                if (this.LastModifiedTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedTime.GetHashCode();
                if (this.Attachments != null)
                    hashCode = hashCode * 59 + this.Attachments.GetHashCode();
                if (this.Mentions != null)
                    hashCode = hashCode * 59 + this.Mentions.GetHashCode();
                if (this.Activity != null)
                    hashCode = hashCode * 59 + this.Activity.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.IconUri != null)
                    hashCode = hashCode * 59 + this.IconUri.GetHashCode();
                if (this.IconEmoji != null)
                    hashCode = hashCode * 59 + this.IconEmoji.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
