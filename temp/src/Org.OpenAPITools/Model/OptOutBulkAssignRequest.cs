/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Consists of &#x60;from&#x60; field and &#x60;optOuts&#x60; and &#x60;optIns&#x60; lists. Both &#x60;optOuts&#x60; and &#x60;optIns&#x60; can be empty but not simultaneously - at least one of the lists must be entered.\&quot;
    /// </summary>
    [DataContract]
    public partial class OptOutBulkAssignRequest :  IEquatable<OptOutBulkAssignRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptOutBulkAssignRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OptOutBulkAssignRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OptOutBulkAssignRequest" /> class.
        /// </summary>
        /// <param name="from">The phone number of a sender which the recipients should be opted out from or opted in to (required).</param>
        /// <param name="optOuts">The list of phone numbers to be opted out.</param>
        /// <param name="optIns">The list of phone numbers to be opted in.</param>
        public OptOutBulkAssignRequest(string from = default(string), List<string> optOuts = default(List<string>), List<string> optIns = default(List<string>))
        {
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new InvalidDataException("from is a required property for OptOutBulkAssignRequest and cannot be null");
            }
            else
            {
                this.From = from;
            }

            this.OptOuts = optOuts;
            this.OptIns = optIns;
        }

        /// <summary>
        /// The phone number of a sender which the recipients should be opted out from or opted in to
        /// </summary>
        /// <value>The phone number of a sender which the recipients should be opted out from or opted in to</value>
        [DataMember(Name="from", EmitDefaultValue=true)]
        public string From { get; set; }

        /// <summary>
        /// The list of phone numbers to be opted out
        /// </summary>
        /// <value>The list of phone numbers to be opted out</value>
        [DataMember(Name="optOuts", EmitDefaultValue=false)]
        public List<string> OptOuts { get; set; }

        /// <summary>
        /// The list of phone numbers to be opted in
        /// </summary>
        /// <value>The list of phone numbers to be opted in</value>
        [DataMember(Name="optIns", EmitDefaultValue=false)]
        public List<string> OptIns { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OptOutBulkAssignRequest {\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  OptOuts: ").Append(OptOuts).Append("\n");
            sb.Append("  OptIns: ").Append(OptIns).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptOutBulkAssignRequest);
        }

        /// <summary>
        /// Returns true if OptOutBulkAssignRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of OptOutBulkAssignRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptOutBulkAssignRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.OptOuts == input.OptOuts ||
                    this.OptOuts != null &&
                    input.OptOuts != null &&
                    this.OptOuts.SequenceEqual(input.OptOuts)
                ) && 
                (
                    this.OptIns == input.OptIns ||
                    this.OptIns != null &&
                    input.OptIns != null &&
                    this.OptIns.SequenceEqual(input.OptIns)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.OptOuts != null)
                    hashCode = hashCode * 59 + this.OptOuts.GetHashCode();
                if (this.OptIns != null)
                    hashCode = hashCode * 59 + this.OptIns.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
