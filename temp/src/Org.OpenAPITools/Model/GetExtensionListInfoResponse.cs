/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GetExtensionListInfoResponse
    /// </summary>
    [DataContract]
    public partial class GetExtensionListInfoResponse :  IEquatable<GetExtensionListInfoResponse>, IValidatableObject
    {
        /// <summary>
        /// Extension current state. If &#39;Unassigned&#39; is specified, then extensions without ‘extensionNumber’ are returned. If not specified, then all extensions are returned
        /// </summary>
        /// <value>Extension current state. If &#39;Unassigned&#39; is specified, then extensions without ‘extensionNumber’ are returned. If not specified, then all extensions are returned</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Enabled for value: Enabled
            /// </summary>
            [EnumMember(Value = "Enabled")]
            Enabled = 1,

            /// <summary>
            /// Enum Disabled for value: Disabled
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled = 2,

            /// <summary>
            /// Enum Frozen for value: Frozen
            /// </summary>
            [EnumMember(Value = "Frozen")]
            Frozen = 3,

            /// <summary>
            /// Enum NotActivated for value: NotActivated
            /// </summary>
            [EnumMember(Value = "NotActivated")]
            NotActivated = 4,

            /// <summary>
            /// Enum Unassigned for value: Unassigned
            /// </summary>
            [EnumMember(Value = "Unassigned")]
            Unassigned = 5

        }

        /// <summary>
        /// Extension current state. If &#39;Unassigned&#39; is specified, then extensions without ‘extensionNumber’ are returned. If not specified, then all extensions are returned
        /// </summary>
        /// <value>Extension current state. If &#39;Unassigned&#39; is specified, then extensions without ‘extensionNumber’ are returned. If not specified, then all extensions are returned</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Extension type. Please note that legacy &#39;Department&#39; extension type corresponds to &#39;Call Queue&#39; extensions in modern RingCentral product terminology
        /// </summary>
        /// <value>Extension type. Please note that legacy &#39;Department&#39; extension type corresponds to &#39;Call Queue&#39; extensions in modern RingCentral product terminology</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum User for value: User
            /// </summary>
            [EnumMember(Value = "User")]
            User = 1,

            /// <summary>
            /// Enum FaxUser for value: FaxUser
            /// </summary>
            [EnumMember(Value = "FaxUser")]
            FaxUser = 2,

            /// <summary>
            /// Enum FlexibleUser for value: FlexibleUser
            /// </summary>
            [EnumMember(Value = "FlexibleUser")]
            FlexibleUser = 3,

            /// <summary>
            /// Enum VirtualUser for value: VirtualUser
            /// </summary>
            [EnumMember(Value = "VirtualUser")]
            VirtualUser = 4,

            /// <summary>
            /// Enum DigitalUser for value: DigitalUser
            /// </summary>
            [EnumMember(Value = "DigitalUser")]
            DigitalUser = 5,

            /// <summary>
            /// Enum Department for value: Department
            /// </summary>
            [EnumMember(Value = "Department")]
            Department = 6,

            /// <summary>
            /// Enum Announcement for value: Announcement
            /// </summary>
            [EnumMember(Value = "Announcement")]
            Announcement = 7,

            /// <summary>
            /// Enum Voicemail for value: Voicemail
            /// </summary>
            [EnumMember(Value = "Voicemail")]
            Voicemail = 8,

            /// <summary>
            /// Enum SharedLinesGroup for value: SharedLinesGroup
            /// </summary>
            [EnumMember(Value = "SharedLinesGroup")]
            SharedLinesGroup = 9,

            /// <summary>
            /// Enum PagingOnly for value: PagingOnly
            /// </summary>
            [EnumMember(Value = "PagingOnly")]
            PagingOnly = 10,

            /// <summary>
            /// Enum IvrMenu for value: IvrMenu
            /// </summary>
            [EnumMember(Value = "IvrMenu")]
            IvrMenu = 11,

            /// <summary>
            /// Enum ApplicationExtension for value: ApplicationExtension
            /// </summary>
            [EnumMember(Value = "ApplicationExtension")]
            ApplicationExtension = 12,

            /// <summary>
            /// Enum ParkLocation for value: ParkLocation
            /// </summary>
            [EnumMember(Value = "ParkLocation")]
            ParkLocation = 13,

            /// <summary>
            /// Enum Bot for value: Bot
            /// </summary>
            [EnumMember(Value = "Bot")]
            Bot = 14,

            /// <summary>
            /// Enum Room for value: Room
            /// </summary>
            [EnumMember(Value = "Room")]
            Room = 15,

            /// <summary>
            /// Enum Limited for value: Limited
            /// </summary>
            [EnumMember(Value = "Limited")]
            Limited = 16,

            /// <summary>
            /// Enum Site for value: Site
            /// </summary>
            [EnumMember(Value = "Site")]
            Site = 17,

            /// <summary>
            /// Enum ProxyAdmin for value: ProxyAdmin
            /// </summary>
            [EnumMember(Value = "ProxyAdmin")]
            ProxyAdmin = 18,

            /// <summary>
            /// Enum DelegatedLinesGroup for value: DelegatedLinesGroup
            /// </summary>
            [EnumMember(Value = "DelegatedLinesGroup")]
            DelegatedLinesGroup = 19,

            /// <summary>
            /// Enum GroupCallPickup for value: GroupCallPickup
            /// </summary>
            [EnumMember(Value = "GroupCallPickup")]
            GroupCallPickup = 20

        }

        /// <summary>
        /// Extension type. Please note that legacy &#39;Department&#39; extension type corresponds to &#39;Call Queue&#39; extensions in modern RingCentral product terminology
        /// </summary>
        /// <value>Extension type. Please note that legacy &#39;Department&#39; extension type corresponds to &#39;Call Queue&#39; extensions in modern RingCentral product terminology</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Extension sub-type, if applicable. For any unsupported sub-types the &#39;Unknown&#39; value will be returned
        /// </summary>
        /// <value>Extension sub-type, if applicable. For any unsupported sub-types the &#39;Unknown&#39; value will be returned</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SubTypeEnum
        {
            /// <summary>
            /// Enum VideoPro for value: VideoPro
            /// </summary>
            [EnumMember(Value = "VideoPro")]
            VideoPro = 1,

            /// <summary>
            /// Enum VideoProPlus for value: VideoProPlus
            /// </summary>
            [EnumMember(Value = "VideoProPlus")]
            VideoProPlus = 2,

            /// <summary>
            /// Enum DigitalSignage for value: DigitalSignage
            /// </summary>
            [EnumMember(Value = "DigitalSignage")]
            DigitalSignage = 3,

            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 4

        }

        /// <summary>
        /// Extension sub-type, if applicable. For any unsupported sub-types the &#39;Unknown&#39; value will be returned
        /// </summary>
        /// <value>Extension sub-type, if applicable. For any unsupported sub-types the &#39;Unknown&#39; value will be returned</value>
        [DataMember(Name="subType", EmitDefaultValue=false)]
        public SubTypeEnum? SubType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetExtensionListInfoResponse" /> class.
        /// </summary>
        /// <param name="id">Internal identifier of an extension.</param>
        /// <param name="uri">Canonical URI of an extension.</param>
        /// <param name="contact">contact.</param>
        /// <param name="extensionNumber">Number of an extension.</param>
        /// <param name="name">Extension name. For user extension types the value is a combination of the specified first name and last name.</param>
        /// <param name="permissions">permissions.</param>
        /// <param name="profileImage">profileImage.</param>
        /// <param name="status">Extension current state. If &#39;Unassigned&#39; is specified, then extensions without ‘extensionNumber’ are returned. If not specified, then all extensions are returned.</param>
        /// <param name="type">Extension type. Please note that legacy &#39;Department&#39; extension type corresponds to &#39;Call Queue&#39; extensions in modern RingCentral product terminology.</param>
        /// <param name="subType">Extension sub-type, if applicable. For any unsupported sub-types the &#39;Unknown&#39; value will be returned.</param>
        /// <param name="callQueueInfo">callQueueInfo.</param>
        /// <param name="hidden">Hides extension from showing in company directory. Supported for extensions of User type only.</param>
        /// <param name="site">site.</param>
        public GetExtensionListInfoResponse(long id = default(long), string uri = default(string), ContactInfo contact = default(ContactInfo), string extensionNumber = default(string), string name = default(string), ExtensionPermissions permissions = default(ExtensionPermissions), ProfileImageInfo profileImage = default(ProfileImageInfo), StatusEnum? status = default(StatusEnum?), TypeEnum? type = default(TypeEnum?), SubTypeEnum? subType = default(SubTypeEnum?), CallQueueExtensionInfo callQueueInfo = default(CallQueueExtensionInfo), bool hidden = default(bool), AutomaticLocationUpdatesSiteInfo site = default(AutomaticLocationUpdatesSiteInfo))
        {
            this.Id = id;
            this.Uri = uri;
            this.Contact = contact;
            this.ExtensionNumber = extensionNumber;
            this.Name = name;
            this.Permissions = permissions;
            this.ProfileImage = profileImage;
            this.Status = status;
            this.Type = type;
            this.SubType = subType;
            this.CallQueueInfo = callQueueInfo;
            this.Hidden = hidden;
            this.Site = site;
        }

        /// <summary>
        /// Internal identifier of an extension
        /// </summary>
        /// <value>Internal identifier of an extension</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long Id { get; set; }

        /// <summary>
        /// Canonical URI of an extension
        /// </summary>
        /// <value>Canonical URI of an extension</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Gets or Sets Contact
        /// </summary>
        [DataMember(Name="contact", EmitDefaultValue=false)]
        public ContactInfo Contact { get; set; }

        /// <summary>
        /// Number of an extension
        /// </summary>
        /// <value>Number of an extension</value>
        [DataMember(Name="extensionNumber", EmitDefaultValue=false)]
        public string ExtensionNumber { get; set; }

        /// <summary>
        /// Extension name. For user extension types the value is a combination of the specified first name and last name
        /// </summary>
        /// <value>Extension name. For user extension types the value is a combination of the specified first name and last name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [DataMember(Name="permissions", EmitDefaultValue=false)]
        public ExtensionPermissions Permissions { get; set; }

        /// <summary>
        /// Gets or Sets ProfileImage
        /// </summary>
        [DataMember(Name="profileImage", EmitDefaultValue=false)]
        public ProfileImageInfo ProfileImage { get; set; }




        /// <summary>
        /// Gets or Sets CallQueueInfo
        /// </summary>
        [DataMember(Name="callQueueInfo", EmitDefaultValue=false)]
        public CallQueueExtensionInfo CallQueueInfo { get; set; }

        /// <summary>
        /// Hides extension from showing in company directory. Supported for extensions of User type only
        /// </summary>
        /// <value>Hides extension from showing in company directory. Supported for extensions of User type only</value>
        [DataMember(Name="hidden", EmitDefaultValue=false)]
        public bool Hidden { get; set; }

        /// <summary>
        /// Gets or Sets Site
        /// </summary>
        [DataMember(Name="site", EmitDefaultValue=false)]
        public AutomaticLocationUpdatesSiteInfo Site { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetExtensionListInfoResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  ExtensionNumber: ").Append(ExtensionNumber).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  ProfileImage: ").Append(ProfileImage).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SubType: ").Append(SubType).Append("\n");
            sb.Append("  CallQueueInfo: ").Append(CallQueueInfo).Append("\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            sb.Append("  Site: ").Append(Site).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetExtensionListInfoResponse);
        }

        /// <summary>
        /// Returns true if GetExtensionListInfoResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetExtensionListInfoResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetExtensionListInfoResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.Contact == input.Contact ||
                    (this.Contact != null &&
                    this.Contact.Equals(input.Contact))
                ) && 
                (
                    this.ExtensionNumber == input.ExtensionNumber ||
                    (this.ExtensionNumber != null &&
                    this.ExtensionNumber.Equals(input.ExtensionNumber))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Permissions == input.Permissions ||
                    (this.Permissions != null &&
                    this.Permissions.Equals(input.Permissions))
                ) && 
                (
                    this.ProfileImage == input.ProfileImage ||
                    (this.ProfileImage != null &&
                    this.ProfileImage.Equals(input.ProfileImage))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.SubType == input.SubType ||
                    (this.SubType != null &&
                    this.SubType.Equals(input.SubType))
                ) && 
                (
                    this.CallQueueInfo == input.CallQueueInfo ||
                    (this.CallQueueInfo != null &&
                    this.CallQueueInfo.Equals(input.CallQueueInfo))
                ) && 
                (
                    this.Hidden == input.Hidden ||
                    (this.Hidden != null &&
                    this.Hidden.Equals(input.Hidden))
                ) && 
                (
                    this.Site == input.Site ||
                    (this.Site != null &&
                    this.Site.Equals(input.Site))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.Contact != null)
                    hashCode = hashCode * 59 + this.Contact.GetHashCode();
                if (this.ExtensionNumber != null)
                    hashCode = hashCode * 59 + this.ExtensionNumber.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Permissions != null)
                    hashCode = hashCode * 59 + this.Permissions.GetHashCode();
                if (this.ProfileImage != null)
                    hashCode = hashCode * 59 + this.ProfileImage.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.SubType != null)
                    hashCode = hashCode * 59 + this.SubType.GetHashCode();
                if (this.CallQueueInfo != null)
                    hashCode = hashCode * 59 + this.CallQueueInfo.GetHashCode();
                if (this.Hidden != null)
                    hashCode = hashCode * 59 + this.Hidden.GetHashCode();
                if (this.Site != null)
                    hashCode = hashCode * 59 + this.Site.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
