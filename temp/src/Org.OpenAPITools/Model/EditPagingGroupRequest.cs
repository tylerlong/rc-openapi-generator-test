/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// EditPagingGroupRequest
    /// </summary>
    [DataContract]
    public partial class EditPagingGroupRequest :  IEquatable<EditPagingGroupRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EditPagingGroupRequest" /> class.
        /// </summary>
        /// <param name="addedUserIds">List of users that will be allowed to page a group specified.</param>
        /// <param name="removedUserIds">List of users that will be disallowed to page a group specified.</param>
        /// <param name="addedDeviceIds">List of account devices that will be assigned to a paging group specified.</param>
        /// <param name="removedDeviceIds">List of account devices that will be unassigned from a paging group specified.</param>
        public EditPagingGroupRequest(List<string> addedUserIds = default(List<string>), List<string> removedUserIds = default(List<string>), List<string> addedDeviceIds = default(List<string>), List<string> removedDeviceIds = default(List<string>))
        {
            this.AddedUserIds = addedUserIds;
            this.RemovedUserIds = removedUserIds;
            this.AddedDeviceIds = addedDeviceIds;
            this.RemovedDeviceIds = removedDeviceIds;
        }

        /// <summary>
        /// List of users that will be allowed to page a group specified
        /// </summary>
        /// <value>List of users that will be allowed to page a group specified</value>
        [DataMember(Name="addedUserIds", EmitDefaultValue=false)]
        public List<string> AddedUserIds { get; set; }

        /// <summary>
        /// List of users that will be disallowed to page a group specified
        /// </summary>
        /// <value>List of users that will be disallowed to page a group specified</value>
        [DataMember(Name="removedUserIds", EmitDefaultValue=false)]
        public List<string> RemovedUserIds { get; set; }

        /// <summary>
        /// List of account devices that will be assigned to a paging group specified
        /// </summary>
        /// <value>List of account devices that will be assigned to a paging group specified</value>
        [DataMember(Name="addedDeviceIds", EmitDefaultValue=false)]
        public List<string> AddedDeviceIds { get; set; }

        /// <summary>
        /// List of account devices that will be unassigned from a paging group specified
        /// </summary>
        /// <value>List of account devices that will be unassigned from a paging group specified</value>
        [DataMember(Name="removedDeviceIds", EmitDefaultValue=false)]
        public List<string> RemovedDeviceIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EditPagingGroupRequest {\n");
            sb.Append("  AddedUserIds: ").Append(AddedUserIds).Append("\n");
            sb.Append("  RemovedUserIds: ").Append(RemovedUserIds).Append("\n");
            sb.Append("  AddedDeviceIds: ").Append(AddedDeviceIds).Append("\n");
            sb.Append("  RemovedDeviceIds: ").Append(RemovedDeviceIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EditPagingGroupRequest);
        }

        /// <summary>
        /// Returns true if EditPagingGroupRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of EditPagingGroupRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EditPagingGroupRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddedUserIds == input.AddedUserIds ||
                    this.AddedUserIds != null &&
                    input.AddedUserIds != null &&
                    this.AddedUserIds.SequenceEqual(input.AddedUserIds)
                ) && 
                (
                    this.RemovedUserIds == input.RemovedUserIds ||
                    this.RemovedUserIds != null &&
                    input.RemovedUserIds != null &&
                    this.RemovedUserIds.SequenceEqual(input.RemovedUserIds)
                ) && 
                (
                    this.AddedDeviceIds == input.AddedDeviceIds ||
                    this.AddedDeviceIds != null &&
                    input.AddedDeviceIds != null &&
                    this.AddedDeviceIds.SequenceEqual(input.AddedDeviceIds)
                ) && 
                (
                    this.RemovedDeviceIds == input.RemovedDeviceIds ||
                    this.RemovedDeviceIds != null &&
                    input.RemovedDeviceIds != null &&
                    this.RemovedDeviceIds.SequenceEqual(input.RemovedDeviceIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddedUserIds != null)
                    hashCode = hashCode * 59 + this.AddedUserIds.GetHashCode();
                if (this.RemovedUserIds != null)
                    hashCode = hashCode * 59 + this.RemovedUserIds.GetHashCode();
                if (this.AddedDeviceIds != null)
                    hashCode = hashCode * 59 + this.AddedDeviceIds.GetHashCode();
                if (this.RemovedDeviceIds != null)
                    hashCode = hashCode * 59 + this.RemovedDeviceIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
