/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AssignMultipleDevicesAutomaticLocationUpdates
    /// </summary>
    [DataContract]
    public partial class AssignMultipleDevicesAutomaticLocationUpdates :  IEquatable<AssignMultipleDevicesAutomaticLocationUpdates>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssignMultipleDevicesAutomaticLocationUpdates" /> class.
        /// </summary>
        /// <param name="enabledDeviceIds">enabledDeviceIds.</param>
        /// <param name="disabledDeviceIds">disabledDeviceIds.</param>
        public AssignMultipleDevicesAutomaticLocationUpdates(List<string> enabledDeviceIds = default(List<string>), List<string> disabledDeviceIds = default(List<string>))
        {
            this.EnabledDeviceIds = enabledDeviceIds;
            this.DisabledDeviceIds = disabledDeviceIds;
        }

        /// <summary>
        /// Gets or Sets EnabledDeviceIds
        /// </summary>
        [DataMember(Name="enabledDeviceIds", EmitDefaultValue=false)]
        public List<string> EnabledDeviceIds { get; set; }

        /// <summary>
        /// Gets or Sets DisabledDeviceIds
        /// </summary>
        [DataMember(Name="disabledDeviceIds", EmitDefaultValue=false)]
        public List<string> DisabledDeviceIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssignMultipleDevicesAutomaticLocationUpdates {\n");
            sb.Append("  EnabledDeviceIds: ").Append(EnabledDeviceIds).Append("\n");
            sb.Append("  DisabledDeviceIds: ").Append(DisabledDeviceIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssignMultipleDevicesAutomaticLocationUpdates);
        }

        /// <summary>
        /// Returns true if AssignMultipleDevicesAutomaticLocationUpdates instances are equal
        /// </summary>
        /// <param name="input">Instance of AssignMultipleDevicesAutomaticLocationUpdates to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssignMultipleDevicesAutomaticLocationUpdates input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EnabledDeviceIds == input.EnabledDeviceIds ||
                    this.EnabledDeviceIds != null &&
                    input.EnabledDeviceIds != null &&
                    this.EnabledDeviceIds.SequenceEqual(input.EnabledDeviceIds)
                ) && 
                (
                    this.DisabledDeviceIds == input.DisabledDeviceIds ||
                    this.DisabledDeviceIds != null &&
                    input.DisabledDeviceIds != null &&
                    this.DisabledDeviceIds.SequenceEqual(input.DisabledDeviceIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EnabledDeviceIds != null)
                    hashCode = hashCode * 59 + this.EnabledDeviceIds.GetHashCode();
                if (this.DisabledDeviceIds != null)
                    hashCode = hashCode * 59 + this.DisabledDeviceIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
