/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GlipTaskRecurrenceInfo
    /// </summary>
    [DataContract]
    public partial class GlipTaskRecurrenceInfo :  IEquatable<GlipTaskRecurrenceInfo>, IValidatableObject
    {
        /// <summary>
        /// Task recurrence settings. For non-periodic tasks the value is &#39;None&#39;
        /// </summary>
        /// <value>Task recurrence settings. For non-periodic tasks the value is &#39;None&#39;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScheduleEnum
        {
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,

            /// <summary>
            /// Enum Daily for value: Daily
            /// </summary>
            [EnumMember(Value = "Daily")]
            Daily = 2,

            /// <summary>
            /// Enum Weekdays for value: Weekdays
            /// </summary>
            [EnumMember(Value = "Weekdays")]
            Weekdays = 3,

            /// <summary>
            /// Enum Weekly for value: Weekly
            /// </summary>
            [EnumMember(Value = "Weekly")]
            Weekly = 4,

            /// <summary>
            /// Enum Monthly for value: Monthly
            /// </summary>
            [EnumMember(Value = "Monthly")]
            Monthly = 5,

            /// <summary>
            /// Enum Yearly for value: Yearly
            /// </summary>
            [EnumMember(Value = "Yearly")]
            Yearly = 6

        }

        /// <summary>
        /// Task recurrence settings. For non-periodic tasks the value is &#39;None&#39;
        /// </summary>
        /// <value>Task recurrence settings. For non-periodic tasks the value is &#39;None&#39;</value>
        [DataMember(Name="schedule", EmitDefaultValue=false)]
        public ScheduleEnum? Schedule { get; set; }
        /// <summary>
        /// Task ending condition
        /// </summary>
        /// <value>Task ending condition</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EndingConditionEnum
        {
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,

            /// <summary>
            /// Enum Count for value: Count
            /// </summary>
            [EnumMember(Value = "Count")]
            Count = 2,

            /// <summary>
            /// Enum Date for value: Date
            /// </summary>
            [EnumMember(Value = "Date")]
            Date = 3

        }

        /// <summary>
        /// Task ending condition
        /// </summary>
        /// <value>Task ending condition</value>
        [DataMember(Name="endingCondition", EmitDefaultValue=false)]
        public EndingConditionEnum? EndingCondition { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GlipTaskRecurrenceInfo" /> class.
        /// </summary>
        /// <param name="schedule">Task recurrence settings. For non-periodic tasks the value is &#39;None&#39;.</param>
        /// <param name="endingCondition">Task ending condition.</param>
        /// <param name="endingAfter">Count of iterations of periodic tasks.</param>
        /// <param name="endingOn">End date of periodic task.</param>
        public GlipTaskRecurrenceInfo(ScheduleEnum? schedule = default(ScheduleEnum?), EndingConditionEnum? endingCondition = default(EndingConditionEnum?), int endingAfter = default(int), DateTime endingOn = default(DateTime))
        {
            this.Schedule = schedule;
            this.EndingCondition = endingCondition;
            this.EndingAfter = endingAfter;
            this.EndingOn = endingOn;
        }



        /// <summary>
        /// Count of iterations of periodic tasks
        /// </summary>
        /// <value>Count of iterations of periodic tasks</value>
        [DataMember(Name="endingAfter", EmitDefaultValue=false)]
        public int EndingAfter { get; set; }

        /// <summary>
        /// End date of periodic task
        /// </summary>
        /// <value>End date of periodic task</value>
        [DataMember(Name="endingOn", EmitDefaultValue=false)]
        public DateTime EndingOn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlipTaskRecurrenceInfo {\n");
            sb.Append("  Schedule: ").Append(Schedule).Append("\n");
            sb.Append("  EndingCondition: ").Append(EndingCondition).Append("\n");
            sb.Append("  EndingAfter: ").Append(EndingAfter).Append("\n");
            sb.Append("  EndingOn: ").Append(EndingOn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GlipTaskRecurrenceInfo);
        }

        /// <summary>
        /// Returns true if GlipTaskRecurrenceInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of GlipTaskRecurrenceInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlipTaskRecurrenceInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Schedule == input.Schedule ||
                    (this.Schedule != null &&
                    this.Schedule.Equals(input.Schedule))
                ) && 
                (
                    this.EndingCondition == input.EndingCondition ||
                    (this.EndingCondition != null &&
                    this.EndingCondition.Equals(input.EndingCondition))
                ) && 
                (
                    this.EndingAfter == input.EndingAfter ||
                    (this.EndingAfter != null &&
                    this.EndingAfter.Equals(input.EndingAfter))
                ) && 
                (
                    this.EndingOn == input.EndingOn ||
                    (this.EndingOn != null &&
                    this.EndingOn.Equals(input.EndingOn))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Schedule != null)
                    hashCode = hashCode * 59 + this.Schedule.GetHashCode();
                if (this.EndingCondition != null)
                    hashCode = hashCode * 59 + this.EndingCondition.GetHashCode();
                if (this.EndingAfter != null)
                    hashCode = hashCode * 59 + this.EndingAfter.GetHashCode();
                if (this.EndingOn != null)
                    hashCode = hashCode * 59 + this.EndingOn.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // EndingAfter (int) maximum
            if(this.EndingAfter > (int)10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EndingAfter, must be a value less than or equal to 10.", new [] { "EndingAfter" });
            }

            // EndingAfter (int) minimum
            if(this.EndingAfter < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EndingAfter, must be a value greater than or equal to 1.", new [] { "EndingAfter" });
            }

            yield break;
        }
    }

}
