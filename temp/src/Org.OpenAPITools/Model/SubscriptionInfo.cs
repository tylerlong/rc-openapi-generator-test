/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SubscriptionInfo
    /// </summary>
    [DataContract]
    public partial class SubscriptionInfo :  IEquatable<SubscriptionInfo>, IValidatableObject
    {
        /// <summary>
        /// Subscription status
        /// </summary>
        /// <value>Subscription status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Active for value: Active
            /// </summary>
            [EnumMember(Value = "Active")]
            Active = 1,

            /// <summary>
            /// Enum Suspended for value: Suspended
            /// </summary>
            [EnumMember(Value = "Suspended")]
            Suspended = 2,

            /// <summary>
            /// Enum Blacklisted for value: Blacklisted
            /// </summary>
            [EnumMember(Value = "Blacklisted")]
            Blacklisted = 3

        }

        /// <summary>
        /// Subscription status
        /// </summary>
        /// <value>Subscription status</value>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubscriptionInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionInfo" /> class.
        /// </summary>
        /// <param name="eventFilters">The list of event filter names corresponding to events the user is subscribed to (required).</param>
        /// <param name="expiresIn">Subscription lifetime in seconds.</param>
        /// <param name="deliveryMode">deliveryMode (required).</param>
        /// <param name="blacklistedData">blacklistedData.</param>
        public SubscriptionInfo(List<string> eventFilters = default(List<string>), int expiresIn = default(int), NotificationDeliveryMode deliveryMode = default(NotificationDeliveryMode), SubscriptionInfoBlacklistedData blacklistedData = default(SubscriptionInfoBlacklistedData))
        {
            // to ensure "eventFilters" is required (not null)
            if (eventFilters == null)
            {
                throw new InvalidDataException("eventFilters is a required property for SubscriptionInfo and cannot be null");
            }
            else
            {
                this.EventFilters = eventFilters;
            }

            // to ensure "deliveryMode" is required (not null)
            if (deliveryMode == null)
            {
                throw new InvalidDataException("deliveryMode is a required property for SubscriptionInfo and cannot be null");
            }
            else
            {
                this.DeliveryMode = deliveryMode;
            }

            this.ExpiresIn = expiresIn;
            this.BlacklistedData = blacklistedData;
        }

        /// <summary>
        /// Canonical URI of a subscription resource
        /// </summary>
        /// <value>Canonical URI of a subscription resource</value>
        [DataMember(Name="uri", EmitDefaultValue=true)]
        public string Uri { get; private set; }

        /// <summary>
        /// Internal identifier of a subscription
        /// </summary>
        /// <value>Internal identifier of a subscription</value>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; private set; }

        /// <summary>
        /// The list of event filter names corresponding to events the user is subscribed to
        /// </summary>
        /// <value>The list of event filter names corresponding to events the user is subscribed to</value>
        [DataMember(Name="eventFilters", EmitDefaultValue=true)]
        public List<string> EventFilters { get; set; }

        /// <summary>
        /// The list of event filter names corresponding to events the user is not subscribed to due to certain limitations
        /// </summary>
        /// <value>The list of event filter names corresponding to events the user is not subscribed to due to certain limitations</value>
        [DataMember(Name="disabledFilters", EmitDefaultValue=false)]
        public List<DisabledFilterInfo> DisabledFilters { get; private set; }

        /// <summary>
        /// Subscription expiration datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, for example *2016-03-10T18:07:52.534Z*
        /// </summary>
        /// <value>Subscription expiration datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, for example *2016-03-10T18:07:52.534Z*</value>
        [DataMember(Name="expirationTime", EmitDefaultValue=true)]
        public DateTime ExpirationTime { get; private set; }

        /// <summary>
        /// Subscription lifetime in seconds
        /// </summary>
        /// <value>Subscription lifetime in seconds</value>
        [DataMember(Name="expiresIn", EmitDefaultValue=false)]
        public int ExpiresIn { get; set; }


        /// <summary>
        /// Subscription creation datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, for example *2016-03-10T18:07:52.534*
        /// </summary>
        /// <value>Subscription creation datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, for example *2016-03-10T18:07:52.534*</value>
        [DataMember(Name="creationTime", EmitDefaultValue=true)]
        public DateTime CreationTime { get; private set; }

        /// <summary>
        /// Gets or Sets DeliveryMode
        /// </summary>
        [DataMember(Name="deliveryMode", EmitDefaultValue=true)]
        public NotificationDeliveryMode DeliveryMode { get; set; }

        /// <summary>
        /// Gets or Sets BlacklistedData
        /// </summary>
        [DataMember(Name="blacklistedData", EmitDefaultValue=false)]
        public SubscriptionInfoBlacklistedData BlacklistedData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionInfo {\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EventFilters: ").Append(EventFilters).Append("\n");
            sb.Append("  DisabledFilters: ").Append(DisabledFilters).Append("\n");
            sb.Append("  ExpirationTime: ").Append(ExpirationTime).Append("\n");
            sb.Append("  ExpiresIn: ").Append(ExpiresIn).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CreationTime: ").Append(CreationTime).Append("\n");
            sb.Append("  DeliveryMode: ").Append(DeliveryMode).Append("\n");
            sb.Append("  BlacklistedData: ").Append(BlacklistedData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionInfo);
        }

        /// <summary>
        /// Returns true if SubscriptionInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.EventFilters == input.EventFilters ||
                    this.EventFilters != null &&
                    input.EventFilters != null &&
                    this.EventFilters.SequenceEqual(input.EventFilters)
                ) && 
                (
                    this.DisabledFilters == input.DisabledFilters ||
                    this.DisabledFilters != null &&
                    input.DisabledFilters != null &&
                    this.DisabledFilters.SequenceEqual(input.DisabledFilters)
                ) && 
                (
                    this.ExpirationTime == input.ExpirationTime ||
                    (this.ExpirationTime != null &&
                    this.ExpirationTime.Equals(input.ExpirationTime))
                ) && 
                (
                    this.ExpiresIn == input.ExpiresIn ||
                    (this.ExpiresIn != null &&
                    this.ExpiresIn.Equals(input.ExpiresIn))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.CreationTime == input.CreationTime ||
                    (this.CreationTime != null &&
                    this.CreationTime.Equals(input.CreationTime))
                ) && 
                (
                    this.DeliveryMode == input.DeliveryMode ||
                    (this.DeliveryMode != null &&
                    this.DeliveryMode.Equals(input.DeliveryMode))
                ) && 
                (
                    this.BlacklistedData == input.BlacklistedData ||
                    (this.BlacklistedData != null &&
                    this.BlacklistedData.Equals(input.BlacklistedData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.EventFilters != null)
                    hashCode = hashCode * 59 + this.EventFilters.GetHashCode();
                if (this.DisabledFilters != null)
                    hashCode = hashCode * 59 + this.DisabledFilters.GetHashCode();
                if (this.ExpirationTime != null)
                    hashCode = hashCode * 59 + this.ExpirationTime.GetHashCode();
                if (this.ExpiresIn != null)
                    hashCode = hashCode * 59 + this.ExpiresIn.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.CreationTime != null)
                    hashCode = hashCode * 59 + this.CreationTime.GetHashCode();
                if (this.DeliveryMode != null)
                    hashCode = hashCode * 59 + this.DeliveryMode.GetHashCode();
                if (this.BlacklistedData != null)
                    hashCode = hashCode * 59 + this.BlacklistedData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {




            yield break;
        }
    }

}
