/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SyncInfo
    /// </summary>
    [DataContract]
    public partial class SyncInfo :  IEquatable<SyncInfo>, IValidatableObject
    {
        /// <summary>
        /// Defines SyncType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SyncTypeEnum
        {
            /// <summary>
            /// Enum FSync for value: FSync
            /// </summary>
            [EnumMember(Value = "FSync")]
            FSync = 1,

            /// <summary>
            /// Enum ISync for value: ISync
            /// </summary>
            [EnumMember(Value = "ISync")]
            ISync = 2

        }

        /// <summary>
        /// Gets or Sets SyncType
        /// </summary>
        [DataMember(Name="syncType", EmitDefaultValue=false)]
        public SyncTypeEnum? SyncType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SyncInfo" /> class.
        /// </summary>
        /// <param name="syncType">syncType.</param>
        /// <param name="syncToken">syncToken.</param>
        /// <param name="syncTime">syncTime.</param>
        /// <param name="olderRecordsExist">olderRecordsExist (default to false).</param>
        public SyncInfo(SyncTypeEnum? syncType = default(SyncTypeEnum?), string syncToken = default(string), DateTime syncTime = default(DateTime), bool olderRecordsExist = false)
        {
            this.SyncType = syncType;
            this.SyncToken = syncToken;
            this.SyncTime = syncTime;
            // use default value if no "olderRecordsExist" provided
            if (olderRecordsExist == null)
            {
                this.OlderRecordsExist = false;
            }
            else
            {
                this.OlderRecordsExist = olderRecordsExist;
            }
        }


        /// <summary>
        /// Gets or Sets SyncToken
        /// </summary>
        [DataMember(Name="syncToken", EmitDefaultValue=false)]
        public string SyncToken { get; set; }

        /// <summary>
        /// Gets or Sets SyncTime
        /// </summary>
        [DataMember(Name="syncTime", EmitDefaultValue=false)]
        public DateTime SyncTime { get; set; }

        /// <summary>
        /// Gets or Sets OlderRecordsExist
        /// </summary>
        [DataMember(Name="olderRecordsExist", EmitDefaultValue=false)]
        public bool OlderRecordsExist { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SyncInfo {\n");
            sb.Append("  SyncType: ").Append(SyncType).Append("\n");
            sb.Append("  SyncToken: ").Append(SyncToken).Append("\n");
            sb.Append("  SyncTime: ").Append(SyncTime).Append("\n");
            sb.Append("  OlderRecordsExist: ").Append(OlderRecordsExist).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SyncInfo);
        }

        /// <summary>
        /// Returns true if SyncInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of SyncInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SyncInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SyncType == input.SyncType ||
                    (this.SyncType != null &&
                    this.SyncType.Equals(input.SyncType))
                ) && 
                (
                    this.SyncToken == input.SyncToken ||
                    (this.SyncToken != null &&
                    this.SyncToken.Equals(input.SyncToken))
                ) && 
                (
                    this.SyncTime == input.SyncTime ||
                    (this.SyncTime != null &&
                    this.SyncTime.Equals(input.SyncTime))
                ) && 
                (
                    this.OlderRecordsExist == input.OlderRecordsExist ||
                    (this.OlderRecordsExist != null &&
                    this.OlderRecordsExist.Equals(input.OlderRecordsExist))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SyncType != null)
                    hashCode = hashCode * 59 + this.SyncType.GetHashCode();
                if (this.SyncToken != null)
                    hashCode = hashCode * 59 + this.SyncToken.GetHashCode();
                if (this.SyncTime != null)
                    hashCode = hashCode * 59 + this.SyncTime.GetHashCode();
                if (this.OlderRecordsExist != null)
                    hashCode = hashCode * 59 + this.OlderRecordsExist.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
