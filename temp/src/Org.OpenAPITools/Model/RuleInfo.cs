/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// RuleInfo
    /// </summary>
    [DataContract]
    public partial class RuleInfo :  IEquatable<RuleInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RuleInfo" /> class.
        /// </summary>
        /// <param name="index">Forwarding number (or group) ordinal.</param>
        /// <param name="ringCount">Number of rings for a forwarding number (or group).</param>
        /// <param name="enabled">Forwarding number status. Returned only if &#x60;showInactiveNumbers&#x60; is set to &#x60;true&#x60;.</param>
        /// <param name="forwardingNumbers">Forwarding number (or group) data.</param>
        public RuleInfo(int index = default(int), int ringCount = default(int), bool enabled = default(bool), List<CreateAnsweringRuleForwardingNumberInfo> forwardingNumbers = default(List<CreateAnsweringRuleForwardingNumberInfo>))
        {
            this.Index = index;
            this.RingCount = ringCount;
            this.Enabled = enabled;
            this.ForwardingNumbers = forwardingNumbers;
        }

        /// <summary>
        /// Forwarding number (or group) ordinal
        /// </summary>
        /// <value>Forwarding number (or group) ordinal</value>
        [DataMember(Name="index", EmitDefaultValue=false)]
        public int Index { get; set; }

        /// <summary>
        /// Number of rings for a forwarding number (or group)
        /// </summary>
        /// <value>Number of rings for a forwarding number (or group)</value>
        [DataMember(Name="ringCount", EmitDefaultValue=false)]
        public int RingCount { get; set; }

        /// <summary>
        /// Forwarding number status. Returned only if &#x60;showInactiveNumbers&#x60; is set to &#x60;true&#x60;
        /// </summary>
        /// <value>Forwarding number status. Returned only if &#x60;showInactiveNumbers&#x60; is set to &#x60;true&#x60;</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Forwarding number (or group) data
        /// </summary>
        /// <value>Forwarding number (or group) data</value>
        [DataMember(Name="forwardingNumbers", EmitDefaultValue=false)]
        public List<CreateAnsweringRuleForwardingNumberInfo> ForwardingNumbers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RuleInfo {\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  RingCount: ").Append(RingCount).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  ForwardingNumbers: ").Append(ForwardingNumbers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RuleInfo);
        }

        /// <summary>
        /// Returns true if RuleInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of RuleInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RuleInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Index == input.Index ||
                    (this.Index != null &&
                    this.Index.Equals(input.Index))
                ) && 
                (
                    this.RingCount == input.RingCount ||
                    (this.RingCount != null &&
                    this.RingCount.Equals(input.RingCount))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.ForwardingNumbers == input.ForwardingNumbers ||
                    this.ForwardingNumbers != null &&
                    input.ForwardingNumbers != null &&
                    this.ForwardingNumbers.SequenceEqual(input.ForwardingNumbers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Index != null)
                    hashCode = hashCode * 59 + this.Index.GetHashCode();
                if (this.RingCount != null)
                    hashCode = hashCode * 59 + this.RingCount.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.ForwardingNumbers != null)
                    hashCode = hashCode * 59 + this.ForwardingNumbers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
