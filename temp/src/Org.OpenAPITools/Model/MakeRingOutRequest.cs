/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// MakeRingOutRequest
    /// </summary>
    [DataContract]
    public partial class MakeRingOutRequest :  IEquatable<MakeRingOutRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MakeRingOutRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MakeRingOutRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MakeRingOutRequest" /> class.
        /// </summary>
        /// <param name="from">from (required).</param>
        /// <param name="to">to (required).</param>
        /// <param name="callerId">callerId.</param>
        /// <param name="playPrompt">The audio prompt that the calling party hears when the call is connected.</param>
        /// <param name="country">country.</param>
        public MakeRingOutRequest(MakeRingOutCallerInfoRequestFrom from = default(MakeRingOutCallerInfoRequestFrom), MakeRingOutCallerInfoRequestTo to = default(MakeRingOutCallerInfoRequestTo), MakeRingOutCallerIdInfo callerId = default(MakeRingOutCallerIdInfo), bool playPrompt = default(bool), MakeRingOutCoutryInfo country = default(MakeRingOutCoutryInfo))
        {
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new InvalidDataException("from is a required property for MakeRingOutRequest and cannot be null");
            }
            else
            {
                this.From = from;
            }

            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new InvalidDataException("to is a required property for MakeRingOutRequest and cannot be null");
            }
            else
            {
                this.To = to;
            }

            this.CallerId = callerId;
            this.PlayPrompt = playPrompt;
            this.Country = country;
        }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name="from", EmitDefaultValue=true)]
        public MakeRingOutCallerInfoRequestFrom From { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name="to", EmitDefaultValue=true)]
        public MakeRingOutCallerInfoRequestTo To { get; set; }

        /// <summary>
        /// Gets or Sets CallerId
        /// </summary>
        [DataMember(Name="callerId", EmitDefaultValue=false)]
        public MakeRingOutCallerIdInfo CallerId { get; set; }

        /// <summary>
        /// The audio prompt that the calling party hears when the call is connected
        /// </summary>
        /// <value>The audio prompt that the calling party hears when the call is connected</value>
        [DataMember(Name="playPrompt", EmitDefaultValue=false)]
        public bool PlayPrompt { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public MakeRingOutCoutryInfo Country { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MakeRingOutRequest {\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  CallerId: ").Append(CallerId).Append("\n");
            sb.Append("  PlayPrompt: ").Append(PlayPrompt).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MakeRingOutRequest);
        }

        /// <summary>
        /// Returns true if MakeRingOutRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of MakeRingOutRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MakeRingOutRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.CallerId == input.CallerId ||
                    (this.CallerId != null &&
                    this.CallerId.Equals(input.CallerId))
                ) && 
                (
                    this.PlayPrompt == input.PlayPrompt ||
                    (this.PlayPrompt != null &&
                    this.PlayPrompt.Equals(input.PlayPrompt))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.CallerId != null)
                    hashCode = hashCode * 59 + this.CallerId.GetHashCode();
                if (this.PlayPrompt != null)
                    hashCode = hashCode * 59 + this.PlayPrompt.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
