/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Meeting recording settings locked on account level
    /// </summary>
    [DataContract]
    public partial class UserMeetingRecordingSetting :  IEquatable<UserMeetingRecordingSetting>, IValidatableObject
    {
        /// <summary>
        /// Automatical recording (local/cloud/none) of meetings as they start
        /// </summary>
        /// <value>Automatical recording (local/cloud/none) of meetings as they start</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AutoRecordingEnum
        {
            /// <summary>
            /// Enum Local for value: local
            /// </summary>
            [EnumMember(Value = "local")]
            Local = 1,

            /// <summary>
            /// Enum Cloud for value: cloud
            /// </summary>
            [EnumMember(Value = "cloud")]
            Cloud = 2,

            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 3

        }

        /// <summary>
        /// Automatical recording (local/cloud/none) of meetings as they start
        /// </summary>
        /// <value>Automatical recording (local/cloud/none) of meetings as they start</value>
        [DataMember(Name="autoRecording", EmitDefaultValue=false)]
        public AutoRecordingEnum? AutoRecording { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserMeetingRecordingSetting" /> class.
        /// </summary>
        /// <param name="localRecording">Allows hosts and participants to record a meeting to a local file.</param>
        /// <param name="cloudRecording">Allows hosts to record and save a meeting/webinar in the cloud.</param>
        /// <param name="recordSpeakerView">Allows to record active speaker with the shared screen (default to false).</param>
        /// <param name="recordGalleryView">Allows to record gallery view with the shared screen (default to false).</param>
        /// <param name="recordAudioFile">Allows to record an audio-only file (default to false).</param>
        /// <param name="saveChatText">Allows to save chat text from a meeting (default to false).</param>
        /// <param name="showTimestamp">Allows to show timestamp on video (default to false).</param>
        /// <param name="autoRecording">Automatical recording (local/cloud/none) of meetings as they start (default to AutoRecordingEnum.Local).</param>
        /// <param name="autoDeleteCmr">Automatical deletion of cloud recordings (default to &quot;false&quot;).</param>
        /// <param name="autoDeleteCmrDays">A specified number of days for automatical deletion of cloud recordings, the value range is 1-60.</param>
        public UserMeetingRecordingSetting(bool localRecording = default(bool), bool cloudRecording = default(bool), bool recordSpeakerView = false, bool recordGalleryView = false, bool recordAudioFile = false, bool saveChatText = false, bool showTimestamp = false, AutoRecordingEnum? autoRecording = AutoRecordingEnum.Local, string autoDeleteCmr = "false", int autoDeleteCmrDays = default(int))
        {
            this.LocalRecording = localRecording;
            this.CloudRecording = cloudRecording;
            // use default value if no "recordSpeakerView" provided
            if (recordSpeakerView == null)
            {
                this.RecordSpeakerView = false;
            }
            else
            {
                this.RecordSpeakerView = recordSpeakerView;
            }
            // use default value if no "recordGalleryView" provided
            if (recordGalleryView == null)
            {
                this.RecordGalleryView = false;
            }
            else
            {
                this.RecordGalleryView = recordGalleryView;
            }
            // use default value if no "recordAudioFile" provided
            if (recordAudioFile == null)
            {
                this.RecordAudioFile = false;
            }
            else
            {
                this.RecordAudioFile = recordAudioFile;
            }
            // use default value if no "saveChatText" provided
            if (saveChatText == null)
            {
                this.SaveChatText = false;
            }
            else
            {
                this.SaveChatText = saveChatText;
            }
            // use default value if no "showTimestamp" provided
            if (showTimestamp == null)
            {
                this.ShowTimestamp = false;
            }
            else
            {
                this.ShowTimestamp = showTimestamp;
            }
            // use default value if no "autoRecording" provided
            if (autoRecording == null)
            {
                this.AutoRecording = AutoRecordingEnum.Local;
            }
            else
            {
                this.AutoRecording = autoRecording;
            }
            // use default value if no "autoDeleteCmr" provided
            if (autoDeleteCmr == null)
            {
                this.AutoDeleteCmr = "false";
            }
            else
            {
                this.AutoDeleteCmr = autoDeleteCmr;
            }
            this.AutoDeleteCmrDays = autoDeleteCmrDays;
        }

        /// <summary>
        /// Allows hosts and participants to record a meeting to a local file
        /// </summary>
        /// <value>Allows hosts and participants to record a meeting to a local file</value>
        [DataMember(Name="localRecording", EmitDefaultValue=false)]
        public bool LocalRecording { get; set; }

        /// <summary>
        /// Allows hosts to record and save a meeting/webinar in the cloud
        /// </summary>
        /// <value>Allows hosts to record and save a meeting/webinar in the cloud</value>
        [DataMember(Name="cloudRecording", EmitDefaultValue=false)]
        public bool CloudRecording { get; set; }

        /// <summary>
        /// Allows to record active speaker with the shared screen
        /// </summary>
        /// <value>Allows to record active speaker with the shared screen</value>
        [DataMember(Name="recordSpeakerView", EmitDefaultValue=false)]
        public bool RecordSpeakerView { get; set; }

        /// <summary>
        /// Allows to record gallery view with the shared screen
        /// </summary>
        /// <value>Allows to record gallery view with the shared screen</value>
        [DataMember(Name="recordGalleryView", EmitDefaultValue=false)]
        public bool RecordGalleryView { get; set; }

        /// <summary>
        /// Allows to record an audio-only file
        /// </summary>
        /// <value>Allows to record an audio-only file</value>
        [DataMember(Name="recordAudioFile", EmitDefaultValue=false)]
        public bool RecordAudioFile { get; set; }

        /// <summary>
        /// Allows to save chat text from a meeting
        /// </summary>
        /// <value>Allows to save chat text from a meeting</value>
        [DataMember(Name="saveChatText", EmitDefaultValue=false)]
        public bool SaveChatText { get; set; }

        /// <summary>
        /// Allows to show timestamp on video
        /// </summary>
        /// <value>Allows to show timestamp on video</value>
        [DataMember(Name="showTimestamp", EmitDefaultValue=false)]
        public bool ShowTimestamp { get; set; }


        /// <summary>
        /// Automatical deletion of cloud recordings
        /// </summary>
        /// <value>Automatical deletion of cloud recordings</value>
        [DataMember(Name="autoDeleteCmr", EmitDefaultValue=false)]
        public string AutoDeleteCmr { get; set; }

        /// <summary>
        /// A specified number of days for automatical deletion of cloud recordings, the value range is 1-60
        /// </summary>
        /// <value>A specified number of days for automatical deletion of cloud recordings, the value range is 1-60</value>
        [DataMember(Name="autoDeleteCmrDays", EmitDefaultValue=false)]
        public int AutoDeleteCmrDays { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserMeetingRecordingSetting {\n");
            sb.Append("  LocalRecording: ").Append(LocalRecording).Append("\n");
            sb.Append("  CloudRecording: ").Append(CloudRecording).Append("\n");
            sb.Append("  RecordSpeakerView: ").Append(RecordSpeakerView).Append("\n");
            sb.Append("  RecordGalleryView: ").Append(RecordGalleryView).Append("\n");
            sb.Append("  RecordAudioFile: ").Append(RecordAudioFile).Append("\n");
            sb.Append("  SaveChatText: ").Append(SaveChatText).Append("\n");
            sb.Append("  ShowTimestamp: ").Append(ShowTimestamp).Append("\n");
            sb.Append("  AutoRecording: ").Append(AutoRecording).Append("\n");
            sb.Append("  AutoDeleteCmr: ").Append(AutoDeleteCmr).Append("\n");
            sb.Append("  AutoDeleteCmrDays: ").Append(AutoDeleteCmrDays).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserMeetingRecordingSetting);
        }

        /// <summary>
        /// Returns true if UserMeetingRecordingSetting instances are equal
        /// </summary>
        /// <param name="input">Instance of UserMeetingRecordingSetting to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserMeetingRecordingSetting input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LocalRecording == input.LocalRecording ||
                    (this.LocalRecording != null &&
                    this.LocalRecording.Equals(input.LocalRecording))
                ) && 
                (
                    this.CloudRecording == input.CloudRecording ||
                    (this.CloudRecording != null &&
                    this.CloudRecording.Equals(input.CloudRecording))
                ) && 
                (
                    this.RecordSpeakerView == input.RecordSpeakerView ||
                    (this.RecordSpeakerView != null &&
                    this.RecordSpeakerView.Equals(input.RecordSpeakerView))
                ) && 
                (
                    this.RecordGalleryView == input.RecordGalleryView ||
                    (this.RecordGalleryView != null &&
                    this.RecordGalleryView.Equals(input.RecordGalleryView))
                ) && 
                (
                    this.RecordAudioFile == input.RecordAudioFile ||
                    (this.RecordAudioFile != null &&
                    this.RecordAudioFile.Equals(input.RecordAudioFile))
                ) && 
                (
                    this.SaveChatText == input.SaveChatText ||
                    (this.SaveChatText != null &&
                    this.SaveChatText.Equals(input.SaveChatText))
                ) && 
                (
                    this.ShowTimestamp == input.ShowTimestamp ||
                    (this.ShowTimestamp != null &&
                    this.ShowTimestamp.Equals(input.ShowTimestamp))
                ) && 
                (
                    this.AutoRecording == input.AutoRecording ||
                    (this.AutoRecording != null &&
                    this.AutoRecording.Equals(input.AutoRecording))
                ) && 
                (
                    this.AutoDeleteCmr == input.AutoDeleteCmr ||
                    (this.AutoDeleteCmr != null &&
                    this.AutoDeleteCmr.Equals(input.AutoDeleteCmr))
                ) && 
                (
                    this.AutoDeleteCmrDays == input.AutoDeleteCmrDays ||
                    (this.AutoDeleteCmrDays != null &&
                    this.AutoDeleteCmrDays.Equals(input.AutoDeleteCmrDays))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LocalRecording != null)
                    hashCode = hashCode * 59 + this.LocalRecording.GetHashCode();
                if (this.CloudRecording != null)
                    hashCode = hashCode * 59 + this.CloudRecording.GetHashCode();
                if (this.RecordSpeakerView != null)
                    hashCode = hashCode * 59 + this.RecordSpeakerView.GetHashCode();
                if (this.RecordGalleryView != null)
                    hashCode = hashCode * 59 + this.RecordGalleryView.GetHashCode();
                if (this.RecordAudioFile != null)
                    hashCode = hashCode * 59 + this.RecordAudioFile.GetHashCode();
                if (this.SaveChatText != null)
                    hashCode = hashCode * 59 + this.SaveChatText.GetHashCode();
                if (this.ShowTimestamp != null)
                    hashCode = hashCode * 59 + this.ShowTimestamp.GetHashCode();
                if (this.AutoRecording != null)
                    hashCode = hashCode * 59 + this.AutoRecording.GetHashCode();
                if (this.AutoDeleteCmr != null)
                    hashCode = hashCode * 59 + this.AutoDeleteCmr.GetHashCode();
                if (this.AutoDeleteCmrDays != null)
                    hashCode = hashCode * 59 + this.AutoDeleteCmrDays.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
