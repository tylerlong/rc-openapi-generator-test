/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Weekly schedule
    /// </summary>
    [DataContract]
    public partial class WeeklyScheduleInfo :  IEquatable<WeeklyScheduleInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WeeklyScheduleInfo" /> class.
        /// </summary>
        /// <param name="monday">Time intervals for a particular day.</param>
        /// <param name="tuesday">Time intervals for a particular day.</param>
        /// <param name="wednesday">Time intervals for a particular day.</param>
        /// <param name="thursday">Time intervals for a particular day.</param>
        /// <param name="friday">Time intervals for a particular day.</param>
        /// <param name="saturday">Time intervals for a particular day.</param>
        /// <param name="sunday">Time intervals for a particular day.</param>
        public WeeklyScheduleInfo(List<TimeInterval> monday = default(List<TimeInterval>), List<TimeInterval> tuesday = default(List<TimeInterval>), List<TimeInterval> wednesday = default(List<TimeInterval>), List<TimeInterval> thursday = default(List<TimeInterval>), List<TimeInterval> friday = default(List<TimeInterval>), List<TimeInterval> saturday = default(List<TimeInterval>), List<TimeInterval> sunday = default(List<TimeInterval>))
        {
            this.Monday = monday;
            this.Tuesday = tuesday;
            this.Wednesday = wednesday;
            this.Thursday = thursday;
            this.Friday = friday;
            this.Saturday = saturday;
            this.Sunday = sunday;
        }

        /// <summary>
        /// Time intervals for a particular day
        /// </summary>
        /// <value>Time intervals for a particular day</value>
        [DataMember(Name="monday", EmitDefaultValue=false)]
        public List<TimeInterval> Monday { get; set; }

        /// <summary>
        /// Time intervals for a particular day
        /// </summary>
        /// <value>Time intervals for a particular day</value>
        [DataMember(Name="tuesday", EmitDefaultValue=false)]
        public List<TimeInterval> Tuesday { get; set; }

        /// <summary>
        /// Time intervals for a particular day
        /// </summary>
        /// <value>Time intervals for a particular day</value>
        [DataMember(Name="wednesday", EmitDefaultValue=false)]
        public List<TimeInterval> Wednesday { get; set; }

        /// <summary>
        /// Time intervals for a particular day
        /// </summary>
        /// <value>Time intervals for a particular day</value>
        [DataMember(Name="thursday", EmitDefaultValue=false)]
        public List<TimeInterval> Thursday { get; set; }

        /// <summary>
        /// Time intervals for a particular day
        /// </summary>
        /// <value>Time intervals for a particular day</value>
        [DataMember(Name="friday", EmitDefaultValue=false)]
        public List<TimeInterval> Friday { get; set; }

        /// <summary>
        /// Time intervals for a particular day
        /// </summary>
        /// <value>Time intervals for a particular day</value>
        [DataMember(Name="saturday", EmitDefaultValue=false)]
        public List<TimeInterval> Saturday { get; set; }

        /// <summary>
        /// Time intervals for a particular day
        /// </summary>
        /// <value>Time intervals for a particular day</value>
        [DataMember(Name="sunday", EmitDefaultValue=false)]
        public List<TimeInterval> Sunday { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WeeklyScheduleInfo {\n");
            sb.Append("  Monday: ").Append(Monday).Append("\n");
            sb.Append("  Tuesday: ").Append(Tuesday).Append("\n");
            sb.Append("  Wednesday: ").Append(Wednesday).Append("\n");
            sb.Append("  Thursday: ").Append(Thursday).Append("\n");
            sb.Append("  Friday: ").Append(Friday).Append("\n");
            sb.Append("  Saturday: ").Append(Saturday).Append("\n");
            sb.Append("  Sunday: ").Append(Sunday).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WeeklyScheduleInfo);
        }

        /// <summary>
        /// Returns true if WeeklyScheduleInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of WeeklyScheduleInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WeeklyScheduleInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Monday == input.Monday ||
                    this.Monday != null &&
                    input.Monday != null &&
                    this.Monday.SequenceEqual(input.Monday)
                ) && 
                (
                    this.Tuesday == input.Tuesday ||
                    this.Tuesday != null &&
                    input.Tuesday != null &&
                    this.Tuesday.SequenceEqual(input.Tuesday)
                ) && 
                (
                    this.Wednesday == input.Wednesday ||
                    this.Wednesday != null &&
                    input.Wednesday != null &&
                    this.Wednesday.SequenceEqual(input.Wednesday)
                ) && 
                (
                    this.Thursday == input.Thursday ||
                    this.Thursday != null &&
                    input.Thursday != null &&
                    this.Thursday.SequenceEqual(input.Thursday)
                ) && 
                (
                    this.Friday == input.Friday ||
                    this.Friday != null &&
                    input.Friday != null &&
                    this.Friday.SequenceEqual(input.Friday)
                ) && 
                (
                    this.Saturday == input.Saturday ||
                    this.Saturday != null &&
                    input.Saturday != null &&
                    this.Saturday.SequenceEqual(input.Saturday)
                ) && 
                (
                    this.Sunday == input.Sunday ||
                    this.Sunday != null &&
                    input.Sunday != null &&
                    this.Sunday.SequenceEqual(input.Sunday)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Monday != null)
                    hashCode = hashCode * 59 + this.Monday.GetHashCode();
                if (this.Tuesday != null)
                    hashCode = hashCode * 59 + this.Tuesday.GetHashCode();
                if (this.Wednesday != null)
                    hashCode = hashCode * 59 + this.Wednesday.GetHashCode();
                if (this.Thursday != null)
                    hashCode = hashCode * 59 + this.Thursday.GetHashCode();
                if (this.Friday != null)
                    hashCode = hashCode * 59 + this.Friday.GetHashCode();
                if (this.Saturday != null)
                    hashCode = hashCode * 59 + this.Saturday.GetHashCode();
                if (this.Sunday != null)
                    hashCode = hashCode * 59 + this.Sunday.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
