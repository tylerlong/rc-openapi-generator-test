/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Reason for the feature unavailability. Returned only if &#x60;available&#x60; is set to &#39;false&#39;
    /// </summary>
    [DataContract]
    public partial class ReasonInfo :  IEquatable<ReasonInfo>, IValidatableObject
    {
        /// <summary>
        /// Reason code
        /// </summary>
        /// <value>Reason code</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CodeEnum
        {
            /// <summary>
            /// Enum ServicePlanLimitation for value: ServicePlanLimitation
            /// </summary>
            [EnumMember(Value = "ServicePlanLimitation")]
            ServicePlanLimitation = 1,

            /// <summary>
            /// Enum AccountLimitation for value: AccountLimitation
            /// </summary>
            [EnumMember(Value = "AccountLimitation")]
            AccountLimitation = 2,

            /// <summary>
            /// Enum ExtensionTypeLimitation for value: ExtensionTypeLimitation
            /// </summary>
            [EnumMember(Value = "ExtensionTypeLimitation")]
            ExtensionTypeLimitation = 3,

            /// <summary>
            /// Enum ExtensionLimitation for value: ExtensionLimitation
            /// </summary>
            [EnumMember(Value = "ExtensionLimitation")]
            ExtensionLimitation = 4,

            /// <summary>
            /// Enum InsufficientPermissions for value: InsufficientPermissions
            /// </summary>
            [EnumMember(Value = "InsufficientPermissions")]
            InsufficientPermissions = 5,

            /// <summary>
            /// Enum ConfigurationLimitation for value: ConfigurationLimitation
            /// </summary>
            [EnumMember(Value = "ConfigurationLimitation")]
            ConfigurationLimitation = 6

        }

        /// <summary>
        /// Reason code
        /// </summary>
        /// <value>Reason code</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public CodeEnum? Code { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReasonInfo" /> class.
        /// </summary>
        /// <param name="code">Reason code.</param>
        /// <param name="message">Reason description.</param>
        /// <param name="permission">permission.</param>
        public ReasonInfo(CodeEnum? code = default(CodeEnum?), string message = default(string), string permission = default(string))
        {
            this.Code = code;
            this.Message = message;
            this.Permission = permission;
        }


        /// <summary>
        /// Reason description
        /// </summary>
        /// <value>Reason description</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Permission
        /// </summary>
        [DataMember(Name="permission", EmitDefaultValue=false)]
        public string Permission { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReasonInfo {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Permission: ").Append(Permission).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReasonInfo);
        }

        /// <summary>
        /// Returns true if ReasonInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ReasonInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReasonInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Permission == input.Permission ||
                    (this.Permission != null &&
                    this.Permission.Equals(input.Permission))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Permission != null)
                    hashCode = hashCode * 59 + this.Permission.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
