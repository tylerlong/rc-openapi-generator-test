/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BulkRoleAssignResource
    /// </summary>
    [DataContract]
    public partial class BulkRoleAssignResource :  IEquatable<BulkRoleAssignResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BulkRoleAssignResource" /> class.
        /// </summary>
        /// <param name="siteRestricted">siteRestricted.</param>
        /// <param name="siteCompatible">siteCompatible.</param>
        /// <param name="uri">uri.</param>
        /// <param name="addedExtensionIds">addedExtensionIds.</param>
        /// <param name="removedExtensionIds">removedExtensionIds.</param>
        public BulkRoleAssignResource(bool siteRestricted = default(bool), bool siteCompatible = default(bool), string uri = default(string), List<string> addedExtensionIds = default(List<string>), List<string> removedExtensionIds = default(List<string>))
        {
            this.SiteRestricted = siteRestricted;
            this.SiteCompatible = siteCompatible;
            this.Uri = uri;
            this.AddedExtensionIds = addedExtensionIds;
            this.RemovedExtensionIds = removedExtensionIds;
        }

        /// <summary>
        /// Gets or Sets SiteRestricted
        /// </summary>
        [DataMember(Name="siteRestricted", EmitDefaultValue=false)]
        public bool SiteRestricted { get; set; }

        /// <summary>
        /// Gets or Sets SiteCompatible
        /// </summary>
        [DataMember(Name="siteCompatible", EmitDefaultValue=false)]
        public bool SiteCompatible { get; set; }

        /// <summary>
        /// Gets or Sets Uri
        /// </summary>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Gets or Sets AddedExtensionIds
        /// </summary>
        [DataMember(Name="addedExtensionIds", EmitDefaultValue=false)]
        public List<string> AddedExtensionIds { get; set; }

        /// <summary>
        /// Gets or Sets RemovedExtensionIds
        /// </summary>
        [DataMember(Name="removedExtensionIds", EmitDefaultValue=false)]
        public List<string> RemovedExtensionIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BulkRoleAssignResource {\n");
            sb.Append("  SiteRestricted: ").Append(SiteRestricted).Append("\n");
            sb.Append("  SiteCompatible: ").Append(SiteCompatible).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  AddedExtensionIds: ").Append(AddedExtensionIds).Append("\n");
            sb.Append("  RemovedExtensionIds: ").Append(RemovedExtensionIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BulkRoleAssignResource);
        }

        /// <summary>
        /// Returns true if BulkRoleAssignResource instances are equal
        /// </summary>
        /// <param name="input">Instance of BulkRoleAssignResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BulkRoleAssignResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SiteRestricted == input.SiteRestricted ||
                    (this.SiteRestricted != null &&
                    this.SiteRestricted.Equals(input.SiteRestricted))
                ) && 
                (
                    this.SiteCompatible == input.SiteCompatible ||
                    (this.SiteCompatible != null &&
                    this.SiteCompatible.Equals(input.SiteCompatible))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.AddedExtensionIds == input.AddedExtensionIds ||
                    this.AddedExtensionIds != null &&
                    input.AddedExtensionIds != null &&
                    this.AddedExtensionIds.SequenceEqual(input.AddedExtensionIds)
                ) && 
                (
                    this.RemovedExtensionIds == input.RemovedExtensionIds ||
                    this.RemovedExtensionIds != null &&
                    input.RemovedExtensionIds != null &&
                    this.RemovedExtensionIds.SequenceEqual(input.RemovedExtensionIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SiteRestricted != null)
                    hashCode = hashCode * 59 + this.SiteRestricted.GetHashCode();
                if (this.SiteCompatible != null)
                    hashCode = hashCode * 59 + this.SiteCompatible.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.AddedExtensionIds != null)
                    hashCode = hashCode * 59 + this.AddedExtensionIds.GetHashCode();
                if (this.RemovedExtensionIds != null)
                    hashCode = hashCode * 59 + this.RemovedExtensionIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
