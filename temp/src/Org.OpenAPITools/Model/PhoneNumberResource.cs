/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PhoneNumberResource
    /// </summary>
    [DataContract]
    public partial class PhoneNumberResource :  IEquatable<PhoneNumberResource>, IValidatableObject
    {
        /// <summary>
        /// Usage type of a phone number
        /// </summary>
        /// <value>Usage type of a phone number</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UsageTypeEnum
        {
            /// <summary>
            /// Enum MobileNumber for value: MobileNumber
            /// </summary>
            [EnumMember(Value = "MobileNumber")]
            MobileNumber = 1,

            /// <summary>
            /// Enum ContactNumber for value: ContactNumber
            /// </summary>
            [EnumMember(Value = "ContactNumber")]
            ContactNumber = 2,

            /// <summary>
            /// Enum DirectNumber for value: DirectNumber
            /// </summary>
            [EnumMember(Value = "DirectNumber")]
            DirectNumber = 3,

            /// <summary>
            /// Enum ForwardedNumber for value: ForwardedNumber
            /// </summary>
            [EnumMember(Value = "ForwardedNumber")]
            ForwardedNumber = 4

        }

        /// <summary>
        /// Usage type of a phone number
        /// </summary>
        /// <value>Usage type of a phone number</value>
        [DataMember(Name="usageType", EmitDefaultValue=false)]
        public UsageTypeEnum? UsageType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneNumberResource" /> class.
        /// </summary>
        /// <param name="formattedPhoneNumber">formattedPhoneNumber.</param>
        /// <param name="phoneNumber">phoneNumber.</param>
        /// <param name="type">type.</param>
        /// <param name="label">Custom user name of a phone number, if any.</param>
        /// <param name="usageType">Usage type of a phone number.</param>
        /// <param name="hidden">Specifies if a phone number should be hidden or not.</param>
        /// <param name="primary">Specifies if the number is primary, i.e. displayed as &#39;main number&#39; and called by default.</param>
        public PhoneNumberResource(string formattedPhoneNumber = default(string), string phoneNumber = default(string), string type = default(string), string label = default(string), UsageTypeEnum? usageType = default(UsageTypeEnum?), bool hidden = default(bool), bool primary = default(bool))
        {
            this.FormattedPhoneNumber = formattedPhoneNumber;
            this.PhoneNumber = phoneNumber;
            this.Type = type;
            this.Label = label;
            this.UsageType = usageType;
            this.Hidden = hidden;
            this.Primary = primary;
        }

        /// <summary>
        /// Gets or Sets FormattedPhoneNumber
        /// </summary>
        [DataMember(Name="formattedPhoneNumber", EmitDefaultValue=false)]
        public string FormattedPhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name="phoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Custom user name of a phone number, if any
        /// </summary>
        /// <value>Custom user name of a phone number, if any</value>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }


        /// <summary>
        /// Specifies if a phone number should be hidden or not
        /// </summary>
        /// <value>Specifies if a phone number should be hidden or not</value>
        [DataMember(Name="hidden", EmitDefaultValue=false)]
        public bool Hidden { get; set; }

        /// <summary>
        /// Specifies if the number is primary, i.e. displayed as &#39;main number&#39; and called by default
        /// </summary>
        /// <value>Specifies if the number is primary, i.e. displayed as &#39;main number&#39; and called by default</value>
        [DataMember(Name="primary", EmitDefaultValue=false)]
        public bool Primary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PhoneNumberResource {\n");
            sb.Append("  FormattedPhoneNumber: ").Append(FormattedPhoneNumber).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  UsageType: ").Append(UsageType).Append("\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            sb.Append("  Primary: ").Append(Primary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PhoneNumberResource);
        }

        /// <summary>
        /// Returns true if PhoneNumberResource instances are equal
        /// </summary>
        /// <param name="input">Instance of PhoneNumberResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PhoneNumberResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FormattedPhoneNumber == input.FormattedPhoneNumber ||
                    (this.FormattedPhoneNumber != null &&
                    this.FormattedPhoneNumber.Equals(input.FormattedPhoneNumber))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.UsageType == input.UsageType ||
                    (this.UsageType != null &&
                    this.UsageType.Equals(input.UsageType))
                ) && 
                (
                    this.Hidden == input.Hidden ||
                    (this.Hidden != null &&
                    this.Hidden.Equals(input.Hidden))
                ) && 
                (
                    this.Primary == input.Primary ||
                    (this.Primary != null &&
                    this.Primary.Equals(input.Primary))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FormattedPhoneNumber != null)
                    hashCode = hashCode * 59 + this.FormattedPhoneNumber.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.UsageType != null)
                    hashCode = hashCode * 59 + this.UsageType.GetHashCode();
                if (this.Hidden != null)
                    hashCode = hashCode * 59 + this.Hidden.GetHashCode();
                if (this.Primary != null)
                    hashCode = hashCode * 59 + this.Primary.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
