/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GlipCompleteTask
    /// </summary>
    [DataContract]
    public partial class GlipCompleteTask :  IEquatable<GlipCompleteTask>, IValidatableObject
    {
        /// <summary>
        /// Completeness status. &#39;Mandatory&#39; if &#x60;completenessCondition&#x60; is set to &#x60;Simple&#x60;, otherwise &#39;Optional&#39;
        /// </summary>
        /// <value>Completeness status. &#39;Mandatory&#39; if &#x60;completenessCondition&#x60; is set to &#x60;Simple&#x60;, otherwise &#39;Optional&#39;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Incomplete for value: Incomplete
            /// </summary>
            [EnumMember(Value = "Incomplete")]
            Incomplete = 1,

            /// <summary>
            /// Enum Complete for value: Complete
            /// </summary>
            [EnumMember(Value = "Complete")]
            Complete = 2

        }

        /// <summary>
        /// Completeness status. &#39;Mandatory&#39; if &#x60;completenessCondition&#x60; is set to &#x60;Simple&#x60;, otherwise &#39;Optional&#39;
        /// </summary>
        /// <value>Completeness status. &#39;Mandatory&#39; if &#x60;completenessCondition&#x60; is set to &#x60;Simple&#x60;, otherwise &#39;Optional&#39;</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GlipCompleteTask" /> class.
        /// </summary>
        /// <param name="status">Completeness status. &#39;Mandatory&#39; if &#x60;completenessCondition&#x60; is set to &#x60;Simple&#x60;, otherwise &#39;Optional&#39;.</param>
        /// <param name="assignees">assignees.</param>
        /// <param name="completenessPercentage">Current completeness percentage of a task with the &#39;Percentage&#39; completeness condition. &#39;Mandatory&#39; if &#x60;completenessCondition&#x60; is set to &#x60;Percentage&#x60;, otherwise &#39;Optional&#39;.</param>
        public GlipCompleteTask(StatusEnum? status = default(StatusEnum?), List<AssigneeInfo> assignees = default(List<AssigneeInfo>), int completenessPercentage = default(int))
        {
            this.Status = status;
            this.Assignees = assignees;
            this.CompletenessPercentage = completenessPercentage;
        }


        /// <summary>
        /// Gets or Sets Assignees
        /// </summary>
        [DataMember(Name="assignees", EmitDefaultValue=false)]
        public List<AssigneeInfo> Assignees { get; set; }

        /// <summary>
        /// Current completeness percentage of a task with the &#39;Percentage&#39; completeness condition. &#39;Mandatory&#39; if &#x60;completenessCondition&#x60; is set to &#x60;Percentage&#x60;, otherwise &#39;Optional&#39;
        /// </summary>
        /// <value>Current completeness percentage of a task with the &#39;Percentage&#39; completeness condition. &#39;Mandatory&#39; if &#x60;completenessCondition&#x60; is set to &#x60;Percentage&#x60;, otherwise &#39;Optional&#39;</value>
        [DataMember(Name="completenessPercentage", EmitDefaultValue=false)]
        public int CompletenessPercentage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlipCompleteTask {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Assignees: ").Append(Assignees).Append("\n");
            sb.Append("  CompletenessPercentage: ").Append(CompletenessPercentage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GlipCompleteTask);
        }

        /// <summary>
        /// Returns true if GlipCompleteTask instances are equal
        /// </summary>
        /// <param name="input">Instance of GlipCompleteTask to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlipCompleteTask input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Assignees == input.Assignees ||
                    this.Assignees != null &&
                    input.Assignees != null &&
                    this.Assignees.SequenceEqual(input.Assignees)
                ) && 
                (
                    this.CompletenessPercentage == input.CompletenessPercentage ||
                    (this.CompletenessPercentage != null &&
                    this.CompletenessPercentage.Equals(input.CompletenessPercentage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Assignees != null)
                    hashCode = hashCode * 59 + this.Assignees.GetHashCode();
                if (this.CompletenessPercentage != null)
                    hashCode = hashCode * 59 + this.CompletenessPercentage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // CompletenessPercentage (int) maximum
            if(this.CompletenessPercentage > (int)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CompletenessPercentage, must be a value less than or equal to 100.", new [] { "CompletenessPercentage" });
            }

            // CompletenessPercentage (int) minimum
            if(this.CompletenessPercentage < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CompletenessPercentage, must be a value greater than or equal to 0.", new [] { "CompletenessPercentage" });
            }

            yield break;
        }
    }

}
