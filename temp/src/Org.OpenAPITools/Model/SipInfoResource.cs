/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SipInfoResource
    /// </summary>
    [DataContract]
    public partial class SipInfoResource :  IEquatable<SipInfoResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SipInfoResource" /> class.
        /// </summary>
        /// <param name="domain">SIP domain.</param>
        /// <param name="outboundProxies">List of outbound proxies.</param>
        /// <param name="userName">User credentials.</param>
        /// <param name="password">User password.</param>
        /// <param name="authorizationId">Internal identifier for SIP authorization.</param>
        public SipInfoResource(string domain = default(string), List<OutboundProxyInfo> outboundProxies = default(List<OutboundProxyInfo>), string userName = default(string), string password = default(string), string authorizationId = default(string))
        {
            this.Domain = domain;
            this.OutboundProxies = outboundProxies;
            this.UserName = userName;
            this.Password = password;
            this.AuthorizationId = authorizationId;
        }

        /// <summary>
        /// SIP domain
        /// </summary>
        /// <value>SIP domain</value>
        [DataMember(Name="domain", EmitDefaultValue=false)]
        public string Domain { get; set; }

        /// <summary>
        /// List of outbound proxies
        /// </summary>
        /// <value>List of outbound proxies</value>
        [DataMember(Name="outboundProxies", EmitDefaultValue=false)]
        public List<OutboundProxyInfo> OutboundProxies { get; set; }

        /// <summary>
        /// User credentials
        /// </summary>
        /// <value>User credentials</value>
        [DataMember(Name="userName", EmitDefaultValue=false)]
        public string UserName { get; set; }

        /// <summary>
        /// User password
        /// </summary>
        /// <value>User password</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Internal identifier for SIP authorization
        /// </summary>
        /// <value>Internal identifier for SIP authorization</value>
        [DataMember(Name="authorizationId", EmitDefaultValue=false)]
        public string AuthorizationId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SipInfoResource {\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  OutboundProxies: ").Append(OutboundProxies).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  AuthorizationId: ").Append(AuthorizationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SipInfoResource);
        }

        /// <summary>
        /// Returns true if SipInfoResource instances are equal
        /// </summary>
        /// <param name="input">Instance of SipInfoResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SipInfoResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.OutboundProxies == input.OutboundProxies ||
                    this.OutboundProxies != null &&
                    input.OutboundProxies != null &&
                    this.OutboundProxies.SequenceEqual(input.OutboundProxies)
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.AuthorizationId == input.AuthorizationId ||
                    (this.AuthorizationId != null &&
                    this.AuthorizationId.Equals(input.AuthorizationId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Domain != null)
                    hashCode = hashCode * 59 + this.Domain.GetHashCode();
                if (this.OutboundProxies != null)
                    hashCode = hashCode * 59 + this.OutboundProxies.GetHashCode();
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.AuthorizationId != null)
                    hashCode = hashCode * 59 + this.AuthorizationId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
