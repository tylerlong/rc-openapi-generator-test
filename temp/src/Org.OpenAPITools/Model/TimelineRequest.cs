/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TimelineRequest
    /// </summary>
    [DataContract]
    public partial class TimelineRequest :  IEquatable<TimelineRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimelineRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TimelineRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TimelineRequest" /> class.
        /// </summary>
        /// <param name="grouping">grouping (required).</param>
        /// <param name="timeSettings">timeSettings (required).</param>
        /// <param name="callFilters">callFilters.</param>
        /// <param name="responseOptions">responseOptions (required).</param>
        public TimelineRequest(Grouping grouping = default(Grouping), TimeSettings timeSettings = default(TimeSettings), CallFilters callFilters = default(CallFilters), TimelineResponseOptions responseOptions = default(TimelineResponseOptions))
        {
            // to ensure "grouping" is required (not null)
            if (grouping == null)
            {
                throw new InvalidDataException("grouping is a required property for TimelineRequest and cannot be null");
            }
            else
            {
                this.Grouping = grouping;
            }

            // to ensure "timeSettings" is required (not null)
            if (timeSettings == null)
            {
                throw new InvalidDataException("timeSettings is a required property for TimelineRequest and cannot be null");
            }
            else
            {
                this.TimeSettings = timeSettings;
            }

            // to ensure "responseOptions" is required (not null)
            if (responseOptions == null)
            {
                throw new InvalidDataException("responseOptions is a required property for TimelineRequest and cannot be null");
            }
            else
            {
                this.ResponseOptions = responseOptions;
            }

            this.CallFilters = callFilters;
        }

        /// <summary>
        /// Gets or Sets Grouping
        /// </summary>
        [DataMember(Name="grouping", EmitDefaultValue=true)]
        public Grouping Grouping { get; set; }

        /// <summary>
        /// Gets or Sets TimeSettings
        /// </summary>
        [DataMember(Name="timeSettings", EmitDefaultValue=true)]
        public TimeSettings TimeSettings { get; set; }

        /// <summary>
        /// Gets or Sets CallFilters
        /// </summary>
        [DataMember(Name="callFilters", EmitDefaultValue=false)]
        public CallFilters CallFilters { get; set; }

        /// <summary>
        /// Gets or Sets ResponseOptions
        /// </summary>
        [DataMember(Name="responseOptions", EmitDefaultValue=true)]
        public TimelineResponseOptions ResponseOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TimelineRequest {\n");
            sb.Append("  Grouping: ").Append(Grouping).Append("\n");
            sb.Append("  TimeSettings: ").Append(TimeSettings).Append("\n");
            sb.Append("  CallFilters: ").Append(CallFilters).Append("\n");
            sb.Append("  ResponseOptions: ").Append(ResponseOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimelineRequest);
        }

        /// <summary>
        /// Returns true if TimelineRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TimelineRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimelineRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Grouping == input.Grouping ||
                    (this.Grouping != null &&
                    this.Grouping.Equals(input.Grouping))
                ) && 
                (
                    this.TimeSettings == input.TimeSettings ||
                    (this.TimeSettings != null &&
                    this.TimeSettings.Equals(input.TimeSettings))
                ) && 
                (
                    this.CallFilters == input.CallFilters ||
                    (this.CallFilters != null &&
                    this.CallFilters.Equals(input.CallFilters))
                ) && 
                (
                    this.ResponseOptions == input.ResponseOptions ||
                    (this.ResponseOptions != null &&
                    this.ResponseOptions.Equals(input.ResponseOptions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Grouping != null)
                    hashCode = hashCode * 59 + this.Grouping.GetHashCode();
                if (this.TimeSettings != null)
                    hashCode = hashCode * 59 + this.TimeSettings.GetHashCode();
                if (this.CallFilters != null)
                    hashCode = hashCode * 59 + this.CallFilters.GetHashCode();
                if (this.ResponseOptions != null)
                    hashCode = hashCode * 59 + this.ResponseOptions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
