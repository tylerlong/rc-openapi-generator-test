/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Call recording data. Returned if the call is recorded - &#x60;withRecording&#x60; parameter is set to &#39;True&#39; in this case
    /// </summary>
    [DataContract]
    public partial class CallLogRecordingInfo :  IEquatable<CallLogRecordingInfo>, IValidatableObject
    {
        /// <summary>
        /// Indicates recording mode used
        /// </summary>
        /// <value>Indicates recording mode used</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Automatic for value: Automatic
            /// </summary>
            [EnumMember(Value = "Automatic")]
            Automatic = 1,

            /// <summary>
            /// Enum OnDemand for value: OnDemand
            /// </summary>
            [EnumMember(Value = "OnDemand")]
            OnDemand = 2

        }

        /// <summary>
        /// Indicates recording mode used
        /// </summary>
        /// <value>Indicates recording mode used</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CallLogRecordingInfo" /> class.
        /// </summary>
        /// <param name="id">Internal identifier of the call recording.</param>
        /// <param name="uri">Link to the call recording metadata resource.</param>
        /// <param name="type">Indicates recording mode used.</param>
        /// <param name="contentUri">Link to the call recording binary content.</param>
        public CallLogRecordingInfo(string id = default(string), string uri = default(string), TypeEnum? type = default(TypeEnum?), string contentUri = default(string))
        {
            this.Id = id;
            this.Uri = uri;
            this.Type = type;
            this.ContentUri = contentUri;
        }

        /// <summary>
        /// Internal identifier of the call recording
        /// </summary>
        /// <value>Internal identifier of the call recording</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Link to the call recording metadata resource
        /// </summary>
        /// <value>Link to the call recording metadata resource</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }


        /// <summary>
        /// Link to the call recording binary content
        /// </summary>
        /// <value>Link to the call recording binary content</value>
        [DataMember(Name="contentUri", EmitDefaultValue=false)]
        public string ContentUri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallLogRecordingInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ContentUri: ").Append(ContentUri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallLogRecordingInfo);
        }

        /// <summary>
        /// Returns true if CallLogRecordingInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of CallLogRecordingInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallLogRecordingInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.ContentUri == input.ContentUri ||
                    (this.ContentUri != null &&
                    this.ContentUri.Equals(input.ContentUri))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.ContentUri != null)
                    hashCode = hashCode * 59 + this.ContentUri.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
