/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Optional filters that limit the scope of calls (joined via AND)
    /// </summary>
    [DataContract]
    public partial class CallFilters :  IEquatable<CallFilters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CallFilters" /> class.
        /// </summary>
        /// <param name="extensionFilters">extensionFilters.</param>
        /// <param name="queues">List of queues extension ids which allows to get data only for calls that were routed through any of these queues.</param>
        /// <param name="calledNumbers">The direct company numbers the caller called (joined via OR).</param>
        /// <param name="directions">Specifies the call directions relative to the scope specified in grouping object (joined via OR). Not applicable to internal origin calls with company scope.</param>
        /// <param name="origins">Specifies whether an external party was present in the initial segment of the call (joined via OR).</param>
        /// <param name="callResponses">Filtering of calls by first response (joined via OR).</param>
        /// <param name="callResults">Filtering of calls by the nature of call result (joined via OR).</param>
        /// <param name="callSegments">Filtering of calls by presence of specific segment (joined via OR).</param>
        /// <param name="callActions">Filtering of calls by presence of specific action (joined via OR).</param>
        /// <param name="companyHours">Filtering of calls by company&#39;s business hours or after hours (joined via OR).</param>
        /// <param name="callDuration">callDuration.</param>
        /// <param name="timeSpent">timeSpent.</param>
        /// <param name="queueSla">Filtering calls that were within or out of queue SLA (joined via OR). Only applicable to Queues grouping.</param>
        /// <param name="callTypes">Filtering of calls based on how the call started from the callee perspective (joined via OR). If the call is outbound relative to the grouping scope, CallType is Outbound.</param>
        public CallFilters(ExtensionFilters extensionFilters = default(ExtensionFilters), List<string> queues = default(List<string>), List<string> calledNumbers = default(List<string>), List<Direction> directions = default(List<Direction>), List<Origin> origins = default(List<Origin>), List<CallResponse> callResponses = default(List<CallResponse>), List<CallResult> callResults = default(List<CallResult>), List<CallSegmentFilter> callSegments = default(List<CallSegmentFilter>), List<CallAction> callActions = default(List<CallAction>), List<CompanyHoursOptions> companyHours = default(List<CompanyHoursOptions>), CallDurationFilter callDuration = default(CallDurationFilter), TimeSpentFilter timeSpent = default(TimeSpentFilter), List<QueueSlaOptions> queueSla = default(List<QueueSlaOptions>), List<CallType> callTypes = default(List<CallType>))
        {
            this.ExtensionFilters = extensionFilters;
            this.Queues = queues;
            this.CalledNumbers = calledNumbers;
            this.Directions = directions;
            this.Origins = origins;
            this.CallResponses = callResponses;
            this.CallResults = callResults;
            this.CallSegments = callSegments;
            this.CallActions = callActions;
            this.CompanyHours = companyHours;
            this.CallDuration = callDuration;
            this.TimeSpent = timeSpent;
            this.QueueSla = queueSla;
            this.CallTypes = callTypes;
        }

        /// <summary>
        /// Gets or Sets ExtensionFilters
        /// </summary>
        [DataMember(Name="extensionFilters", EmitDefaultValue=false)]
        public ExtensionFilters ExtensionFilters { get; set; }

        /// <summary>
        /// List of queues extension ids which allows to get data only for calls that were routed through any of these queues
        /// </summary>
        /// <value>List of queues extension ids which allows to get data only for calls that were routed through any of these queues</value>
        [DataMember(Name="queues", EmitDefaultValue=false)]
        public List<string> Queues { get; set; }

        /// <summary>
        /// The direct company numbers the caller called (joined via OR)
        /// </summary>
        /// <value>The direct company numbers the caller called (joined via OR)</value>
        [DataMember(Name="calledNumbers", EmitDefaultValue=false)]
        public List<string> CalledNumbers { get; set; }

        /// <summary>
        /// Specifies the call directions relative to the scope specified in grouping object (joined via OR). Not applicable to internal origin calls with company scope
        /// </summary>
        /// <value>Specifies the call directions relative to the scope specified in grouping object (joined via OR). Not applicable to internal origin calls with company scope</value>
        [DataMember(Name="directions", EmitDefaultValue=false)]
        public List<Direction> Directions { get; set; }

        /// <summary>
        /// Specifies whether an external party was present in the initial segment of the call (joined via OR)
        /// </summary>
        /// <value>Specifies whether an external party was present in the initial segment of the call (joined via OR)</value>
        [DataMember(Name="origins", EmitDefaultValue=false)]
        public List<Origin> Origins { get; set; }

        /// <summary>
        /// Filtering of calls by first response (joined via OR)
        /// </summary>
        /// <value>Filtering of calls by first response (joined via OR)</value>
        [DataMember(Name="callResponses", EmitDefaultValue=false)]
        public List<CallResponse> CallResponses { get; set; }

        /// <summary>
        /// Filtering of calls by the nature of call result (joined via OR)
        /// </summary>
        /// <value>Filtering of calls by the nature of call result (joined via OR)</value>
        [DataMember(Name="callResults", EmitDefaultValue=false)]
        public List<CallResult> CallResults { get; set; }

        /// <summary>
        /// Filtering of calls by presence of specific segment (joined via OR)
        /// </summary>
        /// <value>Filtering of calls by presence of specific segment (joined via OR)</value>
        [DataMember(Name="callSegments", EmitDefaultValue=false)]
        public List<CallSegmentFilter> CallSegments { get; set; }

        /// <summary>
        /// Filtering of calls by presence of specific action (joined via OR)
        /// </summary>
        /// <value>Filtering of calls by presence of specific action (joined via OR)</value>
        [DataMember(Name="callActions", EmitDefaultValue=false)]
        public List<CallAction> CallActions { get; set; }

        /// <summary>
        /// Filtering of calls by company&#39;s business hours or after hours (joined via OR)
        /// </summary>
        /// <value>Filtering of calls by company&#39;s business hours or after hours (joined via OR)</value>
        [DataMember(Name="companyHours", EmitDefaultValue=false)]
        public List<CompanyHoursOptions> CompanyHours { get; set; }

        /// <summary>
        /// Gets or Sets CallDuration
        /// </summary>
        [DataMember(Name="callDuration", EmitDefaultValue=false)]
        public CallDurationFilter CallDuration { get; set; }

        /// <summary>
        /// Gets or Sets TimeSpent
        /// </summary>
        [DataMember(Name="timeSpent", EmitDefaultValue=false)]
        public TimeSpentFilter TimeSpent { get; set; }

        /// <summary>
        /// Filtering calls that were within or out of queue SLA (joined via OR). Only applicable to Queues grouping
        /// </summary>
        /// <value>Filtering calls that were within or out of queue SLA (joined via OR). Only applicable to Queues grouping</value>
        [DataMember(Name="queueSla", EmitDefaultValue=false)]
        public List<QueueSlaOptions> QueueSla { get; set; }

        /// <summary>
        /// Filtering of calls based on how the call started from the callee perspective (joined via OR). If the call is outbound relative to the grouping scope, CallType is Outbound
        /// </summary>
        /// <value>Filtering of calls based on how the call started from the callee perspective (joined via OR). If the call is outbound relative to the grouping scope, CallType is Outbound</value>
        [DataMember(Name="callTypes", EmitDefaultValue=false)]
        public List<CallType> CallTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallFilters {\n");
            sb.Append("  ExtensionFilters: ").Append(ExtensionFilters).Append("\n");
            sb.Append("  Queues: ").Append(Queues).Append("\n");
            sb.Append("  CalledNumbers: ").Append(CalledNumbers).Append("\n");
            sb.Append("  Directions: ").Append(Directions).Append("\n");
            sb.Append("  Origins: ").Append(Origins).Append("\n");
            sb.Append("  CallResponses: ").Append(CallResponses).Append("\n");
            sb.Append("  CallResults: ").Append(CallResults).Append("\n");
            sb.Append("  CallSegments: ").Append(CallSegments).Append("\n");
            sb.Append("  CallActions: ").Append(CallActions).Append("\n");
            sb.Append("  CompanyHours: ").Append(CompanyHours).Append("\n");
            sb.Append("  CallDuration: ").Append(CallDuration).Append("\n");
            sb.Append("  TimeSpent: ").Append(TimeSpent).Append("\n");
            sb.Append("  QueueSla: ").Append(QueueSla).Append("\n");
            sb.Append("  CallTypes: ").Append(CallTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallFilters);
        }

        /// <summary>
        /// Returns true if CallFilters instances are equal
        /// </summary>
        /// <param name="input">Instance of CallFilters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallFilters input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExtensionFilters == input.ExtensionFilters ||
                    (this.ExtensionFilters != null &&
                    this.ExtensionFilters.Equals(input.ExtensionFilters))
                ) && 
                (
                    this.Queues == input.Queues ||
                    this.Queues != null &&
                    input.Queues != null &&
                    this.Queues.SequenceEqual(input.Queues)
                ) && 
                (
                    this.CalledNumbers == input.CalledNumbers ||
                    this.CalledNumbers != null &&
                    input.CalledNumbers != null &&
                    this.CalledNumbers.SequenceEqual(input.CalledNumbers)
                ) && 
                (
                    this.Directions == input.Directions ||
                    this.Directions != null &&
                    input.Directions != null &&
                    this.Directions.SequenceEqual(input.Directions)
                ) && 
                (
                    this.Origins == input.Origins ||
                    this.Origins != null &&
                    input.Origins != null &&
                    this.Origins.SequenceEqual(input.Origins)
                ) && 
                (
                    this.CallResponses == input.CallResponses ||
                    this.CallResponses != null &&
                    input.CallResponses != null &&
                    this.CallResponses.SequenceEqual(input.CallResponses)
                ) && 
                (
                    this.CallResults == input.CallResults ||
                    this.CallResults != null &&
                    input.CallResults != null &&
                    this.CallResults.SequenceEqual(input.CallResults)
                ) && 
                (
                    this.CallSegments == input.CallSegments ||
                    this.CallSegments != null &&
                    input.CallSegments != null &&
                    this.CallSegments.SequenceEqual(input.CallSegments)
                ) && 
                (
                    this.CallActions == input.CallActions ||
                    this.CallActions != null &&
                    input.CallActions != null &&
                    this.CallActions.SequenceEqual(input.CallActions)
                ) && 
                (
                    this.CompanyHours == input.CompanyHours ||
                    this.CompanyHours != null &&
                    input.CompanyHours != null &&
                    this.CompanyHours.SequenceEqual(input.CompanyHours)
                ) && 
                (
                    this.CallDuration == input.CallDuration ||
                    (this.CallDuration != null &&
                    this.CallDuration.Equals(input.CallDuration))
                ) && 
                (
                    this.TimeSpent == input.TimeSpent ||
                    (this.TimeSpent != null &&
                    this.TimeSpent.Equals(input.TimeSpent))
                ) && 
                (
                    this.QueueSla == input.QueueSla ||
                    this.QueueSla != null &&
                    input.QueueSla != null &&
                    this.QueueSla.SequenceEqual(input.QueueSla)
                ) && 
                (
                    this.CallTypes == input.CallTypes ||
                    this.CallTypes != null &&
                    input.CallTypes != null &&
                    this.CallTypes.SequenceEqual(input.CallTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExtensionFilters != null)
                    hashCode = hashCode * 59 + this.ExtensionFilters.GetHashCode();
                if (this.Queues != null)
                    hashCode = hashCode * 59 + this.Queues.GetHashCode();
                if (this.CalledNumbers != null)
                    hashCode = hashCode * 59 + this.CalledNumbers.GetHashCode();
                if (this.Directions != null)
                    hashCode = hashCode * 59 + this.Directions.GetHashCode();
                if (this.Origins != null)
                    hashCode = hashCode * 59 + this.Origins.GetHashCode();
                if (this.CallResponses != null)
                    hashCode = hashCode * 59 + this.CallResponses.GetHashCode();
                if (this.CallResults != null)
                    hashCode = hashCode * 59 + this.CallResults.GetHashCode();
                if (this.CallSegments != null)
                    hashCode = hashCode * 59 + this.CallSegments.GetHashCode();
                if (this.CallActions != null)
                    hashCode = hashCode * 59 + this.CallActions.GetHashCode();
                if (this.CompanyHours != null)
                    hashCode = hashCode * 59 + this.CompanyHours.GetHashCode();
                if (this.CallDuration != null)
                    hashCode = hashCode * 59 + this.CallDuration.GetHashCode();
                if (this.TimeSpent != null)
                    hashCode = hashCode * 59 + this.TimeSpent.GetHashCode();
                if (this.QueueSla != null)
                    hashCode = hashCode * 59 + this.QueueSla.GetHashCode();
                if (this.CallTypes != null)
                    hashCode = hashCode * 59 + this.CallTypes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
