/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Information on a notification
    /// </summary>
    [DataContract]
    public partial class NotificationInfo :  IEquatable<NotificationInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationInfo" /> class.
        /// </summary>
        /// <param name="alert">alert.</param>
        /// <param name="badge">Number of incoming messages.</param>
        /// <param name="sound">Message sound.</param>
        /// <param name="contentAvailable">Content availability.</param>
        /// <param name="category">Category of a message.</param>
        public NotificationInfo(AlertInfo alert = default(AlertInfo), string badge = default(string), string sound = default(string), string contentAvailable = default(string), string category = default(string))
        {
            this.Alert = alert;
            this.Badge = badge;
            this.Sound = sound;
            this.ContentAvailable = contentAvailable;
            this.Category = category;
        }

        /// <summary>
        /// Gets or Sets Alert
        /// </summary>
        [DataMember(Name="alert", EmitDefaultValue=false)]
        public AlertInfo Alert { get; set; }

        /// <summary>
        /// Number of incoming messages
        /// </summary>
        /// <value>Number of incoming messages</value>
        [DataMember(Name="badge", EmitDefaultValue=false)]
        public string Badge { get; set; }

        /// <summary>
        /// Message sound
        /// </summary>
        /// <value>Message sound</value>
        [DataMember(Name="sound", EmitDefaultValue=false)]
        public string Sound { get; set; }

        /// <summary>
        /// Content availability
        /// </summary>
        /// <value>Content availability</value>
        [DataMember(Name="content-available", EmitDefaultValue=false)]
        public string ContentAvailable { get; set; }

        /// <summary>
        /// Category of a message
        /// </summary>
        /// <value>Category of a message</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NotificationInfo {\n");
            sb.Append("  Alert: ").Append(Alert).Append("\n");
            sb.Append("  Badge: ").Append(Badge).Append("\n");
            sb.Append("  Sound: ").Append(Sound).Append("\n");
            sb.Append("  ContentAvailable: ").Append(ContentAvailable).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NotificationInfo);
        }

        /// <summary>
        /// Returns true if NotificationInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of NotificationInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotificationInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Alert == input.Alert ||
                    (this.Alert != null &&
                    this.Alert.Equals(input.Alert))
                ) && 
                (
                    this.Badge == input.Badge ||
                    (this.Badge != null &&
                    this.Badge.Equals(input.Badge))
                ) && 
                (
                    this.Sound == input.Sound ||
                    (this.Sound != null &&
                    this.Sound.Equals(input.Sound))
                ) && 
                (
                    this.ContentAvailable == input.ContentAvailable ||
                    (this.ContentAvailable != null &&
                    this.ContentAvailable.Equals(input.ContentAvailable))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Alert != null)
                    hashCode = hashCode * 59 + this.Alert.GetHashCode();
                if (this.Badge != null)
                    hashCode = hashCode * 59 + this.Badge.GetHashCode();
                if (this.Sound != null)
                    hashCode = hashCode * 59 + this.Sound.GetHashCode();
                if (this.ContentAvailable != null)
                    hashCode = hashCode * 59 + this.ContentAvailable.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
