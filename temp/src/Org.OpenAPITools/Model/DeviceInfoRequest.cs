/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Device information
    /// </summary>
    [DataContract]
    public partial class DeviceInfoRequest :  IEquatable<DeviceInfoRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceInfoRequest" /> class.
        /// </summary>
        /// <param name="id">Device unique identifier, retrieved at previous session (if any).</param>
        /// <param name="appExternalId">Supported for iOS devices only. Certificate name (used by iOS applications for APNS subscription).</param>
        /// <param name="computerName">Supported for SoftPhone only. Computer name.</param>
        /// <param name="serial">Serial number for HardPhone; &#x60;endpoint_id&#x60; for softphone and mobile applications. Returned only when the phone is shipped and provisioned.</param>
        public DeviceInfoRequest(string id = default(string), string appExternalId = default(string), string computerName = default(string), string serial = default(string))
        {
            this.Id = id;
            this.AppExternalId = appExternalId;
            this.ComputerName = computerName;
            this.Serial = serial;
        }

        /// <summary>
        /// Device unique identifier, retrieved at previous session (if any)
        /// </summary>
        /// <value>Device unique identifier, retrieved at previous session (if any)</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Supported for iOS devices only. Certificate name (used by iOS applications for APNS subscription)
        /// </summary>
        /// <value>Supported for iOS devices only. Certificate name (used by iOS applications for APNS subscription)</value>
        [DataMember(Name="appExternalId", EmitDefaultValue=false)]
        public string AppExternalId { get; set; }

        /// <summary>
        /// Supported for SoftPhone only. Computer name
        /// </summary>
        /// <value>Supported for SoftPhone only. Computer name</value>
        [DataMember(Name="computerName", EmitDefaultValue=false)]
        public string ComputerName { get; set; }

        /// <summary>
        /// Serial number for HardPhone; &#x60;endpoint_id&#x60; for softphone and mobile applications. Returned only when the phone is shipped and provisioned
        /// </summary>
        /// <value>Serial number for HardPhone; &#x60;endpoint_id&#x60; for softphone and mobile applications. Returned only when the phone is shipped and provisioned</value>
        [DataMember(Name="serial", EmitDefaultValue=false)]
        public string Serial { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeviceInfoRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AppExternalId: ").Append(AppExternalId).Append("\n");
            sb.Append("  ComputerName: ").Append(ComputerName).Append("\n");
            sb.Append("  Serial: ").Append(Serial).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeviceInfoRequest);
        }

        /// <summary>
        /// Returns true if DeviceInfoRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of DeviceInfoRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceInfoRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AppExternalId == input.AppExternalId ||
                    (this.AppExternalId != null &&
                    this.AppExternalId.Equals(input.AppExternalId))
                ) && 
                (
                    this.ComputerName == input.ComputerName ||
                    (this.ComputerName != null &&
                    this.ComputerName.Equals(input.ComputerName))
                ) && 
                (
                    this.Serial == input.Serial ||
                    (this.Serial != null &&
                    this.Serial.Equals(input.Serial))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AppExternalId != null)
                    hashCode = hashCode * 59 + this.AppExternalId.GetHashCode();
                if (this.ComputerName != null)
                    hashCode = hashCode * 59 + this.ComputerName.GetHashCode();
                if (this.Serial != null)
                    hashCode = hashCode * 59 + this.Serial.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
