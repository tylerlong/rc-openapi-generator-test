/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TransferInfo
    /// </summary>
    [DataContract]
    public partial class TransferInfo :  IEquatable<TransferInfo>, IValidatableObject
    {
        /// <summary>
        /// Event that initiates transferring to the specified extension
        /// </summary>
        /// <value>Event that initiates transferring to the specified extension</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            /// <summary>
            /// Enum HoldTimeExpiration for value: HoldTimeExpiration
            /// </summary>
            [EnumMember(Value = "HoldTimeExpiration")]
            HoldTimeExpiration = 1,

            /// <summary>
            /// Enum MaxCallers for value: MaxCallers
            /// </summary>
            [EnumMember(Value = "MaxCallers")]
            MaxCallers = 2,

            /// <summary>
            /// Enum NoAnswer for value: NoAnswer
            /// </summary>
            [EnumMember(Value = "NoAnswer")]
            NoAnswer = 3

        }

        /// <summary>
        /// Event that initiates transferring to the specified extension
        /// </summary>
        /// <value>Event that initiates transferring to the specified extension</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferInfo" /> class.
        /// </summary>
        /// <param name="extension">extension.</param>
        /// <param name="action">Event that initiates transferring to the specified extension.</param>
        public TransferInfo(TransferExtensionInfo extension = default(TransferExtensionInfo), ActionEnum? action = default(ActionEnum?))
        {
            this.Extension = extension;
            this.Action = action;
        }

        /// <summary>
        /// Gets or Sets Extension
        /// </summary>
        [DataMember(Name="extension", EmitDefaultValue=false)]
        public TransferExtensionInfo Extension { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransferInfo {\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransferInfo);
        }

        /// <summary>
        /// Returns true if TransferInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of TransferInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransferInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Extension == input.Extension ||
                    (this.Extension != null &&
                    this.Extension.Equals(input.Extension))
                ) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Extension != null)
                    hashCode = hashCode * 59 + this.Extension.GetHashCode();
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
