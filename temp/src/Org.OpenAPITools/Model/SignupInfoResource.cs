/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Account sign up data
    /// </summary>
    [DataContract]
    public partial class SignupInfoResource :  IEquatable<SignupInfoResource>, IValidatableObject
    {
        /// <summary>
        /// Defines SignupState
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SignupStateEnum
        {
            /// <summary>
            /// Enum AccountCreated for value: AccountCreated
            /// </summary>
            [EnumMember(Value = "AccountCreated")]
            AccountCreated = 1,

            /// <summary>
            /// Enum BillingEntered for value: BillingEntered
            /// </summary>
            [EnumMember(Value = "BillingEntered")]
            BillingEntered = 2,

            /// <summary>
            /// Enum CreditCardApproved for value: CreditCardApproved
            /// </summary>
            [EnumMember(Value = "CreditCardApproved")]
            CreditCardApproved = 3,

            /// <summary>
            /// Enum AccountConfirmed for value: AccountConfirmed
            /// </summary>
            [EnumMember(Value = "AccountConfirmed")]
            AccountConfirmed = 4,

            /// <summary>
            /// Enum PhoneVerificationRequired for value: PhoneVerificationRequired
            /// </summary>
            [EnumMember(Value = "PhoneVerificationRequired")]
            PhoneVerificationRequired = 5,

            /// <summary>
            /// Enum PhoneVerificationPassed for value: PhoneVerificationPassed
            /// </summary>
            [EnumMember(Value = "PhoneVerificationPassed")]
            PhoneVerificationPassed = 6

        }


        /// <summary>
        /// Gets or Sets SignupState
        /// </summary>
        [DataMember(Name="signupState", EmitDefaultValue=false)]
        public List<SignupStateEnum> SignupState { get; set; }
        /// <summary>
        /// Defines VerificationReason
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VerificationReasonEnum
        {
            /// <summary>
            /// Enum CCFailed for value: CC_Failed
            /// </summary>
            [EnumMember(Value = "CC_Failed")]
            CCFailed = 1,

            /// <summary>
            /// Enum PhoneSuspicious for value: Phone_Suspicious
            /// </summary>
            [EnumMember(Value = "Phone_Suspicious")]
            PhoneSuspicious = 2,

            /// <summary>
            /// Enum CCPhoneNotMatch for value: CC_Phone_Not_Match
            /// </summary>
            [EnumMember(Value = "CC_Phone_Not_Match")]
            CCPhoneNotMatch = 3,

            /// <summary>
            /// Enum AVSNotAvailable for value: AVS_Not_Available
            /// </summary>
            [EnumMember(Value = "AVS_Not_Available")]
            AVSNotAvailable = 4,

            /// <summary>
            /// Enum MaxMind for value: MaxMind
            /// </summary>
            [EnumMember(Value = "MaxMind")]
            MaxMind = 5,

            /// <summary>
            /// Enum CCBlacklisted for value: CC_Blacklisted
            /// </summary>
            [EnumMember(Value = "CC_Blacklisted")]
            CCBlacklisted = 6,

            /// <summary>
            /// Enum EmailBlacklisted for value: Email_Blacklisted
            /// </summary>
            [EnumMember(Value = "Email_Blacklisted")]
            EmailBlacklisted = 7,

            /// <summary>
            /// Enum PhoneBlacklisted for value: Phone_Blacklisted
            /// </summary>
            [EnumMember(Value = "Phone_Blacklisted")]
            PhoneBlacklisted = 8,

            /// <summary>
            /// Enum CookieBlacklisted for value: Cookie_Blacklisted
            /// </summary>
            [EnumMember(Value = "Cookie_Blacklisted")]
            CookieBlacklisted = 9,

            /// <summary>
            /// Enum DeviceBlacklisted for value: Device_Blacklisted
            /// </summary>
            [EnumMember(Value = "Device_Blacklisted")]
            DeviceBlacklisted = 10,

            /// <summary>
            /// Enum IPBlacklisted for value: IP_Blacklisted
            /// </summary>
            [EnumMember(Value = "IP_Blacklisted")]
            IPBlacklisted = 11,

            /// <summary>
            /// Enum AgentInstanceBlacklisted for value: Agent_Instance_Blacklisted
            /// </summary>
            [EnumMember(Value = "Agent_Instance_Blacklisted")]
            AgentInstanceBlacklisted = 12,

            /// <summary>
            /// Enum ChargeLimit for value: Charge_Limit
            /// </summary>
            [EnumMember(Value = "Charge_Limit")]
            ChargeLimit = 13,

            /// <summary>
            /// Enum OtherCountry for value: Other_Country
            /// </summary>
            [EnumMember(Value = "Other_Country")]
            OtherCountry = 14,

            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 15

        }

        /// <summary>
        /// Gets or Sets VerificationReason
        /// </summary>
        [DataMember(Name="verificationReason", EmitDefaultValue=false)]
        public VerificationReasonEnum? VerificationReason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SignupInfoResource" /> class.
        /// </summary>
        /// <param name="tosAccepted">tosAccepted (default to false).</param>
        /// <param name="signupState">signupState.</param>
        /// <param name="verificationReason">verificationReason.</param>
        /// <param name="marketingAccepted">Updates &#39;Send Marketing Information&#39; flag on web interface.</param>
        public SignupInfoResource(bool tosAccepted = false, List<SignupStateEnum> signupState = default(List<SignupStateEnum>), VerificationReasonEnum? verificationReason = default(VerificationReasonEnum?), bool marketingAccepted = default(bool))
        {
            // use default value if no "tosAccepted" provided
            if (tosAccepted == null)
            {
                this.TosAccepted = false;
            }
            else
            {
                this.TosAccepted = tosAccepted;
            }
            this.SignupState = signupState;
            this.VerificationReason = verificationReason;
            this.MarketingAccepted = marketingAccepted;
        }

        /// <summary>
        /// Gets or Sets TosAccepted
        /// </summary>
        [DataMember(Name="tosAccepted", EmitDefaultValue=false)]
        public bool TosAccepted { get; set; }



        /// <summary>
        /// Updates &#39;Send Marketing Information&#39; flag on web interface
        /// </summary>
        /// <value>Updates &#39;Send Marketing Information&#39; flag on web interface</value>
        [DataMember(Name="marketingAccepted", EmitDefaultValue=false)]
        public bool MarketingAccepted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SignupInfoResource {\n");
            sb.Append("  TosAccepted: ").Append(TosAccepted).Append("\n");
            sb.Append("  SignupState: ").Append(SignupState).Append("\n");
            sb.Append("  VerificationReason: ").Append(VerificationReason).Append("\n");
            sb.Append("  MarketingAccepted: ").Append(MarketingAccepted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SignupInfoResource);
        }

        /// <summary>
        /// Returns true if SignupInfoResource instances are equal
        /// </summary>
        /// <param name="input">Instance of SignupInfoResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SignupInfoResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TosAccepted == input.TosAccepted ||
                    (this.TosAccepted != null &&
                    this.TosAccepted.Equals(input.TosAccepted))
                ) && 
                (
                    this.SignupState == input.SignupState ||
                    this.SignupState != null &&
                    input.SignupState != null &&
                    this.SignupState.SequenceEqual(input.SignupState)
                ) && 
                (
                    this.VerificationReason == input.VerificationReason ||
                    (this.VerificationReason != null &&
                    this.VerificationReason.Equals(input.VerificationReason))
                ) && 
                (
                    this.MarketingAccepted == input.MarketingAccepted ||
                    (this.MarketingAccepted != null &&
                    this.MarketingAccepted.Equals(input.MarketingAccepted))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TosAccepted != null)
                    hashCode = hashCode * 59 + this.TosAccepted.GetHashCode();
                if (this.SignupState != null)
                    hashCode = hashCode * 59 + this.SignupState.GetHashCode();
                if (this.VerificationReason != null)
                    hashCode = hashCode * 59 + this.VerificationReason.GetHashCode();
                if (this.MarketingAccepted != null)
                    hashCode = hashCode * 59 + this.MarketingAccepted.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
