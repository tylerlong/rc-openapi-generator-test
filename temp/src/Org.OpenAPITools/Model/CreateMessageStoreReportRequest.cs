/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CreateMessageStoreReportRequest
    /// </summary>
    [DataContract]
    public partial class CreateMessageStoreReportRequest :  IEquatable<CreateMessageStoreReportRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateMessageStoreReportRequest" /> class.
        /// </summary>
        /// <param name="dateTo">The end of the time range to collect message records in ISO 8601 format including timezone. Default is the current time .</param>
        /// <param name="dateFrom">The beginning of the time range to collect call log records in ISO 8601 format including timezone. Default is the current time minus 24 hours .</param>
        /// <param name="messageTypes">Types of messages to be collected. If not specified, all messages without message type filtering will be returned. Multiple values are accepted.</param>
        public CreateMessageStoreReportRequest(DateTime dateTo = default(DateTime), DateTime dateFrom = default(DateTime), List<MessageTypeEnum> messageTypes = default(List<MessageTypeEnum>))
        {
            this.DateTo = dateTo;
            this.DateFrom = dateFrom;
            this.MessageTypes = messageTypes;
        }

        /// <summary>
        /// The end of the time range to collect message records in ISO 8601 format including timezone. Default is the current time 
        /// </summary>
        /// <value>The end of the time range to collect message records in ISO 8601 format including timezone. Default is the current time </value>
        [DataMember(Name="dateTo", EmitDefaultValue=false)]
        public DateTime DateTo { get; set; }

        /// <summary>
        /// The beginning of the time range to collect call log records in ISO 8601 format including timezone. Default is the current time minus 24 hours 
        /// </summary>
        /// <value>The beginning of the time range to collect call log records in ISO 8601 format including timezone. Default is the current time minus 24 hours </value>
        [DataMember(Name="dateFrom", EmitDefaultValue=false)]
        public DateTime DateFrom { get; set; }

        /// <summary>
        /// Types of messages to be collected. If not specified, all messages without message type filtering will be returned. Multiple values are accepted
        /// </summary>
        /// <value>Types of messages to be collected. If not specified, all messages without message type filtering will be returned. Multiple values are accepted</value>
        [DataMember(Name="messageTypes", EmitDefaultValue=false)]
        public List<MessageTypeEnum> MessageTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateMessageStoreReportRequest {\n");
            sb.Append("  DateTo: ").Append(DateTo).Append("\n");
            sb.Append("  DateFrom: ").Append(DateFrom).Append("\n");
            sb.Append("  MessageTypes: ").Append(MessageTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateMessageStoreReportRequest);
        }

        /// <summary>
        /// Returns true if CreateMessageStoreReportRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateMessageStoreReportRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateMessageStoreReportRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DateTo == input.DateTo ||
                    (this.DateTo != null &&
                    this.DateTo.Equals(input.DateTo))
                ) && 
                (
                    this.DateFrom == input.DateFrom ||
                    (this.DateFrom != null &&
                    this.DateFrom.Equals(input.DateFrom))
                ) && 
                (
                    this.MessageTypes == input.MessageTypes ||
                    this.MessageTypes != null &&
                    input.MessageTypes != null &&
                    this.MessageTypes.SequenceEqual(input.MessageTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DateTo != null)
                    hashCode = hashCode * 59 + this.DateTo.GetHashCode();
                if (this.DateFrom != null)
                    hashCode = hashCode * 59 + this.DateFrom.GetHashCode();
                if (this.MessageTypes != null)
                    hashCode = hashCode * 59 + this.MessageTypes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
