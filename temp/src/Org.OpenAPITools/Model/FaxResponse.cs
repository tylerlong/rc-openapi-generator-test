/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// FaxResponse
    /// </summary>
    [DataContract]
    public partial class FaxResponse :  IEquatable<FaxResponse>, IValidatableObject
    {
        /// <summary>
        /// Message read status
        /// </summary>
        /// <value>Message read status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReadStatusEnum
        {
            /// <summary>
            /// Enum Read for value: Read
            /// </summary>
            [EnumMember(Value = "Read")]
            Read = 1,

            /// <summary>
            /// Enum Unread for value: Unread
            /// </summary>
            [EnumMember(Value = "Unread")]
            Unread = 2

        }

        /// <summary>
        /// Message read status
        /// </summary>
        /// <value>Message read status</value>
        [DataMember(Name="readStatus", EmitDefaultValue=false)]
        public ReadStatusEnum? ReadStatus { get; set; }
        /// <summary>
        /// Message priority
        /// </summary>
        /// <value>Message priority</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PriorityEnum
        {
            /// <summary>
            /// Enum Normal for value: Normal
            /// </summary>
            [EnumMember(Value = "Normal")]
            Normal = 1,

            /// <summary>
            /// Enum High for value: High
            /// </summary>
            [EnumMember(Value = "High")]
            High = 2

        }

        /// <summary>
        /// Message priority
        /// </summary>
        /// <value>Message priority</value>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public PriorityEnum? Priority { get; set; }
        /// <summary>
        /// Message direction
        /// </summary>
        /// <value>Message direction</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DirectionEnum
        {
            /// <summary>
            /// Enum Inbound for value: Inbound
            /// </summary>
            [EnumMember(Value = "Inbound")]
            Inbound = 1,

            /// <summary>
            /// Enum Outbound for value: Outbound
            /// </summary>
            [EnumMember(Value = "Outbound")]
            Outbound = 2

        }

        /// <summary>
        /// Message direction
        /// </summary>
        /// <value>Message direction</value>
        [DataMember(Name="direction", EmitDefaultValue=false)]
        public DirectionEnum? Direction { get; set; }
        /// <summary>
        /// Message availability status. Message in &#39;Deleted&#39; state is still preserved with all its attachments and can be restored. &#39;Purged&#39; means that all attachments are already deleted and the message itself is about to be physically deleted shortly
        /// </summary>
        /// <value>Message availability status. Message in &#39;Deleted&#39; state is still preserved with all its attachments and can be restored. &#39;Purged&#39; means that all attachments are already deleted and the message itself is about to be physically deleted shortly</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AvailabilityEnum
        {
            /// <summary>
            /// Enum Alive for value: Alive
            /// </summary>
            [EnumMember(Value = "Alive")]
            Alive = 1,

            /// <summary>
            /// Enum Deleted for value: Deleted
            /// </summary>
            [EnumMember(Value = "Deleted")]
            Deleted = 2,

            /// <summary>
            /// Enum Purged for value: Purged
            /// </summary>
            [EnumMember(Value = "Purged")]
            Purged = 3

        }

        /// <summary>
        /// Message availability status. Message in &#39;Deleted&#39; state is still preserved with all its attachments and can be restored. &#39;Purged&#39; means that all attachments are already deleted and the message itself is about to be physically deleted shortly
        /// </summary>
        /// <value>Message availability status. Message in &#39;Deleted&#39; state is still preserved with all its attachments and can be restored. &#39;Purged&#39; means that all attachments are already deleted and the message itself is about to be physically deleted shortly</value>
        [DataMember(Name="availability", EmitDefaultValue=false)]
        public AvailabilityEnum? Availability { get; set; }
        /// <summary>
        /// Message status. &#39;Queued&#39; - the message is queued for sending; &#39;Sent&#39; - a message is successfully sent; &#39;SendingFailed&#39; - a message sending attempt has failed; &#39;Received&#39; - a message is received (inbound messages have this status by default)
        /// </summary>
        /// <value>Message status. &#39;Queued&#39; - the message is queued for sending; &#39;Sent&#39; - a message is successfully sent; &#39;SendingFailed&#39; - a message sending attempt has failed; &#39;Received&#39; - a message is received (inbound messages have this status by default)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MessageStatusEnum
        {
            /// <summary>
            /// Enum Queued for value: Queued
            /// </summary>
            [EnumMember(Value = "Queued")]
            Queued = 1,

            /// <summary>
            /// Enum Sent for value: Sent
            /// </summary>
            [EnumMember(Value = "Sent")]
            Sent = 2,

            /// <summary>
            /// Enum SendingFailed for value: SendingFailed
            /// </summary>
            [EnumMember(Value = "SendingFailed")]
            SendingFailed = 3,

            /// <summary>
            /// Enum Received for value: Received
            /// </summary>
            [EnumMember(Value = "Received")]
            Received = 4

        }

        /// <summary>
        /// Message status. &#39;Queued&#39; - the message is queued for sending; &#39;Sent&#39; - a message is successfully sent; &#39;SendingFailed&#39; - a message sending attempt has failed; &#39;Received&#39; - a message is received (inbound messages have this status by default)
        /// </summary>
        /// <value>Message status. &#39;Queued&#39; - the message is queued for sending; &#39;Sent&#39; - a message is successfully sent; &#39;SendingFailed&#39; - a message sending attempt has failed; &#39;Received&#39; - a message is received (inbound messages have this status by default)</value>
        [DataMember(Name="messageStatus", EmitDefaultValue=false)]
        public MessageStatusEnum? MessageStatus { get; set; }
        /// <summary>
        /// Resolution of a fax message. (&#39;High&#39; for black and white image scanned at 200 dpi, &#39;Low&#39; for black and white image scanned at 100 dpi)
        /// </summary>
        /// <value>Resolution of a fax message. (&#39;High&#39; for black and white image scanned at 200 dpi, &#39;Low&#39; for black and white image scanned at 100 dpi)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FaxResolutionEnum
        {
            /// <summary>
            /// Enum High for value: High
            /// </summary>
            [EnumMember(Value = "High")]
            High = 1,

            /// <summary>
            /// Enum Low for value: Low
            /// </summary>
            [EnumMember(Value = "Low")]
            Low = 2

        }

        /// <summary>
        /// Resolution of a fax message. (&#39;High&#39; for black and white image scanned at 200 dpi, &#39;Low&#39; for black and white image scanned at 100 dpi)
        /// </summary>
        /// <value>Resolution of a fax message. (&#39;High&#39; for black and white image scanned at 200 dpi, &#39;Low&#39; for black and white image scanned at 100 dpi)</value>
        [DataMember(Name="faxResolution", EmitDefaultValue=false)]
        public FaxResolutionEnum? FaxResolution { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FaxResponse" /> class.
        /// </summary>
        /// <param name="id">Internal identifier of a message.</param>
        /// <param name="uri">Canonical URI of a message.</param>
        /// <param name="type">Message type - &#39;Fax&#39;.</param>
        /// <param name="from">from.</param>
        /// <param name="to">Recipient information.</param>
        /// <param name="creationTime">Message creation datetime in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z.</param>
        /// <param name="readStatus">Message read status.</param>
        /// <param name="priority">Message priority.</param>
        /// <param name="attachments">The list of message attachments.</param>
        /// <param name="direction">Message direction.</param>
        /// <param name="availability">Message availability status. Message in &#39;Deleted&#39; state is still preserved with all its attachments and can be restored. &#39;Purged&#39; means that all attachments are already deleted and the message itself is about to be physically deleted shortly.</param>
        /// <param name="messageStatus">Message status. &#39;Queued&#39; - the message is queued for sending; &#39;Sent&#39; - a message is successfully sent; &#39;SendingFailed&#39; - a message sending attempt has failed; &#39;Received&#39; - a message is received (inbound messages have this status by default).</param>
        /// <param name="faxResolution">Resolution of a fax message. (&#39;High&#39; for black and white image scanned at 200 dpi, &#39;Low&#39; for black and white image scanned at 100 dpi).</param>
        /// <param name="faxPageCount">Page count in a fax message.</param>
        /// <param name="lastModifiedTime">Datetime when the message was modified on server in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z.</param>
        /// <param name="coverIndex">Cover page identifier. If coverIndex is set to &#39;0&#39; (zero) cover page is not attached. For the list of available cover page identifiers (1-13) please call the Fax Cover Pages method. If not specified, the default cover page is attached (which is configured in &#39;Outbound Fax Settings&#39;).</param>
        /// <param name="coverPageText">Cover page text, entered by the fax sender and printed on the cover page. Maximum length is limited to 1024 symbols.</param>
        public FaxResponse(long id = default(long), string uri = default(string), string type = default(string), CallerInfoFrom from = default(CallerInfoFrom), List<CallerInfoTo> to = default(List<CallerInfoTo>), DateTime creationTime = default(DateTime), ReadStatusEnum? readStatus = default(ReadStatusEnum?), PriorityEnum? priority = default(PriorityEnum?), List<MessageAttachmentInfoIntId> attachments = default(List<MessageAttachmentInfoIntId>), DirectionEnum? direction = default(DirectionEnum?), AvailabilityEnum? availability = default(AvailabilityEnum?), MessageStatusEnum? messageStatus = default(MessageStatusEnum?), FaxResolutionEnum? faxResolution = default(FaxResolutionEnum?), int faxPageCount = default(int), DateTime lastModifiedTime = default(DateTime), int coverIndex = default(int), string coverPageText = default(string))
        {
            this.Id = id;
            this.Uri = uri;
            this.Type = type;
            this.From = from;
            this.To = to;
            this.CreationTime = creationTime;
            this.ReadStatus = readStatus;
            this.Priority = priority;
            this.Attachments = attachments;
            this.Direction = direction;
            this.Availability = availability;
            this.MessageStatus = messageStatus;
            this.FaxResolution = faxResolution;
            this.FaxPageCount = faxPageCount;
            this.LastModifiedTime = lastModifiedTime;
            this.CoverIndex = coverIndex;
            this.CoverPageText = coverPageText;
        }

        /// <summary>
        /// Internal identifier of a message
        /// </summary>
        /// <value>Internal identifier of a message</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long Id { get; set; }

        /// <summary>
        /// Canonical URI of a message
        /// </summary>
        /// <value>Canonical URI of a message</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Message type - &#39;Fax&#39;
        /// </summary>
        /// <value>Message type - &#39;Fax&#39;</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public CallerInfoFrom From { get; set; }

        /// <summary>
        /// Recipient information
        /// </summary>
        /// <value>Recipient information</value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public List<CallerInfoTo> To { get; set; }

        /// <summary>
        /// Message creation datetime in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z
        /// </summary>
        /// <value>Message creation datetime in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z</value>
        [DataMember(Name="creationTime", EmitDefaultValue=false)]
        public DateTime CreationTime { get; set; }



        /// <summary>
        /// The list of message attachments
        /// </summary>
        /// <value>The list of message attachments</value>
        [DataMember(Name="attachments", EmitDefaultValue=false)]
        public List<MessageAttachmentInfoIntId> Attachments { get; set; }





        /// <summary>
        /// Page count in a fax message
        /// </summary>
        /// <value>Page count in a fax message</value>
        [DataMember(Name="faxPageCount", EmitDefaultValue=false)]
        public int FaxPageCount { get; set; }

        /// <summary>
        /// Datetime when the message was modified on server in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z
        /// </summary>
        /// <value>Datetime when the message was modified on server in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z</value>
        [DataMember(Name="lastModifiedTime", EmitDefaultValue=false)]
        public DateTime LastModifiedTime { get; set; }

        /// <summary>
        /// Cover page identifier. If coverIndex is set to &#39;0&#39; (zero) cover page is not attached. For the list of available cover page identifiers (1-13) please call the Fax Cover Pages method. If not specified, the default cover page is attached (which is configured in &#39;Outbound Fax Settings&#39;)
        /// </summary>
        /// <value>Cover page identifier. If coverIndex is set to &#39;0&#39; (zero) cover page is not attached. For the list of available cover page identifiers (1-13) please call the Fax Cover Pages method. If not specified, the default cover page is attached (which is configured in &#39;Outbound Fax Settings&#39;)</value>
        [DataMember(Name="coverIndex", EmitDefaultValue=false)]
        public int CoverIndex { get; set; }

        /// <summary>
        /// Cover page text, entered by the fax sender and printed on the cover page. Maximum length is limited to 1024 symbols
        /// </summary>
        /// <value>Cover page text, entered by the fax sender and printed on the cover page. Maximum length is limited to 1024 symbols</value>
        [DataMember(Name="coverPageText", EmitDefaultValue=false)]
        public string CoverPageText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FaxResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  CreationTime: ").Append(CreationTime).Append("\n");
            sb.Append("  ReadStatus: ").Append(ReadStatus).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  Availability: ").Append(Availability).Append("\n");
            sb.Append("  MessageStatus: ").Append(MessageStatus).Append("\n");
            sb.Append("  FaxResolution: ").Append(FaxResolution).Append("\n");
            sb.Append("  FaxPageCount: ").Append(FaxPageCount).Append("\n");
            sb.Append("  LastModifiedTime: ").Append(LastModifiedTime).Append("\n");
            sb.Append("  CoverIndex: ").Append(CoverIndex).Append("\n");
            sb.Append("  CoverPageText: ").Append(CoverPageText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FaxResponse);
        }

        /// <summary>
        /// Returns true if FaxResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of FaxResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FaxResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    this.To != null &&
                    input.To != null &&
                    this.To.SequenceEqual(input.To)
                ) && 
                (
                    this.CreationTime == input.CreationTime ||
                    (this.CreationTime != null &&
                    this.CreationTime.Equals(input.CreationTime))
                ) && 
                (
                    this.ReadStatus == input.ReadStatus ||
                    (this.ReadStatus != null &&
                    this.ReadStatus.Equals(input.ReadStatus))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.Attachments == input.Attachments ||
                    this.Attachments != null &&
                    input.Attachments != null &&
                    this.Attachments.SequenceEqual(input.Attachments)
                ) && 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                ) && 
                (
                    this.Availability == input.Availability ||
                    (this.Availability != null &&
                    this.Availability.Equals(input.Availability))
                ) && 
                (
                    this.MessageStatus == input.MessageStatus ||
                    (this.MessageStatus != null &&
                    this.MessageStatus.Equals(input.MessageStatus))
                ) && 
                (
                    this.FaxResolution == input.FaxResolution ||
                    (this.FaxResolution != null &&
                    this.FaxResolution.Equals(input.FaxResolution))
                ) && 
                (
                    this.FaxPageCount == input.FaxPageCount ||
                    (this.FaxPageCount != null &&
                    this.FaxPageCount.Equals(input.FaxPageCount))
                ) && 
                (
                    this.LastModifiedTime == input.LastModifiedTime ||
                    (this.LastModifiedTime != null &&
                    this.LastModifiedTime.Equals(input.LastModifiedTime))
                ) && 
                (
                    this.CoverIndex == input.CoverIndex ||
                    (this.CoverIndex != null &&
                    this.CoverIndex.Equals(input.CoverIndex))
                ) && 
                (
                    this.CoverPageText == input.CoverPageText ||
                    (this.CoverPageText != null &&
                    this.CoverPageText.Equals(input.CoverPageText))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.CreationTime != null)
                    hashCode = hashCode * 59 + this.CreationTime.GetHashCode();
                if (this.ReadStatus != null)
                    hashCode = hashCode * 59 + this.ReadStatus.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.Attachments != null)
                    hashCode = hashCode * 59 + this.Attachments.GetHashCode();
                if (this.Direction != null)
                    hashCode = hashCode * 59 + this.Direction.GetHashCode();
                if (this.Availability != null)
                    hashCode = hashCode * 59 + this.Availability.GetHashCode();
                if (this.MessageStatus != null)
                    hashCode = hashCode * 59 + this.MessageStatus.GetHashCode();
                if (this.FaxResolution != null)
                    hashCode = hashCode * 59 + this.FaxResolution.GetHashCode();
                if (this.FaxPageCount != null)
                    hashCode = hashCode * 59 + this.FaxPageCount.GetHashCode();
                if (this.LastModifiedTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedTime.GetHashCode();
                if (this.CoverIndex != null)
                    hashCode = hashCode * 59 + this.CoverIndex.GetHashCode();
                if (this.CoverPageText != null)
                    hashCode = hashCode * 59 + this.CoverPageText.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
