/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Options for selecting breakdown for calls count
    /// </summary>
    [DataContract]
    public partial class TimelineResponseOptionsCounters :  IEquatable<TimelineResponseOptionsCounters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimelineResponseOptionsCounters" /> class.
        /// </summary>
        /// <param name="allCalls">Include data for total calls count.</param>
        /// <param name="callsByDirection">Include breakdown of calls count by direction (Inbound, Outbound).</param>
        /// <param name="callsByOrigin">Include breakdown of calls count by origin (Internal, External).</param>
        /// <param name="callsByResponse">Include breakdown of calls count by response (Answered, NotAnswered, Connected, NotConnected).</param>
        /// <param name="callsSegments">Include breakdown of calls count by segments (Ringing, LiveTalk, Hold, Park, Transfer, IvrPrompt, Voicemail, VmGreeting, Setup).</param>
        /// <param name="callsByResult">Include breakdown of calls count by result (Completed, Abandoned, Voicemail, Unknown, Missed, Accepted).</param>
        /// <param name="callsByCompanyHours">Include breakdown of calls count by company hours (BusinessHours, AfterHours).</param>
        /// <param name="callsByQueueSla">Include breakdown of calls count by queue SLA (InSLA, OutSLA). This counter is only applicable to Queues grouping.</param>
        /// <param name="callsByActions">Include breakdown of calls count by action (HoldOff, HoldOn, ParkOn, ParkOff, BlindTransfer, WarmTransfer, DTMFTransfer).</param>
        /// <param name="callsByType">Include breakdown of calls count by type (Direct, FromQueue, ParkRetrieval, Transferred, Outbound).</param>
        public TimelineResponseOptionsCounters(bool allCalls = default(bool), bool callsByDirection = default(bool), bool callsByOrigin = default(bool), bool callsByResponse = default(bool), bool callsSegments = default(bool), bool callsByResult = default(bool), bool callsByCompanyHours = default(bool), bool callsByQueueSla = default(bool), bool callsByActions = default(bool), bool callsByType = default(bool))
        {
            this.AllCalls = allCalls;
            this.CallsByDirection = callsByDirection;
            this.CallsByOrigin = callsByOrigin;
            this.CallsByResponse = callsByResponse;
            this.CallsSegments = callsSegments;
            this.CallsByResult = callsByResult;
            this.CallsByCompanyHours = callsByCompanyHours;
            this.CallsByQueueSla = callsByQueueSla;
            this.CallsByActions = callsByActions;
            this.CallsByType = callsByType;
        }

        /// <summary>
        /// Include data for total calls count
        /// </summary>
        /// <value>Include data for total calls count</value>
        [DataMember(Name="allCalls", EmitDefaultValue=false)]
        public bool AllCalls { get; set; }

        /// <summary>
        /// Include breakdown of calls count by direction (Inbound, Outbound)
        /// </summary>
        /// <value>Include breakdown of calls count by direction (Inbound, Outbound)</value>
        [DataMember(Name="callsByDirection", EmitDefaultValue=false)]
        public bool CallsByDirection { get; set; }

        /// <summary>
        /// Include breakdown of calls count by origin (Internal, External)
        /// </summary>
        /// <value>Include breakdown of calls count by origin (Internal, External)</value>
        [DataMember(Name="callsByOrigin", EmitDefaultValue=false)]
        public bool CallsByOrigin { get; set; }

        /// <summary>
        /// Include breakdown of calls count by response (Answered, NotAnswered, Connected, NotConnected)
        /// </summary>
        /// <value>Include breakdown of calls count by response (Answered, NotAnswered, Connected, NotConnected)</value>
        [DataMember(Name="callsByResponse", EmitDefaultValue=false)]
        public bool CallsByResponse { get; set; }

        /// <summary>
        /// Include breakdown of calls count by segments (Ringing, LiveTalk, Hold, Park, Transfer, IvrPrompt, Voicemail, VmGreeting, Setup)
        /// </summary>
        /// <value>Include breakdown of calls count by segments (Ringing, LiveTalk, Hold, Park, Transfer, IvrPrompt, Voicemail, VmGreeting, Setup)</value>
        [DataMember(Name="callsSegments", EmitDefaultValue=false)]
        public bool CallsSegments { get; set; }

        /// <summary>
        /// Include breakdown of calls count by result (Completed, Abandoned, Voicemail, Unknown, Missed, Accepted)
        /// </summary>
        /// <value>Include breakdown of calls count by result (Completed, Abandoned, Voicemail, Unknown, Missed, Accepted)</value>
        [DataMember(Name="callsByResult", EmitDefaultValue=false)]
        public bool CallsByResult { get; set; }

        /// <summary>
        /// Include breakdown of calls count by company hours (BusinessHours, AfterHours)
        /// </summary>
        /// <value>Include breakdown of calls count by company hours (BusinessHours, AfterHours)</value>
        [DataMember(Name="callsByCompanyHours", EmitDefaultValue=false)]
        public bool CallsByCompanyHours { get; set; }

        /// <summary>
        /// Include breakdown of calls count by queue SLA (InSLA, OutSLA). This counter is only applicable to Queues grouping
        /// </summary>
        /// <value>Include breakdown of calls count by queue SLA (InSLA, OutSLA). This counter is only applicable to Queues grouping</value>
        [DataMember(Name="callsByQueueSla", EmitDefaultValue=false)]
        public bool CallsByQueueSla { get; set; }

        /// <summary>
        /// Include breakdown of calls count by action (HoldOff, HoldOn, ParkOn, ParkOff, BlindTransfer, WarmTransfer, DTMFTransfer)
        /// </summary>
        /// <value>Include breakdown of calls count by action (HoldOff, HoldOn, ParkOn, ParkOff, BlindTransfer, WarmTransfer, DTMFTransfer)</value>
        [DataMember(Name="callsByActions", EmitDefaultValue=false)]
        public bool CallsByActions { get; set; }

        /// <summary>
        /// Include breakdown of calls count by type (Direct, FromQueue, ParkRetrieval, Transferred, Outbound)
        /// </summary>
        /// <value>Include breakdown of calls count by type (Direct, FromQueue, ParkRetrieval, Transferred, Outbound)</value>
        [DataMember(Name="callsByType", EmitDefaultValue=false)]
        public bool CallsByType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TimelineResponseOptionsCounters {\n");
            sb.Append("  AllCalls: ").Append(AllCalls).Append("\n");
            sb.Append("  CallsByDirection: ").Append(CallsByDirection).Append("\n");
            sb.Append("  CallsByOrigin: ").Append(CallsByOrigin).Append("\n");
            sb.Append("  CallsByResponse: ").Append(CallsByResponse).Append("\n");
            sb.Append("  CallsSegments: ").Append(CallsSegments).Append("\n");
            sb.Append("  CallsByResult: ").Append(CallsByResult).Append("\n");
            sb.Append("  CallsByCompanyHours: ").Append(CallsByCompanyHours).Append("\n");
            sb.Append("  CallsByQueueSla: ").Append(CallsByQueueSla).Append("\n");
            sb.Append("  CallsByActions: ").Append(CallsByActions).Append("\n");
            sb.Append("  CallsByType: ").Append(CallsByType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimelineResponseOptionsCounters);
        }

        /// <summary>
        /// Returns true if TimelineResponseOptionsCounters instances are equal
        /// </summary>
        /// <param name="input">Instance of TimelineResponseOptionsCounters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimelineResponseOptionsCounters input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllCalls == input.AllCalls ||
                    (this.AllCalls != null &&
                    this.AllCalls.Equals(input.AllCalls))
                ) && 
                (
                    this.CallsByDirection == input.CallsByDirection ||
                    (this.CallsByDirection != null &&
                    this.CallsByDirection.Equals(input.CallsByDirection))
                ) && 
                (
                    this.CallsByOrigin == input.CallsByOrigin ||
                    (this.CallsByOrigin != null &&
                    this.CallsByOrigin.Equals(input.CallsByOrigin))
                ) && 
                (
                    this.CallsByResponse == input.CallsByResponse ||
                    (this.CallsByResponse != null &&
                    this.CallsByResponse.Equals(input.CallsByResponse))
                ) && 
                (
                    this.CallsSegments == input.CallsSegments ||
                    (this.CallsSegments != null &&
                    this.CallsSegments.Equals(input.CallsSegments))
                ) && 
                (
                    this.CallsByResult == input.CallsByResult ||
                    (this.CallsByResult != null &&
                    this.CallsByResult.Equals(input.CallsByResult))
                ) && 
                (
                    this.CallsByCompanyHours == input.CallsByCompanyHours ||
                    (this.CallsByCompanyHours != null &&
                    this.CallsByCompanyHours.Equals(input.CallsByCompanyHours))
                ) && 
                (
                    this.CallsByQueueSla == input.CallsByQueueSla ||
                    (this.CallsByQueueSla != null &&
                    this.CallsByQueueSla.Equals(input.CallsByQueueSla))
                ) && 
                (
                    this.CallsByActions == input.CallsByActions ||
                    (this.CallsByActions != null &&
                    this.CallsByActions.Equals(input.CallsByActions))
                ) && 
                (
                    this.CallsByType == input.CallsByType ||
                    (this.CallsByType != null &&
                    this.CallsByType.Equals(input.CallsByType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllCalls != null)
                    hashCode = hashCode * 59 + this.AllCalls.GetHashCode();
                if (this.CallsByDirection != null)
                    hashCode = hashCode * 59 + this.CallsByDirection.GetHashCode();
                if (this.CallsByOrigin != null)
                    hashCode = hashCode * 59 + this.CallsByOrigin.GetHashCode();
                if (this.CallsByResponse != null)
                    hashCode = hashCode * 59 + this.CallsByResponse.GetHashCode();
                if (this.CallsSegments != null)
                    hashCode = hashCode * 59 + this.CallsSegments.GetHashCode();
                if (this.CallsByResult != null)
                    hashCode = hashCode * 59 + this.CallsByResult.GetHashCode();
                if (this.CallsByCompanyHours != null)
                    hashCode = hashCode * 59 + this.CallsByCompanyHours.GetHashCode();
                if (this.CallsByQueueSla != null)
                    hashCode = hashCode * 59 + this.CallsByQueueSla.GetHashCode();
                if (this.CallsByActions != null)
                    hashCode = hashCode * 59 + this.CallsByActions.GetHashCode();
                if (this.CallsByType != null)
                    hashCode = hashCode * 59 + this.CallsByType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
