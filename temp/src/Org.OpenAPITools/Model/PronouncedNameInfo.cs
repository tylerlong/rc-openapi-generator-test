/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PronouncedNameInfo
    /// </summary>
    [DataContract]
    public partial class PronouncedNameInfo :  IEquatable<PronouncedNameInfo>, IValidatableObject
    {
        /// <summary>
        /// Voice name type. &#39;Default&#39; - default extension name; first name and last name specified in user profile; &#39;TextToSpeech&#39; - custom text; user name spelled the way it sounds and specified by user; &#39;Recorded&#39; - custom audio, user name recorded in user&#39;s own voice (supported only for extension retrieval)
        /// </summary>
        /// <value>Voice name type. &#39;Default&#39; - default extension name; first name and last name specified in user profile; &#39;TextToSpeech&#39; - custom text; user name spelled the way it sounds and specified by user; &#39;Recorded&#39; - custom audio, user name recorded in user&#39;s own voice (supported only for extension retrieval)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Default for value: Default
            /// </summary>
            [EnumMember(Value = "Default")]
            Default = 1,

            /// <summary>
            /// Enum TextToSpeech for value: TextToSpeech
            /// </summary>
            [EnumMember(Value = "TextToSpeech")]
            TextToSpeech = 2,

            /// <summary>
            /// Enum Recorded for value: Recorded
            /// </summary>
            [EnumMember(Value = "Recorded")]
            Recorded = 3

        }

        /// <summary>
        /// Voice name type. &#39;Default&#39; - default extension name; first name and last name specified in user profile; &#39;TextToSpeech&#39; - custom text; user name spelled the way it sounds and specified by user; &#39;Recorded&#39; - custom audio, user name recorded in user&#39;s own voice (supported only for extension retrieval)
        /// </summary>
        /// <value>Voice name type. &#39;Default&#39; - default extension name; first name and last name specified in user profile; &#39;TextToSpeech&#39; - custom text; user name spelled the way it sounds and specified by user; &#39;Recorded&#39; - custom audio, user name recorded in user&#39;s own voice (supported only for extension retrieval)</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PronouncedNameInfo" /> class.
        /// </summary>
        /// <param name="type">Voice name type. &#39;Default&#39; - default extension name; first name and last name specified in user profile; &#39;TextToSpeech&#39; - custom text; user name spelled the way it sounds and specified by user; &#39;Recorded&#39; - custom audio, user name recorded in user&#39;s own voice (supported only for extension retrieval).</param>
        /// <param name="text">Custom text.</param>
        /// <param name="prompt">prompt.</param>
        public PronouncedNameInfo(TypeEnum? type = default(TypeEnum?), string text = default(string), PronouncedNamePromptInfo prompt = default(PronouncedNamePromptInfo))
        {
            this.Type = type;
            this.Text = text;
            this.Prompt = prompt;
        }


        /// <summary>
        /// Custom text
        /// </summary>
        /// <value>Custom text</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets Prompt
        /// </summary>
        [DataMember(Name="prompt", EmitDefaultValue=false)]
        public PronouncedNamePromptInfo Prompt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PronouncedNameInfo {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Prompt: ").Append(Prompt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PronouncedNameInfo);
        }

        /// <summary>
        /// Returns true if PronouncedNameInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of PronouncedNameInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PronouncedNameInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Prompt == input.Prompt ||
                    (this.Prompt != null &&
                    this.Prompt.Equals(input.Prompt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Prompt != null)
                    hashCode = hashCode * 59 + this.Prompt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
