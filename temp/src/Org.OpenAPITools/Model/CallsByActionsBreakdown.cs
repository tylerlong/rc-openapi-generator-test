/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Result breakdown by actions
    /// </summary>
    [DataContract]
    public partial class CallsByActionsBreakdown :  IEquatable<CallsByActionsBreakdown>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CallsByActionsBreakdown" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallsByActionsBreakdown() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CallsByActionsBreakdown" /> class.
        /// </summary>
        /// <param name="parkOn">Value for ParkOn action (required).</param>
        /// <param name="parkOff">Value for ParkOff action (required).</param>
        /// <param name="holdOn">Value for HoldOn action (required).</param>
        /// <param name="holdOff">Value for HoldOff action (required).</param>
        /// <param name="blindTransfer">Value for BlindTransfer action (required).</param>
        /// <param name="warmTransfer">Value for WarmTransfer action (required).</param>
        /// <param name="dtmfTransfer">Value for DTMFTransfer action (required).</param>
        public CallsByActionsBreakdown(double parkOn = default(double), double parkOff = default(double), double holdOn = default(double), double holdOff = default(double), double blindTransfer = default(double), double warmTransfer = default(double), double dtmfTransfer = default(double))
        {
            // to ensure "parkOn" is required (not null)
            if (parkOn == null)
            {
                throw new InvalidDataException("parkOn is a required property for CallsByActionsBreakdown and cannot be null");
            }
            else
            {
                this.ParkOn = parkOn;
            }

            // to ensure "parkOff" is required (not null)
            if (parkOff == null)
            {
                throw new InvalidDataException("parkOff is a required property for CallsByActionsBreakdown and cannot be null");
            }
            else
            {
                this.ParkOff = parkOff;
            }

            // to ensure "holdOn" is required (not null)
            if (holdOn == null)
            {
                throw new InvalidDataException("holdOn is a required property for CallsByActionsBreakdown and cannot be null");
            }
            else
            {
                this.HoldOn = holdOn;
            }

            // to ensure "holdOff" is required (not null)
            if (holdOff == null)
            {
                throw new InvalidDataException("holdOff is a required property for CallsByActionsBreakdown and cannot be null");
            }
            else
            {
                this.HoldOff = holdOff;
            }

            // to ensure "blindTransfer" is required (not null)
            if (blindTransfer == null)
            {
                throw new InvalidDataException("blindTransfer is a required property for CallsByActionsBreakdown and cannot be null");
            }
            else
            {
                this.BlindTransfer = blindTransfer;
            }

            // to ensure "warmTransfer" is required (not null)
            if (warmTransfer == null)
            {
                throw new InvalidDataException("warmTransfer is a required property for CallsByActionsBreakdown and cannot be null");
            }
            else
            {
                this.WarmTransfer = warmTransfer;
            }

            // to ensure "dtmfTransfer" is required (not null)
            if (dtmfTransfer == null)
            {
                throw new InvalidDataException("dtmfTransfer is a required property for CallsByActionsBreakdown and cannot be null");
            }
            else
            {
                this.DtmfTransfer = dtmfTransfer;
            }

        }

        /// <summary>
        /// Value for ParkOn action
        /// </summary>
        /// <value>Value for ParkOn action</value>
        [DataMember(Name="parkOn", EmitDefaultValue=true)]
        public double ParkOn { get; set; }

        /// <summary>
        /// Value for ParkOff action
        /// </summary>
        /// <value>Value for ParkOff action</value>
        [DataMember(Name="parkOff", EmitDefaultValue=true)]
        public double ParkOff { get; set; }

        /// <summary>
        /// Value for HoldOn action
        /// </summary>
        /// <value>Value for HoldOn action</value>
        [DataMember(Name="holdOn", EmitDefaultValue=true)]
        public double HoldOn { get; set; }

        /// <summary>
        /// Value for HoldOff action
        /// </summary>
        /// <value>Value for HoldOff action</value>
        [DataMember(Name="holdOff", EmitDefaultValue=true)]
        public double HoldOff { get; set; }

        /// <summary>
        /// Value for BlindTransfer action
        /// </summary>
        /// <value>Value for BlindTransfer action</value>
        [DataMember(Name="blindTransfer", EmitDefaultValue=true)]
        public double BlindTransfer { get; set; }

        /// <summary>
        /// Value for WarmTransfer action
        /// </summary>
        /// <value>Value for WarmTransfer action</value>
        [DataMember(Name="warmTransfer", EmitDefaultValue=true)]
        public double WarmTransfer { get; set; }

        /// <summary>
        /// Value for DTMFTransfer action
        /// </summary>
        /// <value>Value for DTMFTransfer action</value>
        [DataMember(Name="dtmfTransfer", EmitDefaultValue=true)]
        public double DtmfTransfer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsByActionsBreakdown {\n");
            sb.Append("  ParkOn: ").Append(ParkOn).Append("\n");
            sb.Append("  ParkOff: ").Append(ParkOff).Append("\n");
            sb.Append("  HoldOn: ").Append(HoldOn).Append("\n");
            sb.Append("  HoldOff: ").Append(HoldOff).Append("\n");
            sb.Append("  BlindTransfer: ").Append(BlindTransfer).Append("\n");
            sb.Append("  WarmTransfer: ").Append(WarmTransfer).Append("\n");
            sb.Append("  DtmfTransfer: ").Append(DtmfTransfer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallsByActionsBreakdown);
        }

        /// <summary>
        /// Returns true if CallsByActionsBreakdown instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsByActionsBreakdown to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsByActionsBreakdown input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ParkOn == input.ParkOn ||
                    (this.ParkOn != null &&
                    this.ParkOn.Equals(input.ParkOn))
                ) && 
                (
                    this.ParkOff == input.ParkOff ||
                    (this.ParkOff != null &&
                    this.ParkOff.Equals(input.ParkOff))
                ) && 
                (
                    this.HoldOn == input.HoldOn ||
                    (this.HoldOn != null &&
                    this.HoldOn.Equals(input.HoldOn))
                ) && 
                (
                    this.HoldOff == input.HoldOff ||
                    (this.HoldOff != null &&
                    this.HoldOff.Equals(input.HoldOff))
                ) && 
                (
                    this.BlindTransfer == input.BlindTransfer ||
                    (this.BlindTransfer != null &&
                    this.BlindTransfer.Equals(input.BlindTransfer))
                ) && 
                (
                    this.WarmTransfer == input.WarmTransfer ||
                    (this.WarmTransfer != null &&
                    this.WarmTransfer.Equals(input.WarmTransfer))
                ) && 
                (
                    this.DtmfTransfer == input.DtmfTransfer ||
                    (this.DtmfTransfer != null &&
                    this.DtmfTransfer.Equals(input.DtmfTransfer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ParkOn != null)
                    hashCode = hashCode * 59 + this.ParkOn.GetHashCode();
                if (this.ParkOff != null)
                    hashCode = hashCode * 59 + this.ParkOff.GetHashCode();
                if (this.HoldOn != null)
                    hashCode = hashCode * 59 + this.HoldOn.GetHashCode();
                if (this.HoldOff != null)
                    hashCode = hashCode * 59 + this.HoldOff.GetHashCode();
                if (this.BlindTransfer != null)
                    hashCode = hashCode * 59 + this.BlindTransfer.GetHashCode();
                if (this.WarmTransfer != null)
                    hashCode = hashCode * 59 + this.WarmTransfer.GetHashCode();
                if (this.DtmfTransfer != null)
                    hashCode = hashCode * 59 + this.DtmfTransfer.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
