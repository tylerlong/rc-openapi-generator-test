/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// MeetingRecordingInfo
    /// </summary>
    [DataContract]
    public partial class MeetingRecordingInfo :  IEquatable<MeetingRecordingInfo>, IValidatableObject
    {
        /// <summary>
        /// Defines ContentType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContentTypeEnum
        {
            /// <summary>
            /// Enum VideoMp4 for value: video/mp4
            /// </summary>
            [EnumMember(Value = "video/mp4")]
            VideoMp4 = 1,

            /// <summary>
            /// Enum AudioM4a for value: audio/m4a
            /// </summary>
            [EnumMember(Value = "audio/m4a")]
            AudioM4a = 2,

            /// <summary>
            /// Enum TextPlain for value: text/plain
            /// </summary>
            [EnumMember(Value = "text/plain")]
            TextPlain = 3

        }

        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [DataMember(Name="contentType", EmitDefaultValue=false)]
        public ContentTypeEnum? ContentType { get; set; }
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Completed for value: Completed
            /// </summary>
            [EnumMember(Value = "Completed")]
            Completed = 1,

            /// <summary>
            /// Enum Processing for value: Processing
            /// </summary>
            [EnumMember(Value = "Processing")]
            Processing = 2

        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MeetingRecordingInfo" /> class.
        /// </summary>
        /// <param name="uuid">Unique identifier of a meeting instance.</param>
        /// <param name="id">id.</param>
        /// <param name="contentDownloadUri">Link for downloading the recorded file (mp4, mp3 audio and text/plain chat file).</param>
        /// <param name="contentType">contentType.</param>
        /// <param name="size">size.</param>
        /// <param name="startTime">Starting time of a recording.</param>
        /// <param name="endTime">Ending time of a recording.</param>
        /// <param name="status">status.</param>
        public MeetingRecordingInfo(string uuid = default(string), string id = default(string), string contentDownloadUri = default(string), ContentTypeEnum? contentType = default(ContentTypeEnum?), int size = default(int), string startTime = default(string), string endTime = default(string), StatusEnum? status = default(StatusEnum?))
        {
            this.Uuid = uuid;
            this.Id = id;
            this.ContentDownloadUri = contentDownloadUri;
            this.ContentType = contentType;
            this.Size = size;
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.Status = status;
        }

        /// <summary>
        /// Unique identifier of a meeting instance
        /// </summary>
        /// <value>Unique identifier of a meeting instance</value>
        [DataMember(Name="uuid", EmitDefaultValue=false)]
        public string Uuid { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Link for downloading the recorded file (mp4, mp3 audio and text/plain chat file)
        /// </summary>
        /// <value>Link for downloading the recorded file (mp4, mp3 audio and text/plain chat file)</value>
        [DataMember(Name="contentDownloadUri", EmitDefaultValue=false)]
        public string ContentDownloadUri { get; set; }


        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public int Size { get; set; }

        /// <summary>
        /// Starting time of a recording
        /// </summary>
        /// <value>Starting time of a recording</value>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public string StartTime { get; set; }

        /// <summary>
        /// Ending time of a recording
        /// </summary>
        /// <value>Ending time of a recording</value>
        [DataMember(Name="endTime", EmitDefaultValue=false)]
        public string EndTime { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MeetingRecordingInfo {\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ContentDownloadUri: ").Append(ContentDownloadUri).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MeetingRecordingInfo);
        }

        /// <summary>
        /// Returns true if MeetingRecordingInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of MeetingRecordingInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MeetingRecordingInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ContentDownloadUri == input.ContentDownloadUri ||
                    (this.ContentDownloadUri != null &&
                    this.ContentDownloadUri.Equals(input.ContentDownloadUri))
                ) && 
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uuid != null)
                    hashCode = hashCode * 59 + this.Uuid.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ContentDownloadUri != null)
                    hashCode = hashCode * 59 + this.ContentDownloadUri.GetHashCode();
                if (this.ContentType != null)
                    hashCode = hashCode * 59 + this.ContentType.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
