/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ActiveCallInfo
    /// </summary>
    [DataContract]
    public partial class ActiveCallInfo :  IEquatable<ActiveCallInfo>, IValidatableObject
    {
        /// <summary>
        /// Defines Direction
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DirectionEnum
        {
            /// <summary>
            /// Enum Inbound for value: Inbound
            /// </summary>
            [EnumMember(Value = "Inbound")]
            Inbound = 1,

            /// <summary>
            /// Enum Outbound for value: Outbound
            /// </summary>
            [EnumMember(Value = "Outbound")]
            Outbound = 2

        }

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name="direction", EmitDefaultValue=false)]
        public DirectionEnum? Direction { get; set; }
        /// <summary>
        /// Telephony presence status
        /// </summary>
        /// <value>Telephony presence status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TelephonyStatusEnum
        {
            /// <summary>
            /// Enum NoCall for value: NoCall
            /// </summary>
            [EnumMember(Value = "NoCall")]
            NoCall = 1,

            /// <summary>
            /// Enum CallConnected for value: CallConnected
            /// </summary>
            [EnumMember(Value = "CallConnected")]
            CallConnected = 2,

            /// <summary>
            /// Enum Ringing for value: Ringing
            /// </summary>
            [EnumMember(Value = "Ringing")]
            Ringing = 3,

            /// <summary>
            /// Enum OnHold for value: OnHold
            /// </summary>
            [EnumMember(Value = "OnHold")]
            OnHold = 4,

            /// <summary>
            /// Enum ParkedCall for value: ParkedCall
            /// </summary>
            [EnumMember(Value = "ParkedCall")]
            ParkedCall = 5

        }

        /// <summary>
        /// Telephony presence status
        /// </summary>
        /// <value>Telephony presence status</value>
        [DataMember(Name="telephonyStatus", EmitDefaultValue=false)]
        public TelephonyStatusEnum? TelephonyStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActiveCallInfo" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="direction">direction.</param>
        /// <param name="queueCall">Identifies if a call belongs to the call queue.</param>
        /// <param name="from">Phone number or extension number of a caller. For GCM transport type &#39;_from&#39; property should be used.</param>
        /// <param name="fromName">Name of a caller.</param>
        /// <param name="to">Phone number or extension number of a callee.</param>
        /// <param name="toName">Name of a callee.</param>
        /// <param name="startTime">Time when the call is actually started.</param>
        /// <param name="telephonyStatus">Telephony presence status.</param>
        /// <param name="sipData">sipData.</param>
        /// <param name="sessionId">sessionId.</param>
        /// <param name="telephonySessionId">Telephony identifier of a call session.</param>
        /// <param name="onBehalfOf">Extension ID of the call owner on whose behalf a call is performed.</param>
        /// <param name="partyId">Internal identifier of a call party.</param>
        /// <param name="terminationType">terminationType.</param>
        /// <param name="callInfo">callInfo.</param>
        public ActiveCallInfo(string id = default(string), DirectionEnum? direction = default(DirectionEnum?), bool queueCall = default(bool), string from = default(string), string fromName = default(string), string to = default(string), string toName = default(string), string startTime = default(string), TelephonyStatusEnum? telephonyStatus = default(TelephonyStatusEnum?), DetailedCallInfo sipData = default(DetailedCallInfo), string sessionId = default(string), string telephonySessionId = default(string), string onBehalfOf = default(string), string partyId = default(string), string terminationType = default(string), CallInfoCQ callInfo = default(CallInfoCQ))
        {
            this.Id = id;
            this.Direction = direction;
            this.QueueCall = queueCall;
            this.From = from;
            this.FromName = fromName;
            this.To = to;
            this.ToName = toName;
            this.StartTime = startTime;
            this.TelephonyStatus = telephonyStatus;
            this.SipData = sipData;
            this.SessionId = sessionId;
            this.TelephonySessionId = telephonySessionId;
            this.OnBehalfOf = onBehalfOf;
            this.PartyId = partyId;
            this.TerminationType = terminationType;
            this.CallInfo = callInfo;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// Identifies if a call belongs to the call queue
        /// </summary>
        /// <value>Identifies if a call belongs to the call queue</value>
        [DataMember(Name="queueCall", EmitDefaultValue=false)]
        public bool QueueCall { get; set; }

        /// <summary>
        /// Phone number or extension number of a caller. For GCM transport type &#39;_from&#39; property should be used
        /// </summary>
        /// <value>Phone number or extension number of a caller. For GCM transport type &#39;_from&#39; property should be used</value>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public string From { get; set; }

        /// <summary>
        /// Name of a caller
        /// </summary>
        /// <value>Name of a caller</value>
        [DataMember(Name="fromName", EmitDefaultValue=false)]
        public string FromName { get; set; }

        /// <summary>
        /// Phone number or extension number of a callee
        /// </summary>
        /// <value>Phone number or extension number of a callee</value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public string To { get; set; }

        /// <summary>
        /// Name of a callee
        /// </summary>
        /// <value>Name of a callee</value>
        [DataMember(Name="toName", EmitDefaultValue=false)]
        public string ToName { get; set; }

        /// <summary>
        /// Time when the call is actually started
        /// </summary>
        /// <value>Time when the call is actually started</value>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public string StartTime { get; set; }


        /// <summary>
        /// Gets or Sets SipData
        /// </summary>
        [DataMember(Name="sipData", EmitDefaultValue=false)]
        public DetailedCallInfo SipData { get; set; }

        /// <summary>
        /// Gets or Sets SessionId
        /// </summary>
        [DataMember(Name="sessionId", EmitDefaultValue=false)]
        public string SessionId { get; set; }

        /// <summary>
        /// Telephony identifier of a call session
        /// </summary>
        /// <value>Telephony identifier of a call session</value>
        [DataMember(Name="telephonySessionId", EmitDefaultValue=false)]
        public string TelephonySessionId { get; set; }

        /// <summary>
        /// Extension ID of the call owner on whose behalf a call is performed
        /// </summary>
        /// <value>Extension ID of the call owner on whose behalf a call is performed</value>
        [DataMember(Name="onBehalfOf", EmitDefaultValue=false)]
        public string OnBehalfOf { get; set; }

        /// <summary>
        /// Internal identifier of a call party
        /// </summary>
        /// <value>Internal identifier of a call party</value>
        [DataMember(Name="partyId", EmitDefaultValue=false)]
        public string PartyId { get; set; }

        /// <summary>
        /// Gets or Sets TerminationType
        /// </summary>
        [DataMember(Name="terminationType", EmitDefaultValue=false)]
        public string TerminationType { get; set; }

        /// <summary>
        /// Gets or Sets CallInfo
        /// </summary>
        [DataMember(Name="callInfo", EmitDefaultValue=false)]
        public CallInfoCQ CallInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActiveCallInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  QueueCall: ").Append(QueueCall).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  FromName: ").Append(FromName).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  ToName: ").Append(ToName).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  TelephonyStatus: ").Append(TelephonyStatus).Append("\n");
            sb.Append("  SipData: ").Append(SipData).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  TelephonySessionId: ").Append(TelephonySessionId).Append("\n");
            sb.Append("  OnBehalfOf: ").Append(OnBehalfOf).Append("\n");
            sb.Append("  PartyId: ").Append(PartyId).Append("\n");
            sb.Append("  TerminationType: ").Append(TerminationType).Append("\n");
            sb.Append("  CallInfo: ").Append(CallInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActiveCallInfo);
        }

        /// <summary>
        /// Returns true if ActiveCallInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ActiveCallInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActiveCallInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                ) && 
                (
                    this.QueueCall == input.QueueCall ||
                    (this.QueueCall != null &&
                    this.QueueCall.Equals(input.QueueCall))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.FromName == input.FromName ||
                    (this.FromName != null &&
                    this.FromName.Equals(input.FromName))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.ToName == input.ToName ||
                    (this.ToName != null &&
                    this.ToName.Equals(input.ToName))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.TelephonyStatus == input.TelephonyStatus ||
                    (this.TelephonyStatus != null &&
                    this.TelephonyStatus.Equals(input.TelephonyStatus))
                ) && 
                (
                    this.SipData == input.SipData ||
                    (this.SipData != null &&
                    this.SipData.Equals(input.SipData))
                ) && 
                (
                    this.SessionId == input.SessionId ||
                    (this.SessionId != null &&
                    this.SessionId.Equals(input.SessionId))
                ) && 
                (
                    this.TelephonySessionId == input.TelephonySessionId ||
                    (this.TelephonySessionId != null &&
                    this.TelephonySessionId.Equals(input.TelephonySessionId))
                ) && 
                (
                    this.OnBehalfOf == input.OnBehalfOf ||
                    (this.OnBehalfOf != null &&
                    this.OnBehalfOf.Equals(input.OnBehalfOf))
                ) && 
                (
                    this.PartyId == input.PartyId ||
                    (this.PartyId != null &&
                    this.PartyId.Equals(input.PartyId))
                ) && 
                (
                    this.TerminationType == input.TerminationType ||
                    (this.TerminationType != null &&
                    this.TerminationType.Equals(input.TerminationType))
                ) && 
                (
                    this.CallInfo == input.CallInfo ||
                    (this.CallInfo != null &&
                    this.CallInfo.Equals(input.CallInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Direction != null)
                    hashCode = hashCode * 59 + this.Direction.GetHashCode();
                if (this.QueueCall != null)
                    hashCode = hashCode * 59 + this.QueueCall.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.FromName != null)
                    hashCode = hashCode * 59 + this.FromName.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.ToName != null)
                    hashCode = hashCode * 59 + this.ToName.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.TelephonyStatus != null)
                    hashCode = hashCode * 59 + this.TelephonyStatus.GetHashCode();
                if (this.SipData != null)
                    hashCode = hashCode * 59 + this.SipData.GetHashCode();
                if (this.SessionId != null)
                    hashCode = hashCode * 59 + this.SessionId.GetHashCode();
                if (this.TelephonySessionId != null)
                    hashCode = hashCode * 59 + this.TelephonySessionId.GetHashCode();
                if (this.OnBehalfOf != null)
                    hashCode = hashCode * 59 + this.OnBehalfOf.GetHashCode();
                if (this.PartyId != null)
                    hashCode = hashCode * 59 + this.PartyId.GetHashCode();
                if (this.TerminationType != null)
                    hashCode = hashCode * 59 + this.TerminationType.GetHashCode();
                if (this.CallInfo != null)
                    hashCode = hashCode * 59 + this.CallInfo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
