/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Unconditional forwarding parameters. Returned if &#39;UnconditionalForwarding&#39; value is specified for the &#x60;callHandlingAction&#x60; parameter
    /// </summary>
    [DataContract]
    public partial class UnconditionalForwardingInfo :  IEquatable<UnconditionalForwardingInfo>, IValidatableObject
    {
        /// <summary>
        /// Event that initiates forwarding to the specified phone number
        /// </summary>
        /// <value>Event that initiates forwarding to the specified phone number</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            /// <summary>
            /// Enum HoldTimeExpiration for value: HoldTimeExpiration
            /// </summary>
            [EnumMember(Value = "HoldTimeExpiration")]
            HoldTimeExpiration = 1,

            /// <summary>
            /// Enum MaxCallers for value: MaxCallers
            /// </summary>
            [EnumMember(Value = "MaxCallers")]
            MaxCallers = 2,

            /// <summary>
            /// Enum NoAnswer for value: NoAnswer
            /// </summary>
            [EnumMember(Value = "NoAnswer")]
            NoAnswer = 3

        }

        /// <summary>
        /// Event that initiates forwarding to the specified phone number
        /// </summary>
        /// <value>Event that initiates forwarding to the specified phone number</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UnconditionalForwardingInfo" /> class.
        /// </summary>
        /// <param name="phoneNumber">Phone number to which the call is forwarded. In addition to common e.164 format, the following number patterns are supported: 11xxxxxxxxxxx, 444xxxxxxxxxxx, 616xxxxxxxxxxx, 1700yyyy; where xxxxxxxxxxx is a phone number in e.164 format (without &#39;+&#39; sign) and yyyy is an external short extension number. Max number of digits is 15.</param>
        /// <param name="action">Event that initiates forwarding to the specified phone number.</param>
        public UnconditionalForwardingInfo(string phoneNumber = default(string), ActionEnum? action = default(ActionEnum?))
        {
            this.PhoneNumber = phoneNumber;
            this.Action = action;
        }

        /// <summary>
        /// Phone number to which the call is forwarded. In addition to common e.164 format, the following number patterns are supported: 11xxxxxxxxxxx, 444xxxxxxxxxxx, 616xxxxxxxxxxx, 1700yyyy; where xxxxxxxxxxx is a phone number in e.164 format (without &#39;+&#39; sign) and yyyy is an external short extension number. Max number of digits is 15
        /// </summary>
        /// <value>Phone number to which the call is forwarded. In addition to common e.164 format, the following number patterns are supported: 11xxxxxxxxxxx, 444xxxxxxxxxxx, 616xxxxxxxxxxx, 1700yyyy; where xxxxxxxxxxx is a phone number in e.164 format (without &#39;+&#39; sign) and yyyy is an external short extension number. Max number of digits is 15</value>
        [DataMember(Name="phoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UnconditionalForwardingInfo {\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UnconditionalForwardingInfo);
        }

        /// <summary>
        /// Returns true if UnconditionalForwardingInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of UnconditionalForwardingInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnconditionalForwardingInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
