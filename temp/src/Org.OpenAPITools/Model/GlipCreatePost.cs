/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GlipCreatePost
    /// </summary>
    [DataContract]
    public partial class GlipCreatePost :  IEquatable<GlipCreatePost>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GlipCreatePost" /> class.
        /// </summary>
        /// <param name="activity">activity.</param>
        /// <param name="title">Title of a message. (Can be set for bot&#39;s messages only)..</param>
        /// <param name="text">Text of a post.</param>
        /// <param name="groupId">Internal identifier of a group.</param>
        /// <param name="attachments">List of attachments to be posted.</param>
        /// <param name="personIds">personIds.</param>
        /// <param name="system">system.</param>
        public GlipCreatePost(string activity = default(string), string title = default(string), string text = default(string), string groupId = default(string), List<GlipMessageAttachmentInfoRequest> attachments = default(List<GlipMessageAttachmentInfoRequest>), List<string> personIds = default(List<string>), bool system = default(bool))
        {
            this.Activity = activity;
            this.Title = title;
            this.Text = text;
            this.GroupId = groupId;
            this.Attachments = attachments;
            this.PersonIds = personIds;
            this.System = system;
        }

        /// <summary>
        /// Gets or Sets Activity
        /// </summary>
        [DataMember(Name="activity", EmitDefaultValue=false)]
        public string Activity { get; set; }

        /// <summary>
        /// Title of a message. (Can be set for bot&#39;s messages only).
        /// </summary>
        /// <value>Title of a message. (Can be set for bot&#39;s messages only).</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Text of a post
        /// </summary>
        /// <value>Text of a post</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Internal identifier of a group
        /// </summary>
        /// <value>Internal identifier of a group</value>
        [DataMember(Name="groupId", EmitDefaultValue=false)]
        public string GroupId { get; set; }

        /// <summary>
        /// List of attachments to be posted
        /// </summary>
        /// <value>List of attachments to be posted</value>
        [DataMember(Name="attachments", EmitDefaultValue=false)]
        public List<GlipMessageAttachmentInfoRequest> Attachments { get; set; }

        /// <summary>
        /// Gets or Sets PersonIds
        /// </summary>
        [DataMember(Name="personIds", EmitDefaultValue=false)]
        public List<string> PersonIds { get; set; }

        /// <summary>
        /// Gets or Sets System
        /// </summary>
        [DataMember(Name="system", EmitDefaultValue=false)]
        public bool System { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlipCreatePost {\n");
            sb.Append("  Activity: ").Append(Activity).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  PersonIds: ").Append(PersonIds).Append("\n");
            sb.Append("  System: ").Append(System).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GlipCreatePost);
        }

        /// <summary>
        /// Returns true if GlipCreatePost instances are equal
        /// </summary>
        /// <param name="input">Instance of GlipCreatePost to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlipCreatePost input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Activity == input.Activity ||
                    (this.Activity != null &&
                    this.Activity.Equals(input.Activity))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.Attachments == input.Attachments ||
                    this.Attachments != null &&
                    input.Attachments != null &&
                    this.Attachments.SequenceEqual(input.Attachments)
                ) && 
                (
                    this.PersonIds == input.PersonIds ||
                    this.PersonIds != null &&
                    input.PersonIds != null &&
                    this.PersonIds.SequenceEqual(input.PersonIds)
                ) && 
                (
                    this.System == input.System ||
                    (this.System != null &&
                    this.System.Equals(input.System))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Activity != null)
                    hashCode = hashCode * 59 + this.Activity.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.GroupId != null)
                    hashCode = hashCode * 59 + this.GroupId.GetHashCode();
                if (this.Attachments != null)
                    hashCode = hashCode * 59 + this.Attachments.GetHashCode();
                if (this.PersonIds != null)
                    hashCode = hashCode * 59 + this.PersonIds.GetHashCode();
                if (this.System != null)
                    hashCode = hashCode * 59 + this.System.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
