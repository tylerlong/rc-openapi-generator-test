/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Result breakdown by segments
    /// </summary>
    [DataContract]
    public partial class CallsBySegmentsBreakdown :  IEquatable<CallsBySegmentsBreakdown>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CallsBySegmentsBreakdown" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallsBySegmentsBreakdown() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CallsBySegmentsBreakdown" /> class.
        /// </summary>
        /// <param name="ringing">Value for Ringing segment (required).</param>
        /// <param name="liveTalk">Value for LiveTalk segment (required).</param>
        /// <param name="hold">Value for Hold segment (required).</param>
        /// <param name="park">Value for Park segment (required).</param>
        /// <param name="transfer">Value for Transfer segment (required).</param>
        /// <param name="ivrPrompt">Value for IVRPrompt segment (required).</param>
        /// <param name="voicemail">Value for Voicemail segment (required).</param>
        /// <param name="vmGreeting">Value for VMGreeting segment (required).</param>
        /// <param name="setup">Value for Setup segment (required).</param>
        public CallsBySegmentsBreakdown(double ringing = default(double), double liveTalk = default(double), double hold = default(double), double park = default(double), double transfer = default(double), double ivrPrompt = default(double), double voicemail = default(double), double vmGreeting = default(double), double setup = default(double))
        {
            // to ensure "ringing" is required (not null)
            if (ringing == null)
            {
                throw new InvalidDataException("ringing is a required property for CallsBySegmentsBreakdown and cannot be null");
            }
            else
            {
                this.Ringing = ringing;
            }

            // to ensure "liveTalk" is required (not null)
            if (liveTalk == null)
            {
                throw new InvalidDataException("liveTalk is a required property for CallsBySegmentsBreakdown and cannot be null");
            }
            else
            {
                this.LiveTalk = liveTalk;
            }

            // to ensure "hold" is required (not null)
            if (hold == null)
            {
                throw new InvalidDataException("hold is a required property for CallsBySegmentsBreakdown and cannot be null");
            }
            else
            {
                this.Hold = hold;
            }

            // to ensure "park" is required (not null)
            if (park == null)
            {
                throw new InvalidDataException("park is a required property for CallsBySegmentsBreakdown and cannot be null");
            }
            else
            {
                this.Park = park;
            }

            // to ensure "transfer" is required (not null)
            if (transfer == null)
            {
                throw new InvalidDataException("transfer is a required property for CallsBySegmentsBreakdown and cannot be null");
            }
            else
            {
                this.Transfer = transfer;
            }

            // to ensure "ivrPrompt" is required (not null)
            if (ivrPrompt == null)
            {
                throw new InvalidDataException("ivrPrompt is a required property for CallsBySegmentsBreakdown and cannot be null");
            }
            else
            {
                this.IvrPrompt = ivrPrompt;
            }

            // to ensure "voicemail" is required (not null)
            if (voicemail == null)
            {
                throw new InvalidDataException("voicemail is a required property for CallsBySegmentsBreakdown and cannot be null");
            }
            else
            {
                this.Voicemail = voicemail;
            }

            // to ensure "vmGreeting" is required (not null)
            if (vmGreeting == null)
            {
                throw new InvalidDataException("vmGreeting is a required property for CallsBySegmentsBreakdown and cannot be null");
            }
            else
            {
                this.VmGreeting = vmGreeting;
            }

            // to ensure "setup" is required (not null)
            if (setup == null)
            {
                throw new InvalidDataException("setup is a required property for CallsBySegmentsBreakdown and cannot be null");
            }
            else
            {
                this.Setup = setup;
            }

        }

        /// <summary>
        /// Value for Ringing segment
        /// </summary>
        /// <value>Value for Ringing segment</value>
        [DataMember(Name="ringing", EmitDefaultValue=true)]
        public double Ringing { get; set; }

        /// <summary>
        /// Value for LiveTalk segment
        /// </summary>
        /// <value>Value for LiveTalk segment</value>
        [DataMember(Name="liveTalk", EmitDefaultValue=true)]
        public double LiveTalk { get; set; }

        /// <summary>
        /// Value for Hold segment
        /// </summary>
        /// <value>Value for Hold segment</value>
        [DataMember(Name="hold", EmitDefaultValue=true)]
        public double Hold { get; set; }

        /// <summary>
        /// Value for Park segment
        /// </summary>
        /// <value>Value for Park segment</value>
        [DataMember(Name="park", EmitDefaultValue=true)]
        public double Park { get; set; }

        /// <summary>
        /// Value for Transfer segment
        /// </summary>
        /// <value>Value for Transfer segment</value>
        [DataMember(Name="transfer", EmitDefaultValue=true)]
        public double Transfer { get; set; }

        /// <summary>
        /// Value for IVRPrompt segment
        /// </summary>
        /// <value>Value for IVRPrompt segment</value>
        [DataMember(Name="ivrPrompt", EmitDefaultValue=true)]
        public double IvrPrompt { get; set; }

        /// <summary>
        /// Value for Voicemail segment
        /// </summary>
        /// <value>Value for Voicemail segment</value>
        [DataMember(Name="voicemail", EmitDefaultValue=true)]
        public double Voicemail { get; set; }

        /// <summary>
        /// Value for VMGreeting segment
        /// </summary>
        /// <value>Value for VMGreeting segment</value>
        [DataMember(Name="vmGreeting", EmitDefaultValue=true)]
        public double VmGreeting { get; set; }

        /// <summary>
        /// Value for Setup segment
        /// </summary>
        /// <value>Value for Setup segment</value>
        [DataMember(Name="setup", EmitDefaultValue=true)]
        public double Setup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsBySegmentsBreakdown {\n");
            sb.Append("  Ringing: ").Append(Ringing).Append("\n");
            sb.Append("  LiveTalk: ").Append(LiveTalk).Append("\n");
            sb.Append("  Hold: ").Append(Hold).Append("\n");
            sb.Append("  Park: ").Append(Park).Append("\n");
            sb.Append("  Transfer: ").Append(Transfer).Append("\n");
            sb.Append("  IvrPrompt: ").Append(IvrPrompt).Append("\n");
            sb.Append("  Voicemail: ").Append(Voicemail).Append("\n");
            sb.Append("  VmGreeting: ").Append(VmGreeting).Append("\n");
            sb.Append("  Setup: ").Append(Setup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallsBySegmentsBreakdown);
        }

        /// <summary>
        /// Returns true if CallsBySegmentsBreakdown instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsBySegmentsBreakdown to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsBySegmentsBreakdown input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Ringing == input.Ringing ||
                    (this.Ringing != null &&
                    this.Ringing.Equals(input.Ringing))
                ) && 
                (
                    this.LiveTalk == input.LiveTalk ||
                    (this.LiveTalk != null &&
                    this.LiveTalk.Equals(input.LiveTalk))
                ) && 
                (
                    this.Hold == input.Hold ||
                    (this.Hold != null &&
                    this.Hold.Equals(input.Hold))
                ) && 
                (
                    this.Park == input.Park ||
                    (this.Park != null &&
                    this.Park.Equals(input.Park))
                ) && 
                (
                    this.Transfer == input.Transfer ||
                    (this.Transfer != null &&
                    this.Transfer.Equals(input.Transfer))
                ) && 
                (
                    this.IvrPrompt == input.IvrPrompt ||
                    (this.IvrPrompt != null &&
                    this.IvrPrompt.Equals(input.IvrPrompt))
                ) && 
                (
                    this.Voicemail == input.Voicemail ||
                    (this.Voicemail != null &&
                    this.Voicemail.Equals(input.Voicemail))
                ) && 
                (
                    this.VmGreeting == input.VmGreeting ||
                    (this.VmGreeting != null &&
                    this.VmGreeting.Equals(input.VmGreeting))
                ) && 
                (
                    this.Setup == input.Setup ||
                    (this.Setup != null &&
                    this.Setup.Equals(input.Setup))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ringing != null)
                    hashCode = hashCode * 59 + this.Ringing.GetHashCode();
                if (this.LiveTalk != null)
                    hashCode = hashCode * 59 + this.LiveTalk.GetHashCode();
                if (this.Hold != null)
                    hashCode = hashCode * 59 + this.Hold.GetHashCode();
                if (this.Park != null)
                    hashCode = hashCode * 59 + this.Park.GetHashCode();
                if (this.Transfer != null)
                    hashCode = hashCode * 59 + this.Transfer.GetHashCode();
                if (this.IvrPrompt != null)
                    hashCode = hashCode * 59 + this.IvrPrompt.GetHashCode();
                if (this.Voicemail != null)
                    hashCode = hashCode * 59 + this.Voicemail.GetHashCode();
                if (this.VmGreeting != null)
                    hashCode = hashCode * 59 + this.VmGreeting.GetHashCode();
                if (this.Setup != null)
                    hashCode = hashCode * 59 + this.Setup.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
