/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The short detail of the message in the get batch response
    /// </summary>
    [DataContract]
    public partial class MessageListMessageResponse :  IEquatable<MessageListMessageResponse>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets MessageStatus
        /// </summary>
        [DataMember(Name="messageStatus", EmitDefaultValue=false)]
        public SmsStatusEnum? MessageStatus { get; set; }
        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name="direction", EmitDefaultValue=false)]
        public SmsDirectionEnum? Direction { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageListMessageResponse" /> class.
        /// </summary>
        /// <param name="id">The Id of the message.</param>
        /// <param name="batchId">Internal identifier of a batch the message was submitted in.</param>
        /// <param name="from">Phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format from which the message is sent.</param>
        /// <param name="to">Phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format to which a message is sent.</param>
        /// <param name="creationTime">The time at which the message was created.</param>
        /// <param name="lastModifiedTime">The time at which the messages was last updated.</param>
        /// <param name="messageStatus">messageStatus.</param>
        /// <param name="segmentCount">Number of segments of a message.</param>
        /// <param name="text">Text of a message. Returned if the &#x60;view&#x60; parameter is set to &#39;Detailed&#39;.</param>
        /// <param name="cost">Cost of a message.</param>
        /// <param name="direction">direction.</param>
        /// <param name="errorCode">The RC error code of the message sending failure reason.</param>
        public MessageListMessageResponse(long id = default(long), string batchId = default(string), string from = default(string), List<string> to = default(List<string>), DateTime creationTime = default(DateTime), DateTime lastModifiedTime = default(DateTime), SmsStatusEnum? messageStatus = default(SmsStatusEnum?), int segmentCount = default(int), string text = default(string), double cost = default(double), SmsDirectionEnum? direction = default(SmsDirectionEnum?), string errorCode = default(string))
        {
            this.Id = id;
            this.BatchId = batchId;
            this.From = from;
            this.To = to;
            this.CreationTime = creationTime;
            this.LastModifiedTime = lastModifiedTime;
            this.MessageStatus = messageStatus;
            this.SegmentCount = segmentCount;
            this.Text = text;
            this.Cost = cost;
            this.Direction = direction;
            this.ErrorCode = errorCode;
        }

        /// <summary>
        /// The Id of the message
        /// </summary>
        /// <value>The Id of the message</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long Id { get; set; }

        /// <summary>
        /// Internal identifier of a batch the message was submitted in
        /// </summary>
        /// <value>Internal identifier of a batch the message was submitted in</value>
        [DataMember(Name="batchId", EmitDefaultValue=false)]
        public string BatchId { get; set; }

        /// <summary>
        /// Phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format from which the message is sent
        /// </summary>
        /// <value>Phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format from which the message is sent</value>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public string From { get; set; }

        /// <summary>
        /// Phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format to which a message is sent
        /// </summary>
        /// <value>Phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format to which a message is sent</value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public List<string> To { get; set; }

        /// <summary>
        /// The time at which the message was created
        /// </summary>
        /// <value>The time at which the message was created</value>
        [DataMember(Name="creationTime", EmitDefaultValue=false)]
        public DateTime CreationTime { get; set; }

        /// <summary>
        /// The time at which the messages was last updated
        /// </summary>
        /// <value>The time at which the messages was last updated</value>
        [DataMember(Name="lastModifiedTime", EmitDefaultValue=false)]
        public DateTime LastModifiedTime { get; set; }


        /// <summary>
        /// Number of segments of a message
        /// </summary>
        /// <value>Number of segments of a message</value>
        [DataMember(Name="segmentCount", EmitDefaultValue=false)]
        public int SegmentCount { get; set; }

        /// <summary>
        /// Text of a message. Returned if the &#x60;view&#x60; parameter is set to &#39;Detailed&#39;
        /// </summary>
        /// <value>Text of a message. Returned if the &#x60;view&#x60; parameter is set to &#39;Detailed&#39;</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Cost of a message
        /// </summary>
        /// <value>Cost of a message</value>
        [DataMember(Name="cost", EmitDefaultValue=false)]
        public double Cost { get; set; }


        /// <summary>
        /// The RC error code of the message sending failure reason
        /// </summary>
        /// <value>The RC error code of the message sending failure reason</value>
        [DataMember(Name="errorCode", EmitDefaultValue=false)]
        public string ErrorCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MessageListMessageResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BatchId: ").Append(BatchId).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  CreationTime: ").Append(CreationTime).Append("\n");
            sb.Append("  LastModifiedTime: ").Append(LastModifiedTime).Append("\n");
            sb.Append("  MessageStatus: ").Append(MessageStatus).Append("\n");
            sb.Append("  SegmentCount: ").Append(SegmentCount).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MessageListMessageResponse);
        }

        /// <summary>
        /// Returns true if MessageListMessageResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of MessageListMessageResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessageListMessageResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.BatchId == input.BatchId ||
                    (this.BatchId != null &&
                    this.BatchId.Equals(input.BatchId))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    this.To != null &&
                    input.To != null &&
                    this.To.SequenceEqual(input.To)
                ) && 
                (
                    this.CreationTime == input.CreationTime ||
                    (this.CreationTime != null &&
                    this.CreationTime.Equals(input.CreationTime))
                ) && 
                (
                    this.LastModifiedTime == input.LastModifiedTime ||
                    (this.LastModifiedTime != null &&
                    this.LastModifiedTime.Equals(input.LastModifiedTime))
                ) && 
                (
                    this.MessageStatus == input.MessageStatus ||
                    (this.MessageStatus != null &&
                    this.MessageStatus.Equals(input.MessageStatus))
                ) && 
                (
                    this.SegmentCount == input.SegmentCount ||
                    (this.SegmentCount != null &&
                    this.SegmentCount.Equals(input.SegmentCount))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Cost == input.Cost ||
                    (this.Cost != null &&
                    this.Cost.Equals(input.Cost))
                ) && 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                ) && 
                (
                    this.ErrorCode == input.ErrorCode ||
                    (this.ErrorCode != null &&
                    this.ErrorCode.Equals(input.ErrorCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.BatchId != null)
                    hashCode = hashCode * 59 + this.BatchId.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.CreationTime != null)
                    hashCode = hashCode * 59 + this.CreationTime.GetHashCode();
                if (this.LastModifiedTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedTime.GetHashCode();
                if (this.MessageStatus != null)
                    hashCode = hashCode * 59 + this.MessageStatus.GetHashCode();
                if (this.SegmentCount != null)
                    hashCode = hashCode * 59 + this.SegmentCount.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Cost != null)
                    hashCode = hashCode * 59 + this.Cost.GetHashCode();
                if (this.Direction != null)
                    hashCode = hashCode * 59 + this.Direction.GetHashCode();
                if (this.ErrorCode != null)
                    hashCode = hashCode * 59 + this.ErrorCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
