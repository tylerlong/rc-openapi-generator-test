/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Pagination details
    /// </summary>
    [DataContract]
    public partial class PagingResource :  IEquatable<PagingResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PagingResource" /> class.
        /// </summary>
        /// <param name="pageToken">Page token of the current response list.</param>
        /// <param name="perPage">Number of records per page.</param>
        /// <param name="firstPageToken">First page token of the current filter criteria.</param>
        /// <param name="previousPageToken">Previous page token of the current filter criteria.</param>
        /// <param name="nextPageToken">Next page token of the current filter criteria.</param>
        public PagingResource(string pageToken = default(string), int perPage = default(int), string firstPageToken = default(string), string previousPageToken = default(string), string nextPageToken = default(string))
        {
            this.PageToken = pageToken;
            this.PerPage = perPage;
            this.FirstPageToken = firstPageToken;
            this.PreviousPageToken = previousPageToken;
            this.NextPageToken = nextPageToken;
        }

        /// <summary>
        /// Page token of the current response list
        /// </summary>
        /// <value>Page token of the current response list</value>
        [DataMember(Name="pageToken", EmitDefaultValue=false)]
        public string PageToken { get; set; }

        /// <summary>
        /// Number of records per page
        /// </summary>
        /// <value>Number of records per page</value>
        [DataMember(Name="perPage", EmitDefaultValue=false)]
        public int PerPage { get; set; }

        /// <summary>
        /// First page token of the current filter criteria
        /// </summary>
        /// <value>First page token of the current filter criteria</value>
        [DataMember(Name="firstPageToken", EmitDefaultValue=false)]
        public string FirstPageToken { get; set; }

        /// <summary>
        /// Previous page token of the current filter criteria
        /// </summary>
        /// <value>Previous page token of the current filter criteria</value>
        [DataMember(Name="previousPageToken", EmitDefaultValue=false)]
        public string PreviousPageToken { get; set; }

        /// <summary>
        /// Next page token of the current filter criteria
        /// </summary>
        /// <value>Next page token of the current filter criteria</value>
        [DataMember(Name="nextPageToken", EmitDefaultValue=false)]
        public string NextPageToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PagingResource {\n");
            sb.Append("  PageToken: ").Append(PageToken).Append("\n");
            sb.Append("  PerPage: ").Append(PerPage).Append("\n");
            sb.Append("  FirstPageToken: ").Append(FirstPageToken).Append("\n");
            sb.Append("  PreviousPageToken: ").Append(PreviousPageToken).Append("\n");
            sb.Append("  NextPageToken: ").Append(NextPageToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PagingResource);
        }

        /// <summary>
        /// Returns true if PagingResource instances are equal
        /// </summary>
        /// <param name="input">Instance of PagingResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PagingResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PageToken == input.PageToken ||
                    (this.PageToken != null &&
                    this.PageToken.Equals(input.PageToken))
                ) && 
                (
                    this.PerPage == input.PerPage ||
                    (this.PerPage != null &&
                    this.PerPage.Equals(input.PerPage))
                ) && 
                (
                    this.FirstPageToken == input.FirstPageToken ||
                    (this.FirstPageToken != null &&
                    this.FirstPageToken.Equals(input.FirstPageToken))
                ) && 
                (
                    this.PreviousPageToken == input.PreviousPageToken ||
                    (this.PreviousPageToken != null &&
                    this.PreviousPageToken.Equals(input.PreviousPageToken))
                ) && 
                (
                    this.NextPageToken == input.NextPageToken ||
                    (this.NextPageToken != null &&
                    this.NextPageToken.Equals(input.NextPageToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PageToken != null)
                    hashCode = hashCode * 59 + this.PageToken.GetHashCode();
                if (this.PerPage != null)
                    hashCode = hashCode * 59 + this.PerPage.GetHashCode();
                if (this.FirstPageToken != null)
                    hashCode = hashCode * 59 + this.FirstPageToken.GetHashCode();
                if (this.PreviousPageToken != null)
                    hashCode = hashCode * 59 + this.PreviousPageToken.GetHashCode();
                if (this.NextPageToken != null)
                    hashCode = hashCode * 59 + this.NextPageToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
