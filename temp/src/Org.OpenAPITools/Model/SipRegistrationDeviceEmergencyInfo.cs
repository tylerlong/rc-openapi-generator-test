/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Emergency response location settings of a device
    /// </summary>
    [DataContract]
    public partial class SipRegistrationDeviceEmergencyInfo :  IEquatable<SipRegistrationDeviceEmergencyInfo>, IValidatableObject
    {
        /// <summary>
        /// Emergency address status
        /// </summary>
        /// <value>Emergency address status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AddressStatusEnum
        {
            /// <summary>
            /// Enum Valid for value: Valid
            /// </summary>
            [EnumMember(Value = "Valid")]
            Valid = 1,

            /// <summary>
            /// Enum Invalid for value: Invalid
            /// </summary>
            [EnumMember(Value = "Invalid")]
            Invalid = 2,

            /// <summary>
            /// Enum Processing for value: Processing
            /// </summary>
            [EnumMember(Value = "Processing")]
            Processing = 3

        }

        /// <summary>
        /// Emergency address status
        /// </summary>
        /// <value>Emergency address status</value>
        [DataMember(Name="addressStatus", EmitDefaultValue=false)]
        public AddressStatusEnum? AddressStatus { get; set; }
        /// <summary>
        /// Specifies whether to return only private or only public (company) ERLs (Emergency Response Locations)
        /// </summary>
        /// <value>Specifies whether to return only private or only public (company) ERLs (Emergency Response Locations)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VisibilityEnum
        {
            /// <summary>
            /// Enum Private for value: Private
            /// </summary>
            [EnumMember(Value = "Private")]
            Private = 1,

            /// <summary>
            /// Enum Public for value: Public
            /// </summary>
            [EnumMember(Value = "Public")]
            Public = 2

        }

        /// <summary>
        /// Specifies whether to return only private or only public (company) ERLs (Emergency Response Locations)
        /// </summary>
        /// <value>Specifies whether to return only private or only public (company) ERLs (Emergency Response Locations)</value>
        [DataMember(Name="visibility", EmitDefaultValue=false)]
        public VisibilityEnum? Visibility { get; set; }
        /// <summary>
        /// Resulting status of emergency address synchronization. Returned if &#x60;syncEmergencyAddress&#x60; parameter is set to &#39;True&#39;
        /// </summary>
        /// <value>Resulting status of emergency address synchronization. Returned if &#x60;syncEmergencyAddress&#x60; parameter is set to &#39;True&#39;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SyncStatusEnum
        {
            /// <summary>
            /// Enum Verified for value: Verified
            /// </summary>
            [EnumMember(Value = "Verified")]
            Verified = 1,

            /// <summary>
            /// Enum Updated for value: Updated
            /// </summary>
            [EnumMember(Value = "Updated")]
            Updated = 2,

            /// <summary>
            /// Enum Deleted for value: Deleted
            /// </summary>
            [EnumMember(Value = "Deleted")]
            Deleted = 3,

            /// <summary>
            /// Enum NotRequired for value: NotRequired
            /// </summary>
            [EnumMember(Value = "NotRequired")]
            NotRequired = 4,

            /// <summary>
            /// Enum Unsupported for value: Unsupported
            /// </summary>
            [EnumMember(Value = "Unsupported")]
            Unsupported = 5,

            /// <summary>
            /// Enum Failed for value: Failed
            /// </summary>
            [EnumMember(Value = "Failed")]
            Failed = 6

        }

        /// <summary>
        /// Resulting status of emergency address synchronization. Returned if &#x60;syncEmergencyAddress&#x60; parameter is set to &#39;True&#39;
        /// </summary>
        /// <value>Resulting status of emergency address synchronization. Returned if &#x60;syncEmergencyAddress&#x60; parameter is set to &#39;True&#39;</value>
        [DataMember(Name="syncStatus", EmitDefaultValue=false)]
        public SyncStatusEnum? SyncStatus { get; set; }
        /// <summary>
        /// Ability to register new emergency address for a phone line using devices sharing this line or only main device (line owner)
        /// </summary>
        /// <value>Ability to register new emergency address for a phone line using devices sharing this line or only main device (line owner)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AddressEditableStatusEnum
        {
            /// <summary>
            /// Enum MainDevice for value: MainDevice
            /// </summary>
            [EnumMember(Value = "MainDevice")]
            MainDevice = 1,

            /// <summary>
            /// Enum AnyDevice for value: AnyDevice
            /// </summary>
            [EnumMember(Value = "AnyDevice")]
            AnyDevice = 2

        }

        /// <summary>
        /// Ability to register new emergency address for a phone line using devices sharing this line or only main device (line owner)
        /// </summary>
        /// <value>Ability to register new emergency address for a phone line using devices sharing this line or only main device (line owner)</value>
        [DataMember(Name="addressEditableStatus", EmitDefaultValue=false)]
        public AddressEditableStatusEnum? AddressEditableStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SipRegistrationDeviceEmergencyInfo" /> class.
        /// </summary>
        /// <param name="address">address.</param>
        /// <param name="location">location.</param>
        /// <param name="outOfCountry">Specifies if emergency address is out of country.</param>
        /// <param name="addressStatus">Emergency address status.</param>
        /// <param name="visibility">Specifies whether to return only private or only public (company) ERLs (Emergency Response Locations).</param>
        /// <param name="syncStatus">Resulting status of emergency address synchronization. Returned if &#x60;syncEmergencyAddress&#x60; parameter is set to &#39;True&#39;.</param>
        /// <param name="addressEditableStatus">Ability to register new emergency address for a phone line using devices sharing this line or only main device (line owner).</param>
        /// <param name="addressRequired">&#39;True&#39; if emergency address is required for the country of a phone line.</param>
        /// <param name="addressLocationOnly">&#39;True&#39; if out of country emergency address is not allowed for the country of a phone line.</param>
        public SipRegistrationDeviceEmergencyInfo(DeviceEmergencyServiceAddressResource address = default(DeviceEmergencyServiceAddressResource), SipRegistrationDeviceLocationInfo location = default(SipRegistrationDeviceLocationInfo), bool outOfCountry = default(bool), AddressStatusEnum? addressStatus = default(AddressStatusEnum?), VisibilityEnum? visibility = default(VisibilityEnum?), SyncStatusEnum? syncStatus = default(SyncStatusEnum?), AddressEditableStatusEnum? addressEditableStatus = default(AddressEditableStatusEnum?), bool addressRequired = default(bool), bool addressLocationOnly = default(bool))
        {
            this.Address = address;
            this.Location = location;
            this.OutOfCountry = outOfCountry;
            this.AddressStatus = addressStatus;
            this.Visibility = visibility;
            this.SyncStatus = syncStatus;
            this.AddressEditableStatus = addressEditableStatus;
            this.AddressRequired = addressRequired;
            this.AddressLocationOnly = addressLocationOnly;
        }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public DeviceEmergencyServiceAddressResource Address { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public SipRegistrationDeviceLocationInfo Location { get; set; }

        /// <summary>
        /// Specifies if emergency address is out of country
        /// </summary>
        /// <value>Specifies if emergency address is out of country</value>
        [DataMember(Name="outOfCountry", EmitDefaultValue=false)]
        public bool OutOfCountry { get; set; }





        /// <summary>
        /// &#39;True&#39; if emergency address is required for the country of a phone line
        /// </summary>
        /// <value>&#39;True&#39; if emergency address is required for the country of a phone line</value>
        [DataMember(Name="addressRequired", EmitDefaultValue=false)]
        public bool AddressRequired { get; set; }

        /// <summary>
        /// &#39;True&#39; if out of country emergency address is not allowed for the country of a phone line
        /// </summary>
        /// <value>&#39;True&#39; if out of country emergency address is not allowed for the country of a phone line</value>
        [DataMember(Name="addressLocationOnly", EmitDefaultValue=false)]
        public bool AddressLocationOnly { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SipRegistrationDeviceEmergencyInfo {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  OutOfCountry: ").Append(OutOfCountry).Append("\n");
            sb.Append("  AddressStatus: ").Append(AddressStatus).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("  SyncStatus: ").Append(SyncStatus).Append("\n");
            sb.Append("  AddressEditableStatus: ").Append(AddressEditableStatus).Append("\n");
            sb.Append("  AddressRequired: ").Append(AddressRequired).Append("\n");
            sb.Append("  AddressLocationOnly: ").Append(AddressLocationOnly).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SipRegistrationDeviceEmergencyInfo);
        }

        /// <summary>
        /// Returns true if SipRegistrationDeviceEmergencyInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of SipRegistrationDeviceEmergencyInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SipRegistrationDeviceEmergencyInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.OutOfCountry == input.OutOfCountry ||
                    (this.OutOfCountry != null &&
                    this.OutOfCountry.Equals(input.OutOfCountry))
                ) && 
                (
                    this.AddressStatus == input.AddressStatus ||
                    (this.AddressStatus != null &&
                    this.AddressStatus.Equals(input.AddressStatus))
                ) && 
                (
                    this.Visibility == input.Visibility ||
                    (this.Visibility != null &&
                    this.Visibility.Equals(input.Visibility))
                ) && 
                (
                    this.SyncStatus == input.SyncStatus ||
                    (this.SyncStatus != null &&
                    this.SyncStatus.Equals(input.SyncStatus))
                ) && 
                (
                    this.AddressEditableStatus == input.AddressEditableStatus ||
                    (this.AddressEditableStatus != null &&
                    this.AddressEditableStatus.Equals(input.AddressEditableStatus))
                ) && 
                (
                    this.AddressRequired == input.AddressRequired ||
                    (this.AddressRequired != null &&
                    this.AddressRequired.Equals(input.AddressRequired))
                ) && 
                (
                    this.AddressLocationOnly == input.AddressLocationOnly ||
                    (this.AddressLocationOnly != null &&
                    this.AddressLocationOnly.Equals(input.AddressLocationOnly))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.OutOfCountry != null)
                    hashCode = hashCode * 59 + this.OutOfCountry.GetHashCode();
                if (this.AddressStatus != null)
                    hashCode = hashCode * 59 + this.AddressStatus.GetHashCode();
                if (this.Visibility != null)
                    hashCode = hashCode * 59 + this.Visibility.GetHashCode();
                if (this.SyncStatus != null)
                    hashCode = hashCode * 59 + this.SyncStatus.GetHashCode();
                if (this.AddressEditableStatus != null)
                    hashCode = hashCode * 59 + this.AddressEditableStatus.GetHashCode();
                if (this.AddressRequired != null)
                    hashCode = hashCode * 59 + this.AddressRequired.GetHashCode();
                if (this.AddressLocationOnly != null)
                    hashCode = hashCode * 59 + this.AddressLocationOnly.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
