/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The count of the status
    /// </summary>
    [DataContract]
    public partial class MessageStatusCounts :  IEquatable<MessageStatusCounts>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageStatusCounts" /> class.
        /// </summary>
        /// <param name="count">The count of the status.</param>
        /// <param name="errorCodeCounts">errorCodeCounts.</param>
        public MessageStatusCounts(long count = default(long), Dictionary<string, long> errorCodeCounts = default(Dictionary<string, long>))
        {
            this.Count = count;
            this.ErrorCodeCounts = errorCodeCounts;
        }

        /// <summary>
        /// The count of the status
        /// </summary>
        /// <value>The count of the status</value>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public long Count { get; set; }

        /// <summary>
        /// Gets or Sets ErrorCodeCounts
        /// </summary>
        [DataMember(Name="errorCodeCounts", EmitDefaultValue=false)]
        public Dictionary<string, long> ErrorCodeCounts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MessageStatusCounts {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  ErrorCodeCounts: ").Append(ErrorCodeCounts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MessageStatusCounts);
        }

        /// <summary>
        /// Returns true if MessageStatusCounts instances are equal
        /// </summary>
        /// <param name="input">Instance of MessageStatusCounts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessageStatusCounts input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                    this.Count.Equals(input.Count))
                ) && 
                (
                    this.ErrorCodeCounts == input.ErrorCodeCounts ||
                    this.ErrorCodeCounts != null &&
                    input.ErrorCodeCounts != null &&
                    this.ErrorCodeCounts.SequenceEqual(input.ErrorCodeCounts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Count != null)
                    hashCode = hashCode * 59 + this.Count.GetHashCode();
                if (this.ErrorCodeCounts != null)
                    hashCode = hashCode * 59 + this.ErrorCodeCounts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
