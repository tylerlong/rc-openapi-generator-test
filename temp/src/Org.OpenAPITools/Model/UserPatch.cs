/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// UserPatch
    /// </summary>
    [DataContract]
    public partial class UserPatch :  IEquatable<UserPatch>, IValidatableObject
    {
        /// <summary>
        /// Defines Schemas
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SchemasEnum
        {
            /// <summary>
            /// Enum Urnietfparamsscimapimessages20PatchOp for value: urn:ietf:params:scim:api:messages:2.0:PatchOp
            /// </summary>
            [EnumMember(Value = "urn:ietf:params:scim:api:messages:2.0:PatchOp")]
            Urnietfparamsscimapimessages20PatchOp = 1

        }


        /// <summary>
        /// Gets or Sets Schemas
        /// </summary>
        [DataMember(Name="schemas", EmitDefaultValue=true)]
        public List<SchemasEnum> Schemas { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserPatch" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserPatch() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserPatch" /> class.
        /// </summary>
        /// <param name="operations">patch operations list (required).</param>
        /// <param name="schemas">schemas (required).</param>
        public UserPatch(List<PatchOperation> operations = default(List<PatchOperation>), List<SchemasEnum> schemas = default(List<SchemasEnum>))
        {
            // to ensure "operations" is required (not null)
            if (operations == null)
            {
                throw new InvalidDataException("operations is a required property for UserPatch and cannot be null");
            }
            else
            {
                this.Operations = operations;
            }

            // to ensure "schemas" is required (not null)
            if (schemas == null)
            {
                throw new InvalidDataException("schemas is a required property for UserPatch and cannot be null");
            }
            else
            {
                this.Schemas = schemas;
            }

        }

        /// <summary>
        /// patch operations list
        /// </summary>
        /// <value>patch operations list</value>
        [DataMember(Name="Operations", EmitDefaultValue=true)]
        public List<PatchOperation> Operations { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserPatch {\n");
            sb.Append("  Operations: ").Append(Operations).Append("\n");
            sb.Append("  Schemas: ").Append(Schemas).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserPatch);
        }

        /// <summary>
        /// Returns true if UserPatch instances are equal
        /// </summary>
        /// <param name="input">Instance of UserPatch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserPatch input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Operations == input.Operations ||
                    this.Operations != null &&
                    input.Operations != null &&
                    this.Operations.SequenceEqual(input.Operations)
                ) && 
                (
                    this.Schemas == input.Schemas ||
                    this.Schemas != null &&
                    input.Schemas != null &&
                    this.Schemas.SequenceEqual(input.Schemas)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Operations != null)
                    hashCode = hashCode * 59 + this.Operations.GetHashCode();
                if (this.Schemas != null)
                    hashCode = hashCode * 59 + this.Schemas.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
