/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// IVRMenuActionsInfo
    /// </summary>
    [DataContract]
    public partial class IVRMenuActionsInfo :  IEquatable<IVRMenuActionsInfo>, IValidatableObject
    {
        /// <summary>
        /// Internal identifier of an answering rule
        /// </summary>
        /// <value>Internal identifier of an answering rule</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            /// <summary>
            /// Enum Connect for value: Connect
            /// </summary>
            [EnumMember(Value = "Connect")]
            Connect = 1,

            /// <summary>
            /// Enum Voicemail for value: Voicemail
            /// </summary>
            [EnumMember(Value = "Voicemail")]
            Voicemail = 2,

            /// <summary>
            /// Enum DialByName for value: DialByName
            /// </summary>
            [EnumMember(Value = "DialByName")]
            DialByName = 3,

            /// <summary>
            /// Enum Transfer for value: Transfer
            /// </summary>
            [EnumMember(Value = "Transfer")]
            Transfer = 4,

            /// <summary>
            /// Enum Repeat for value: Repeat
            /// </summary>
            [EnumMember(Value = "Repeat")]
            Repeat = 5,

            /// <summary>
            /// Enum ReturnToRoot for value: ReturnToRoot
            /// </summary>
            [EnumMember(Value = "ReturnToRoot")]
            ReturnToRoot = 6,

            /// <summary>
            /// Enum ReturnToPrevious for value: ReturnToPrevious
            /// </summary>
            [EnumMember(Value = "ReturnToPrevious")]
            ReturnToPrevious = 7,

            /// <summary>
            /// Enum Disconnect for value: Disconnect
            /// </summary>
            [EnumMember(Value = "Disconnect")]
            Disconnect = 8,

            /// <summary>
            /// Enum ReturnToTopLevelMenu for value: ReturnToTopLevelMenu
            /// </summary>
            [EnumMember(Value = "ReturnToTopLevelMenu")]
            ReturnToTopLevelMenu = 9,

            /// <summary>
            /// Enum DoNothing for value: DoNothing
            /// </summary>
            [EnumMember(Value = "DoNothing")]
            DoNothing = 10,

            /// <summary>
            /// Enum ConnectToOperator for value: ConnectToOperator
            /// </summary>
            [EnumMember(Value = "ConnectToOperator")]
            ConnectToOperator = 11

        }

        /// <summary>
        /// Internal identifier of an answering rule
        /// </summary>
        /// <value>Internal identifier of an answering rule</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IVRMenuActionsInfo" /> class.
        /// </summary>
        /// <param name="input">Key. The following values are supported: numeric: &#39;1&#39; to &#39;9&#39; Star Hash NoInput .</param>
        /// <param name="action">Internal identifier of an answering rule.</param>
        /// <param name="extension">extension.</param>
        /// <param name="phoneNumber">For &#39;Transfer&#39; action only. PSTN number in E.164 format.</param>
        public IVRMenuActionsInfo(string input = default(string), ActionEnum? action = default(ActionEnum?), IVRMenuExtensionInfo extension = default(IVRMenuExtensionInfo), string phoneNumber = default(string))
        {
            this.Input = input;
            this.Action = action;
            this.Extension = extension;
            this.PhoneNumber = phoneNumber;
        }

        /// <summary>
        /// Key. The following values are supported: numeric: &#39;1&#39; to &#39;9&#39; Star Hash NoInput 
        /// </summary>
        /// <value>Key. The following values are supported: numeric: &#39;1&#39; to &#39;9&#39; Star Hash NoInput </value>
        [DataMember(Name="input", EmitDefaultValue=false)]
        public string Input { get; set; }


        /// <summary>
        /// Gets or Sets Extension
        /// </summary>
        [DataMember(Name="extension", EmitDefaultValue=false)]
        public IVRMenuExtensionInfo Extension { get; set; }

        /// <summary>
        /// For &#39;Transfer&#39; action only. PSTN number in E.164 format
        /// </summary>
        /// <value>For &#39;Transfer&#39; action only. PSTN number in E.164 format</value>
        [DataMember(Name="phoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IVRMenuActionsInfo {\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IVRMenuActionsInfo);
        }

        /// <summary>
        /// Returns true if IVRMenuActionsInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of IVRMenuActionsInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IVRMenuActionsInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Input == input.Input ||
                    (this.Input != null &&
                    this.Input.Equals(input.Input))
                ) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.Extension == input.Extension ||
                    (this.Extension != null &&
                    this.Extension.Equals(input.Extension))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Input != null)
                    hashCode = hashCode * 59 + this.Input.GetHashCode();
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.Extension != null)
                    hashCode = hashCode * 59 + this.Extension.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
