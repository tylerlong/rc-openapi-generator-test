/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GetConferencingInfoResponse
    /// </summary>
    [DataContract]
    public partial class GetConferencingInfoResponse :  IEquatable<GetConferencingInfoResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetConferencingInfoResponse" /> class.
        /// </summary>
        /// <param name="uri">Canonical URI of a conferencing.</param>
        /// <param name="allowJoinBeforeHost">Determines if host user allows conference participants to join before the host.</param>
        /// <param name="hostCode">Access code for a host user.</param>
        /// <param name="mode">Internal parameter specifying conferencing engine.</param>
        /// <param name="participantCode">Access code for any participant.</param>
        /// <param name="phoneNumber">Primary conference phone number for user&#39;s home country returned in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format.</param>
        /// <param name="tapToJoinUri">Short URL leading to the service web page Tap to Join for audio conference bridge.</param>
        /// <param name="phoneNumbers">List of multiple dial-in phone numbers to connect to audio conference service, relevant for user&#39;s brand. Each number is given with the country and location information, in order to let the user choose the less expensive way to connect to a conference. The first number in the list is the primary conference number, that is default and domestic.</param>
        public GetConferencingInfoResponse(string uri = default(string), bool allowJoinBeforeHost = default(bool), string hostCode = default(string), string mode = default(string), string participantCode = default(string), string phoneNumber = default(string), string tapToJoinUri = default(string), List<PhoneNumberInfoConferencing> phoneNumbers = default(List<PhoneNumberInfoConferencing>))
        {
            this.Uri = uri;
            this.AllowJoinBeforeHost = allowJoinBeforeHost;
            this.HostCode = hostCode;
            this.Mode = mode;
            this.ParticipantCode = participantCode;
            this.PhoneNumber = phoneNumber;
            this.TapToJoinUri = tapToJoinUri;
            this.PhoneNumbers = phoneNumbers;
        }

        /// <summary>
        /// Canonical URI of a conferencing
        /// </summary>
        /// <value>Canonical URI of a conferencing</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Determines if host user allows conference participants to join before the host
        /// </summary>
        /// <value>Determines if host user allows conference participants to join before the host</value>
        [DataMember(Name="allowJoinBeforeHost", EmitDefaultValue=false)]
        public bool AllowJoinBeforeHost { get; set; }

        /// <summary>
        /// Access code for a host user
        /// </summary>
        /// <value>Access code for a host user</value>
        [DataMember(Name="hostCode", EmitDefaultValue=false)]
        public string HostCode { get; set; }

        /// <summary>
        /// Internal parameter specifying conferencing engine
        /// </summary>
        /// <value>Internal parameter specifying conferencing engine</value>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public string Mode { get; set; }

        /// <summary>
        /// Access code for any participant
        /// </summary>
        /// <value>Access code for any participant</value>
        [DataMember(Name="participantCode", EmitDefaultValue=false)]
        public string ParticipantCode { get; set; }

        /// <summary>
        /// Primary conference phone number for user&#39;s home country returned in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format
        /// </summary>
        /// <value>Primary conference phone number for user&#39;s home country returned in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format</value>
        [DataMember(Name="phoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Short URL leading to the service web page Tap to Join for audio conference bridge
        /// </summary>
        /// <value>Short URL leading to the service web page Tap to Join for audio conference bridge</value>
        [DataMember(Name="tapToJoinUri", EmitDefaultValue=false)]
        public string TapToJoinUri { get; set; }

        /// <summary>
        /// List of multiple dial-in phone numbers to connect to audio conference service, relevant for user&#39;s brand. Each number is given with the country and location information, in order to let the user choose the less expensive way to connect to a conference. The first number in the list is the primary conference number, that is default and domestic
        /// </summary>
        /// <value>List of multiple dial-in phone numbers to connect to audio conference service, relevant for user&#39;s brand. Each number is given with the country and location information, in order to let the user choose the less expensive way to connect to a conference. The first number in the list is the primary conference number, that is default and domestic</value>
        [DataMember(Name="phoneNumbers", EmitDefaultValue=false)]
        public List<PhoneNumberInfoConferencing> PhoneNumbers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetConferencingInfoResponse {\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  AllowJoinBeforeHost: ").Append(AllowJoinBeforeHost).Append("\n");
            sb.Append("  HostCode: ").Append(HostCode).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  ParticipantCode: ").Append(ParticipantCode).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  TapToJoinUri: ").Append(TapToJoinUri).Append("\n");
            sb.Append("  PhoneNumbers: ").Append(PhoneNumbers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetConferencingInfoResponse);
        }

        /// <summary>
        /// Returns true if GetConferencingInfoResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetConferencingInfoResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetConferencingInfoResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.AllowJoinBeforeHost == input.AllowJoinBeforeHost ||
                    (this.AllowJoinBeforeHost != null &&
                    this.AllowJoinBeforeHost.Equals(input.AllowJoinBeforeHost))
                ) && 
                (
                    this.HostCode == input.HostCode ||
                    (this.HostCode != null &&
                    this.HostCode.Equals(input.HostCode))
                ) && 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.ParticipantCode == input.ParticipantCode ||
                    (this.ParticipantCode != null &&
                    this.ParticipantCode.Equals(input.ParticipantCode))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.TapToJoinUri == input.TapToJoinUri ||
                    (this.TapToJoinUri != null &&
                    this.TapToJoinUri.Equals(input.TapToJoinUri))
                ) && 
                (
                    this.PhoneNumbers == input.PhoneNumbers ||
                    this.PhoneNumbers != null &&
                    input.PhoneNumbers != null &&
                    this.PhoneNumbers.SequenceEqual(input.PhoneNumbers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.AllowJoinBeforeHost != null)
                    hashCode = hashCode * 59 + this.AllowJoinBeforeHost.GetHashCode();
                if (this.HostCode != null)
                    hashCode = hashCode * 59 + this.HostCode.GetHashCode();
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.ParticipantCode != null)
                    hashCode = hashCode * 59 + this.ParticipantCode.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.TapToJoinUri != null)
                    hashCode = hashCode * 59 + this.TapToJoinUri.GetHashCode();
                if (this.PhoneNumbers != null)
                    hashCode = hashCode * 59 + this.PhoneNumbers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
