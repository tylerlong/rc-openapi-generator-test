/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Meeting links
    /// </summary>
    [DataContract]
    public partial class MeetingLinks :  IEquatable<MeetingLinks>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MeetingLinks" /> class.
        /// </summary>
        /// <param name="startUri">startUri.</param>
        /// <param name="joinUri">joinUri.</param>
        public MeetingLinks(string startUri = default(string), string joinUri = default(string))
        {
            this.StartUri = startUri;
            this.JoinUri = joinUri;
        }

        /// <summary>
        /// Gets or Sets StartUri
        /// </summary>
        [DataMember(Name="startUri", EmitDefaultValue=false)]
        public string StartUri { get; set; }

        /// <summary>
        /// Gets or Sets JoinUri
        /// </summary>
        [DataMember(Name="joinUri", EmitDefaultValue=false)]
        public string JoinUri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MeetingLinks {\n");
            sb.Append("  StartUri: ").Append(StartUri).Append("\n");
            sb.Append("  JoinUri: ").Append(JoinUri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MeetingLinks);
        }

        /// <summary>
        /// Returns true if MeetingLinks instances are equal
        /// </summary>
        /// <param name="input">Instance of MeetingLinks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MeetingLinks input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StartUri == input.StartUri ||
                    (this.StartUri != null &&
                    this.StartUri.Equals(input.StartUri))
                ) && 
                (
                    this.JoinUri == input.JoinUri ||
                    (this.JoinUri != null &&
                    this.JoinUri.Equals(input.JoinUri))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartUri != null)
                    hashCode = hashCode * 59 + this.StartUri.GetHashCode();
                if (this.JoinUri != null)
                    hashCode = hashCode * 59 + this.JoinUri.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
