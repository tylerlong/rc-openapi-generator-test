/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OutboundProxyInfo
    /// </summary>
    [DataContract]
    public partial class OutboundProxyInfo :  IEquatable<OutboundProxyInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OutboundProxyInfo" /> class.
        /// </summary>
        /// <param name="region">Geographical region.</param>
        /// <param name="proxy">SIP outbound proxy.</param>
        /// <param name="proxyTLS">SIP details for TLS (Transport Layer Security).</param>
        public OutboundProxyInfo(string region = default(string), string proxy = default(string), string proxyTLS = default(string))
        {
            this.Region = region;
            this.Proxy = proxy;
            this.ProxyTLS = proxyTLS;
        }

        /// <summary>
        /// Geographical region
        /// </summary>
        /// <value>Geographical region</value>
        [DataMember(Name="region", EmitDefaultValue=false)]
        public string Region { get; set; }

        /// <summary>
        /// SIP outbound proxy
        /// </summary>
        /// <value>SIP outbound proxy</value>
        [DataMember(Name="proxy", EmitDefaultValue=false)]
        public string Proxy { get; set; }

        /// <summary>
        /// SIP details for TLS (Transport Layer Security)
        /// </summary>
        /// <value>SIP details for TLS (Transport Layer Security)</value>
        [DataMember(Name="proxyTLS", EmitDefaultValue=false)]
        public string ProxyTLS { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OutboundProxyInfo {\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  Proxy: ").Append(Proxy).Append("\n");
            sb.Append("  ProxyTLS: ").Append(ProxyTLS).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OutboundProxyInfo);
        }

        /// <summary>
        /// Returns true if OutboundProxyInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of OutboundProxyInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OutboundProxyInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) && 
                (
                    this.Proxy == input.Proxy ||
                    (this.Proxy != null &&
                    this.Proxy.Equals(input.Proxy))
                ) && 
                (
                    this.ProxyTLS == input.ProxyTLS ||
                    (this.ProxyTLS != null &&
                    this.ProxyTLS.Equals(input.ProxyTLS))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Region != null)
                    hashCode = hashCode * 59 + this.Region.GetHashCode();
                if (this.Proxy != null)
                    hashCode = hashCode * 59 + this.Proxy.GetHashCode();
                if (this.ProxyTLS != null)
                    hashCode = hashCode * 59 + this.ProxyTLS.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
