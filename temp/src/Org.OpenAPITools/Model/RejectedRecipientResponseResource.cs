/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The rejected recipient details
    /// </summary>
    [DataContract]
    public partial class RejectedRecipientResponseResource :  IEquatable<RejectedRecipientResponseResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RejectedRecipientResponseResource" /> class.
        /// </summary>
        /// <param name="index">The index of the messages list in the send batch request where the invalid recipient was found.</param>
        /// <param name="to">The invalid recipient number as found in the request.</param>
        /// <param name="errorCode">The error code.</param>
        /// <param name="description">The description of the error.</param>
        public RejectedRecipientResponseResource(long index = default(long), List<string> to = default(List<string>), string errorCode = default(string), string description = default(string))
        {
            this.Index = index;
            this.To = to;
            this.ErrorCode = errorCode;
            this.Description = description;
        }

        /// <summary>
        /// The index of the messages list in the send batch request where the invalid recipient was found
        /// </summary>
        /// <value>The index of the messages list in the send batch request where the invalid recipient was found</value>
        [DataMember(Name="index", EmitDefaultValue=false)]
        public long Index { get; set; }

        /// <summary>
        /// The invalid recipient number as found in the request
        /// </summary>
        /// <value>The invalid recipient number as found in the request</value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public List<string> To { get; set; }

        /// <summary>
        /// The error code
        /// </summary>
        /// <value>The error code</value>
        [DataMember(Name="errorCode", EmitDefaultValue=false)]
        public string ErrorCode { get; set; }

        /// <summary>
        /// The description of the error
        /// </summary>
        /// <value>The description of the error</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RejectedRecipientResponseResource {\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RejectedRecipientResponseResource);
        }

        /// <summary>
        /// Returns true if RejectedRecipientResponseResource instances are equal
        /// </summary>
        /// <param name="input">Instance of RejectedRecipientResponseResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RejectedRecipientResponseResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Index == input.Index ||
                    (this.Index != null &&
                    this.Index.Equals(input.Index))
                ) && 
                (
                    this.To == input.To ||
                    this.To != null &&
                    input.To != null &&
                    this.To.SequenceEqual(input.To)
                ) && 
                (
                    this.ErrorCode == input.ErrorCode ||
                    (this.ErrorCode != null &&
                    this.ErrorCode.Equals(input.ErrorCode))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Index != null)
                    hashCode = hashCode * 59 + this.Index.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.ErrorCode != null)
                    hashCode = hashCode * 59 + this.ErrorCode.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
