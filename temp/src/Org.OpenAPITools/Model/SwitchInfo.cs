/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SwitchInfo
    /// </summary>
    [DataContract]
    public partial class SwitchInfo :  IEquatable<SwitchInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SwitchInfo" /> class.
        /// </summary>
        /// <param name="uri">Link to the network switch resource.</param>
        /// <param name="id">Internal identifier of a network switch.</param>
        /// <param name="chassisId">Unique identifier of a network switch.</param>
        /// <param name="name">Name of a network switch.</param>
        /// <param name="site">site.</param>
        /// <param name="emergencyAddress">emergencyAddress.</param>
        /// <param name="emergencyLocationId">Deprecated. Emergency response location (address) internal identifier. Only one of a pair &#x60;emergencyAddress&#x60; or &#x60;emergencyLocationId&#x60; should be specified, otherwise the error is returned.</param>
        /// <param name="emergencyLocation">emergencyLocation.</param>
        public SwitchInfo(string uri = default(string), string id = default(string), string chassisId = default(string), string name = default(string), SwitchSiteInfo site = default(SwitchSiteInfo), LocationUpdatesEmergencyAddressInfo emergencyAddress = default(LocationUpdatesEmergencyAddressInfo), string emergencyLocationId = default(string), ERLLocationInfo emergencyLocation = default(ERLLocationInfo))
        {
            this.Uri = uri;
            this.Id = id;
            this.ChassisId = chassisId;
            this.Name = name;
            this.Site = site;
            this.EmergencyAddress = emergencyAddress;
            this.EmergencyLocationId = emergencyLocationId;
            this.EmergencyLocation = emergencyLocation;
        }

        /// <summary>
        /// Link to the network switch resource
        /// </summary>
        /// <value>Link to the network switch resource</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Internal identifier of a network switch
        /// </summary>
        /// <value>Internal identifier of a network switch</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Unique identifier of a network switch
        /// </summary>
        /// <value>Unique identifier of a network switch</value>
        [DataMember(Name="chassisId", EmitDefaultValue=false)]
        public string ChassisId { get; set; }

        /// <summary>
        /// Name of a network switch
        /// </summary>
        /// <value>Name of a network switch</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Site
        /// </summary>
        [DataMember(Name="site", EmitDefaultValue=false)]
        public SwitchSiteInfo Site { get; set; }

        /// <summary>
        /// Gets or Sets EmergencyAddress
        /// </summary>
        [DataMember(Name="emergencyAddress", EmitDefaultValue=false)]
        public LocationUpdatesEmergencyAddressInfo EmergencyAddress { get; set; }

        /// <summary>
        /// Deprecated. Emergency response location (address) internal identifier. Only one of a pair &#x60;emergencyAddress&#x60; or &#x60;emergencyLocationId&#x60; should be specified, otherwise the error is returned
        /// </summary>
        /// <value>Deprecated. Emergency response location (address) internal identifier. Only one of a pair &#x60;emergencyAddress&#x60; or &#x60;emergencyLocationId&#x60; should be specified, otherwise the error is returned</value>
        [DataMember(Name="emergencyLocationId", EmitDefaultValue=false)]
        public string EmergencyLocationId { get; set; }

        /// <summary>
        /// Gets or Sets EmergencyLocation
        /// </summary>
        [DataMember(Name="emergencyLocation", EmitDefaultValue=false)]
        public ERLLocationInfo EmergencyLocation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SwitchInfo {\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ChassisId: ").Append(ChassisId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Site: ").Append(Site).Append("\n");
            sb.Append("  EmergencyAddress: ").Append(EmergencyAddress).Append("\n");
            sb.Append("  EmergencyLocationId: ").Append(EmergencyLocationId).Append("\n");
            sb.Append("  EmergencyLocation: ").Append(EmergencyLocation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SwitchInfo);
        }

        /// <summary>
        /// Returns true if SwitchInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of SwitchInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SwitchInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ChassisId == input.ChassisId ||
                    (this.ChassisId != null &&
                    this.ChassisId.Equals(input.ChassisId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Site == input.Site ||
                    (this.Site != null &&
                    this.Site.Equals(input.Site))
                ) && 
                (
                    this.EmergencyAddress == input.EmergencyAddress ||
                    (this.EmergencyAddress != null &&
                    this.EmergencyAddress.Equals(input.EmergencyAddress))
                ) && 
                (
                    this.EmergencyLocationId == input.EmergencyLocationId ||
                    (this.EmergencyLocationId != null &&
                    this.EmergencyLocationId.Equals(input.EmergencyLocationId))
                ) && 
                (
                    this.EmergencyLocation == input.EmergencyLocation ||
                    (this.EmergencyLocation != null &&
                    this.EmergencyLocation.Equals(input.EmergencyLocation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ChassisId != null)
                    hashCode = hashCode * 59 + this.ChassisId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Site != null)
                    hashCode = hashCode * 59 + this.Site.GetHashCode();
                if (this.EmergencyAddress != null)
                    hashCode = hashCode * 59 + this.EmergencyAddress.GetHashCode();
                if (this.EmergencyLocationId != null)
                    hashCode = hashCode * 59 + this.EmergencyLocationId.GetHashCode();
                if (this.EmergencyLocation != null)
                    hashCode = hashCode * 59 + this.EmergencyLocation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
