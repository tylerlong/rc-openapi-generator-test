/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CreateGlipConversationRequest
    /// </summary>
    [DataContract]
    public partial class CreateGlipConversationRequest :  IEquatable<CreateGlipConversationRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateGlipConversationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateGlipConversationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateGlipConversationRequest" /> class.
        /// </summary>
        /// <param name="members">List of glip members. The maximum supported number of IDs is 15. User&#39;s own ID is optional. If &#x60;members&#x60; section is omitted then &#39;Personal&#39; chat will be returned (required).</param>
        public CreateGlipConversationRequest(List<CreateGlipMember> members = default(List<CreateGlipMember>))
        {
            // to ensure "members" is required (not null)
            if (members == null)
            {
                throw new InvalidDataException("members is a required property for CreateGlipConversationRequest and cannot be null");
            }
            else
            {
                this.Members = members;
            }

        }

        /// <summary>
        /// List of glip members. The maximum supported number of IDs is 15. User&#39;s own ID is optional. If &#x60;members&#x60; section is omitted then &#39;Personal&#39; chat will be returned
        /// </summary>
        /// <value>List of glip members. The maximum supported number of IDs is 15. User&#39;s own ID is optional. If &#x60;members&#x60; section is omitted then &#39;Personal&#39; chat will be returned</value>
        [DataMember(Name="members", EmitDefaultValue=true)]
        public List<CreateGlipMember> Members { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateGlipConversationRequest {\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateGlipConversationRequest);
        }

        /// <summary>
        /// Returns true if CreateGlipConversationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateGlipConversationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateGlipConversationRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Members == input.Members ||
                    this.Members != null &&
                    input.Members != null &&
                    this.Members.SequenceEqual(input.Members)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Members != null)
                    hashCode = hashCode * 59 + this.Members.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
