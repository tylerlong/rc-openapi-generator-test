/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AccountDeviceUpdate
    /// </summary>
    [DataContract]
    public partial class AccountDeviceUpdate :  IEquatable<AccountDeviceUpdate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountDeviceUpdate" /> class.
        /// </summary>
        /// <param name="emergencyServiceAddress">emergencyServiceAddress.</param>
        /// <param name="emergency">emergency.</param>
        /// <param name="extension">extension.</param>
        /// <param name="phoneLines">phoneLines.</param>
        /// <param name="useAsCommonPhone">Supported only for devices assigned to Limited extensions. If true, enables users to log in to this phone as a common phone..</param>
        /// <param name="name">Device label, maximum number of symbols is 64.</param>
        public AccountDeviceUpdate(EmergencyServiceAddressResourceRequest emergencyServiceAddress = default(EmergencyServiceAddressResourceRequest), DeviceEmergencyInfo emergency = default(DeviceEmergencyInfo), DeviceUpdateExtensionInfo extension = default(DeviceUpdateExtensionInfo), DeviceUpdatePhoneLinesInfo phoneLines = default(DeviceUpdatePhoneLinesInfo), bool useAsCommonPhone = default(bool), string name = default(string))
        {
            this.EmergencyServiceAddress = emergencyServiceAddress;
            this.Emergency = emergency;
            this.Extension = extension;
            this.PhoneLines = phoneLines;
            this.UseAsCommonPhone = useAsCommonPhone;
            this.Name = name;
        }

        /// <summary>
        /// Gets or Sets EmergencyServiceAddress
        /// </summary>
        [DataMember(Name="emergencyServiceAddress", EmitDefaultValue=false)]
        public EmergencyServiceAddressResourceRequest EmergencyServiceAddress { get; set; }

        /// <summary>
        /// Gets or Sets Emergency
        /// </summary>
        [DataMember(Name="emergency", EmitDefaultValue=false)]
        public DeviceEmergencyInfo Emergency { get; set; }

        /// <summary>
        /// Gets or Sets Extension
        /// </summary>
        [DataMember(Name="extension", EmitDefaultValue=false)]
        public DeviceUpdateExtensionInfo Extension { get; set; }

        /// <summary>
        /// Gets or Sets PhoneLines
        /// </summary>
        [DataMember(Name="phoneLines", EmitDefaultValue=false)]
        public DeviceUpdatePhoneLinesInfo PhoneLines { get; set; }

        /// <summary>
        /// Supported only for devices assigned to Limited extensions. If true, enables users to log in to this phone as a common phone.
        /// </summary>
        /// <value>Supported only for devices assigned to Limited extensions. If true, enables users to log in to this phone as a common phone.</value>
        [DataMember(Name="useAsCommonPhone", EmitDefaultValue=false)]
        public bool UseAsCommonPhone { get; set; }

        /// <summary>
        /// Device label, maximum number of symbols is 64
        /// </summary>
        /// <value>Device label, maximum number of symbols is 64</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountDeviceUpdate {\n");
            sb.Append("  EmergencyServiceAddress: ").Append(EmergencyServiceAddress).Append("\n");
            sb.Append("  Emergency: ").Append(Emergency).Append("\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("  PhoneLines: ").Append(PhoneLines).Append("\n");
            sb.Append("  UseAsCommonPhone: ").Append(UseAsCommonPhone).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountDeviceUpdate);
        }

        /// <summary>
        /// Returns true if AccountDeviceUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountDeviceUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountDeviceUpdate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EmergencyServiceAddress == input.EmergencyServiceAddress ||
                    (this.EmergencyServiceAddress != null &&
                    this.EmergencyServiceAddress.Equals(input.EmergencyServiceAddress))
                ) && 
                (
                    this.Emergency == input.Emergency ||
                    (this.Emergency != null &&
                    this.Emergency.Equals(input.Emergency))
                ) && 
                (
                    this.Extension == input.Extension ||
                    (this.Extension != null &&
                    this.Extension.Equals(input.Extension))
                ) && 
                (
                    this.PhoneLines == input.PhoneLines ||
                    (this.PhoneLines != null &&
                    this.PhoneLines.Equals(input.PhoneLines))
                ) && 
                (
                    this.UseAsCommonPhone == input.UseAsCommonPhone ||
                    (this.UseAsCommonPhone != null &&
                    this.UseAsCommonPhone.Equals(input.UseAsCommonPhone))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EmergencyServiceAddress != null)
                    hashCode = hashCode * 59 + this.EmergencyServiceAddress.GetHashCode();
                if (this.Emergency != null)
                    hashCode = hashCode * 59 + this.Emergency.GetHashCode();
                if (this.Extension != null)
                    hashCode = hashCode * 59 + this.Extension.GetHashCode();
                if (this.PhoneLines != null)
                    hashCode = hashCode * 59 + this.PhoneLines.GetHashCode();
                if (this.UseAsCommonPhone != null)
                    hashCode = hashCode * 59 + this.UseAsCommonPhone.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
