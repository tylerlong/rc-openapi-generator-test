/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GlipCompany
    /// </summary>
    [DataContract]
    public partial class GlipCompany :  IEquatable<GlipCompany>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GlipCompany" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GlipCompany() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GlipCompany" /> class.
        /// </summary>
        /// <param name="id">Internal identifier of a Glip company (RC account) (required).</param>
        /// <param name="name">Name of a company.</param>
        /// <param name="domain">Domain name of a company.</param>
        /// <param name="creationTime">Datetime of creation in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (required).</param>
        /// <param name="lastModifiedTime">Datetime of last modification in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (required).</param>
        public GlipCompany(string id = default(string), string name = default(string), string domain = default(string), string creationTime = default(string), string lastModifiedTime = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for GlipCompany and cannot be null");
            }
            else
            {
                this.Id = id;
            }

            // to ensure "creationTime" is required (not null)
            if (creationTime == null)
            {
                throw new InvalidDataException("creationTime is a required property for GlipCompany and cannot be null");
            }
            else
            {
                this.CreationTime = creationTime;
            }

            // to ensure "lastModifiedTime" is required (not null)
            if (lastModifiedTime == null)
            {
                throw new InvalidDataException("lastModifiedTime is a required property for GlipCompany and cannot be null");
            }
            else
            {
                this.LastModifiedTime = lastModifiedTime;
            }

            this.Name = name;
            this.Domain = domain;
        }

        /// <summary>
        /// Internal identifier of a Glip company (RC account)
        /// </summary>
        /// <value>Internal identifier of a Glip company (RC account)</value>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Name of a company
        /// </summary>
        /// <value>Name of a company</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Domain name of a company
        /// </summary>
        /// <value>Domain name of a company</value>
        [DataMember(Name="domain", EmitDefaultValue=false)]
        public string Domain { get; set; }

        /// <summary>
        /// Datetime of creation in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format
        /// </summary>
        /// <value>Datetime of creation in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format</value>
        [DataMember(Name="creationTime", EmitDefaultValue=true)]
        public string CreationTime { get; set; }

        /// <summary>
        /// Datetime of last modification in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format
        /// </summary>
        /// <value>Datetime of last modification in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format</value>
        [DataMember(Name="lastModifiedTime", EmitDefaultValue=true)]
        public string LastModifiedTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlipCompany {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  CreationTime: ").Append(CreationTime).Append("\n");
            sb.Append("  LastModifiedTime: ").Append(LastModifiedTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GlipCompany);
        }

        /// <summary>
        /// Returns true if GlipCompany instances are equal
        /// </summary>
        /// <param name="input">Instance of GlipCompany to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlipCompany input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.CreationTime == input.CreationTime ||
                    (this.CreationTime != null &&
                    this.CreationTime.Equals(input.CreationTime))
                ) && 
                (
                    this.LastModifiedTime == input.LastModifiedTime ||
                    (this.LastModifiedTime != null &&
                    this.LastModifiedTime.Equals(input.LastModifiedTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Domain != null)
                    hashCode = hashCode * 59 + this.Domain.GetHashCode();
                if (this.CreationTime != null)
                    hashCode = hashCode * 59 + this.CreationTime.GetHashCode();
                if (this.LastModifiedTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
