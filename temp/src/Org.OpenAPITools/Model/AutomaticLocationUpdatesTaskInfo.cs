/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AutomaticLocationUpdatesTaskInfo
    /// </summary>
    [DataContract]
    public partial class AutomaticLocationUpdatesTaskInfo :  IEquatable<AutomaticLocationUpdatesTaskInfo>, IValidatableObject
    {
        /// <summary>
        /// Status of a task
        /// </summary>
        /// <value>Status of a task</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Accepted for value: Accepted
            /// </summary>
            [EnumMember(Value = "Accepted")]
            Accepted = 1,

            /// <summary>
            /// Enum InProgress for value: InProgress
            /// </summary>
            [EnumMember(Value = "InProgress")]
            InProgress = 2,

            /// <summary>
            /// Enum Completed for value: Completed
            /// </summary>
            [EnumMember(Value = "Completed")]
            Completed = 3,

            /// <summary>
            /// Enum Failed for value: Failed
            /// </summary>
            [EnumMember(Value = "Failed")]
            Failed = 4

        }

        /// <summary>
        /// Status of a task
        /// </summary>
        /// <value>Status of a task</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Type of a task
        /// </summary>
        /// <value>Type of a task</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum WirelessPointsBulkCreate for value: WirelessPointsBulkCreate
            /// </summary>
            [EnumMember(Value = "WirelessPointsBulkCreate")]
            WirelessPointsBulkCreate = 1,

            /// <summary>
            /// Enum WirelessPointsBulkUpdate for value: WirelessPointsBulkUpdate
            /// </summary>
            [EnumMember(Value = "WirelessPointsBulkUpdate")]
            WirelessPointsBulkUpdate = 2,

            /// <summary>
            /// Enum SwitchesBulkCreate for value: SwitchesBulkCreate
            /// </summary>
            [EnumMember(Value = "SwitchesBulkCreate")]
            SwitchesBulkCreate = 3,

            /// <summary>
            /// Enum SwitchesBulkUpdate for value: SwitchesBulkUpdate
            /// </summary>
            [EnumMember(Value = "SwitchesBulkUpdate")]
            SwitchesBulkUpdate = 4

        }

        /// <summary>
        /// Type of a task
        /// </summary>
        /// <value>Type of a task</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AutomaticLocationUpdatesTaskInfo" /> class.
        /// </summary>
        /// <param name="id">Internal identifier of a task.</param>
        /// <param name="status">Status of a task.</param>
        /// <param name="creationTime">Task creation time.</param>
        /// <param name="lastModifiedTime">Time of the task latest modification.</param>
        /// <param name="type">Type of a task.</param>
        /// <param name="result">result.</param>
        public AutomaticLocationUpdatesTaskInfo(string id = default(string), StatusEnum? status = default(StatusEnum?), string creationTime = default(string), string lastModifiedTime = default(string), TypeEnum? type = default(TypeEnum?), TaskResultInfo result = default(TaskResultInfo))
        {
            this.Id = id;
            this.Status = status;
            this.CreationTime = creationTime;
            this.LastModifiedTime = lastModifiedTime;
            this.Type = type;
            this.Result = result;
        }

        /// <summary>
        /// Internal identifier of a task
        /// </summary>
        /// <value>Internal identifier of a task</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// Task creation time
        /// </summary>
        /// <value>Task creation time</value>
        [DataMember(Name="creationTime", EmitDefaultValue=false)]
        public string CreationTime { get; set; }

        /// <summary>
        /// Time of the task latest modification
        /// </summary>
        /// <value>Time of the task latest modification</value>
        [DataMember(Name="lastModifiedTime", EmitDefaultValue=false)]
        public string LastModifiedTime { get; set; }


        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name="result", EmitDefaultValue=false)]
        public TaskResultInfo Result { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AutomaticLocationUpdatesTaskInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CreationTime: ").Append(CreationTime).Append("\n");
            sb.Append("  LastModifiedTime: ").Append(LastModifiedTime).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AutomaticLocationUpdatesTaskInfo);
        }

        /// <summary>
        /// Returns true if AutomaticLocationUpdatesTaskInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of AutomaticLocationUpdatesTaskInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AutomaticLocationUpdatesTaskInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.CreationTime == input.CreationTime ||
                    (this.CreationTime != null &&
                    this.CreationTime.Equals(input.CreationTime))
                ) && 
                (
                    this.LastModifiedTime == input.LastModifiedTime ||
                    (this.LastModifiedTime != null &&
                    this.LastModifiedTime.Equals(input.LastModifiedTime))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Result == input.Result ||
                    (this.Result != null &&
                    this.Result.Equals(input.Result))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.CreationTime != null)
                    hashCode = hashCode * 59 + this.CreationTime.GetHashCode();
                if (this.LastModifiedTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedTime.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Result != null)
                    hashCode = hashCode * 59 + this.Result.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
