/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// For NotActivated extensions only. Welcome email settings
    /// </summary>
    [DataContract]
    public partial class UserTransitionInfo :  IEquatable<UserTransitionInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserTransitionInfo" /> class.
        /// </summary>
        /// <param name="sendWelcomeEmailsToUsers">Specifies if a welcome/activation email is sent to the existing users during account confirmation.</param>
        /// <param name="sendWelcomeEmail">Specifies if a welcome/activation email is sent to the new users (within extension status changing from &#39;Unassigned&#39; to &#39;NotActivated/Disabled&#39;).</param>
        public UserTransitionInfo(bool sendWelcomeEmailsToUsers = default(bool), bool sendWelcomeEmail = default(bool))
        {
            this.SendWelcomeEmailsToUsers = sendWelcomeEmailsToUsers;
            this.SendWelcomeEmail = sendWelcomeEmail;
        }

        /// <summary>
        /// Specifies if a welcome/activation email is sent to the existing users during account confirmation
        /// </summary>
        /// <value>Specifies if a welcome/activation email is sent to the existing users during account confirmation</value>
        [DataMember(Name="sendWelcomeEmailsToUsers", EmitDefaultValue=false)]
        public bool SendWelcomeEmailsToUsers { get; set; }

        /// <summary>
        /// Specifies if a welcome/activation email is sent to the new users (within extension status changing from &#39;Unassigned&#39; to &#39;NotActivated/Disabled&#39;)
        /// </summary>
        /// <value>Specifies if a welcome/activation email is sent to the new users (within extension status changing from &#39;Unassigned&#39; to &#39;NotActivated/Disabled&#39;)</value>
        [DataMember(Name="sendWelcomeEmail", EmitDefaultValue=false)]
        public bool SendWelcomeEmail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserTransitionInfo {\n");
            sb.Append("  SendWelcomeEmailsToUsers: ").Append(SendWelcomeEmailsToUsers).Append("\n");
            sb.Append("  SendWelcomeEmail: ").Append(SendWelcomeEmail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserTransitionInfo);
        }

        /// <summary>
        /// Returns true if UserTransitionInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of UserTransitionInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserTransitionInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SendWelcomeEmailsToUsers == input.SendWelcomeEmailsToUsers ||
                    (this.SendWelcomeEmailsToUsers != null &&
                    this.SendWelcomeEmailsToUsers.Equals(input.SendWelcomeEmailsToUsers))
                ) && 
                (
                    this.SendWelcomeEmail == input.SendWelcomeEmail ||
                    (this.SendWelcomeEmail != null &&
                    this.SendWelcomeEmail.Equals(input.SendWelcomeEmail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SendWelcomeEmailsToUsers != null)
                    hashCode = hashCode * 59 + this.SendWelcomeEmailsToUsers.GetHashCode();
                if (this.SendWelcomeEmail != null)
                    hashCode = hashCode * 59 + this.SendWelcomeEmail.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
