/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Action target object (company/extension)
    /// </summary>
    [DataContract]
    public partial class AccountHistoryRecordTarget :  IEquatable<AccountHistoryRecordTarget>, IValidatableObject
    {
        /// <summary>
        /// Type of the entity. Possible values include EXTENSION, ACCOUNT, COMPANY, and TEMPLATE.
        /// </summary>
        /// <value>Type of the entity. Possible values include EXTENSION, ACCOUNT, COMPANY, and TEMPLATE.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectTypeEnum
        {
            /// <summary>
            /// Enum Extension for value: Extension
            /// </summary>
            [EnumMember(Value = "Extension")]
            Extension = 1,

            /// <summary>
            /// Enum Account for value: Account
            /// </summary>
            [EnumMember(Value = "Account")]
            Account = 2,

            /// <summary>
            /// Enum Company for value: Company
            /// </summary>
            [EnumMember(Value = "Company")]
            Company = 3,

            /// <summary>
            /// Enum Template for value: Template
            /// </summary>
            [EnumMember(Value = "Template")]
            Template = 4

        }

        /// <summary>
        /// Type of the entity. Possible values include EXTENSION, ACCOUNT, COMPANY, and TEMPLATE.
        /// </summary>
        /// <value>Type of the entity. Possible values include EXTENSION, ACCOUNT, COMPANY, and TEMPLATE.</value>
        [DataMember(Name="objectType", EmitDefaultValue=false)]
        public ObjectTypeEnum? ObjectType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountHistoryRecordTarget" /> class.
        /// </summary>
        /// <param name="objectId">Extension identifier of the affected entity or 0 for Company level.</param>
        /// <param name="objectType">Type of the entity. Possible values include EXTENSION, ACCOUNT, COMPANY, and TEMPLATE..</param>
        /// <param name="name">Target extension name.</param>
        /// <param name="extensionNumber">Target extension (short) number of the affected entity (if the objectType is EXTENSION)..</param>
        /// <param name="siteId">Target extension site identifier (if any).</param>
        public AccountHistoryRecordTarget(string objectId = default(string), ObjectTypeEnum? objectType = default(ObjectTypeEnum?), string name = default(string), string extensionNumber = default(string), string siteId = default(string))
        {
            this.ObjectId = objectId;
            this.ObjectType = objectType;
            this.Name = name;
            this.ExtensionNumber = extensionNumber;
            this.SiteId = siteId;
        }

        /// <summary>
        /// Extension identifier of the affected entity or 0 for Company level
        /// </summary>
        /// <value>Extension identifier of the affected entity or 0 for Company level</value>
        [DataMember(Name="objectId", EmitDefaultValue=false)]
        public string ObjectId { get; set; }


        /// <summary>
        /// Target extension name
        /// </summary>
        /// <value>Target extension name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Target extension (short) number of the affected entity (if the objectType is EXTENSION).
        /// </summary>
        /// <value>Target extension (short) number of the affected entity (if the objectType is EXTENSION).</value>
        [DataMember(Name="extensionNumber", EmitDefaultValue=false)]
        public string ExtensionNumber { get; set; }

        /// <summary>
        /// Target extension site identifier (if any)
        /// </summary>
        /// <value>Target extension site identifier (if any)</value>
        [DataMember(Name="siteId", EmitDefaultValue=false)]
        public string SiteId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountHistoryRecordTarget {\n");
            sb.Append("  ObjectId: ").Append(ObjectId).Append("\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ExtensionNumber: ").Append(ExtensionNumber).Append("\n");
            sb.Append("  SiteId: ").Append(SiteId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountHistoryRecordTarget);
        }

        /// <summary>
        /// Returns true if AccountHistoryRecordTarget instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountHistoryRecordTarget to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountHistoryRecordTarget input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ObjectId == input.ObjectId ||
                    (this.ObjectId != null &&
                    this.ObjectId.Equals(input.ObjectId))
                ) && 
                (
                    this.ObjectType == input.ObjectType ||
                    (this.ObjectType != null &&
                    this.ObjectType.Equals(input.ObjectType))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ExtensionNumber == input.ExtensionNumber ||
                    (this.ExtensionNumber != null &&
                    this.ExtensionNumber.Equals(input.ExtensionNumber))
                ) && 
                (
                    this.SiteId == input.SiteId ||
                    (this.SiteId != null &&
                    this.SiteId.Equals(input.SiteId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ObjectId != null)
                    hashCode = hashCode * 59 + this.ObjectId.GetHashCode();
                if (this.ObjectType != null)
                    hashCode = hashCode * 59 + this.ObjectType.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ExtensionNumber != null)
                    hashCode = hashCode * 59 + this.ExtensionNumber.GetHashCode();
                if (this.SiteId != null)
                    hashCode = hashCode * 59 + this.SiteId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
