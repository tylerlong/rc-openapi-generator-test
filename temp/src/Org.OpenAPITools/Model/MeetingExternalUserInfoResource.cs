/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// MeetingExternalUserInfoResource
    /// </summary>
    [DataContract]
    public partial class MeetingExternalUserInfoResource :  IEquatable<MeetingExternalUserInfoResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MeetingExternalUserInfoResource" /> class.
        /// </summary>
        /// <param name="uri">uri.</param>
        /// <param name="userId">userId.</param>
        /// <param name="accountId">accountId.</param>
        /// <param name="userType">userType.</param>
        /// <param name="userToken">userToken.</param>
        /// <param name="hostKey">hostKey.</param>
        /// <param name="personalMeetingId">personalMeetingId.</param>
        /// <param name="personalLink">Link to the user&#39;s personal meeting room, used as an alias for personal meeting URL (with personal meeting ID).</param>
        /// <param name="usePmiForInstantMeetings">Enables using personal meeting ID for instant meetings (default to false).</param>
        public MeetingExternalUserInfoResource(string uri = default(string), string userId = default(string), string accountId = default(string), long userType = default(long), string userToken = default(string), string hostKey = default(string), string personalMeetingId = default(string), string personalLink = default(string), bool usePmiForInstantMeetings = false)
        {
            this.Uri = uri;
            this.UserId = userId;
            this.AccountId = accountId;
            this.UserType = userType;
            this.UserToken = userToken;
            this.HostKey = hostKey;
            this.PersonalMeetingId = personalMeetingId;
            this.PersonalLink = personalLink;
            // use default value if no "usePmiForInstantMeetings" provided
            if (usePmiForInstantMeetings == null)
            {
                this.UsePmiForInstantMeetings = false;
            }
            else
            {
                this.UsePmiForInstantMeetings = usePmiForInstantMeetings;
            }
        }

        /// <summary>
        /// Gets or Sets Uri
        /// </summary>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Gets or Sets UserType
        /// </summary>
        [DataMember(Name="userType", EmitDefaultValue=false)]
        public long UserType { get; set; }

        /// <summary>
        /// Gets or Sets UserToken
        /// </summary>
        [DataMember(Name="userToken", EmitDefaultValue=false)]
        public string UserToken { get; set; }

        /// <summary>
        /// Gets or Sets HostKey
        /// </summary>
        [DataMember(Name="hostKey", EmitDefaultValue=false)]
        public string HostKey { get; set; }

        /// <summary>
        /// Gets or Sets PersonalMeetingId
        /// </summary>
        [DataMember(Name="personalMeetingId", EmitDefaultValue=false)]
        public string PersonalMeetingId { get; set; }

        /// <summary>
        /// Link to the user&#39;s personal meeting room, used as an alias for personal meeting URL (with personal meeting ID)
        /// </summary>
        /// <value>Link to the user&#39;s personal meeting room, used as an alias for personal meeting URL (with personal meeting ID)</value>
        [DataMember(Name="personalLink", EmitDefaultValue=false)]
        public string PersonalLink { get; set; }

        /// <summary>
        /// Enables using personal meeting ID for instant meetings
        /// </summary>
        /// <value>Enables using personal meeting ID for instant meetings</value>
        [DataMember(Name="usePmiForInstantMeetings", EmitDefaultValue=false)]
        public bool UsePmiForInstantMeetings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MeetingExternalUserInfoResource {\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  UserType: ").Append(UserType).Append("\n");
            sb.Append("  UserToken: ").Append(UserToken).Append("\n");
            sb.Append("  HostKey: ").Append(HostKey).Append("\n");
            sb.Append("  PersonalMeetingId: ").Append(PersonalMeetingId).Append("\n");
            sb.Append("  PersonalLink: ").Append(PersonalLink).Append("\n");
            sb.Append("  UsePmiForInstantMeetings: ").Append(UsePmiForInstantMeetings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MeetingExternalUserInfoResource);
        }

        /// <summary>
        /// Returns true if MeetingExternalUserInfoResource instances are equal
        /// </summary>
        /// <param name="input">Instance of MeetingExternalUserInfoResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MeetingExternalUserInfoResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.UserType == input.UserType ||
                    (this.UserType != null &&
                    this.UserType.Equals(input.UserType))
                ) && 
                (
                    this.UserToken == input.UserToken ||
                    (this.UserToken != null &&
                    this.UserToken.Equals(input.UserToken))
                ) && 
                (
                    this.HostKey == input.HostKey ||
                    (this.HostKey != null &&
                    this.HostKey.Equals(input.HostKey))
                ) && 
                (
                    this.PersonalMeetingId == input.PersonalMeetingId ||
                    (this.PersonalMeetingId != null &&
                    this.PersonalMeetingId.Equals(input.PersonalMeetingId))
                ) && 
                (
                    this.PersonalLink == input.PersonalLink ||
                    (this.PersonalLink != null &&
                    this.PersonalLink.Equals(input.PersonalLink))
                ) && 
                (
                    this.UsePmiForInstantMeetings == input.UsePmiForInstantMeetings ||
                    (this.UsePmiForInstantMeetings != null &&
                    this.UsePmiForInstantMeetings.Equals(input.UsePmiForInstantMeetings))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.UserType != null)
                    hashCode = hashCode * 59 + this.UserType.GetHashCode();
                if (this.UserToken != null)
                    hashCode = hashCode * 59 + this.UserToken.GetHashCode();
                if (this.HostKey != null)
                    hashCode = hashCode * 59 + this.HostKey.GetHashCode();
                if (this.PersonalMeetingId != null)
                    hashCode = hashCode * 59 + this.PersonalMeetingId.GetHashCode();
                if (this.PersonalLink != null)
                    hashCode = hashCode * 59 + this.PersonalLink.GetHashCode();
                if (this.UsePmiForInstantMeetings != null)
                    hashCode = hashCode * 59 + this.UsePmiForInstantMeetings.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
