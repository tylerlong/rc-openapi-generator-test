/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Batch of A2P SMS messages. This object provides specification to send message(s) to many recipients. It contains top-level attributes, such as &#x60;text&#x60; which apply to all &#x60;messages&#x60;. In addition to that, it is possible to override this attribute for each message. This way a single API call may be used to send individual messages to many recipients. 
    /// </summary>
    [DataContract]
    public partial class MessageBatchCreateRequest :  IEquatable<MessageBatchCreateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageBatchCreateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MessageBatchCreateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageBatchCreateRequest" /> class.
        /// </summary>
        /// <param name="from">Sender&#39;s phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format. (required).</param>
        /// <param name="text">Text to send to &#x60;messages.to&#x60; phone numbers. Can be overridden on a per-message basis.</param>
        /// <param name="messages">Individual messages (required).</param>
        public MessageBatchCreateRequest(string from = default(string), string text = default(string), List<MessageCreateRequest> messages = default(List<MessageCreateRequest>))
        {
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new InvalidDataException("from is a required property for MessageBatchCreateRequest and cannot be null");
            }
            else
            {
                this.From = from;
            }

            // to ensure "messages" is required (not null)
            if (messages == null)
            {
                throw new InvalidDataException("messages is a required property for MessageBatchCreateRequest and cannot be null");
            }
            else
            {
                this.Messages = messages;
            }

            this.Text = text;
        }

        /// <summary>
        /// Sender&#39;s phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format.
        /// </summary>
        /// <value>Sender&#39;s phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format.</value>
        [DataMember(Name="from", EmitDefaultValue=true)]
        public string From { get; set; }

        /// <summary>
        /// Text to send to &#x60;messages.to&#x60; phone numbers. Can be overridden on a per-message basis
        /// </summary>
        /// <value>Text to send to &#x60;messages.to&#x60; phone numbers. Can be overridden on a per-message basis</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Individual messages
        /// </summary>
        /// <value>Individual messages</value>
        [DataMember(Name="messages", EmitDefaultValue=true)]
        public List<MessageCreateRequest> Messages { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MessageBatchCreateRequest {\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MessageBatchCreateRequest);
        }

        /// <summary>
        /// Returns true if MessageBatchCreateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of MessageBatchCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessageBatchCreateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Messages == input.Messages ||
                    this.Messages != null &&
                    input.Messages != null &&
                    this.Messages.SequenceEqual(input.Messages)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Messages != null)
                    hashCode = hashCode * 59 + this.Messages.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
