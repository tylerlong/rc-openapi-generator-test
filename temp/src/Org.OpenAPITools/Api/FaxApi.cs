/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFaxApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Fax Message
        /// </summary>
        /// <remarks>
        /// Creates and sends/resends a fax message. Resend can be implemented if sending has failed. Fax attachment size (both single and total) is limited to 50Mb.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account (integer) or tilde (~) to indicate the account which was logged-in within the current session.</param>
        /// <param name="extensionId">Internal identifier of an extension (integer) or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="attachment">File to upload</param>
        /// <param name="to">To Phone Number</param>
        /// <param name="faxResolution">Resolution of Fax (optional)</param>
        /// <param name="sendTime">Timestamp to send fax at. If not specified (current or the past), the fax is sent immediately (optional)</param>
        /// <param name="isoCode">ISO Code. e.g UK (optional)</param>
        /// <param name="coverIndex">Cover page identifier. If coverIndex is set to &#39;0&#39; (zero) cover page is not attached. For the list of available cover page identifiers (1-13) please call the Fax Cover Pages method. If not specified, the default cover page is attached (which is configured in &#39;Outbound Fax Settings&#39;) (optional)</param>
        /// <param name="coverPageText">Cover page text, entered by the fax sender and printed on the cover page. Maximum length is limited to 1024 symbols (optional)</param>
        /// <returns>FaxResponse</returns>
        FaxResponse CreateFaxMessage (string accountId, string extensionId, System.IO.Stream attachment, List<string> to, string faxResolution = default(string), DateTime? sendTime = default(DateTime?), string isoCode = default(string), int? coverIndex = default(int?), string coverPageText = default(string));

        /// <summary>
        /// Create Fax Message
        /// </summary>
        /// <remarks>
        /// Creates and sends/resends a fax message. Resend can be implemented if sending has failed. Fax attachment size (both single and total) is limited to 50Mb.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account (integer) or tilde (~) to indicate the account which was logged-in within the current session.</param>
        /// <param name="extensionId">Internal identifier of an extension (integer) or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="attachment">File to upload</param>
        /// <param name="to">To Phone Number</param>
        /// <param name="faxResolution">Resolution of Fax (optional)</param>
        /// <param name="sendTime">Timestamp to send fax at. If not specified (current or the past), the fax is sent immediately (optional)</param>
        /// <param name="isoCode">ISO Code. e.g UK (optional)</param>
        /// <param name="coverIndex">Cover page identifier. If coverIndex is set to &#39;0&#39; (zero) cover page is not attached. For the list of available cover page identifiers (1-13) please call the Fax Cover Pages method. If not specified, the default cover page is attached (which is configured in &#39;Outbound Fax Settings&#39;) (optional)</param>
        /// <param name="coverPageText">Cover page text, entered by the fax sender and printed on the cover page. Maximum length is limited to 1024 symbols (optional)</param>
        /// <returns>ApiResponse of FaxResponse</returns>
        ApiResponse<FaxResponse> CreateFaxMessageWithHttpInfo (string accountId, string extensionId, System.IO.Stream attachment, List<string> to, string faxResolution = default(string), DateTime? sendTime = default(DateTime?), string isoCode = default(string), int? coverIndex = default(int?), string coverPageText = default(string));
        /// <summary>
        /// Get Fax Cover Page List
        /// </summary>
        /// <remarks>
        /// Returns fax cover pages available for the current extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <returns>ListFaxCoverPagesResponse</returns>
        ListFaxCoverPagesResponse ListFaxCoverPages (int? page = default(int?), int? perPage = default(int?));

        /// <summary>
        /// Get Fax Cover Page List
        /// </summary>
        /// <remarks>
        /// Returns fax cover pages available for the current extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <returns>ApiResponse of ListFaxCoverPagesResponse</returns>
        ApiResponse<ListFaxCoverPagesResponse> ListFaxCoverPagesWithHttpInfo (int? page = default(int?), int? perPage = default(int?));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create Fax Message
        /// </summary>
        /// <remarks>
        /// Creates and sends/resends a fax message. Resend can be implemented if sending has failed. Fax attachment size (both single and total) is limited to 50Mb.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account (integer) or tilde (~) to indicate the account which was logged-in within the current session.</param>
        /// <param name="extensionId">Internal identifier of an extension (integer) or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="attachment">File to upload</param>
        /// <param name="to">To Phone Number</param>
        /// <param name="faxResolution">Resolution of Fax (optional)</param>
        /// <param name="sendTime">Timestamp to send fax at. If not specified (current or the past), the fax is sent immediately (optional)</param>
        /// <param name="isoCode">ISO Code. e.g UK (optional)</param>
        /// <param name="coverIndex">Cover page identifier. If coverIndex is set to &#39;0&#39; (zero) cover page is not attached. For the list of available cover page identifiers (1-13) please call the Fax Cover Pages method. If not specified, the default cover page is attached (which is configured in &#39;Outbound Fax Settings&#39;) (optional)</param>
        /// <param name="coverPageText">Cover page text, entered by the fax sender and printed on the cover page. Maximum length is limited to 1024 symbols (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FaxResponse</returns>
        System.Threading.Tasks.Task<FaxResponse> CreateFaxMessageAsync (string accountId, string extensionId, System.IO.Stream attachment, List<string> to, string faxResolution = default(string), DateTime? sendTime = default(DateTime?), string isoCode = default(string), int? coverIndex = default(int?), string coverPageText = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Fax Message
        /// </summary>
        /// <remarks>
        /// Creates and sends/resends a fax message. Resend can be implemented if sending has failed. Fax attachment size (both single and total) is limited to 50Mb.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account (integer) or tilde (~) to indicate the account which was logged-in within the current session.</param>
        /// <param name="extensionId">Internal identifier of an extension (integer) or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="attachment">File to upload</param>
        /// <param name="to">To Phone Number</param>
        /// <param name="faxResolution">Resolution of Fax (optional)</param>
        /// <param name="sendTime">Timestamp to send fax at. If not specified (current or the past), the fax is sent immediately (optional)</param>
        /// <param name="isoCode">ISO Code. e.g UK (optional)</param>
        /// <param name="coverIndex">Cover page identifier. If coverIndex is set to &#39;0&#39; (zero) cover page is not attached. For the list of available cover page identifiers (1-13) please call the Fax Cover Pages method. If not specified, the default cover page is attached (which is configured in &#39;Outbound Fax Settings&#39;) (optional)</param>
        /// <param name="coverPageText">Cover page text, entered by the fax sender and printed on the cover page. Maximum length is limited to 1024 symbols (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FaxResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FaxResponse>> CreateFaxMessageWithHttpInfoAsync (string accountId, string extensionId, System.IO.Stream attachment, List<string> to, string faxResolution = default(string), DateTime? sendTime = default(DateTime?), string isoCode = default(string), int? coverIndex = default(int?), string coverPageText = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Fax Cover Page List
        /// </summary>
        /// <remarks>
        /// Returns fax cover pages available for the current extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListFaxCoverPagesResponse</returns>
        System.Threading.Tasks.Task<ListFaxCoverPagesResponse> ListFaxCoverPagesAsync (int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Fax Cover Page List
        /// </summary>
        /// <remarks>
        /// Returns fax cover pages available for the current extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListFaxCoverPagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListFaxCoverPagesResponse>> ListFaxCoverPagesWithHttpInfoAsync (int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FaxApi : IFaxApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FaxApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FaxApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FaxApi"/> class
        /// </summary>
        /// <returns></returns>
        public FaxApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FaxApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FaxApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create Fax Message Creates and sends/resends a fax message. Resend can be implemented if sending has failed. Fax attachment size (both single and total) is limited to 50Mb.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account (integer) or tilde (~) to indicate the account which was logged-in within the current session.</param>
        /// <param name="extensionId">Internal identifier of an extension (integer) or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="attachment">File to upload</param>
        /// <param name="to">To Phone Number</param>
        /// <param name="faxResolution">Resolution of Fax (optional)</param>
        /// <param name="sendTime">Timestamp to send fax at. If not specified (current or the past), the fax is sent immediately (optional)</param>
        /// <param name="isoCode">ISO Code. e.g UK (optional)</param>
        /// <param name="coverIndex">Cover page identifier. If coverIndex is set to &#39;0&#39; (zero) cover page is not attached. For the list of available cover page identifiers (1-13) please call the Fax Cover Pages method. If not specified, the default cover page is attached (which is configured in &#39;Outbound Fax Settings&#39;) (optional)</param>
        /// <param name="coverPageText">Cover page text, entered by the fax sender and printed on the cover page. Maximum length is limited to 1024 symbols (optional)</param>
        /// <returns>FaxResponse</returns>
        public FaxResponse CreateFaxMessage (string accountId, string extensionId, System.IO.Stream attachment, List<string> to, string faxResolution = default(string), DateTime? sendTime = default(DateTime?), string isoCode = default(string), int? coverIndex = default(int?), string coverPageText = default(string))
        {
             ApiResponse<FaxResponse> localVarResponse = CreateFaxMessageWithHttpInfo(accountId, extensionId, attachment, to, faxResolution, sendTime, isoCode, coverIndex, coverPageText);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Fax Message Creates and sends/resends a fax message. Resend can be implemented if sending has failed. Fax attachment size (both single and total) is limited to 50Mb.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account (integer) or tilde (~) to indicate the account which was logged-in within the current session.</param>
        /// <param name="extensionId">Internal identifier of an extension (integer) or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="attachment">File to upload</param>
        /// <param name="to">To Phone Number</param>
        /// <param name="faxResolution">Resolution of Fax (optional)</param>
        /// <param name="sendTime">Timestamp to send fax at. If not specified (current or the past), the fax is sent immediately (optional)</param>
        /// <param name="isoCode">ISO Code. e.g UK (optional)</param>
        /// <param name="coverIndex">Cover page identifier. If coverIndex is set to &#39;0&#39; (zero) cover page is not attached. For the list of available cover page identifiers (1-13) please call the Fax Cover Pages method. If not specified, the default cover page is attached (which is configured in &#39;Outbound Fax Settings&#39;) (optional)</param>
        /// <param name="coverPageText">Cover page text, entered by the fax sender and printed on the cover page. Maximum length is limited to 1024 symbols (optional)</param>
        /// <returns>ApiResponse of FaxResponse</returns>
        public ApiResponse<FaxResponse> CreateFaxMessageWithHttpInfo (string accountId, string extensionId, System.IO.Stream attachment, List<string> to, string faxResolution = default(string), DateTime? sendTime = default(DateTime?), string isoCode = default(string), int? coverIndex = default(int?), string coverPageText = default(string))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FaxApi->CreateFaxMessage");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling FaxApi->CreateFaxMessage");
            // verify the required parameter 'attachment' is set
            if (attachment == null)
                throw new ApiException(400, "Missing required parameter 'attachment' when calling FaxApi->CreateFaxMessage");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling FaxApi->CreateFaxMessage");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/fax";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (attachment != null) localVarFileParams.Add("attachment", this.Configuration.ApiClient.ParameterToFile("attachment", attachment));
            if (faxResolution != null) localVarFormParams.Add("faxResolution", this.Configuration.ApiClient.ParameterToString(faxResolution)); // form parameter
            if (to != null) localVarFormParams.Add("to", this.Configuration.ApiClient.Serialize(to)); // form parameter
            if (sendTime != null) localVarFormParams.Add("sendTime", this.Configuration.ApiClient.ParameterToString(sendTime)); // form parameter
            if (isoCode != null) localVarFormParams.Add("isoCode", this.Configuration.ApiClient.ParameterToString(isoCode)); // form parameter
            if (coverIndex != null) localVarFormParams.Add("coverIndex", this.Configuration.ApiClient.ParameterToString(coverIndex)); // form parameter
            if (coverPageText != null) localVarFormParams.Add("coverPageText", this.Configuration.ApiClient.ParameterToString(coverPageText)); // form parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFaxMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FaxResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FaxResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FaxResponse)));
        }

        /// <summary>
        /// Create Fax Message Creates and sends/resends a fax message. Resend can be implemented if sending has failed. Fax attachment size (both single and total) is limited to 50Mb.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account (integer) or tilde (~) to indicate the account which was logged-in within the current session.</param>
        /// <param name="extensionId">Internal identifier of an extension (integer) or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="attachment">File to upload</param>
        /// <param name="to">To Phone Number</param>
        /// <param name="faxResolution">Resolution of Fax (optional)</param>
        /// <param name="sendTime">Timestamp to send fax at. If not specified (current or the past), the fax is sent immediately (optional)</param>
        /// <param name="isoCode">ISO Code. e.g UK (optional)</param>
        /// <param name="coverIndex">Cover page identifier. If coverIndex is set to &#39;0&#39; (zero) cover page is not attached. For the list of available cover page identifiers (1-13) please call the Fax Cover Pages method. If not specified, the default cover page is attached (which is configured in &#39;Outbound Fax Settings&#39;) (optional)</param>
        /// <param name="coverPageText">Cover page text, entered by the fax sender and printed on the cover page. Maximum length is limited to 1024 symbols (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FaxResponse</returns>
        public async System.Threading.Tasks.Task<FaxResponse> CreateFaxMessageAsync (string accountId, string extensionId, System.IO.Stream attachment, List<string> to, string faxResolution = default(string), DateTime? sendTime = default(DateTime?), string isoCode = default(string), int? coverIndex = default(int?), string coverPageText = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<FaxResponse> localVarResponse = await CreateFaxMessageWithHttpInfoAsync(accountId, extensionId, attachment, to, faxResolution, sendTime, isoCode, coverIndex, coverPageText, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Fax Message Creates and sends/resends a fax message. Resend can be implemented if sending has failed. Fax attachment size (both single and total) is limited to 50Mb.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account (integer) or tilde (~) to indicate the account which was logged-in within the current session.</param>
        /// <param name="extensionId">Internal identifier of an extension (integer) or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="attachment">File to upload</param>
        /// <param name="to">To Phone Number</param>
        /// <param name="faxResolution">Resolution of Fax (optional)</param>
        /// <param name="sendTime">Timestamp to send fax at. If not specified (current or the past), the fax is sent immediately (optional)</param>
        /// <param name="isoCode">ISO Code. e.g UK (optional)</param>
        /// <param name="coverIndex">Cover page identifier. If coverIndex is set to &#39;0&#39; (zero) cover page is not attached. For the list of available cover page identifiers (1-13) please call the Fax Cover Pages method. If not specified, the default cover page is attached (which is configured in &#39;Outbound Fax Settings&#39;) (optional)</param>
        /// <param name="coverPageText">Cover page text, entered by the fax sender and printed on the cover page. Maximum length is limited to 1024 symbols (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FaxResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FaxResponse>> CreateFaxMessageWithHttpInfoAsync (string accountId, string extensionId, System.IO.Stream attachment, List<string> to, string faxResolution = default(string), DateTime? sendTime = default(DateTime?), string isoCode = default(string), int? coverIndex = default(int?), string coverPageText = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FaxApi->CreateFaxMessage");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling FaxApi->CreateFaxMessage");
            // verify the required parameter 'attachment' is set
            if (attachment == null)
                throw new ApiException(400, "Missing required parameter 'attachment' when calling FaxApi->CreateFaxMessage");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling FaxApi->CreateFaxMessage");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/fax";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (attachment != null) localVarFileParams.Add("attachment", this.Configuration.ApiClient.ParameterToFile("attachment", attachment));
            if (faxResolution != null) localVarFormParams.Add("faxResolution", this.Configuration.ApiClient.ParameterToString(faxResolution)); // form parameter
            if (to != null) localVarFormParams.Add("to", this.Configuration.ApiClient.Serialize(to)); // form parameter
            if (sendTime != null) localVarFormParams.Add("sendTime", this.Configuration.ApiClient.ParameterToString(sendTime)); // form parameter
            if (isoCode != null) localVarFormParams.Add("isoCode", this.Configuration.ApiClient.ParameterToString(isoCode)); // form parameter
            if (coverIndex != null) localVarFormParams.Add("coverIndex", this.Configuration.ApiClient.ParameterToString(coverIndex)); // form parameter
            if (coverPageText != null) localVarFormParams.Add("coverPageText", this.Configuration.ApiClient.ParameterToString(coverPageText)); // form parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFaxMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FaxResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FaxResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FaxResponse)));
        }

        /// <summary>
        /// Get Fax Cover Page List Returns fax cover pages available for the current extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <returns>ListFaxCoverPagesResponse</returns>
        public ListFaxCoverPagesResponse ListFaxCoverPages (int? page = default(int?), int? perPage = default(int?))
        {
             ApiResponse<ListFaxCoverPagesResponse> localVarResponse = ListFaxCoverPagesWithHttpInfo(page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Fax Cover Page List Returns fax cover pages available for the current extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <returns>ApiResponse of ListFaxCoverPagesResponse</returns>
        public ApiResponse<ListFaxCoverPagesResponse> ListFaxCoverPagesWithHttpInfo (int? page = default(int?), int? perPage = default(int?))
        {

            var localVarPath = "/restapi/v1.0/dictionary/fax-cover-page";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListFaxCoverPages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListFaxCoverPagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListFaxCoverPagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListFaxCoverPagesResponse)));
        }

        /// <summary>
        /// Get Fax Cover Page List Returns fax cover pages available for the current extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListFaxCoverPagesResponse</returns>
        public async System.Threading.Tasks.Task<ListFaxCoverPagesResponse> ListFaxCoverPagesAsync (int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ListFaxCoverPagesResponse> localVarResponse = await ListFaxCoverPagesWithHttpInfoAsync(page, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Fax Cover Page List Returns fax cover pages available for the current extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListFaxCoverPagesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListFaxCoverPagesResponse>> ListFaxCoverPagesWithHttpInfoAsync (int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/restapi/v1.0/dictionary/fax-cover-page";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListFaxCoverPages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListFaxCoverPagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListFaxCoverPagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListFaxCoverPagesResponse)));
        }

    }
}
