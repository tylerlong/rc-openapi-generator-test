/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConversationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create/Open Conversation
        /// </summary>
        /// <remarks>
        /// Creates a new conversation or opens the existing one. If the conversation already exists, then its ID will be returned in response. A conversation is an adhoc discussion between a particular set of users, not featuring any specific name or description; it is a chat of 'Group' type. If you add a person to the existing conversation (group), it creates a whole new conversation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGlipConversationRequest">JSON body</param>
        /// <returns>GlipConversationInfo</returns>
        GlipConversationInfo CreateGlipConversation (CreateGlipConversationRequest createGlipConversationRequest);

        /// <summary>
        /// Create/Open Conversation
        /// </summary>
        /// <remarks>
        /// Creates a new conversation or opens the existing one. If the conversation already exists, then its ID will be returned in response. A conversation is an adhoc discussion between a particular set of users, not featuring any specific name or description; it is a chat of 'Group' type. If you add a person to the existing conversation (group), it creates a whole new conversation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGlipConversationRequest">JSON body</param>
        /// <returns>ApiResponse of GlipConversationInfo</returns>
        ApiResponse<GlipConversationInfo> CreateGlipConversationWithHttpInfo (CreateGlipConversationRequest createGlipConversationRequest);
        /// <summary>
        /// Get Conversations
        /// </summary>
        /// <remarks>
        /// Returns the list of conversations where the user is a member. All records in response are sorted by creation time of a conversation in ascending order. Conversation is a chat of the *Group* type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordCount">Number of conversations to be fetched by one request. The maximum value is 250, by default - 30 (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <returns>GlipConversationsList</returns>
        GlipConversationsList ListGlipConversations (int? recordCount = default(int?), string pageToken = default(string));

        /// <summary>
        /// Get Conversations
        /// </summary>
        /// <remarks>
        /// Returns the list of conversations where the user is a member. All records in response are sorted by creation time of a conversation in ascending order. Conversation is a chat of the *Group* type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordCount">Number of conversations to be fetched by one request. The maximum value is 250, by default - 30 (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <returns>ApiResponse of GlipConversationsList</returns>
        ApiResponse<GlipConversationsList> ListGlipConversationsWithHttpInfo (int? recordCount = default(int?), string pageToken = default(string));
        /// <summary>
        /// Get Conversation
        /// </summary>
        /// <remarks>
        /// Returns information about the specified conversation, including the list of conversation participants. A conversation is an adhoc discussion between a particular set of users, not featuring any specific name or description; it is a chat of 'Group' type. If you add a person to the existing conversation, it creates a whole new conversation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a conversation to be returned.</param>
        /// <returns>GlipConversationInfo</returns>
        GlipConversationInfo ReadGlipConversation (string chatId);

        /// <summary>
        /// Get Conversation
        /// </summary>
        /// <remarks>
        /// Returns information about the specified conversation, including the list of conversation participants. A conversation is an adhoc discussion between a particular set of users, not featuring any specific name or description; it is a chat of 'Group' type. If you add a person to the existing conversation, it creates a whole new conversation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a conversation to be returned.</param>
        /// <returns>ApiResponse of GlipConversationInfo</returns>
        ApiResponse<GlipConversationInfo> ReadGlipConversationWithHttpInfo (string chatId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create/Open Conversation
        /// </summary>
        /// <remarks>
        /// Creates a new conversation or opens the existing one. If the conversation already exists, then its ID will be returned in response. A conversation is an adhoc discussion between a particular set of users, not featuring any specific name or description; it is a chat of 'Group' type. If you add a person to the existing conversation (group), it creates a whole new conversation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGlipConversationRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipConversationInfo</returns>
        System.Threading.Tasks.Task<GlipConversationInfo> CreateGlipConversationAsync (CreateGlipConversationRequest createGlipConversationRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create/Open Conversation
        /// </summary>
        /// <remarks>
        /// Creates a new conversation or opens the existing one. If the conversation already exists, then its ID will be returned in response. A conversation is an adhoc discussion between a particular set of users, not featuring any specific name or description; it is a chat of 'Group' type. If you add a person to the existing conversation (group), it creates a whole new conversation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGlipConversationRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipConversationInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlipConversationInfo>> CreateGlipConversationWithHttpInfoAsync (CreateGlipConversationRequest createGlipConversationRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Conversations
        /// </summary>
        /// <remarks>
        /// Returns the list of conversations where the user is a member. All records in response are sorted by creation time of a conversation in ascending order. Conversation is a chat of the *Group* type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordCount">Number of conversations to be fetched by one request. The maximum value is 250, by default - 30 (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipConversationsList</returns>
        System.Threading.Tasks.Task<GlipConversationsList> ListGlipConversationsAsync (int? recordCount = default(int?), string pageToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Conversations
        /// </summary>
        /// <remarks>
        /// Returns the list of conversations where the user is a member. All records in response are sorted by creation time of a conversation in ascending order. Conversation is a chat of the *Group* type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordCount">Number of conversations to be fetched by one request. The maximum value is 250, by default - 30 (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipConversationsList)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlipConversationsList>> ListGlipConversationsWithHttpInfoAsync (int? recordCount = default(int?), string pageToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Conversation
        /// </summary>
        /// <remarks>
        /// Returns information about the specified conversation, including the list of conversation participants. A conversation is an adhoc discussion between a particular set of users, not featuring any specific name or description; it is a chat of 'Group' type. If you add a person to the existing conversation, it creates a whole new conversation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a conversation to be returned.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipConversationInfo</returns>
        System.Threading.Tasks.Task<GlipConversationInfo> ReadGlipConversationAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Conversation
        /// </summary>
        /// <remarks>
        /// Returns information about the specified conversation, including the list of conversation participants. A conversation is an adhoc discussion between a particular set of users, not featuring any specific name or description; it is a chat of 'Group' type. If you add a person to the existing conversation, it creates a whole new conversation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a conversation to be returned.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipConversationInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlipConversationInfo>> ReadGlipConversationWithHttpInfoAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConversationsApi : IConversationsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConversationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConversationsApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConversationsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ConversationsApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConversationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConversationsApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create/Open Conversation Creates a new conversation or opens the existing one. If the conversation already exists, then its ID will be returned in response. A conversation is an adhoc discussion between a particular set of users, not featuring any specific name or description; it is a chat of 'Group' type. If you add a person to the existing conversation (group), it creates a whole new conversation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGlipConversationRequest">JSON body</param>
        /// <returns>GlipConversationInfo</returns>
        public GlipConversationInfo CreateGlipConversation (CreateGlipConversationRequest createGlipConversationRequest)
        {
             ApiResponse<GlipConversationInfo> localVarResponse = CreateGlipConversationWithHttpInfo(createGlipConversationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create/Open Conversation Creates a new conversation or opens the existing one. If the conversation already exists, then its ID will be returned in response. A conversation is an adhoc discussion between a particular set of users, not featuring any specific name or description; it is a chat of 'Group' type. If you add a person to the existing conversation (group), it creates a whole new conversation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGlipConversationRequest">JSON body</param>
        /// <returns>ApiResponse of GlipConversationInfo</returns>
        public ApiResponse<GlipConversationInfo> CreateGlipConversationWithHttpInfo (CreateGlipConversationRequest createGlipConversationRequest)
        {
            // verify the required parameter 'createGlipConversationRequest' is set
            if (createGlipConversationRequest == null)
                throw new ApiException(400, "Missing required parameter 'createGlipConversationRequest' when calling ConversationsApi->CreateGlipConversation");

            var localVarPath = "/restapi/v1.0/glip/conversations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createGlipConversationRequest != null && createGlipConversationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createGlipConversationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createGlipConversationRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGlipConversation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipConversationInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipConversationInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipConversationInfo)));
        }

        /// <summary>
        /// Create/Open Conversation Creates a new conversation or opens the existing one. If the conversation already exists, then its ID will be returned in response. A conversation is an adhoc discussion between a particular set of users, not featuring any specific name or description; it is a chat of 'Group' type. If you add a person to the existing conversation (group), it creates a whole new conversation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGlipConversationRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipConversationInfo</returns>
        public async System.Threading.Tasks.Task<GlipConversationInfo> CreateGlipConversationAsync (CreateGlipConversationRequest createGlipConversationRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipConversationInfo> localVarResponse = await CreateGlipConversationWithHttpInfoAsync(createGlipConversationRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create/Open Conversation Creates a new conversation or opens the existing one. If the conversation already exists, then its ID will be returned in response. A conversation is an adhoc discussion between a particular set of users, not featuring any specific name or description; it is a chat of 'Group' type. If you add a person to the existing conversation (group), it creates a whole new conversation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGlipConversationRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipConversationInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlipConversationInfo>> CreateGlipConversationWithHttpInfoAsync (CreateGlipConversationRequest createGlipConversationRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'createGlipConversationRequest' is set
            if (createGlipConversationRequest == null)
                throw new ApiException(400, "Missing required parameter 'createGlipConversationRequest' when calling ConversationsApi->CreateGlipConversation");

            var localVarPath = "/restapi/v1.0/glip/conversations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createGlipConversationRequest != null && createGlipConversationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createGlipConversationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createGlipConversationRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGlipConversation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipConversationInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipConversationInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipConversationInfo)));
        }

        /// <summary>
        /// Get Conversations Returns the list of conversations where the user is a member. All records in response are sorted by creation time of a conversation in ascending order. Conversation is a chat of the *Group* type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordCount">Number of conversations to be fetched by one request. The maximum value is 250, by default - 30 (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <returns>GlipConversationsList</returns>
        public GlipConversationsList ListGlipConversations (int? recordCount = default(int?), string pageToken = default(string))
        {
             ApiResponse<GlipConversationsList> localVarResponse = ListGlipConversationsWithHttpInfo(recordCount, pageToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Conversations Returns the list of conversations where the user is a member. All records in response are sorted by creation time of a conversation in ascending order. Conversation is a chat of the *Group* type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordCount">Number of conversations to be fetched by one request. The maximum value is 250, by default - 30 (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <returns>ApiResponse of GlipConversationsList</returns>
        public ApiResponse<GlipConversationsList> ListGlipConversationsWithHttpInfo (int? recordCount = default(int?), string pageToken = default(string))
        {

            var localVarPath = "/restapi/v1.0/glip/conversations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordCount", recordCount)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListGlipConversations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipConversationsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipConversationsList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipConversationsList)));
        }

        /// <summary>
        /// Get Conversations Returns the list of conversations where the user is a member. All records in response are sorted by creation time of a conversation in ascending order. Conversation is a chat of the *Group* type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordCount">Number of conversations to be fetched by one request. The maximum value is 250, by default - 30 (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipConversationsList</returns>
        public async System.Threading.Tasks.Task<GlipConversationsList> ListGlipConversationsAsync (int? recordCount = default(int?), string pageToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipConversationsList> localVarResponse = await ListGlipConversationsWithHttpInfoAsync(recordCount, pageToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Conversations Returns the list of conversations where the user is a member. All records in response are sorted by creation time of a conversation in ascending order. Conversation is a chat of the *Group* type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordCount">Number of conversations to be fetched by one request. The maximum value is 250, by default - 30 (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipConversationsList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlipConversationsList>> ListGlipConversationsWithHttpInfoAsync (int? recordCount = default(int?), string pageToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/restapi/v1.0/glip/conversations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordCount", recordCount)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListGlipConversations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipConversationsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipConversationsList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipConversationsList)));
        }

        /// <summary>
        /// Get Conversation Returns information about the specified conversation, including the list of conversation participants. A conversation is an adhoc discussion between a particular set of users, not featuring any specific name or description; it is a chat of 'Group' type. If you add a person to the existing conversation, it creates a whole new conversation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a conversation to be returned.</param>
        /// <returns>GlipConversationInfo</returns>
        public GlipConversationInfo ReadGlipConversation (string chatId)
        {
             ApiResponse<GlipConversationInfo> localVarResponse = ReadGlipConversationWithHttpInfo(chatId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Conversation Returns information about the specified conversation, including the list of conversation participants. A conversation is an adhoc discussion between a particular set of users, not featuring any specific name or description; it is a chat of 'Group' type. If you add a person to the existing conversation, it creates a whole new conversation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a conversation to be returned.</param>
        /// <returns>ApiResponse of GlipConversationInfo</returns>
        public ApiResponse<GlipConversationInfo> ReadGlipConversationWithHttpInfo (string chatId)
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling ConversationsApi->ReadGlipConversation");

            var localVarPath = "/restapi/v1.0/glip/conversations/{chatId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadGlipConversation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipConversationInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipConversationInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipConversationInfo)));
        }

        /// <summary>
        /// Get Conversation Returns information about the specified conversation, including the list of conversation participants. A conversation is an adhoc discussion between a particular set of users, not featuring any specific name or description; it is a chat of 'Group' type. If you add a person to the existing conversation, it creates a whole new conversation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a conversation to be returned.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipConversationInfo</returns>
        public async System.Threading.Tasks.Task<GlipConversationInfo> ReadGlipConversationAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipConversationInfo> localVarResponse = await ReadGlipConversationWithHttpInfoAsync(chatId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Conversation Returns information about the specified conversation, including the list of conversation participants. A conversation is an adhoc discussion between a particular set of users, not featuring any specific name or description; it is a chat of 'Group' type. If you add a person to the existing conversation, it creates a whole new conversation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a conversation to be returned.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipConversationInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlipConversationInfo>> ReadGlipConversationWithHttpInfoAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling ConversationsApi->ReadGlipConversation");

            var localVarPath = "/restapi/v1.0/glip/conversations/{chatId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadGlipConversation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipConversationInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipConversationInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipConversationInfo)));
        }

    }
}
