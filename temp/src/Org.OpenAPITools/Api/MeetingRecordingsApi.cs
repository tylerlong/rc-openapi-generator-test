/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMeetingRecordingsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Account Meeting Recordings List
        /// </summary>
        /// <remarks>
        /// Returns the list of meeting recordings for the current account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="meetingId">Internal identifier of a meeting. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="meetingStartTimeFrom">Recordings of meetings in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format started after the time specified will be returned, for example *2016-03-10T18:07:52.534Z*. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="meetingStartTimeTo">Recordings of meetings in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format started before the time specified will be returned, for example *2016-03-10T18:07:52.534Z*. The default value is current time. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="perPage">Number of items per page. The &#x60;max&#x60; value is supported to indicate the maximum size - 300 (optional, default to 100)</param>
        /// <returns>ListMeetingRecordingsResponse</returns>
        ListMeetingRecordingsResponse ListAccountMeetingRecordings (string accountId, string meetingId = default(string), string meetingStartTimeFrom = default(string), string meetingStartTimeTo = default(string), int? page = default(int?), int? perPage = default(int?));

        /// <summary>
        /// Get Account Meeting Recordings List
        /// </summary>
        /// <remarks>
        /// Returns the list of meeting recordings for the current account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="meetingId">Internal identifier of a meeting. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="meetingStartTimeFrom">Recordings of meetings in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format started after the time specified will be returned, for example *2016-03-10T18:07:52.534Z*. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="meetingStartTimeTo">Recordings of meetings in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format started before the time specified will be returned, for example *2016-03-10T18:07:52.534Z*. The default value is current time. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="perPage">Number of items per page. The &#x60;max&#x60; value is supported to indicate the maximum size - 300 (optional, default to 100)</param>
        /// <returns>ApiResponse of ListMeetingRecordingsResponse</returns>
        ApiResponse<ListMeetingRecordingsResponse> ListAccountMeetingRecordingsWithHttpInfo (string accountId, string meetingId = default(string), string meetingStartTimeFrom = default(string), string meetingStartTimeTo = default(string), int? page = default(int?), int? perPage = default(int?));
        /// <summary>
        /// Get User Meeting Recordings List
        /// </summary>
        /// <remarks>
        /// Returns the list of meetings recordings for the current user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="meetingId">Internal identifier of a meeting. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="meetingStartTimeFrom">Recordings of meetings started after the time specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, will be returned, for example *2016-03-10T18:07:52.534Z*. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="meetingStartTimeTo">Recordings of meetings started before the time specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format will be returned, for example *2016-03-10T18:07:52.534Z*. The default value is current time. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="perPage">Number of items per page. The &#x60;max&#x60; value is supported to indicate the maximum size - 300 (optional, default to 100)</param>
        /// <returns>ListMeetingRecordingsResponse</returns>
        ListMeetingRecordingsResponse ListUserMeetingRecordings (string accountId, string extensionId, string meetingId = default(string), string meetingStartTimeFrom = default(string), string meetingStartTimeTo = default(string), int? page = default(int?), int? perPage = default(int?));

        /// <summary>
        /// Get User Meeting Recordings List
        /// </summary>
        /// <remarks>
        /// Returns the list of meetings recordings for the current user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="meetingId">Internal identifier of a meeting. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="meetingStartTimeFrom">Recordings of meetings started after the time specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, will be returned, for example *2016-03-10T18:07:52.534Z*. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="meetingStartTimeTo">Recordings of meetings started before the time specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format will be returned, for example *2016-03-10T18:07:52.534Z*. The default value is current time. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="perPage">Number of items per page. The &#x60;max&#x60; value is supported to indicate the maximum size - 300 (optional, default to 100)</param>
        /// <returns>ApiResponse of ListMeetingRecordingsResponse</returns>
        ApiResponse<ListMeetingRecordingsResponse> ListUserMeetingRecordingsWithHttpInfo (string accountId, string extensionId, string meetingId = default(string), string meetingStartTimeFrom = default(string), string meetingStartTimeTo = default(string), int? page = default(int?), int? perPage = default(int?));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Account Meeting Recordings List
        /// </summary>
        /// <remarks>
        /// Returns the list of meeting recordings for the current account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="meetingId">Internal identifier of a meeting. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="meetingStartTimeFrom">Recordings of meetings in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format started after the time specified will be returned, for example *2016-03-10T18:07:52.534Z*. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="meetingStartTimeTo">Recordings of meetings in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format started before the time specified will be returned, for example *2016-03-10T18:07:52.534Z*. The default value is current time. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="perPage">Number of items per page. The &#x60;max&#x60; value is supported to indicate the maximum size - 300 (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListMeetingRecordingsResponse</returns>
        System.Threading.Tasks.Task<ListMeetingRecordingsResponse> ListAccountMeetingRecordingsAsync (string accountId, string meetingId = default(string), string meetingStartTimeFrom = default(string), string meetingStartTimeTo = default(string), int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Account Meeting Recordings List
        /// </summary>
        /// <remarks>
        /// Returns the list of meeting recordings for the current account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="meetingId">Internal identifier of a meeting. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="meetingStartTimeFrom">Recordings of meetings in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format started after the time specified will be returned, for example *2016-03-10T18:07:52.534Z*. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="meetingStartTimeTo">Recordings of meetings in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format started before the time specified will be returned, for example *2016-03-10T18:07:52.534Z*. The default value is current time. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="perPage">Number of items per page. The &#x60;max&#x60; value is supported to indicate the maximum size - 300 (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListMeetingRecordingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListMeetingRecordingsResponse>> ListAccountMeetingRecordingsWithHttpInfoAsync (string accountId, string meetingId = default(string), string meetingStartTimeFrom = default(string), string meetingStartTimeTo = default(string), int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get User Meeting Recordings List
        /// </summary>
        /// <remarks>
        /// Returns the list of meetings recordings for the current user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="meetingId">Internal identifier of a meeting. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="meetingStartTimeFrom">Recordings of meetings started after the time specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, will be returned, for example *2016-03-10T18:07:52.534Z*. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="meetingStartTimeTo">Recordings of meetings started before the time specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format will be returned, for example *2016-03-10T18:07:52.534Z*. The default value is current time. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="perPage">Number of items per page. The &#x60;max&#x60; value is supported to indicate the maximum size - 300 (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListMeetingRecordingsResponse</returns>
        System.Threading.Tasks.Task<ListMeetingRecordingsResponse> ListUserMeetingRecordingsAsync (string accountId, string extensionId, string meetingId = default(string), string meetingStartTimeFrom = default(string), string meetingStartTimeTo = default(string), int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get User Meeting Recordings List
        /// </summary>
        /// <remarks>
        /// Returns the list of meetings recordings for the current user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="meetingId">Internal identifier of a meeting. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="meetingStartTimeFrom">Recordings of meetings started after the time specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, will be returned, for example *2016-03-10T18:07:52.534Z*. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="meetingStartTimeTo">Recordings of meetings started before the time specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format will be returned, for example *2016-03-10T18:07:52.534Z*. The default value is current time. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="perPage">Number of items per page. The &#x60;max&#x60; value is supported to indicate the maximum size - 300 (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListMeetingRecordingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListMeetingRecordingsResponse>> ListUserMeetingRecordingsWithHttpInfoAsync (string accountId, string extensionId, string meetingId = default(string), string meetingStartTimeFrom = default(string), string meetingStartTimeTo = default(string), int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MeetingRecordingsApi : IMeetingRecordingsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MeetingRecordingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MeetingRecordingsApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeetingRecordingsApi"/> class
        /// </summary>
        /// <returns></returns>
        public MeetingRecordingsApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeetingRecordingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MeetingRecordingsApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Account Meeting Recordings List Returns the list of meeting recordings for the current account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="meetingId">Internal identifier of a meeting. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="meetingStartTimeFrom">Recordings of meetings in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format started after the time specified will be returned, for example *2016-03-10T18:07:52.534Z*. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="meetingStartTimeTo">Recordings of meetings in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format started before the time specified will be returned, for example *2016-03-10T18:07:52.534Z*. The default value is current time. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="perPage">Number of items per page. The &#x60;max&#x60; value is supported to indicate the maximum size - 300 (optional, default to 100)</param>
        /// <returns>ListMeetingRecordingsResponse</returns>
        public ListMeetingRecordingsResponse ListAccountMeetingRecordings (string accountId, string meetingId = default(string), string meetingStartTimeFrom = default(string), string meetingStartTimeTo = default(string), int? page = default(int?), int? perPage = default(int?))
        {
             ApiResponse<ListMeetingRecordingsResponse> localVarResponse = ListAccountMeetingRecordingsWithHttpInfo(accountId, meetingId, meetingStartTimeFrom, meetingStartTimeTo, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account Meeting Recordings List Returns the list of meeting recordings for the current account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="meetingId">Internal identifier of a meeting. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="meetingStartTimeFrom">Recordings of meetings in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format started after the time specified will be returned, for example *2016-03-10T18:07:52.534Z*. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="meetingStartTimeTo">Recordings of meetings in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format started before the time specified will be returned, for example *2016-03-10T18:07:52.534Z*. The default value is current time. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="perPage">Number of items per page. The &#x60;max&#x60; value is supported to indicate the maximum size - 300 (optional, default to 100)</param>
        /// <returns>ApiResponse of ListMeetingRecordingsResponse</returns>
        public ApiResponse<ListMeetingRecordingsResponse> ListAccountMeetingRecordingsWithHttpInfo (string accountId, string meetingId = default(string), string meetingStartTimeFrom = default(string), string meetingStartTimeTo = default(string), int? page = default(int?), int? perPage = default(int?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MeetingRecordingsApi->ListAccountMeetingRecordings");

            var localVarPath = "/restapi/v1.0/account/{accountId}/meeting-recordings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (meetingId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meetingId", meetingId)); // query parameter
            if (meetingStartTimeFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meetingStartTimeFrom", meetingStartTimeFrom)); // query parameter
            if (meetingStartTimeTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meetingStartTimeTo", meetingStartTimeTo)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAccountMeetingRecordings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListMeetingRecordingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListMeetingRecordingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListMeetingRecordingsResponse)));
        }

        /// <summary>
        /// Get Account Meeting Recordings List Returns the list of meeting recordings for the current account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="meetingId">Internal identifier of a meeting. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="meetingStartTimeFrom">Recordings of meetings in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format started after the time specified will be returned, for example *2016-03-10T18:07:52.534Z*. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="meetingStartTimeTo">Recordings of meetings in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format started before the time specified will be returned, for example *2016-03-10T18:07:52.534Z*. The default value is current time. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="perPage">Number of items per page. The &#x60;max&#x60; value is supported to indicate the maximum size - 300 (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListMeetingRecordingsResponse</returns>
        public async System.Threading.Tasks.Task<ListMeetingRecordingsResponse> ListAccountMeetingRecordingsAsync (string accountId, string meetingId = default(string), string meetingStartTimeFrom = default(string), string meetingStartTimeTo = default(string), int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ListMeetingRecordingsResponse> localVarResponse = await ListAccountMeetingRecordingsWithHttpInfoAsync(accountId, meetingId, meetingStartTimeFrom, meetingStartTimeTo, page, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Account Meeting Recordings List Returns the list of meeting recordings for the current account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="meetingId">Internal identifier of a meeting. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="meetingStartTimeFrom">Recordings of meetings in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format started after the time specified will be returned, for example *2016-03-10T18:07:52.534Z*. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="meetingStartTimeTo">Recordings of meetings in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format started before the time specified will be returned, for example *2016-03-10T18:07:52.534Z*. The default value is current time. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="perPage">Number of items per page. The &#x60;max&#x60; value is supported to indicate the maximum size - 300 (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListMeetingRecordingsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListMeetingRecordingsResponse>> ListAccountMeetingRecordingsWithHttpInfoAsync (string accountId, string meetingId = default(string), string meetingStartTimeFrom = default(string), string meetingStartTimeTo = default(string), int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MeetingRecordingsApi->ListAccountMeetingRecordings");

            var localVarPath = "/restapi/v1.0/account/{accountId}/meeting-recordings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (meetingId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meetingId", meetingId)); // query parameter
            if (meetingStartTimeFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meetingStartTimeFrom", meetingStartTimeFrom)); // query parameter
            if (meetingStartTimeTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meetingStartTimeTo", meetingStartTimeTo)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAccountMeetingRecordings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListMeetingRecordingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListMeetingRecordingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListMeetingRecordingsResponse)));
        }

        /// <summary>
        /// Get User Meeting Recordings List Returns the list of meetings recordings for the current user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="meetingId">Internal identifier of a meeting. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="meetingStartTimeFrom">Recordings of meetings started after the time specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, will be returned, for example *2016-03-10T18:07:52.534Z*. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="meetingStartTimeTo">Recordings of meetings started before the time specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format will be returned, for example *2016-03-10T18:07:52.534Z*. The default value is current time. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="perPage">Number of items per page. The &#x60;max&#x60; value is supported to indicate the maximum size - 300 (optional, default to 100)</param>
        /// <returns>ListMeetingRecordingsResponse</returns>
        public ListMeetingRecordingsResponse ListUserMeetingRecordings (string accountId, string extensionId, string meetingId = default(string), string meetingStartTimeFrom = default(string), string meetingStartTimeTo = default(string), int? page = default(int?), int? perPage = default(int?))
        {
             ApiResponse<ListMeetingRecordingsResponse> localVarResponse = ListUserMeetingRecordingsWithHttpInfo(accountId, extensionId, meetingId, meetingStartTimeFrom, meetingStartTimeTo, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Meeting Recordings List Returns the list of meetings recordings for the current user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="meetingId">Internal identifier of a meeting. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="meetingStartTimeFrom">Recordings of meetings started after the time specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, will be returned, for example *2016-03-10T18:07:52.534Z*. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="meetingStartTimeTo">Recordings of meetings started before the time specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format will be returned, for example *2016-03-10T18:07:52.534Z*. The default value is current time. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="perPage">Number of items per page. The &#x60;max&#x60; value is supported to indicate the maximum size - 300 (optional, default to 100)</param>
        /// <returns>ApiResponse of ListMeetingRecordingsResponse</returns>
        public ApiResponse<ListMeetingRecordingsResponse> ListUserMeetingRecordingsWithHttpInfo (string accountId, string extensionId, string meetingId = default(string), string meetingStartTimeFrom = default(string), string meetingStartTimeTo = default(string), int? page = default(int?), int? perPage = default(int?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MeetingRecordingsApi->ListUserMeetingRecordings");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling MeetingRecordingsApi->ListUserMeetingRecordings");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/meeting-recordings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (meetingId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meetingId", meetingId)); // query parameter
            if (meetingStartTimeFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meetingStartTimeFrom", meetingStartTimeFrom)); // query parameter
            if (meetingStartTimeTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meetingStartTimeTo", meetingStartTimeTo)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListUserMeetingRecordings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListMeetingRecordingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListMeetingRecordingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListMeetingRecordingsResponse)));
        }

        /// <summary>
        /// Get User Meeting Recordings List Returns the list of meetings recordings for the current user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="meetingId">Internal identifier of a meeting. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="meetingStartTimeFrom">Recordings of meetings started after the time specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, will be returned, for example *2016-03-10T18:07:52.534Z*. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="meetingStartTimeTo">Recordings of meetings started before the time specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format will be returned, for example *2016-03-10T18:07:52.534Z*. The default value is current time. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="perPage">Number of items per page. The &#x60;max&#x60; value is supported to indicate the maximum size - 300 (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListMeetingRecordingsResponse</returns>
        public async System.Threading.Tasks.Task<ListMeetingRecordingsResponse> ListUserMeetingRecordingsAsync (string accountId, string extensionId, string meetingId = default(string), string meetingStartTimeFrom = default(string), string meetingStartTimeTo = default(string), int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ListMeetingRecordingsResponse> localVarResponse = await ListUserMeetingRecordingsWithHttpInfoAsync(accountId, extensionId, meetingId, meetingStartTimeFrom, meetingStartTimeTo, page, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get User Meeting Recordings List Returns the list of meetings recordings for the current user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="meetingId">Internal identifier of a meeting. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="meetingStartTimeFrom">Recordings of meetings started after the time specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, will be returned, for example *2016-03-10T18:07:52.534Z*. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="meetingStartTimeTo">Recordings of meetings started before the time specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format will be returned, for example *2016-03-10T18:07:52.534Z*. The default value is current time. Either &#x60;meetingId&#x60; or &#x60;meetingStartTime&#x60;/&#x60;meetingEndTime&#x60; can be specified (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="perPage">Number of items per page. The &#x60;max&#x60; value is supported to indicate the maximum size - 300 (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListMeetingRecordingsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListMeetingRecordingsResponse>> ListUserMeetingRecordingsWithHttpInfoAsync (string accountId, string extensionId, string meetingId = default(string), string meetingStartTimeFrom = default(string), string meetingStartTimeTo = default(string), int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MeetingRecordingsApi->ListUserMeetingRecordings");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling MeetingRecordingsApi->ListUserMeetingRecordings");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/meeting-recordings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (meetingId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meetingId", meetingId)); // query parameter
            if (meetingStartTimeFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meetingStartTimeFrom", meetingStartTimeFrom)); // query parameter
            if (meetingStartTimeTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meetingStartTimeTo", meetingStartTimeTo)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListUserMeetingRecordings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListMeetingRecordingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListMeetingRecordingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListMeetingRecordingsResponse)));
        }

    }
}
