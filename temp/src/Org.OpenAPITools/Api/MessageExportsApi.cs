/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessageExportsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Message Store Report
        /// </summary>
        /// <remarks>
        /// Creates a task to collect all account messages within the specified time interval. Maximum number of simultaneous tasks per account is 2. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createMessageStoreReportRequest"> (optional)</param>
        /// <returns>MessageStoreReport</returns>
        MessageStoreReport CreateMessageStoreReport (string accountId, CreateMessageStoreReportRequest createMessageStoreReportRequest = default(CreateMessageStoreReportRequest));

        /// <summary>
        /// Create Message Store Report
        /// </summary>
        /// <remarks>
        /// Creates a task to collect all account messages within the specified time interval. Maximum number of simultaneous tasks per account is 2. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createMessageStoreReportRequest"> (optional)</param>
        /// <returns>ApiResponse of MessageStoreReport</returns>
        ApiResponse<MessageStoreReport> CreateMessageStoreReportWithHttpInfo (string accountId, CreateMessageStoreReportRequest createMessageStoreReportRequest = default(CreateMessageStoreReportRequest));
        /// <summary>
        /// Get Message Store Report Archive
        /// </summary>
        /// <remarks>
        /// Returns the created report with message data not including attachments.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <returns>MessageStoreReportArchive</returns>
        MessageStoreReportArchive ReadMessageStoreReportArchive (string accountId, string taskId);

        /// <summary>
        /// Get Message Store Report Archive
        /// </summary>
        /// <remarks>
        /// Returns the created report with message data not including attachments.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <returns>ApiResponse of MessageStoreReportArchive</returns>
        ApiResponse<MessageStoreReportArchive> ReadMessageStoreReportArchiveWithHttpInfo (string accountId, string taskId);
        /// <summary>
        /// Get Message Store Report Archive Content
        /// </summary>
        /// <remarks>
        /// Returns one of the report archives with message contents in application/zip format.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="archiveId">Internal identifier of an archive volume to download</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream ReadMessageStoreReportArchiveContent (string accountId, string taskId, string archiveId);

        /// <summary>
        /// Get Message Store Report Archive Content
        /// </summary>
        /// <remarks>
        /// Returns one of the report archives with message contents in application/zip format.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="archiveId">Internal identifier of an archive volume to download</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> ReadMessageStoreReportArchiveContentWithHttpInfo (string accountId, string taskId, string archiveId);
        /// <summary>
        /// Get Message Store Report Task
        /// </summary>
        /// <remarks>
        /// Returns the current status of a task on report creation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <returns>MessageStoreReport</returns>
        MessageStoreReport ReadMessageStoreReportTask (string accountId, string taskId);

        /// <summary>
        /// Get Message Store Report Task
        /// </summary>
        /// <remarks>
        /// Returns the current status of a task on report creation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <returns>ApiResponse of MessageStoreReport</returns>
        ApiResponse<MessageStoreReport> ReadMessageStoreReportTaskWithHttpInfo (string accountId, string taskId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create Message Store Report
        /// </summary>
        /// <remarks>
        /// Creates a task to collect all account messages within the specified time interval. Maximum number of simultaneous tasks per account is 2. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createMessageStoreReportRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MessageStoreReport</returns>
        System.Threading.Tasks.Task<MessageStoreReport> CreateMessageStoreReportAsync (string accountId, CreateMessageStoreReportRequest createMessageStoreReportRequest = default(CreateMessageStoreReportRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Message Store Report
        /// </summary>
        /// <remarks>
        /// Creates a task to collect all account messages within the specified time interval. Maximum number of simultaneous tasks per account is 2. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createMessageStoreReportRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MessageStoreReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageStoreReport>> CreateMessageStoreReportWithHttpInfoAsync (string accountId, CreateMessageStoreReportRequest createMessageStoreReportRequest = default(CreateMessageStoreReportRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Message Store Report Archive
        /// </summary>
        /// <remarks>
        /// Returns the created report with message data not including attachments.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MessageStoreReportArchive</returns>
        System.Threading.Tasks.Task<MessageStoreReportArchive> ReadMessageStoreReportArchiveAsync (string accountId, string taskId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Message Store Report Archive
        /// </summary>
        /// <remarks>
        /// Returns the created report with message data not including attachments.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MessageStoreReportArchive)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageStoreReportArchive>> ReadMessageStoreReportArchiveWithHttpInfoAsync (string accountId, string taskId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Message Store Report Archive Content
        /// </summary>
        /// <remarks>
        /// Returns one of the report archives with message contents in application/zip format.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="archiveId">Internal identifier of an archive volume to download</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> ReadMessageStoreReportArchiveContentAsync (string accountId, string taskId, string archiveId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Message Store Report Archive Content
        /// </summary>
        /// <remarks>
        /// Returns one of the report archives with message contents in application/zip format.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="archiveId">Internal identifier of an archive volume to download</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ReadMessageStoreReportArchiveContentWithHttpInfoAsync (string accountId, string taskId, string archiveId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Message Store Report Task
        /// </summary>
        /// <remarks>
        /// Returns the current status of a task on report creation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MessageStoreReport</returns>
        System.Threading.Tasks.Task<MessageStoreReport> ReadMessageStoreReportTaskAsync (string accountId, string taskId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Message Store Report Task
        /// </summary>
        /// <remarks>
        /// Returns the current status of a task on report creation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MessageStoreReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageStoreReport>> ReadMessageStoreReportTaskWithHttpInfoAsync (string accountId, string taskId, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MessageExportsApi : IMessageExportsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MessageExportsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MessageExportsApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessageExportsApi"/> class
        /// </summary>
        /// <returns></returns>
        public MessageExportsApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessageExportsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MessageExportsApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create Message Store Report Creates a task to collect all account messages within the specified time interval. Maximum number of simultaneous tasks per account is 2. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createMessageStoreReportRequest"> (optional)</param>
        /// <returns>MessageStoreReport</returns>
        public MessageStoreReport CreateMessageStoreReport (string accountId, CreateMessageStoreReportRequest createMessageStoreReportRequest = default(CreateMessageStoreReportRequest))
        {
             ApiResponse<MessageStoreReport> localVarResponse = CreateMessageStoreReportWithHttpInfo(accountId, createMessageStoreReportRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Message Store Report Creates a task to collect all account messages within the specified time interval. Maximum number of simultaneous tasks per account is 2. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createMessageStoreReportRequest"> (optional)</param>
        /// <returns>ApiResponse of MessageStoreReport</returns>
        public ApiResponse<MessageStoreReport> CreateMessageStoreReportWithHttpInfo (string accountId, CreateMessageStoreReportRequest createMessageStoreReportRequest = default(CreateMessageStoreReportRequest))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MessageExportsApi->CreateMessageStoreReport");

            var localVarPath = "/restapi/v1.0/account/{accountId}/message-store-report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (createMessageStoreReportRequest != null && createMessageStoreReportRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createMessageStoreReportRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createMessageStoreReportRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMessageStoreReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageStoreReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessageStoreReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageStoreReport)));
        }

        /// <summary>
        /// Create Message Store Report Creates a task to collect all account messages within the specified time interval. Maximum number of simultaneous tasks per account is 2. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createMessageStoreReportRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MessageStoreReport</returns>
        public async System.Threading.Tasks.Task<MessageStoreReport> CreateMessageStoreReportAsync (string accountId, CreateMessageStoreReportRequest createMessageStoreReportRequest = default(CreateMessageStoreReportRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MessageStoreReport> localVarResponse = await CreateMessageStoreReportWithHttpInfoAsync(accountId, createMessageStoreReportRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Message Store Report Creates a task to collect all account messages within the specified time interval. Maximum number of simultaneous tasks per account is 2. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createMessageStoreReportRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MessageStoreReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessageStoreReport>> CreateMessageStoreReportWithHttpInfoAsync (string accountId, CreateMessageStoreReportRequest createMessageStoreReportRequest = default(CreateMessageStoreReportRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MessageExportsApi->CreateMessageStoreReport");

            var localVarPath = "/restapi/v1.0/account/{accountId}/message-store-report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (createMessageStoreReportRequest != null && createMessageStoreReportRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createMessageStoreReportRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createMessageStoreReportRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMessageStoreReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageStoreReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessageStoreReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageStoreReport)));
        }

        /// <summary>
        /// Get Message Store Report Archive Returns the created report with message data not including attachments.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <returns>MessageStoreReportArchive</returns>
        public MessageStoreReportArchive ReadMessageStoreReportArchive (string accountId, string taskId)
        {
             ApiResponse<MessageStoreReportArchive> localVarResponse = ReadMessageStoreReportArchiveWithHttpInfo(accountId, taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Message Store Report Archive Returns the created report with message data not including attachments.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <returns>ApiResponse of MessageStoreReportArchive</returns>
        public ApiResponse<MessageStoreReportArchive> ReadMessageStoreReportArchiveWithHttpInfo (string accountId, string taskId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MessageExportsApi->ReadMessageStoreReportArchive");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling MessageExportsApi->ReadMessageStoreReportArchive");

            var localVarPath = "/restapi/v1.0/account/{accountId}/message-store-report/{taskId}/archive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadMessageStoreReportArchive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageStoreReportArchive>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessageStoreReportArchive) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageStoreReportArchive)));
        }

        /// <summary>
        /// Get Message Store Report Archive Returns the created report with message data not including attachments.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MessageStoreReportArchive</returns>
        public async System.Threading.Tasks.Task<MessageStoreReportArchive> ReadMessageStoreReportArchiveAsync (string accountId, string taskId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MessageStoreReportArchive> localVarResponse = await ReadMessageStoreReportArchiveWithHttpInfoAsync(accountId, taskId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Message Store Report Archive Returns the created report with message data not including attachments.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MessageStoreReportArchive)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessageStoreReportArchive>> ReadMessageStoreReportArchiveWithHttpInfoAsync (string accountId, string taskId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MessageExportsApi->ReadMessageStoreReportArchive");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling MessageExportsApi->ReadMessageStoreReportArchive");

            var localVarPath = "/restapi/v1.0/account/{accountId}/message-store-report/{taskId}/archive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadMessageStoreReportArchive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageStoreReportArchive>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessageStoreReportArchive) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageStoreReportArchive)));
        }

        /// <summary>
        /// Get Message Store Report Archive Content Returns one of the report archives with message contents in application/zip format.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="archiveId">Internal identifier of an archive volume to download</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream ReadMessageStoreReportArchiveContent (string accountId, string taskId, string archiveId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = ReadMessageStoreReportArchiveContentWithHttpInfo(accountId, taskId, archiveId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Message Store Report Archive Content Returns one of the report archives with message contents in application/zip format.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="archiveId">Internal identifier of an archive volume to download</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> ReadMessageStoreReportArchiveContentWithHttpInfo (string accountId, string taskId, string archiveId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MessageExportsApi->ReadMessageStoreReportArchiveContent");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling MessageExportsApi->ReadMessageStoreReportArchiveContent");
            // verify the required parameter 'archiveId' is set
            if (archiveId == null)
                throw new ApiException(400, "Missing required parameter 'archiveId' when calling MessageExportsApi->ReadMessageStoreReportArchiveContent");

            var localVarPath = "/restapi/v1.0/account/{accountId}/message-store-report/{taskId}/archive/{archiveId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/zip",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (archiveId != null) localVarPathParams.Add("archiveId", this.Configuration.ApiClient.ParameterToString(archiveId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadMessageStoreReportArchiveContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get Message Store Report Archive Content Returns one of the report archives with message contents in application/zip format.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="archiveId">Internal identifier of an archive volume to download</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> ReadMessageStoreReportArchiveContentAsync (string accountId, string taskId, string archiveId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await ReadMessageStoreReportArchiveContentWithHttpInfoAsync(accountId, taskId, archiveId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Message Store Report Archive Content Returns one of the report archives with message contents in application/zip format.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="archiveId">Internal identifier of an archive volume to download</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ReadMessageStoreReportArchiveContentWithHttpInfoAsync (string accountId, string taskId, string archiveId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MessageExportsApi->ReadMessageStoreReportArchiveContent");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling MessageExportsApi->ReadMessageStoreReportArchiveContent");
            // verify the required parameter 'archiveId' is set
            if (archiveId == null)
                throw new ApiException(400, "Missing required parameter 'archiveId' when calling MessageExportsApi->ReadMessageStoreReportArchiveContent");

            var localVarPath = "/restapi/v1.0/account/{accountId}/message-store-report/{taskId}/archive/{archiveId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/zip",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (archiveId != null) localVarPathParams.Add("archiveId", this.Configuration.ApiClient.ParameterToString(archiveId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadMessageStoreReportArchiveContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get Message Store Report Task Returns the current status of a task on report creation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <returns>MessageStoreReport</returns>
        public MessageStoreReport ReadMessageStoreReportTask (string accountId, string taskId)
        {
             ApiResponse<MessageStoreReport> localVarResponse = ReadMessageStoreReportTaskWithHttpInfo(accountId, taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Message Store Report Task Returns the current status of a task on report creation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <returns>ApiResponse of MessageStoreReport</returns>
        public ApiResponse<MessageStoreReport> ReadMessageStoreReportTaskWithHttpInfo (string accountId, string taskId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MessageExportsApi->ReadMessageStoreReportTask");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling MessageExportsApi->ReadMessageStoreReportTask");

            var localVarPath = "/restapi/v1.0/account/{accountId}/message-store-report/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadMessageStoreReportTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageStoreReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessageStoreReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageStoreReport)));
        }

        /// <summary>
        /// Get Message Store Report Task Returns the current status of a task on report creation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MessageStoreReport</returns>
        public async System.Threading.Tasks.Task<MessageStoreReport> ReadMessageStoreReportTaskAsync (string accountId, string taskId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MessageStoreReport> localVarResponse = await ReadMessageStoreReportTaskWithHttpInfoAsync(accountId, taskId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Message Store Report Task Returns the current status of a task on report creation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MessageStoreReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessageStoreReport>> ReadMessageStoreReportTaskWithHttpInfoAsync (string accountId, string taskId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MessageExportsApi->ReadMessageStoreReportTask");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling MessageExportsApi->ReadMessageStoreReportTask");

            var localVarPath = "/restapi/v1.0/account/{accountId}/message-store-report/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadMessageStoreReportTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageStoreReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessageStoreReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageStoreReport)));
        }

    }
}
