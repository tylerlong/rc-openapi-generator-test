/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBusinessHoursApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Company Business Hours
        /// </summary>
        /// <remarks>
        /// Returns the company business hours schedule. Business hours (and After hours - all the remaining time) schedules are commonly used for setting call handling rules - `business-hours-rule` and `after-hours-rule` correspondingly.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>CompanyBusinessHours</returns>
        CompanyBusinessHours ReadCompanyBusinessHours (string accountId);

        /// <summary>
        /// Get Company Business Hours
        /// </summary>
        /// <remarks>
        /// Returns the company business hours schedule. Business hours (and After hours - all the remaining time) schedules are commonly used for setting call handling rules - `business-hours-rule` and `after-hours-rule` correspondingly.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of CompanyBusinessHours</returns>
        ApiResponse<CompanyBusinessHours> ReadCompanyBusinessHoursWithHttpInfo (string accountId);
        /// <summary>
        /// Get User Business Hours
        /// </summary>
        /// <remarks>
        /// Returns the user business hours schedule. Business hours (and After hours - all the remaining time) schedules are commonly used for setting call handling rules - `business-hours-rule` and `after-hours-rule` correspondingly. **Please note:** If the user business hours are set to 'Custom hours' then a particular schedule is returned; however if set to '24 hours/7 days a week' the schedule will be empty.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <returns>GetUserBusinessHoursResponse</returns>
        GetUserBusinessHoursResponse ReadUserBusinessHours (string accountId, string extensionId);

        /// <summary>
        /// Get User Business Hours
        /// </summary>
        /// <remarks>
        /// Returns the user business hours schedule. Business hours (and After hours - all the remaining time) schedules are commonly used for setting call handling rules - `business-hours-rule` and `after-hours-rule` correspondingly. **Please note:** If the user business hours are set to 'Custom hours' then a particular schedule is returned; however if set to '24 hours/7 days a week' the schedule will be empty.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <returns>ApiResponse of GetUserBusinessHoursResponse</returns>
        ApiResponse<GetUserBusinessHoursResponse> ReadUserBusinessHoursWithHttpInfo (string accountId, string extensionId);
        /// <summary>
        /// Update Company Business Hours
        /// </summary>
        /// <remarks>
        /// Updates the company business hours schedule.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="companyBusinessHoursUpdateRequest">JSON body</param>
        /// <returns>CompanyBusinessHours</returns>
        CompanyBusinessHours UpdateCompanyBusinessHours (string accountId, CompanyBusinessHoursUpdateRequest companyBusinessHoursUpdateRequest);

        /// <summary>
        /// Update Company Business Hours
        /// </summary>
        /// <remarks>
        /// Updates the company business hours schedule.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="companyBusinessHoursUpdateRequest">JSON body</param>
        /// <returns>ApiResponse of CompanyBusinessHours</returns>
        ApiResponse<CompanyBusinessHours> UpdateCompanyBusinessHoursWithHttpInfo (string accountId, CompanyBusinessHoursUpdateRequest companyBusinessHoursUpdateRequest);
        /// <summary>
        /// Update User Business Hours
        /// </summary>
        /// <remarks>
        /// Updates the user business hours schedule.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="userBusinessHoursUpdateRequest">JSON body</param>
        /// <returns>UserBusinessHoursUpdateResponse</returns>
        UserBusinessHoursUpdateResponse UpdateUserBusinessHours (string accountId, string extensionId, UserBusinessHoursUpdateRequest userBusinessHoursUpdateRequest);

        /// <summary>
        /// Update User Business Hours
        /// </summary>
        /// <remarks>
        /// Updates the user business hours schedule.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="userBusinessHoursUpdateRequest">JSON body</param>
        /// <returns>ApiResponse of UserBusinessHoursUpdateResponse</returns>
        ApiResponse<UserBusinessHoursUpdateResponse> UpdateUserBusinessHoursWithHttpInfo (string accountId, string extensionId, UserBusinessHoursUpdateRequest userBusinessHoursUpdateRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Company Business Hours
        /// </summary>
        /// <remarks>
        /// Returns the company business hours schedule. Business hours (and After hours - all the remaining time) schedules are commonly used for setting call handling rules - `business-hours-rule` and `after-hours-rule` correspondingly.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CompanyBusinessHours</returns>
        System.Threading.Tasks.Task<CompanyBusinessHours> ReadCompanyBusinessHoursAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Company Business Hours
        /// </summary>
        /// <remarks>
        /// Returns the company business hours schedule. Business hours (and After hours - all the remaining time) schedules are commonly used for setting call handling rules - `business-hours-rule` and `after-hours-rule` correspondingly.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CompanyBusinessHours)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompanyBusinessHours>> ReadCompanyBusinessHoursWithHttpInfoAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get User Business Hours
        /// </summary>
        /// <remarks>
        /// Returns the user business hours schedule. Business hours (and After hours - all the remaining time) schedules are commonly used for setting call handling rules - `business-hours-rule` and `after-hours-rule` correspondingly. **Please note:** If the user business hours are set to 'Custom hours' then a particular schedule is returned; however if set to '24 hours/7 days a week' the schedule will be empty.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetUserBusinessHoursResponse</returns>
        System.Threading.Tasks.Task<GetUserBusinessHoursResponse> ReadUserBusinessHoursAsync (string accountId, string extensionId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get User Business Hours
        /// </summary>
        /// <remarks>
        /// Returns the user business hours schedule. Business hours (and After hours - all the remaining time) schedules are commonly used for setting call handling rules - `business-hours-rule` and `after-hours-rule` correspondingly. **Please note:** If the user business hours are set to 'Custom hours' then a particular schedule is returned; however if set to '24 hours/7 days a week' the schedule will be empty.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetUserBusinessHoursResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUserBusinessHoursResponse>> ReadUserBusinessHoursWithHttpInfoAsync (string accountId, string extensionId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Company Business Hours
        /// </summary>
        /// <remarks>
        /// Updates the company business hours schedule.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="companyBusinessHoursUpdateRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CompanyBusinessHours</returns>
        System.Threading.Tasks.Task<CompanyBusinessHours> UpdateCompanyBusinessHoursAsync (string accountId, CompanyBusinessHoursUpdateRequest companyBusinessHoursUpdateRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Company Business Hours
        /// </summary>
        /// <remarks>
        /// Updates the company business hours schedule.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="companyBusinessHoursUpdateRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CompanyBusinessHours)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompanyBusinessHours>> UpdateCompanyBusinessHoursWithHttpInfoAsync (string accountId, CompanyBusinessHoursUpdateRequest companyBusinessHoursUpdateRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update User Business Hours
        /// </summary>
        /// <remarks>
        /// Updates the user business hours schedule.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="userBusinessHoursUpdateRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserBusinessHoursUpdateResponse</returns>
        System.Threading.Tasks.Task<UserBusinessHoursUpdateResponse> UpdateUserBusinessHoursAsync (string accountId, string extensionId, UserBusinessHoursUpdateRequest userBusinessHoursUpdateRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update User Business Hours
        /// </summary>
        /// <remarks>
        /// Updates the user business hours schedule.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="userBusinessHoursUpdateRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserBusinessHoursUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserBusinessHoursUpdateResponse>> UpdateUserBusinessHoursWithHttpInfoAsync (string accountId, string extensionId, UserBusinessHoursUpdateRequest userBusinessHoursUpdateRequest, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BusinessHoursApi : IBusinessHoursApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessHoursApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BusinessHoursApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessHoursApi"/> class
        /// </summary>
        /// <returns></returns>
        public BusinessHoursApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessHoursApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BusinessHoursApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Company Business Hours Returns the company business hours schedule. Business hours (and After hours - all the remaining time) schedules are commonly used for setting call handling rules - `business-hours-rule` and `after-hours-rule` correspondingly.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>CompanyBusinessHours</returns>
        public CompanyBusinessHours ReadCompanyBusinessHours (string accountId)
        {
             ApiResponse<CompanyBusinessHours> localVarResponse = ReadCompanyBusinessHoursWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Company Business Hours Returns the company business hours schedule. Business hours (and After hours - all the remaining time) schedules are commonly used for setting call handling rules - `business-hours-rule` and `after-hours-rule` correspondingly.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of CompanyBusinessHours</returns>
        public ApiResponse<CompanyBusinessHours> ReadCompanyBusinessHoursWithHttpInfo (string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling BusinessHoursApi->ReadCompanyBusinessHours");

            var localVarPath = "/restapi/v1.0/account/{accountId}/business-hours";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadCompanyBusinessHours", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompanyBusinessHours>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CompanyBusinessHours) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompanyBusinessHours)));
        }

        /// <summary>
        /// Get Company Business Hours Returns the company business hours schedule. Business hours (and After hours - all the remaining time) schedules are commonly used for setting call handling rules - `business-hours-rule` and `after-hours-rule` correspondingly.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CompanyBusinessHours</returns>
        public async System.Threading.Tasks.Task<CompanyBusinessHours> ReadCompanyBusinessHoursAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CompanyBusinessHours> localVarResponse = await ReadCompanyBusinessHoursWithHttpInfoAsync(accountId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Company Business Hours Returns the company business hours schedule. Business hours (and After hours - all the remaining time) schedules are commonly used for setting call handling rules - `business-hours-rule` and `after-hours-rule` correspondingly.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CompanyBusinessHours)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CompanyBusinessHours>> ReadCompanyBusinessHoursWithHttpInfoAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling BusinessHoursApi->ReadCompanyBusinessHours");

            var localVarPath = "/restapi/v1.0/account/{accountId}/business-hours";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadCompanyBusinessHours", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompanyBusinessHours>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CompanyBusinessHours) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompanyBusinessHours)));
        }

        /// <summary>
        /// Get User Business Hours Returns the user business hours schedule. Business hours (and After hours - all the remaining time) schedules are commonly used for setting call handling rules - `business-hours-rule` and `after-hours-rule` correspondingly. **Please note:** If the user business hours are set to 'Custom hours' then a particular schedule is returned; however if set to '24 hours/7 days a week' the schedule will be empty.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <returns>GetUserBusinessHoursResponse</returns>
        public GetUserBusinessHoursResponse ReadUserBusinessHours (string accountId, string extensionId)
        {
             ApiResponse<GetUserBusinessHoursResponse> localVarResponse = ReadUserBusinessHoursWithHttpInfo(accountId, extensionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Business Hours Returns the user business hours schedule. Business hours (and After hours - all the remaining time) schedules are commonly used for setting call handling rules - `business-hours-rule` and `after-hours-rule` correspondingly. **Please note:** If the user business hours are set to 'Custom hours' then a particular schedule is returned; however if set to '24 hours/7 days a week' the schedule will be empty.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <returns>ApiResponse of GetUserBusinessHoursResponse</returns>
        public ApiResponse<GetUserBusinessHoursResponse> ReadUserBusinessHoursWithHttpInfo (string accountId, string extensionId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling BusinessHoursApi->ReadUserBusinessHours");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling BusinessHoursApi->ReadUserBusinessHours");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/business-hours";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadUserBusinessHours", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUserBusinessHoursResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetUserBusinessHoursResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUserBusinessHoursResponse)));
        }

        /// <summary>
        /// Get User Business Hours Returns the user business hours schedule. Business hours (and After hours - all the remaining time) schedules are commonly used for setting call handling rules - `business-hours-rule` and `after-hours-rule` correspondingly. **Please note:** If the user business hours are set to 'Custom hours' then a particular schedule is returned; however if set to '24 hours/7 days a week' the schedule will be empty.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetUserBusinessHoursResponse</returns>
        public async System.Threading.Tasks.Task<GetUserBusinessHoursResponse> ReadUserBusinessHoursAsync (string accountId, string extensionId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetUserBusinessHoursResponse> localVarResponse = await ReadUserBusinessHoursWithHttpInfoAsync(accountId, extensionId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get User Business Hours Returns the user business hours schedule. Business hours (and After hours - all the remaining time) schedules are commonly used for setting call handling rules - `business-hours-rule` and `after-hours-rule` correspondingly. **Please note:** If the user business hours are set to 'Custom hours' then a particular schedule is returned; however if set to '24 hours/7 days a week' the schedule will be empty.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetUserBusinessHoursResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUserBusinessHoursResponse>> ReadUserBusinessHoursWithHttpInfoAsync (string accountId, string extensionId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling BusinessHoursApi->ReadUserBusinessHours");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling BusinessHoursApi->ReadUserBusinessHours");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/business-hours";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadUserBusinessHours", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUserBusinessHoursResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetUserBusinessHoursResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUserBusinessHoursResponse)));
        }

        /// <summary>
        /// Update Company Business Hours Updates the company business hours schedule.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="companyBusinessHoursUpdateRequest">JSON body</param>
        /// <returns>CompanyBusinessHours</returns>
        public CompanyBusinessHours UpdateCompanyBusinessHours (string accountId, CompanyBusinessHoursUpdateRequest companyBusinessHoursUpdateRequest)
        {
             ApiResponse<CompanyBusinessHours> localVarResponse = UpdateCompanyBusinessHoursWithHttpInfo(accountId, companyBusinessHoursUpdateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Company Business Hours Updates the company business hours schedule.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="companyBusinessHoursUpdateRequest">JSON body</param>
        /// <returns>ApiResponse of CompanyBusinessHours</returns>
        public ApiResponse<CompanyBusinessHours> UpdateCompanyBusinessHoursWithHttpInfo (string accountId, CompanyBusinessHoursUpdateRequest companyBusinessHoursUpdateRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling BusinessHoursApi->UpdateCompanyBusinessHours");
            // verify the required parameter 'companyBusinessHoursUpdateRequest' is set
            if (companyBusinessHoursUpdateRequest == null)
                throw new ApiException(400, "Missing required parameter 'companyBusinessHoursUpdateRequest' when calling BusinessHoursApi->UpdateCompanyBusinessHours");

            var localVarPath = "/restapi/v1.0/account/{accountId}/business-hours";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (companyBusinessHoursUpdateRequest != null && companyBusinessHoursUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(companyBusinessHoursUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = companyBusinessHoursUpdateRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCompanyBusinessHours", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompanyBusinessHours>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CompanyBusinessHours) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompanyBusinessHours)));
        }

        /// <summary>
        /// Update Company Business Hours Updates the company business hours schedule.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="companyBusinessHoursUpdateRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CompanyBusinessHours</returns>
        public async System.Threading.Tasks.Task<CompanyBusinessHours> UpdateCompanyBusinessHoursAsync (string accountId, CompanyBusinessHoursUpdateRequest companyBusinessHoursUpdateRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CompanyBusinessHours> localVarResponse = await UpdateCompanyBusinessHoursWithHttpInfoAsync(accountId, companyBusinessHoursUpdateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Company Business Hours Updates the company business hours schedule.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="companyBusinessHoursUpdateRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CompanyBusinessHours)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CompanyBusinessHours>> UpdateCompanyBusinessHoursWithHttpInfoAsync (string accountId, CompanyBusinessHoursUpdateRequest companyBusinessHoursUpdateRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling BusinessHoursApi->UpdateCompanyBusinessHours");
            // verify the required parameter 'companyBusinessHoursUpdateRequest' is set
            if (companyBusinessHoursUpdateRequest == null)
                throw new ApiException(400, "Missing required parameter 'companyBusinessHoursUpdateRequest' when calling BusinessHoursApi->UpdateCompanyBusinessHours");

            var localVarPath = "/restapi/v1.0/account/{accountId}/business-hours";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (companyBusinessHoursUpdateRequest != null && companyBusinessHoursUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(companyBusinessHoursUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = companyBusinessHoursUpdateRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCompanyBusinessHours", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompanyBusinessHours>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CompanyBusinessHours) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompanyBusinessHours)));
        }

        /// <summary>
        /// Update User Business Hours Updates the user business hours schedule.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="userBusinessHoursUpdateRequest">JSON body</param>
        /// <returns>UserBusinessHoursUpdateResponse</returns>
        public UserBusinessHoursUpdateResponse UpdateUserBusinessHours (string accountId, string extensionId, UserBusinessHoursUpdateRequest userBusinessHoursUpdateRequest)
        {
             ApiResponse<UserBusinessHoursUpdateResponse> localVarResponse = UpdateUserBusinessHoursWithHttpInfo(accountId, extensionId, userBusinessHoursUpdateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update User Business Hours Updates the user business hours schedule.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="userBusinessHoursUpdateRequest">JSON body</param>
        /// <returns>ApiResponse of UserBusinessHoursUpdateResponse</returns>
        public ApiResponse<UserBusinessHoursUpdateResponse> UpdateUserBusinessHoursWithHttpInfo (string accountId, string extensionId, UserBusinessHoursUpdateRequest userBusinessHoursUpdateRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling BusinessHoursApi->UpdateUserBusinessHours");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling BusinessHoursApi->UpdateUserBusinessHours");
            // verify the required parameter 'userBusinessHoursUpdateRequest' is set
            if (userBusinessHoursUpdateRequest == null)
                throw new ApiException(400, "Missing required parameter 'userBusinessHoursUpdateRequest' when calling BusinessHoursApi->UpdateUserBusinessHours");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/business-hours";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (userBusinessHoursUpdateRequest != null && userBusinessHoursUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(userBusinessHoursUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userBusinessHoursUpdateRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserBusinessHours", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserBusinessHoursUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserBusinessHoursUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserBusinessHoursUpdateResponse)));
        }

        /// <summary>
        /// Update User Business Hours Updates the user business hours schedule.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="userBusinessHoursUpdateRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserBusinessHoursUpdateResponse</returns>
        public async System.Threading.Tasks.Task<UserBusinessHoursUpdateResponse> UpdateUserBusinessHoursAsync (string accountId, string extensionId, UserBusinessHoursUpdateRequest userBusinessHoursUpdateRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UserBusinessHoursUpdateResponse> localVarResponse = await UpdateUserBusinessHoursWithHttpInfoAsync(accountId, extensionId, userBusinessHoursUpdateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update User Business Hours Updates the user business hours schedule.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="userBusinessHoursUpdateRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserBusinessHoursUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserBusinessHoursUpdateResponse>> UpdateUserBusinessHoursWithHttpInfoAsync (string accountId, string extensionId, UserBusinessHoursUpdateRequest userBusinessHoursUpdateRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling BusinessHoursApi->UpdateUserBusinessHours");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling BusinessHoursApi->UpdateUserBusinessHours");
            // verify the required parameter 'userBusinessHoursUpdateRequest' is set
            if (userBusinessHoursUpdateRequest == null)
                throw new ApiException(400, "Missing required parameter 'userBusinessHoursUpdateRequest' when calling BusinessHoursApi->UpdateUserBusinessHours");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/business-hours";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (userBusinessHoursUpdateRequest != null && userBusinessHoursUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(userBusinessHoursUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userBusinessHoursUpdateRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserBusinessHours", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserBusinessHoursUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserBusinessHoursUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserBusinessHoursUpdateResponse)));
        }

    }
}
