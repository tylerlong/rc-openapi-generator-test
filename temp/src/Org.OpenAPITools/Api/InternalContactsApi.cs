/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInternalContactsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Company Directory Entries
        /// </summary>
        /// <remarks>
        /// Returns contact information on corporate users of federated accounts. Please note: 1. `User`, `DigitalUser`, `VirtualUser` and `FaxUser` types are returned as `User` type. 2. `ApplicationExtension` type is not returned. 3. Only extensions in `Enabled`, `Disabled` and `NotActivated` state are returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="showFederated">If &#39;True&#39; then contacts of all accounts in federation are returned. If &#39;False&#39; then only contacts of the current account are returned, and account section is eliminated in this case (optional, default to true)</param>
        /// <param name="type">Type of an extension. Please note that legacy &#39;Department&#39; extension type corresponds to &#39;Call Queue&#39; extensions in modern RingCentral product terminology (optional)</param>
        /// <param name="page">Page number (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage">Records count to be returned per one page. The default value is 1000. Specific keyword values: &#x60;all&#x60; - all records are returned in one page; &#x60;max&#x60; - maximum count of records that can be returned in one page (optional, default to 1000)</param>
        /// <param name="siteId">Internal identifier of the business site to which extensions belong (optional)</param>
        /// <param name="ifNoneMatch">If-None-Match (optional)</param>
        /// <returns>DirectoryResource</returns>
        DirectoryResource ListDirectoryEntries (string accountId, bool? showFederated = default(bool?), string type = default(string), string page = default(string), int? perPage = default(int?), string siteId = default(string), string ifNoneMatch = default(string));

        /// <summary>
        /// Get Company Directory Entries
        /// </summary>
        /// <remarks>
        /// Returns contact information on corporate users of federated accounts. Please note: 1. `User`, `DigitalUser`, `VirtualUser` and `FaxUser` types are returned as `User` type. 2. `ApplicationExtension` type is not returned. 3. Only extensions in `Enabled`, `Disabled` and `NotActivated` state are returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="showFederated">If &#39;True&#39; then contacts of all accounts in federation are returned. If &#39;False&#39; then only contacts of the current account are returned, and account section is eliminated in this case (optional, default to true)</param>
        /// <param name="type">Type of an extension. Please note that legacy &#39;Department&#39; extension type corresponds to &#39;Call Queue&#39; extensions in modern RingCentral product terminology (optional)</param>
        /// <param name="page">Page number (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage">Records count to be returned per one page. The default value is 1000. Specific keyword values: &#x60;all&#x60; - all records are returned in one page; &#x60;max&#x60; - maximum count of records that can be returned in one page (optional, default to 1000)</param>
        /// <param name="siteId">Internal identifier of the business site to which extensions belong (optional)</param>
        /// <param name="ifNoneMatch">If-None-Match (optional)</param>
        /// <returns>ApiResponse of DirectoryResource</returns>
        ApiResponse<DirectoryResource> ListDirectoryEntriesWithHttpInfo (string accountId, bool? showFederated = default(bool?), string type = default(string), string page = default(string), int? perPage = default(int?), string siteId = default(string), string ifNoneMatch = default(string));
        /// <summary>
        /// Get Account Federation
        /// </summary>
        /// <remarks>
        /// Returns information on a federation and associated accounts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="rCExtensionId">RCExtensionId (optional)</param>
        /// <returns>FederationResource</returns>
        FederationResource ReadAccountFederation (string accountId, string rCExtensionId = default(string));

        /// <summary>
        /// Get Account Federation
        /// </summary>
        /// <remarks>
        /// Returns information on a federation and associated accounts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="rCExtensionId">RCExtensionId (optional)</param>
        /// <returns>ApiResponse of FederationResource</returns>
        ApiResponse<FederationResource> ReadAccountFederationWithHttpInfo (string accountId, string rCExtensionId = default(string));
        /// <summary>
        /// Get Corporate Directory Entry
        /// </summary>
        /// <remarks>
        /// Returns contact information on a particular corporate user of a federated account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entryId">Internal identifier of extension to read information for</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ContactResource</returns>
        ContactResource ReadDirectoryEntry (string entryId, string accountId);

        /// <summary>
        /// Get Corporate Directory Entry
        /// </summary>
        /// <remarks>
        /// Returns contact information on a particular corporate user of a federated account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entryId">Internal identifier of extension to read information for</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of ContactResource</returns>
        ApiResponse<ContactResource> ReadDirectoryEntryWithHttpInfo (string entryId, string accountId);
        /// <summary>
        /// Search Company Directory Entries
        /// </summary>
        /// <remarks>
        /// Returns contact information on corporate users of federated accounts according to the specified filtering and ordering.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="searchDirectoryEntriesRequest"> (optional)</param>
        /// <returns>DirectoryResource</returns>
        DirectoryResource SearchDirectoryEntries (string accountId, SearchDirectoryEntriesRequest searchDirectoryEntriesRequest = default(SearchDirectoryEntriesRequest));

        /// <summary>
        /// Search Company Directory Entries
        /// </summary>
        /// <remarks>
        /// Returns contact information on corporate users of federated accounts according to the specified filtering and ordering.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="searchDirectoryEntriesRequest"> (optional)</param>
        /// <returns>ApiResponse of DirectoryResource</returns>
        ApiResponse<DirectoryResource> SearchDirectoryEntriesWithHttpInfo (string accountId, SearchDirectoryEntriesRequest searchDirectoryEntriesRequest = default(SearchDirectoryEntriesRequest));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Company Directory Entries
        /// </summary>
        /// <remarks>
        /// Returns contact information on corporate users of federated accounts. Please note: 1. `User`, `DigitalUser`, `VirtualUser` and `FaxUser` types are returned as `User` type. 2. `ApplicationExtension` type is not returned. 3. Only extensions in `Enabled`, `Disabled` and `NotActivated` state are returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="showFederated">If &#39;True&#39; then contacts of all accounts in federation are returned. If &#39;False&#39; then only contacts of the current account are returned, and account section is eliminated in this case (optional, default to true)</param>
        /// <param name="type">Type of an extension. Please note that legacy &#39;Department&#39; extension type corresponds to &#39;Call Queue&#39; extensions in modern RingCentral product terminology (optional)</param>
        /// <param name="page">Page number (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage">Records count to be returned per one page. The default value is 1000. Specific keyword values: &#x60;all&#x60; - all records are returned in one page; &#x60;max&#x60; - maximum count of records that can be returned in one page (optional, default to 1000)</param>
        /// <param name="siteId">Internal identifier of the business site to which extensions belong (optional)</param>
        /// <param name="ifNoneMatch">If-None-Match (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DirectoryResource</returns>
        System.Threading.Tasks.Task<DirectoryResource> ListDirectoryEntriesAsync (string accountId, bool? showFederated = default(bool?), string type = default(string), string page = default(string), int? perPage = default(int?), string siteId = default(string), string ifNoneMatch = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Company Directory Entries
        /// </summary>
        /// <remarks>
        /// Returns contact information on corporate users of federated accounts. Please note: 1. `User`, `DigitalUser`, `VirtualUser` and `FaxUser` types are returned as `User` type. 2. `ApplicationExtension` type is not returned. 3. Only extensions in `Enabled`, `Disabled` and `NotActivated` state are returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="showFederated">If &#39;True&#39; then contacts of all accounts in federation are returned. If &#39;False&#39; then only contacts of the current account are returned, and account section is eliminated in this case (optional, default to true)</param>
        /// <param name="type">Type of an extension. Please note that legacy &#39;Department&#39; extension type corresponds to &#39;Call Queue&#39; extensions in modern RingCentral product terminology (optional)</param>
        /// <param name="page">Page number (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage">Records count to be returned per one page. The default value is 1000. Specific keyword values: &#x60;all&#x60; - all records are returned in one page; &#x60;max&#x60; - maximum count of records that can be returned in one page (optional, default to 1000)</param>
        /// <param name="siteId">Internal identifier of the business site to which extensions belong (optional)</param>
        /// <param name="ifNoneMatch">If-None-Match (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DirectoryResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<DirectoryResource>> ListDirectoryEntriesWithHttpInfoAsync (string accountId, bool? showFederated = default(bool?), string type = default(string), string page = default(string), int? perPage = default(int?), string siteId = default(string), string ifNoneMatch = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Account Federation
        /// </summary>
        /// <remarks>
        /// Returns information on a federation and associated accounts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="rCExtensionId">RCExtensionId (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FederationResource</returns>
        System.Threading.Tasks.Task<FederationResource> ReadAccountFederationAsync (string accountId, string rCExtensionId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Account Federation
        /// </summary>
        /// <remarks>
        /// Returns information on a federation and associated accounts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="rCExtensionId">RCExtensionId (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FederationResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<FederationResource>> ReadAccountFederationWithHttpInfoAsync (string accountId, string rCExtensionId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Corporate Directory Entry
        /// </summary>
        /// <remarks>
        /// Returns contact information on a particular corporate user of a federated account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entryId">Internal identifier of extension to read information for</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ContactResource</returns>
        System.Threading.Tasks.Task<ContactResource> ReadDirectoryEntryAsync (string entryId, string accountId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Corporate Directory Entry
        /// </summary>
        /// <remarks>
        /// Returns contact information on a particular corporate user of a federated account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entryId">Internal identifier of extension to read information for</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ContactResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactResource>> ReadDirectoryEntryWithHttpInfoAsync (string entryId, string accountId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Search Company Directory Entries
        /// </summary>
        /// <remarks>
        /// Returns contact information on corporate users of federated accounts according to the specified filtering and ordering.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="searchDirectoryEntriesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DirectoryResource</returns>
        System.Threading.Tasks.Task<DirectoryResource> SearchDirectoryEntriesAsync (string accountId, SearchDirectoryEntriesRequest searchDirectoryEntriesRequest = default(SearchDirectoryEntriesRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Search Company Directory Entries
        /// </summary>
        /// <remarks>
        /// Returns contact information on corporate users of federated accounts according to the specified filtering and ordering.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="searchDirectoryEntriesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DirectoryResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<DirectoryResource>> SearchDirectoryEntriesWithHttpInfoAsync (string accountId, SearchDirectoryEntriesRequest searchDirectoryEntriesRequest = default(SearchDirectoryEntriesRequest), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InternalContactsApi : IInternalContactsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InternalContactsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InternalContactsApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InternalContactsApi"/> class
        /// </summary>
        /// <returns></returns>
        public InternalContactsApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InternalContactsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InternalContactsApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Company Directory Entries Returns contact information on corporate users of federated accounts. Please note: 1. `User`, `DigitalUser`, `VirtualUser` and `FaxUser` types are returned as `User` type. 2. `ApplicationExtension` type is not returned. 3. Only extensions in `Enabled`, `Disabled` and `NotActivated` state are returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="showFederated">If &#39;True&#39; then contacts of all accounts in federation are returned. If &#39;False&#39; then only contacts of the current account are returned, and account section is eliminated in this case (optional, default to true)</param>
        /// <param name="type">Type of an extension. Please note that legacy &#39;Department&#39; extension type corresponds to &#39;Call Queue&#39; extensions in modern RingCentral product terminology (optional)</param>
        /// <param name="page">Page number (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage">Records count to be returned per one page. The default value is 1000. Specific keyword values: &#x60;all&#x60; - all records are returned in one page; &#x60;max&#x60; - maximum count of records that can be returned in one page (optional, default to 1000)</param>
        /// <param name="siteId">Internal identifier of the business site to which extensions belong (optional)</param>
        /// <param name="ifNoneMatch">If-None-Match (optional)</param>
        /// <returns>DirectoryResource</returns>
        public DirectoryResource ListDirectoryEntries (string accountId, bool? showFederated = default(bool?), string type = default(string), string page = default(string), int? perPage = default(int?), string siteId = default(string), string ifNoneMatch = default(string))
        {
             ApiResponse<DirectoryResource> localVarResponse = ListDirectoryEntriesWithHttpInfo(accountId, showFederated, type, page, perPage, siteId, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Company Directory Entries Returns contact information on corporate users of federated accounts. Please note: 1. `User`, `DigitalUser`, `VirtualUser` and `FaxUser` types are returned as `User` type. 2. `ApplicationExtension` type is not returned. 3. Only extensions in `Enabled`, `Disabled` and `NotActivated` state are returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="showFederated">If &#39;True&#39; then contacts of all accounts in federation are returned. If &#39;False&#39; then only contacts of the current account are returned, and account section is eliminated in this case (optional, default to true)</param>
        /// <param name="type">Type of an extension. Please note that legacy &#39;Department&#39; extension type corresponds to &#39;Call Queue&#39; extensions in modern RingCentral product terminology (optional)</param>
        /// <param name="page">Page number (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage">Records count to be returned per one page. The default value is 1000. Specific keyword values: &#x60;all&#x60; - all records are returned in one page; &#x60;max&#x60; - maximum count of records that can be returned in one page (optional, default to 1000)</param>
        /// <param name="siteId">Internal identifier of the business site to which extensions belong (optional)</param>
        /// <param name="ifNoneMatch">If-None-Match (optional)</param>
        /// <returns>ApiResponse of DirectoryResource</returns>
        public ApiResponse<DirectoryResource> ListDirectoryEntriesWithHttpInfo (string accountId, bool? showFederated = default(bool?), string type = default(string), string page = default(string), int? perPage = default(int?), string siteId = default(string), string ifNoneMatch = default(string))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling InternalContactsApi->ListDirectoryEntries");

            var localVarPath = "/restapi/v1.0/account/{accountId}/directory/entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (showFederated != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showFederated", showFederated)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (siteId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "siteId", siteId)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDirectoryEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DirectoryResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DirectoryResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DirectoryResource)));
        }

        /// <summary>
        /// Get Company Directory Entries Returns contact information on corporate users of federated accounts. Please note: 1. `User`, `DigitalUser`, `VirtualUser` and `FaxUser` types are returned as `User` type. 2. `ApplicationExtension` type is not returned. 3. Only extensions in `Enabled`, `Disabled` and `NotActivated` state are returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="showFederated">If &#39;True&#39; then contacts of all accounts in federation are returned. If &#39;False&#39; then only contacts of the current account are returned, and account section is eliminated in this case (optional, default to true)</param>
        /// <param name="type">Type of an extension. Please note that legacy &#39;Department&#39; extension type corresponds to &#39;Call Queue&#39; extensions in modern RingCentral product terminology (optional)</param>
        /// <param name="page">Page number (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage">Records count to be returned per one page. The default value is 1000. Specific keyword values: &#x60;all&#x60; - all records are returned in one page; &#x60;max&#x60; - maximum count of records that can be returned in one page (optional, default to 1000)</param>
        /// <param name="siteId">Internal identifier of the business site to which extensions belong (optional)</param>
        /// <param name="ifNoneMatch">If-None-Match (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DirectoryResource</returns>
        public async System.Threading.Tasks.Task<DirectoryResource> ListDirectoryEntriesAsync (string accountId, bool? showFederated = default(bool?), string type = default(string), string page = default(string), int? perPage = default(int?), string siteId = default(string), string ifNoneMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DirectoryResource> localVarResponse = await ListDirectoryEntriesWithHttpInfoAsync(accountId, showFederated, type, page, perPage, siteId, ifNoneMatch, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Company Directory Entries Returns contact information on corporate users of federated accounts. Please note: 1. `User`, `DigitalUser`, `VirtualUser` and `FaxUser` types are returned as `User` type. 2. `ApplicationExtension` type is not returned. 3. Only extensions in `Enabled`, `Disabled` and `NotActivated` state are returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="showFederated">If &#39;True&#39; then contacts of all accounts in federation are returned. If &#39;False&#39; then only contacts of the current account are returned, and account section is eliminated in this case (optional, default to true)</param>
        /// <param name="type">Type of an extension. Please note that legacy &#39;Department&#39; extension type corresponds to &#39;Call Queue&#39; extensions in modern RingCentral product terminology (optional)</param>
        /// <param name="page">Page number (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage">Records count to be returned per one page. The default value is 1000. Specific keyword values: &#x60;all&#x60; - all records are returned in one page; &#x60;max&#x60; - maximum count of records that can be returned in one page (optional, default to 1000)</param>
        /// <param name="siteId">Internal identifier of the business site to which extensions belong (optional)</param>
        /// <param name="ifNoneMatch">If-None-Match (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DirectoryResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DirectoryResource>> ListDirectoryEntriesWithHttpInfoAsync (string accountId, bool? showFederated = default(bool?), string type = default(string), string page = default(string), int? perPage = default(int?), string siteId = default(string), string ifNoneMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling InternalContactsApi->ListDirectoryEntries");

            var localVarPath = "/restapi/v1.0/account/{accountId}/directory/entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (showFederated != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showFederated", showFederated)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (siteId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "siteId", siteId)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDirectoryEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DirectoryResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DirectoryResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DirectoryResource)));
        }

        /// <summary>
        /// Get Account Federation Returns information on a federation and associated accounts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="rCExtensionId">RCExtensionId (optional)</param>
        /// <returns>FederationResource</returns>
        public FederationResource ReadAccountFederation (string accountId, string rCExtensionId = default(string))
        {
             ApiResponse<FederationResource> localVarResponse = ReadAccountFederationWithHttpInfo(accountId, rCExtensionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account Federation Returns information on a federation and associated accounts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="rCExtensionId">RCExtensionId (optional)</param>
        /// <returns>ApiResponse of FederationResource</returns>
        public ApiResponse<FederationResource> ReadAccountFederationWithHttpInfo (string accountId, string rCExtensionId = default(string))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling InternalContactsApi->ReadAccountFederation");

            var localVarPath = "/restapi/v1.0/account/{accountId}/directory/federation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (rCExtensionId != null) localVarHeaderParams.Add("RCExtensionId", this.Configuration.ApiClient.ParameterToString(rCExtensionId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadAccountFederation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FederationResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FederationResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FederationResource)));
        }

        /// <summary>
        /// Get Account Federation Returns information on a federation and associated accounts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="rCExtensionId">RCExtensionId (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FederationResource</returns>
        public async System.Threading.Tasks.Task<FederationResource> ReadAccountFederationAsync (string accountId, string rCExtensionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<FederationResource> localVarResponse = await ReadAccountFederationWithHttpInfoAsync(accountId, rCExtensionId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Account Federation Returns information on a federation and associated accounts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="rCExtensionId">RCExtensionId (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FederationResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FederationResource>> ReadAccountFederationWithHttpInfoAsync (string accountId, string rCExtensionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling InternalContactsApi->ReadAccountFederation");

            var localVarPath = "/restapi/v1.0/account/{accountId}/directory/federation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (rCExtensionId != null) localVarHeaderParams.Add("RCExtensionId", this.Configuration.ApiClient.ParameterToString(rCExtensionId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadAccountFederation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FederationResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FederationResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FederationResource)));
        }

        /// <summary>
        /// Get Corporate Directory Entry Returns contact information on a particular corporate user of a federated account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entryId">Internal identifier of extension to read information for</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ContactResource</returns>
        public ContactResource ReadDirectoryEntry (string entryId, string accountId)
        {
             ApiResponse<ContactResource> localVarResponse = ReadDirectoryEntryWithHttpInfo(entryId, accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Corporate Directory Entry Returns contact information on a particular corporate user of a federated account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entryId">Internal identifier of extension to read information for</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of ContactResource</returns>
        public ApiResponse<ContactResource> ReadDirectoryEntryWithHttpInfo (string entryId, string accountId)
        {
            // verify the required parameter 'entryId' is set
            if (entryId == null)
                throw new ApiException(400, "Missing required parameter 'entryId' when calling InternalContactsApi->ReadDirectoryEntry");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling InternalContactsApi->ReadDirectoryEntry");

            var localVarPath = "/restapi/v1.0/account/{accountId}/directory/entries/{entryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entryId != null) localVarPathParams.Add("entryId", this.Configuration.ApiClient.ParameterToString(entryId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadDirectoryEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ContactResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactResource)));
        }

        /// <summary>
        /// Get Corporate Directory Entry Returns contact information on a particular corporate user of a federated account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entryId">Internal identifier of extension to read information for</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ContactResource</returns>
        public async System.Threading.Tasks.Task<ContactResource> ReadDirectoryEntryAsync (string entryId, string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ContactResource> localVarResponse = await ReadDirectoryEntryWithHttpInfoAsync(entryId, accountId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Corporate Directory Entry Returns contact information on a particular corporate user of a federated account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entryId">Internal identifier of extension to read information for</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ContactResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContactResource>> ReadDirectoryEntryWithHttpInfoAsync (string entryId, string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'entryId' is set
            if (entryId == null)
                throw new ApiException(400, "Missing required parameter 'entryId' when calling InternalContactsApi->ReadDirectoryEntry");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling InternalContactsApi->ReadDirectoryEntry");

            var localVarPath = "/restapi/v1.0/account/{accountId}/directory/entries/{entryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entryId != null) localVarPathParams.Add("entryId", this.Configuration.ApiClient.ParameterToString(entryId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadDirectoryEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ContactResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactResource)));
        }

        /// <summary>
        /// Search Company Directory Entries Returns contact information on corporate users of federated accounts according to the specified filtering and ordering.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="searchDirectoryEntriesRequest"> (optional)</param>
        /// <returns>DirectoryResource</returns>
        public DirectoryResource SearchDirectoryEntries (string accountId, SearchDirectoryEntriesRequest searchDirectoryEntriesRequest = default(SearchDirectoryEntriesRequest))
        {
             ApiResponse<DirectoryResource> localVarResponse = SearchDirectoryEntriesWithHttpInfo(accountId, searchDirectoryEntriesRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Company Directory Entries Returns contact information on corporate users of federated accounts according to the specified filtering and ordering.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="searchDirectoryEntriesRequest"> (optional)</param>
        /// <returns>ApiResponse of DirectoryResource</returns>
        public ApiResponse<DirectoryResource> SearchDirectoryEntriesWithHttpInfo (string accountId, SearchDirectoryEntriesRequest searchDirectoryEntriesRequest = default(SearchDirectoryEntriesRequest))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling InternalContactsApi->SearchDirectoryEntries");

            var localVarPath = "/restapi/v1.0/account/{accountId}/directory/entries/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (searchDirectoryEntriesRequest != null && searchDirectoryEntriesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(searchDirectoryEntriesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = searchDirectoryEntriesRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchDirectoryEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DirectoryResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DirectoryResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DirectoryResource)));
        }

        /// <summary>
        /// Search Company Directory Entries Returns contact information on corporate users of federated accounts according to the specified filtering and ordering.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="searchDirectoryEntriesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DirectoryResource</returns>
        public async System.Threading.Tasks.Task<DirectoryResource> SearchDirectoryEntriesAsync (string accountId, SearchDirectoryEntriesRequest searchDirectoryEntriesRequest = default(SearchDirectoryEntriesRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DirectoryResource> localVarResponse = await SearchDirectoryEntriesWithHttpInfoAsync(accountId, searchDirectoryEntriesRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Company Directory Entries Returns contact information on corporate users of federated accounts according to the specified filtering and ordering.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="searchDirectoryEntriesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DirectoryResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DirectoryResource>> SearchDirectoryEntriesWithHttpInfoAsync (string accountId, SearchDirectoryEntriesRequest searchDirectoryEntriesRequest = default(SearchDirectoryEntriesRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling InternalContactsApi->SearchDirectoryEntries");

            var localVarPath = "/restapi/v1.0/account/{accountId}/directory/entries/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (searchDirectoryEntriesRequest != null && searchDirectoryEntriesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(searchDirectoryEntriesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = searchDirectoryEntriesRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchDirectoryEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DirectoryResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DirectoryResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DirectoryResource)));
        }

    }
}
