/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICallControlApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Answer Call Party
        /// </summary>
        /// <remarks>
        /// Answers a call on a certain device by passing the corresponding device ID in request body. Supported for call forwarding, call transfer, call flip and call queues.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="answerTarget">Distributes a non-answered call to the defined target. Only a single target is allowed</param>
        /// <returns>CallParty</returns>
        CallParty AnswerCallParty (string accountId, string telephonySessionId, string partyId, AnswerTarget answerTarget);

        /// <summary>
        /// Answer Call Party
        /// </summary>
        /// <remarks>
        /// Answers a call on a certain device by passing the corresponding device ID in request body. Supported for call forwarding, call transfer, call flip and call queues.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="answerTarget">Distributes a non-answered call to the defined target. Only a single target is allowed</param>
        /// <returns>ApiResponse of CallParty</returns>
        ApiResponse<CallParty> AnswerCallPartyWithHttpInfo (string accountId, string telephonySessionId, string partyId, AnswerTarget answerTarget);
        /// <summary>
        /// Bridge Call Party
        /// </summary>
        /// <remarks>
        /// Allows the user to connect multiple call session participants over a conference call bridge. The current active call session ID and party ID of the user within this session should be specified in path; the bridged call session ID and party ID of the user within that session should be specified in request body. Thus the user connects participants of two sessions into one conference call using his/her own party IDs from both sessions.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="bridgeTargetRequest">Defines target call session and call party to be bridged</param>
        /// <returns>CallParty</returns>
        CallParty BridgeCallParty (string accountId, string telephonySessionId, string partyId, BridgeTargetRequest bridgeTargetRequest);

        /// <summary>
        /// Bridge Call Party
        /// </summary>
        /// <remarks>
        /// Allows the user to connect multiple call session participants over a conference call bridge. The current active call session ID and party ID of the user within this session should be specified in path; the bridged call session ID and party ID of the user within that session should be specified in request body. Thus the user connects participants of two sessions into one conference call using his/her own party IDs from both sessions.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="bridgeTargetRequest">Defines target call session and call party to be bridged</param>
        /// <returns>ApiResponse of CallParty</returns>
        ApiResponse<CallParty> BridgeCallPartyWithHttpInfo (string accountId, string telephonySessionId, string partyId, BridgeTargetRequest bridgeTargetRequest);
        /// <summary>
        /// Call Flip on Party
        /// </summary>
        /// <remarks>
        /// Performs call flip procedure by holding opposite party and calling to the specified target
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="callPartyFlip">JSON body</param>
        /// <returns></returns>
        void CallFlipParty (string accountId, string telephonySessionId, string partyId, CallPartyFlip callPartyFlip);

        /// <summary>
        /// Call Flip on Party
        /// </summary>
        /// <remarks>
        /// Performs call flip procedure by holding opposite party and calling to the specified target
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="callPartyFlip">JSON body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CallFlipPartyWithHttpInfo (string accountId, string telephonySessionId, string partyId, CallPartyFlip callPartyFlip);
        /// <summary>
        /// Call Park
        /// </summary>
        /// <remarks>
        /// Parks a call to a virtual location from where it can further be retrieved by any user from any phone of the system. The call session and call party identifiers should be specified in path. Currently the users can park only their own incoming calls. Up to 50 calls can be parked simultaneously. Park location starts with asterisk (*) and ranges 801-899.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <returns>CallParty</returns>
        CallParty CallParkParty (string accountId, string telephonySessionId, string partyId);

        /// <summary>
        /// Call Park
        /// </summary>
        /// <remarks>
        /// Parks a call to a virtual location from where it can further be retrieved by any user from any phone of the system. The call session and call party identifiers should be specified in path. Currently the users can park only their own incoming calls. Up to 50 calls can be parked simultaneously. Park location starts with asterisk (*) and ranges 801-899.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <returns>ApiResponse of CallParty</returns>
        ApiResponse<CallParty> CallParkPartyWithHttpInfo (string accountId, string telephonySessionId, string partyId);
        /// <summary>
        /// Make CallOut
        /// </summary>
        /// <remarks>
        /// Creates a new outbound call out session. Currently this method is supported for Softphone/Hardphone only, since device IDs for WebRTC/Mobile apps cannot be obtained.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="makeCallOutRequest">JSON body</param>
        /// <returns>CallSession</returns>
        CallSession CreateCallOutCallSession (string accountId, MakeCallOutRequest makeCallOutRequest);

        /// <summary>
        /// Make CallOut
        /// </summary>
        /// <remarks>
        /// Creates a new outbound call out session. Currently this method is supported for Softphone/Hardphone only, since device IDs for WebRTC/Mobile apps cannot be obtained.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="makeCallOutRequest">JSON body</param>
        /// <returns>ApiResponse of CallSession</returns>
        ApiResponse<CallSession> CreateCallOutCallSessionWithHttpInfo (string accountId, MakeCallOutRequest makeCallOutRequest);
        /// <summary>
        /// Bring-In Call Party
        /// </summary>
        /// <remarks>
        /// Adds a new party to the call session by bringing-in an established SIP call connection. The maximum number of parties to bring-in is 10; only 1 call party can be added per request. Currently the method is supported for sessions of 'Conference' origin only.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="addPartyRequest">JSON body</param>
        /// <returns>CallParty</returns>
        CallParty CreateCallPartyWithBringIn (string accountId, string telephonySessionId, AddPartyRequest addPartyRequest);

        /// <summary>
        /// Bring-In Call Party
        /// </summary>
        /// <remarks>
        /// Adds a new party to the call session by bringing-in an established SIP call connection. The maximum number of parties to bring-in is 10; only 1 call party can be added per request. Currently the method is supported for sessions of 'Conference' origin only.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="addPartyRequest">JSON body</param>
        /// <returns>ApiResponse of CallParty</returns>
        ApiResponse<CallParty> CreateCallPartyWithBringInWithHttpInfo (string accountId, string telephonySessionId, AddPartyRequest addPartyRequest);
        /// <summary>
        /// Start Conference Call Session
        /// </summary>
        /// <remarks>
        /// Initiates a conference call session.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>CallSessionObject</returns>
        CallSessionObject CreateConferenceCallSession (string accountId);

        /// <summary>
        /// Start Conference Call Session
        /// </summary>
        /// <remarks>
        /// Initiates a conference call session.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of CallSessionObject</returns>
        ApiResponse<CallSessionObject> CreateConferenceCallSessionWithHttpInfo (string accountId);
        /// <summary>
        /// Delete Call Party
        /// </summary>
        /// <remarks>
        /// Removes a party from a call session by ID. A party can be deleted only if supervised or parked. It is possible to delete only one conference participant per request.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <returns></returns>
        void DeleteCallParty (string accountId, string telephonySessionId, string partyId);

        /// <summary>
        /// Delete Call Party
        /// </summary>
        /// <remarks>
        /// Removes a party from a call session by ID. A party can be deleted only if supervised or parked. It is possible to delete only one conference participant per request.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCallPartyWithHttpInfo (string accountId, string telephonySessionId, string partyId);
        /// <summary>
        /// Drop Call Session
        /// </summary>
        /// <remarks>
        /// Drops a call session.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <returns></returns>
        void DeleteCallSession (string accountId, string telephonySessionId);

        /// <summary>
        /// Drop Call Session
        /// </summary>
        /// <remarks>
        /// Drops a call session.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCallSessionWithHttpInfo (string accountId, string telephonySessionId);
        /// <summary>
        /// Forward Call Party
        /// </summary>
        /// <remarks>
        /// Forwards a non-answered incoming call to the specified call party. Applicable for a call session in \"Setup\" or \"Proceeding\" state.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="forwardTarget">Specifies a call party to which the call will be forwarded. Only a single call party is allowed.</param>
        /// <returns>CallParty</returns>
        CallParty ForwardCallParty (string accountId, string telephonySessionId, string partyId, ForwardTarget forwardTarget);

        /// <summary>
        /// Forward Call Party
        /// </summary>
        /// <remarks>
        /// Forwards a non-answered incoming call to the specified call party. Applicable for a call session in \"Setup\" or \"Proceeding\" state.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="forwardTarget">Specifies a call party to which the call will be forwarded. Only a single call party is allowed.</param>
        /// <returns>ApiResponse of CallParty</returns>
        ApiResponse<CallParty> ForwardCallPartyWithHttpInfo (string accountId, string telephonySessionId, string partyId, ForwardTarget forwardTarget);
        /// <summary>
        /// Hold Call Party
        /// </summary>
        /// <remarks>
        /// Puts the party to stand-alone mode and starts to play Hold Music according to configuration & state to peers. There is a known limitation for Hold API - hold via REST API doesn't work with hold placed via RingCentral apps or HardPhone. It means that if you muted participant via Call Control API and RingCentral Desktop app, then you need to unhold both endpoints to remove Hold Music and bring media back.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <returns>CallParty</returns>
        CallParty HoldCallParty (string accountId, string telephonySessionId, string partyId);

        /// <summary>
        /// Hold Call Party
        /// </summary>
        /// <remarks>
        /// Puts the party to stand-alone mode and starts to play Hold Music according to configuration & state to peers. There is a known limitation for Hold API - hold via REST API doesn't work with hold placed via RingCentral apps or HardPhone. It means that if you muted participant via Call Control API and RingCentral Desktop app, then you need to unhold both endpoints to remove Hold Music and bring media back.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <returns>ApiResponse of CallParty</returns>
        ApiResponse<CallParty> HoldCallPartyWithHttpInfo (string accountId, string telephonySessionId, string partyId);
        /// <summary>
        /// Ignore Call in Queue
        /// </summary>
        /// <remarks>
        /// Ignores a call to a call queue agent in `Setup` or `Proceeding` state.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="ignoreRequestBody">JSON body</param>
        /// <returns></returns>
        void IgnoreCallInQueue (string accountId, string telephonySessionId, string partyId, IgnoreRequestBody ignoreRequestBody);

        /// <summary>
        /// Ignore Call in Queue
        /// </summary>
        /// <remarks>
        /// Ignores a call to a call queue agent in `Setup` or `Proceeding` state.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="ignoreRequestBody">JSON body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IgnoreCallInQueueWithHttpInfo (string accountId, string telephonySessionId, string partyId, IgnoreRequestBody ignoreRequestBody);
        /// <summary>
        /// Pause/Resume Recording
        /// </summary>
        /// <remarks>
        /// Pause/resume recording
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">Identifies a brand of a logged in user or a brand of a sign-up session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="recordingId">Internal identifier of a recording</param>
        /// <param name="callRecordingUpdate">JSON body</param>
        /// <returns>CallRecording</returns>
        CallRecording PauseResumeCallRecording (string brandId, string accountId, string telephonySessionId, string partyId, string recordingId, CallRecordingUpdate callRecordingUpdate);

        /// <summary>
        /// Pause/Resume Recording
        /// </summary>
        /// <remarks>
        /// Pause/resume recording
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">Identifies a brand of a logged in user or a brand of a sign-up session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="recordingId">Internal identifier of a recording</param>
        /// <param name="callRecordingUpdate">JSON body</param>
        /// <returns>ApiResponse of CallRecording</returns>
        ApiResponse<CallRecording> PauseResumeCallRecordingWithHttpInfo (string brandId, string accountId, string telephonySessionId, string partyId, string recordingId, CallRecordingUpdate callRecordingUpdate);
        /// <summary>
        /// Pickup Call
        /// </summary>
        /// <remarks>
        /// Picks up a call parked to the specified park location.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="pickupTarget">Distributes a non-answered call to the defined target. Only a single target is allowed</param>
        /// <returns>CallParty</returns>
        CallParty PickupCallParty (string accountId, string telephonySessionId, string partyId, PickupTarget pickupTarget);

        /// <summary>
        /// Pickup Call
        /// </summary>
        /// <remarks>
        /// Picks up a call parked to the specified park location.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="pickupTarget">Distributes a non-answered call to the defined target. Only a single target is allowed</param>
        /// <returns>ApiResponse of CallParty</returns>
        ApiResponse<CallParty> PickupCallPartyWithHttpInfo (string accountId, string telephonySessionId, string partyId, PickupTarget pickupTarget);
        /// <summary>
        /// Get Call Party Status
        /// </summary>
        /// <remarks>
        /// Returns a call party status by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <returns>CallParty</returns>
        CallParty ReadCallPartyStatus (string accountId, string telephonySessionId, string partyId);

        /// <summary>
        /// Get Call Party Status
        /// </summary>
        /// <remarks>
        /// Returns a call party status by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <returns>ApiResponse of CallParty</returns>
        ApiResponse<CallParty> ReadCallPartyStatusWithHttpInfo (string accountId, string telephonySessionId, string partyId);
        /// <summary>
        /// Get Call Session Status
        /// </summary>
        /// <remarks>
        /// Returns the status of a call session by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="timestamp">The date and time of a call session latest change (optional)</param>
        /// <param name="timeout">The time frame of awaiting for a status change before sending the resulting one in response (optional)</param>
        /// <returns>CallSessionObject</returns>
        CallSessionObject ReadCallSessionStatus (string accountId, string telephonySessionId, string timestamp = default(string), string timeout = default(string));

        /// <summary>
        /// Get Call Session Status
        /// </summary>
        /// <remarks>
        /// Returns the status of a call session by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="timestamp">The date and time of a call session latest change (optional)</param>
        /// <param name="timeout">The time frame of awaiting for a status change before sending the resulting one in response (optional)</param>
        /// <returns>ApiResponse of CallSessionObject</returns>
        ApiResponse<CallSessionObject> ReadCallSessionStatusWithHttpInfo (string accountId, string telephonySessionId, string timestamp = default(string), string timeout = default(string));
        /// <summary>
        /// Reject Call Party
        /// </summary>
        /// <remarks>
        /// Rejects an inbound call in a \"Setup\" or \"Proceeding\" state
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <returns></returns>
        void RejectParty (string accountId, string telephonySessionId, string partyId);

        /// <summary>
        /// Reject Call Party
        /// </summary>
        /// <remarks>
        /// Rejects an inbound call in a \"Setup\" or \"Proceeding\" state
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RejectPartyWithHttpInfo (string accountId, string telephonySessionId, string partyId);
        /// <summary>
        /// Reply with Text
        /// </summary>
        /// <remarks>
        /// Replies with text/pattern without picking up a call.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="callPartyReply">JSON body</param>
        /// <returns>ReplyParty</returns>
        ReplyParty ReplyParty (string accountId, string telephonySessionId, string partyId, CallPartyReply callPartyReply);

        /// <summary>
        /// Reply with Text
        /// </summary>
        /// <remarks>
        /// Replies with text/pattern without picking up a call.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="callPartyReply">JSON body</param>
        /// <returns>ApiResponse of ReplyParty</returns>
        ApiResponse<ReplyParty> ReplyPartyWithHttpInfo (string accountId, string telephonySessionId, string partyId, CallPartyReply callPartyReply);
        /// <summary>
        /// Create Recording
        /// </summary>
        /// <remarks>
        /// Starts a new call recording for the party
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <returns></returns>
        void StartCallRecording (string accountId, string telephonySessionId, string partyId);

        /// <summary>
        /// Create Recording
        /// </summary>
        /// <remarks>
        /// Starts a new call recording for the party
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StartCallRecordingWithHttpInfo (string accountId, string telephonySessionId, string partyId);
        /// <summary>
        /// Supervise Call Party
        /// </summary>
        /// <remarks>
        /// Allows to monitor a call party in 'Listen' mode. Input parameters are extension number of a monitored user and internal identifier of a supervisor's device. Call session and party identifiers should be specified in path. Please note that for this method dual channel audio flow is supported, which means that you need to make one more request for monitoring the second participant of a call. And as a result of each monitoring request the client receives SIP invite with the following header `p-rc-api-monitoring-ids` containing IDs of the monitored party and session. The flow is supported for calls with no more than 2 participants. Currently this method is supported for Softphone/Hardphone only, since device IDs for WebRTC/Mobile apps cannot be obtained.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="partySuperviseRequest">JSON body</param>
        /// <returns>PartySuperviseResponse</returns>
        PartySuperviseResponse SuperviseCallParty (string accountId, string telephonySessionId, string partyId, PartySuperviseRequest partySuperviseRequest);

        /// <summary>
        /// Supervise Call Party
        /// </summary>
        /// <remarks>
        /// Allows to monitor a call party in 'Listen' mode. Input parameters are extension number of a monitored user and internal identifier of a supervisor's device. Call session and party identifiers should be specified in path. Please note that for this method dual channel audio flow is supported, which means that you need to make one more request for monitoring the second participant of a call. And as a result of each monitoring request the client receives SIP invite with the following header `p-rc-api-monitoring-ids` containing IDs of the monitored party and session. The flow is supported for calls with no more than 2 participants. Currently this method is supported for Softphone/Hardphone only, since device IDs for WebRTC/Mobile apps cannot be obtained.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="partySuperviseRequest">JSON body</param>
        /// <returns>ApiResponse of PartySuperviseResponse</returns>
        ApiResponse<PartySuperviseResponse> SuperviseCallPartyWithHttpInfo (string accountId, string telephonySessionId, string partyId, PartySuperviseRequest partySuperviseRequest);
        /// <summary>
        /// Supervise Call Session
        /// </summary>
        /// <remarks>
        /// Allows to monitor a call session in 'Listen' mode. Input parameters should contain internal identifiers of a monitored user and a supervisor's device. Call session should be specified in path. Please note that this method supports single channel audio flow, which means that audio of both call participants is mixed and delivered to the supervisor in single audio channel. Currently this method is supported for Softphone/Hardphone only, since device IDs for WebRTC/Mobile apps cannot be obtained.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="superviseCallSessionRequest">JSON body</param>
        /// <returns>SuperviseCallSession</returns>
        SuperviseCallSession SuperviseCallSession (string accountId, string telephonySessionId, SuperviseCallSessionRequest superviseCallSessionRequest);

        /// <summary>
        /// Supervise Call Session
        /// </summary>
        /// <remarks>
        /// Allows to monitor a call session in 'Listen' mode. Input parameters should contain internal identifiers of a monitored user and a supervisor's device. Call session should be specified in path. Please note that this method supports single channel audio flow, which means that audio of both call participants is mixed and delivered to the supervisor in single audio channel. Currently this method is supported for Softphone/Hardphone only, since device IDs for WebRTC/Mobile apps cannot be obtained.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="superviseCallSessionRequest">JSON body</param>
        /// <returns>ApiResponse of SuperviseCallSession</returns>
        ApiResponse<SuperviseCallSession> SuperviseCallSessionWithHttpInfo (string accountId, string telephonySessionId, SuperviseCallSessionRequest superviseCallSessionRequest);
        /// <summary>
        /// Transfer Call Party
        /// </summary>
        /// <remarks>
        /// Transfers an answered call to the specified call party. Applicable for a call session in \"Answered\" or \"Hold\" state.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="transferTarget">Specifies a call party to which the call will be transfered. Only a single call party is allowed.</param>
        /// <returns>CallParty</returns>
        CallParty TransferCallParty (string accountId, string telephonySessionId, string partyId, TransferTarget transferTarget);

        /// <summary>
        /// Transfer Call Party
        /// </summary>
        /// <remarks>
        /// Transfers an answered call to the specified call party. Applicable for a call session in \"Answered\" or \"Hold\" state.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="transferTarget">Specifies a call party to which the call will be transfered. Only a single call party is allowed.</param>
        /// <returns>ApiResponse of CallParty</returns>
        ApiResponse<CallParty> TransferCallPartyWithHttpInfo (string accountId, string telephonySessionId, string partyId, TransferTarget transferTarget);
        /// <summary>
        /// Unhold Call Party
        /// </summary>
        /// <remarks>
        /// Brings a party back into a call and stops to play Hold Music. There is a known limitation for Hold API - hold via REST API doesn't work with hold placed via RingCentral apps or HardPhone. It means that if you muted participant via Call Control API and RingCentral Desktop app, then you need to unhold both endpoints to remove Hold Music and bring media back.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <returns>CallParty</returns>
        CallParty UnholdCallParty (string accountId, string telephonySessionId, string partyId);

        /// <summary>
        /// Unhold Call Party
        /// </summary>
        /// <remarks>
        /// Brings a party back into a call and stops to play Hold Music. There is a known limitation for Hold API - hold via REST API doesn't work with hold placed via RingCentral apps or HardPhone. It means that if you muted participant via Call Control API and RingCentral Desktop app, then you need to unhold both endpoints to remove Hold Music and bring media back.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <returns>ApiResponse of CallParty</returns>
        ApiResponse<CallParty> UnholdCallPartyWithHttpInfo (string accountId, string telephonySessionId, string partyId);
        /// <summary>
        /// Update Call Party
        /// </summary>
        /// <remarks>
        /// Modifies a call party by ID. There is a known limitation for Mute scenario - mute via REST API doesn't work with mute placed via RingCentral apps or HardPhone. It means that if you muted participant via Call Control API and Ringcentral Desktop app you need to unmute both endpoints to bring the media back.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="partyUpdateRequest">JSON body</param>
        /// <returns>CallParty</returns>
        CallParty UpdateCallParty (string accountId, string telephonySessionId, string partyId, PartyUpdateRequest partyUpdateRequest);

        /// <summary>
        /// Update Call Party
        /// </summary>
        /// <remarks>
        /// Modifies a call party by ID. There is a known limitation for Mute scenario - mute via REST API doesn't work with mute placed via RingCentral apps or HardPhone. It means that if you muted participant via Call Control API and Ringcentral Desktop app you need to unmute both endpoints to bring the media back.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="partyUpdateRequest">JSON body</param>
        /// <returns>ApiResponse of CallParty</returns>
        ApiResponse<CallParty> UpdateCallPartyWithHttpInfo (string accountId, string telephonySessionId, string partyId, PartyUpdateRequest partyUpdateRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Answer Call Party
        /// </summary>
        /// <remarks>
        /// Answers a call on a certain device by passing the corresponding device ID in request body. Supported for call forwarding, call transfer, call flip and call queues.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="answerTarget">Distributes a non-answered call to the defined target. Only a single target is allowed</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallParty</returns>
        System.Threading.Tasks.Task<CallParty> AnswerCallPartyAsync (string accountId, string telephonySessionId, string partyId, AnswerTarget answerTarget, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Answer Call Party
        /// </summary>
        /// <remarks>
        /// Answers a call on a certain device by passing the corresponding device ID in request body. Supported for call forwarding, call transfer, call flip and call queues.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="answerTarget">Distributes a non-answered call to the defined target. Only a single target is allowed</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallParty)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallParty>> AnswerCallPartyWithHttpInfoAsync (string accountId, string telephonySessionId, string partyId, AnswerTarget answerTarget, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Bridge Call Party
        /// </summary>
        /// <remarks>
        /// Allows the user to connect multiple call session participants over a conference call bridge. The current active call session ID and party ID of the user within this session should be specified in path; the bridged call session ID and party ID of the user within that session should be specified in request body. Thus the user connects participants of two sessions into one conference call using his/her own party IDs from both sessions.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="bridgeTargetRequest">Defines target call session and call party to be bridged</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallParty</returns>
        System.Threading.Tasks.Task<CallParty> BridgeCallPartyAsync (string accountId, string telephonySessionId, string partyId, BridgeTargetRequest bridgeTargetRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Bridge Call Party
        /// </summary>
        /// <remarks>
        /// Allows the user to connect multiple call session participants over a conference call bridge. The current active call session ID and party ID of the user within this session should be specified in path; the bridged call session ID and party ID of the user within that session should be specified in request body. Thus the user connects participants of two sessions into one conference call using his/her own party IDs from both sessions.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="bridgeTargetRequest">Defines target call session and call party to be bridged</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallParty)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallParty>> BridgeCallPartyWithHttpInfoAsync (string accountId, string telephonySessionId, string partyId, BridgeTargetRequest bridgeTargetRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Call Flip on Party
        /// </summary>
        /// <remarks>
        /// Performs call flip procedure by holding opposite party and calling to the specified target
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="callPartyFlip">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CallFlipPartyAsync (string accountId, string telephonySessionId, string partyId, CallPartyFlip callPartyFlip, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Call Flip on Party
        /// </summary>
        /// <remarks>
        /// Performs call flip procedure by holding opposite party and calling to the specified target
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="callPartyFlip">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CallFlipPartyWithHttpInfoAsync (string accountId, string telephonySessionId, string partyId, CallPartyFlip callPartyFlip, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Call Park
        /// </summary>
        /// <remarks>
        /// Parks a call to a virtual location from where it can further be retrieved by any user from any phone of the system. The call session and call party identifiers should be specified in path. Currently the users can park only their own incoming calls. Up to 50 calls can be parked simultaneously. Park location starts with asterisk (*) and ranges 801-899.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallParty</returns>
        System.Threading.Tasks.Task<CallParty> CallParkPartyAsync (string accountId, string telephonySessionId, string partyId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Call Park
        /// </summary>
        /// <remarks>
        /// Parks a call to a virtual location from where it can further be retrieved by any user from any phone of the system. The call session and call party identifiers should be specified in path. Currently the users can park only their own incoming calls. Up to 50 calls can be parked simultaneously. Park location starts with asterisk (*) and ranges 801-899.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallParty)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallParty>> CallParkPartyWithHttpInfoAsync (string accountId, string telephonySessionId, string partyId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Make CallOut
        /// </summary>
        /// <remarks>
        /// Creates a new outbound call out session. Currently this method is supported for Softphone/Hardphone only, since device IDs for WebRTC/Mobile apps cannot be obtained.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="makeCallOutRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallSession</returns>
        System.Threading.Tasks.Task<CallSession> CreateCallOutCallSessionAsync (string accountId, MakeCallOutRequest makeCallOutRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Make CallOut
        /// </summary>
        /// <remarks>
        /// Creates a new outbound call out session. Currently this method is supported for Softphone/Hardphone only, since device IDs for WebRTC/Mobile apps cannot be obtained.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="makeCallOutRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallSession)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallSession>> CreateCallOutCallSessionWithHttpInfoAsync (string accountId, MakeCallOutRequest makeCallOutRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Bring-In Call Party
        /// </summary>
        /// <remarks>
        /// Adds a new party to the call session by bringing-in an established SIP call connection. The maximum number of parties to bring-in is 10; only 1 call party can be added per request. Currently the method is supported for sessions of 'Conference' origin only.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="addPartyRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallParty</returns>
        System.Threading.Tasks.Task<CallParty> CreateCallPartyWithBringInAsync (string accountId, string telephonySessionId, AddPartyRequest addPartyRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Bring-In Call Party
        /// </summary>
        /// <remarks>
        /// Adds a new party to the call session by bringing-in an established SIP call connection. The maximum number of parties to bring-in is 10; only 1 call party can be added per request. Currently the method is supported for sessions of 'Conference' origin only.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="addPartyRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallParty)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallParty>> CreateCallPartyWithBringInWithHttpInfoAsync (string accountId, string telephonySessionId, AddPartyRequest addPartyRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Start Conference Call Session
        /// </summary>
        /// <remarks>
        /// Initiates a conference call session.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallSessionObject</returns>
        System.Threading.Tasks.Task<CallSessionObject> CreateConferenceCallSessionAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Start Conference Call Session
        /// </summary>
        /// <remarks>
        /// Initiates a conference call session.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallSessionObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallSessionObject>> CreateConferenceCallSessionWithHttpInfoAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete Call Party
        /// </summary>
        /// <remarks>
        /// Removes a party from a call session by ID. A party can be deleted only if supervised or parked. It is possible to delete only one conference participant per request.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCallPartyAsync (string accountId, string telephonySessionId, string partyId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Call Party
        /// </summary>
        /// <remarks>
        /// Removes a party from a call session by ID. A party can be deleted only if supervised or parked. It is possible to delete only one conference participant per request.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCallPartyWithHttpInfoAsync (string accountId, string telephonySessionId, string partyId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Drop Call Session
        /// </summary>
        /// <remarks>
        /// Drops a call session.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCallSessionAsync (string accountId, string telephonySessionId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Drop Call Session
        /// </summary>
        /// <remarks>
        /// Drops a call session.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCallSessionWithHttpInfoAsync (string accountId, string telephonySessionId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Forward Call Party
        /// </summary>
        /// <remarks>
        /// Forwards a non-answered incoming call to the specified call party. Applicable for a call session in \"Setup\" or \"Proceeding\" state.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="forwardTarget">Specifies a call party to which the call will be forwarded. Only a single call party is allowed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallParty</returns>
        System.Threading.Tasks.Task<CallParty> ForwardCallPartyAsync (string accountId, string telephonySessionId, string partyId, ForwardTarget forwardTarget, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Forward Call Party
        /// </summary>
        /// <remarks>
        /// Forwards a non-answered incoming call to the specified call party. Applicable for a call session in \"Setup\" or \"Proceeding\" state.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="forwardTarget">Specifies a call party to which the call will be forwarded. Only a single call party is allowed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallParty)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallParty>> ForwardCallPartyWithHttpInfoAsync (string accountId, string telephonySessionId, string partyId, ForwardTarget forwardTarget, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Hold Call Party
        /// </summary>
        /// <remarks>
        /// Puts the party to stand-alone mode and starts to play Hold Music according to configuration & state to peers. There is a known limitation for Hold API - hold via REST API doesn't work with hold placed via RingCentral apps or HardPhone. It means that if you muted participant via Call Control API and RingCentral Desktop app, then you need to unhold both endpoints to remove Hold Music and bring media back.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallParty</returns>
        System.Threading.Tasks.Task<CallParty> HoldCallPartyAsync (string accountId, string telephonySessionId, string partyId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Hold Call Party
        /// </summary>
        /// <remarks>
        /// Puts the party to stand-alone mode and starts to play Hold Music according to configuration & state to peers. There is a known limitation for Hold API - hold via REST API doesn't work with hold placed via RingCentral apps or HardPhone. It means that if you muted participant via Call Control API and RingCentral Desktop app, then you need to unhold both endpoints to remove Hold Music and bring media back.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallParty)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallParty>> HoldCallPartyWithHttpInfoAsync (string accountId, string telephonySessionId, string partyId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Ignore Call in Queue
        /// </summary>
        /// <remarks>
        /// Ignores a call to a call queue agent in `Setup` or `Proceeding` state.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="ignoreRequestBody">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IgnoreCallInQueueAsync (string accountId, string telephonySessionId, string partyId, IgnoreRequestBody ignoreRequestBody, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Ignore Call in Queue
        /// </summary>
        /// <remarks>
        /// Ignores a call to a call queue agent in `Setup` or `Proceeding` state.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="ignoreRequestBody">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IgnoreCallInQueueWithHttpInfoAsync (string accountId, string telephonySessionId, string partyId, IgnoreRequestBody ignoreRequestBody, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Pause/Resume Recording
        /// </summary>
        /// <remarks>
        /// Pause/resume recording
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">Identifies a brand of a logged in user or a brand of a sign-up session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="recordingId">Internal identifier of a recording</param>
        /// <param name="callRecordingUpdate">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallRecording</returns>
        System.Threading.Tasks.Task<CallRecording> PauseResumeCallRecordingAsync (string brandId, string accountId, string telephonySessionId, string partyId, string recordingId, CallRecordingUpdate callRecordingUpdate, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Pause/Resume Recording
        /// </summary>
        /// <remarks>
        /// Pause/resume recording
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">Identifies a brand of a logged in user or a brand of a sign-up session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="recordingId">Internal identifier of a recording</param>
        /// <param name="callRecordingUpdate">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallRecording)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallRecording>> PauseResumeCallRecordingWithHttpInfoAsync (string brandId, string accountId, string telephonySessionId, string partyId, string recordingId, CallRecordingUpdate callRecordingUpdate, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Pickup Call
        /// </summary>
        /// <remarks>
        /// Picks up a call parked to the specified park location.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="pickupTarget">Distributes a non-answered call to the defined target. Only a single target is allowed</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallParty</returns>
        System.Threading.Tasks.Task<CallParty> PickupCallPartyAsync (string accountId, string telephonySessionId, string partyId, PickupTarget pickupTarget, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Pickup Call
        /// </summary>
        /// <remarks>
        /// Picks up a call parked to the specified park location.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="pickupTarget">Distributes a non-answered call to the defined target. Only a single target is allowed</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallParty)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallParty>> PickupCallPartyWithHttpInfoAsync (string accountId, string telephonySessionId, string partyId, PickupTarget pickupTarget, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Call Party Status
        /// </summary>
        /// <remarks>
        /// Returns a call party status by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallParty</returns>
        System.Threading.Tasks.Task<CallParty> ReadCallPartyStatusAsync (string accountId, string telephonySessionId, string partyId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Call Party Status
        /// </summary>
        /// <remarks>
        /// Returns a call party status by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallParty)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallParty>> ReadCallPartyStatusWithHttpInfoAsync (string accountId, string telephonySessionId, string partyId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Call Session Status
        /// </summary>
        /// <remarks>
        /// Returns the status of a call session by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="timestamp">The date and time of a call session latest change (optional)</param>
        /// <param name="timeout">The time frame of awaiting for a status change before sending the resulting one in response (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallSessionObject</returns>
        System.Threading.Tasks.Task<CallSessionObject> ReadCallSessionStatusAsync (string accountId, string telephonySessionId, string timestamp = default(string), string timeout = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Call Session Status
        /// </summary>
        /// <remarks>
        /// Returns the status of a call session by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="timestamp">The date and time of a call session latest change (optional)</param>
        /// <param name="timeout">The time frame of awaiting for a status change before sending the resulting one in response (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallSessionObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallSessionObject>> ReadCallSessionStatusWithHttpInfoAsync (string accountId, string telephonySessionId, string timestamp = default(string), string timeout = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Reject Call Party
        /// </summary>
        /// <remarks>
        /// Rejects an inbound call in a \"Setup\" or \"Proceeding\" state
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RejectPartyAsync (string accountId, string telephonySessionId, string partyId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reject Call Party
        /// </summary>
        /// <remarks>
        /// Rejects an inbound call in a \"Setup\" or \"Proceeding\" state
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RejectPartyWithHttpInfoAsync (string accountId, string telephonySessionId, string partyId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Reply with Text
        /// </summary>
        /// <remarks>
        /// Replies with text/pattern without picking up a call.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="callPartyReply">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ReplyParty</returns>
        System.Threading.Tasks.Task<ReplyParty> ReplyPartyAsync (string accountId, string telephonySessionId, string partyId, CallPartyReply callPartyReply, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reply with Text
        /// </summary>
        /// <remarks>
        /// Replies with text/pattern without picking up a call.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="callPartyReply">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ReplyParty)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplyParty>> ReplyPartyWithHttpInfoAsync (string accountId, string telephonySessionId, string partyId, CallPartyReply callPartyReply, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create Recording
        /// </summary>
        /// <remarks>
        /// Starts a new call recording for the party
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StartCallRecordingAsync (string accountId, string telephonySessionId, string partyId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Recording
        /// </summary>
        /// <remarks>
        /// Starts a new call recording for the party
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StartCallRecordingWithHttpInfoAsync (string accountId, string telephonySessionId, string partyId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Supervise Call Party
        /// </summary>
        /// <remarks>
        /// Allows to monitor a call party in 'Listen' mode. Input parameters are extension number of a monitored user and internal identifier of a supervisor's device. Call session and party identifiers should be specified in path. Please note that for this method dual channel audio flow is supported, which means that you need to make one more request for monitoring the second participant of a call. And as a result of each monitoring request the client receives SIP invite with the following header `p-rc-api-monitoring-ids` containing IDs of the monitored party and session. The flow is supported for calls with no more than 2 participants. Currently this method is supported for Softphone/Hardphone only, since device IDs for WebRTC/Mobile apps cannot be obtained.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="partySuperviseRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PartySuperviseResponse</returns>
        System.Threading.Tasks.Task<PartySuperviseResponse> SuperviseCallPartyAsync (string accountId, string telephonySessionId, string partyId, PartySuperviseRequest partySuperviseRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Supervise Call Party
        /// </summary>
        /// <remarks>
        /// Allows to monitor a call party in 'Listen' mode. Input parameters are extension number of a monitored user and internal identifier of a supervisor's device. Call session and party identifiers should be specified in path. Please note that for this method dual channel audio flow is supported, which means that you need to make one more request for monitoring the second participant of a call. And as a result of each monitoring request the client receives SIP invite with the following header `p-rc-api-monitoring-ids` containing IDs of the monitored party and session. The flow is supported for calls with no more than 2 participants. Currently this method is supported for Softphone/Hardphone only, since device IDs for WebRTC/Mobile apps cannot be obtained.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="partySuperviseRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PartySuperviseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PartySuperviseResponse>> SuperviseCallPartyWithHttpInfoAsync (string accountId, string telephonySessionId, string partyId, PartySuperviseRequest partySuperviseRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Supervise Call Session
        /// </summary>
        /// <remarks>
        /// Allows to monitor a call session in 'Listen' mode. Input parameters should contain internal identifiers of a monitored user and a supervisor's device. Call session should be specified in path. Please note that this method supports single channel audio flow, which means that audio of both call participants is mixed and delivered to the supervisor in single audio channel. Currently this method is supported for Softphone/Hardphone only, since device IDs for WebRTC/Mobile apps cannot be obtained.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="superviseCallSessionRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SuperviseCallSession</returns>
        System.Threading.Tasks.Task<SuperviseCallSession> SuperviseCallSessionAsync (string accountId, string telephonySessionId, SuperviseCallSessionRequest superviseCallSessionRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Supervise Call Session
        /// </summary>
        /// <remarks>
        /// Allows to monitor a call session in 'Listen' mode. Input parameters should contain internal identifiers of a monitored user and a supervisor's device. Call session should be specified in path. Please note that this method supports single channel audio flow, which means that audio of both call participants is mixed and delivered to the supervisor in single audio channel. Currently this method is supported for Softphone/Hardphone only, since device IDs for WebRTC/Mobile apps cannot be obtained.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="superviseCallSessionRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SuperviseCallSession)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuperviseCallSession>> SuperviseCallSessionWithHttpInfoAsync (string accountId, string telephonySessionId, SuperviseCallSessionRequest superviseCallSessionRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Transfer Call Party
        /// </summary>
        /// <remarks>
        /// Transfers an answered call to the specified call party. Applicable for a call session in \"Answered\" or \"Hold\" state.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="transferTarget">Specifies a call party to which the call will be transfered. Only a single call party is allowed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallParty</returns>
        System.Threading.Tasks.Task<CallParty> TransferCallPartyAsync (string accountId, string telephonySessionId, string partyId, TransferTarget transferTarget, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Transfer Call Party
        /// </summary>
        /// <remarks>
        /// Transfers an answered call to the specified call party. Applicable for a call session in \"Answered\" or \"Hold\" state.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="transferTarget">Specifies a call party to which the call will be transfered. Only a single call party is allowed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallParty)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallParty>> TransferCallPartyWithHttpInfoAsync (string accountId, string telephonySessionId, string partyId, TransferTarget transferTarget, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Unhold Call Party
        /// </summary>
        /// <remarks>
        /// Brings a party back into a call and stops to play Hold Music. There is a known limitation for Hold API - hold via REST API doesn't work with hold placed via RingCentral apps or HardPhone. It means that if you muted participant via Call Control API and RingCentral Desktop app, then you need to unhold both endpoints to remove Hold Music and bring media back.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallParty</returns>
        System.Threading.Tasks.Task<CallParty> UnholdCallPartyAsync (string accountId, string telephonySessionId, string partyId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Unhold Call Party
        /// </summary>
        /// <remarks>
        /// Brings a party back into a call and stops to play Hold Music. There is a known limitation for Hold API - hold via REST API doesn't work with hold placed via RingCentral apps or HardPhone. It means that if you muted participant via Call Control API and RingCentral Desktop app, then you need to unhold both endpoints to remove Hold Music and bring media back.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallParty)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallParty>> UnholdCallPartyWithHttpInfoAsync (string accountId, string telephonySessionId, string partyId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Call Party
        /// </summary>
        /// <remarks>
        /// Modifies a call party by ID. There is a known limitation for Mute scenario - mute via REST API doesn't work with mute placed via RingCentral apps or HardPhone. It means that if you muted participant via Call Control API and Ringcentral Desktop app you need to unmute both endpoints to bring the media back.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="partyUpdateRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallParty</returns>
        System.Threading.Tasks.Task<CallParty> UpdateCallPartyAsync (string accountId, string telephonySessionId, string partyId, PartyUpdateRequest partyUpdateRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Call Party
        /// </summary>
        /// <remarks>
        /// Modifies a call party by ID. There is a known limitation for Mute scenario - mute via REST API doesn't work with mute placed via RingCentral apps or HardPhone. It means that if you muted participant via Call Control API and Ringcentral Desktop app you need to unmute both endpoints to bring the media back.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="partyUpdateRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallParty)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallParty>> UpdateCallPartyWithHttpInfoAsync (string accountId, string telephonySessionId, string partyId, PartyUpdateRequest partyUpdateRequest, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CallControlApi : ICallControlApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CallControlApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CallControlApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallControlApi"/> class
        /// </summary>
        /// <returns></returns>
        public CallControlApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallControlApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CallControlApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Answer Call Party Answers a call on a certain device by passing the corresponding device ID in request body. Supported for call forwarding, call transfer, call flip and call queues.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="answerTarget">Distributes a non-answered call to the defined target. Only a single target is allowed</param>
        /// <returns>CallParty</returns>
        public CallParty AnswerCallParty (string accountId, string telephonySessionId, string partyId, AnswerTarget answerTarget)
        {
             ApiResponse<CallParty> localVarResponse = AnswerCallPartyWithHttpInfo(accountId, telephonySessionId, partyId, answerTarget);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Answer Call Party Answers a call on a certain device by passing the corresponding device ID in request body. Supported for call forwarding, call transfer, call flip and call queues.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="answerTarget">Distributes a non-answered call to the defined target. Only a single target is allowed</param>
        /// <returns>ApiResponse of CallParty</returns>
        public ApiResponse<CallParty> AnswerCallPartyWithHttpInfo (string accountId, string telephonySessionId, string partyId, AnswerTarget answerTarget)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->AnswerCallParty");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->AnswerCallParty");
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new ApiException(400, "Missing required parameter 'partyId' when calling CallControlApi->AnswerCallParty");
            // verify the required parameter 'answerTarget' is set
            if (answerTarget == null)
                throw new ApiException(400, "Missing required parameter 'answerTarget' when calling CallControlApi->AnswerCallParty");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/answer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (partyId != null) localVarPathParams.Add("partyId", this.Configuration.ApiClient.ParameterToString(partyId)); // path parameter
            if (answerTarget != null && answerTarget.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(answerTarget); // http body (model) parameter
            }
            else
            {
                localVarPostBody = answerTarget; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnswerCallParty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallParty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallParty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallParty)));
        }

        /// <summary>
        /// Answer Call Party Answers a call on a certain device by passing the corresponding device ID in request body. Supported for call forwarding, call transfer, call flip and call queues.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="answerTarget">Distributes a non-answered call to the defined target. Only a single target is allowed</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallParty</returns>
        public async System.Threading.Tasks.Task<CallParty> AnswerCallPartyAsync (string accountId, string telephonySessionId, string partyId, AnswerTarget answerTarget, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CallParty> localVarResponse = await AnswerCallPartyWithHttpInfoAsync(accountId, telephonySessionId, partyId, answerTarget, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Answer Call Party Answers a call on a certain device by passing the corresponding device ID in request body. Supported for call forwarding, call transfer, call flip and call queues.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="answerTarget">Distributes a non-answered call to the defined target. Only a single target is allowed</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallParty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallParty>> AnswerCallPartyWithHttpInfoAsync (string accountId, string telephonySessionId, string partyId, AnswerTarget answerTarget, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->AnswerCallParty");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->AnswerCallParty");
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new ApiException(400, "Missing required parameter 'partyId' when calling CallControlApi->AnswerCallParty");
            // verify the required parameter 'answerTarget' is set
            if (answerTarget == null)
                throw new ApiException(400, "Missing required parameter 'answerTarget' when calling CallControlApi->AnswerCallParty");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/answer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (partyId != null) localVarPathParams.Add("partyId", this.Configuration.ApiClient.ParameterToString(partyId)); // path parameter
            if (answerTarget != null && answerTarget.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(answerTarget); // http body (model) parameter
            }
            else
            {
                localVarPostBody = answerTarget; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnswerCallParty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallParty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallParty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallParty)));
        }

        /// <summary>
        /// Bridge Call Party Allows the user to connect multiple call session participants over a conference call bridge. The current active call session ID and party ID of the user within this session should be specified in path; the bridged call session ID and party ID of the user within that session should be specified in request body. Thus the user connects participants of two sessions into one conference call using his/her own party IDs from both sessions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="bridgeTargetRequest">Defines target call session and call party to be bridged</param>
        /// <returns>CallParty</returns>
        public CallParty BridgeCallParty (string accountId, string telephonySessionId, string partyId, BridgeTargetRequest bridgeTargetRequest)
        {
             ApiResponse<CallParty> localVarResponse = BridgeCallPartyWithHttpInfo(accountId, telephonySessionId, partyId, bridgeTargetRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Bridge Call Party Allows the user to connect multiple call session participants over a conference call bridge. The current active call session ID and party ID of the user within this session should be specified in path; the bridged call session ID and party ID of the user within that session should be specified in request body. Thus the user connects participants of two sessions into one conference call using his/her own party IDs from both sessions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="bridgeTargetRequest">Defines target call session and call party to be bridged</param>
        /// <returns>ApiResponse of CallParty</returns>
        public ApiResponse<CallParty> BridgeCallPartyWithHttpInfo (string accountId, string telephonySessionId, string partyId, BridgeTargetRequest bridgeTargetRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->BridgeCallParty");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->BridgeCallParty");
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new ApiException(400, "Missing required parameter 'partyId' when calling CallControlApi->BridgeCallParty");
            // verify the required parameter 'bridgeTargetRequest' is set
            if (bridgeTargetRequest == null)
                throw new ApiException(400, "Missing required parameter 'bridgeTargetRequest' when calling CallControlApi->BridgeCallParty");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/bridge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (partyId != null) localVarPathParams.Add("partyId", this.Configuration.ApiClient.ParameterToString(partyId)); // path parameter
            if (bridgeTargetRequest != null && bridgeTargetRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bridgeTargetRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bridgeTargetRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BridgeCallParty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallParty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallParty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallParty)));
        }

        /// <summary>
        /// Bridge Call Party Allows the user to connect multiple call session participants over a conference call bridge. The current active call session ID and party ID of the user within this session should be specified in path; the bridged call session ID and party ID of the user within that session should be specified in request body. Thus the user connects participants of two sessions into one conference call using his/her own party IDs from both sessions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="bridgeTargetRequest">Defines target call session and call party to be bridged</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallParty</returns>
        public async System.Threading.Tasks.Task<CallParty> BridgeCallPartyAsync (string accountId, string telephonySessionId, string partyId, BridgeTargetRequest bridgeTargetRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CallParty> localVarResponse = await BridgeCallPartyWithHttpInfoAsync(accountId, telephonySessionId, partyId, bridgeTargetRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Bridge Call Party Allows the user to connect multiple call session participants over a conference call bridge. The current active call session ID and party ID of the user within this session should be specified in path; the bridged call session ID and party ID of the user within that session should be specified in request body. Thus the user connects participants of two sessions into one conference call using his/her own party IDs from both sessions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="bridgeTargetRequest">Defines target call session and call party to be bridged</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallParty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallParty>> BridgeCallPartyWithHttpInfoAsync (string accountId, string telephonySessionId, string partyId, BridgeTargetRequest bridgeTargetRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->BridgeCallParty");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->BridgeCallParty");
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new ApiException(400, "Missing required parameter 'partyId' when calling CallControlApi->BridgeCallParty");
            // verify the required parameter 'bridgeTargetRequest' is set
            if (bridgeTargetRequest == null)
                throw new ApiException(400, "Missing required parameter 'bridgeTargetRequest' when calling CallControlApi->BridgeCallParty");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/bridge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (partyId != null) localVarPathParams.Add("partyId", this.Configuration.ApiClient.ParameterToString(partyId)); // path parameter
            if (bridgeTargetRequest != null && bridgeTargetRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bridgeTargetRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bridgeTargetRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BridgeCallParty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallParty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallParty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallParty)));
        }

        /// <summary>
        /// Call Flip on Party Performs call flip procedure by holding opposite party and calling to the specified target
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="callPartyFlip">JSON body</param>
        /// <returns></returns>
        public void CallFlipParty (string accountId, string telephonySessionId, string partyId, CallPartyFlip callPartyFlip)
        {
             CallFlipPartyWithHttpInfo(accountId, telephonySessionId, partyId, callPartyFlip);
        }

        /// <summary>
        /// Call Flip on Party Performs call flip procedure by holding opposite party and calling to the specified target
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="callPartyFlip">JSON body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CallFlipPartyWithHttpInfo (string accountId, string telephonySessionId, string partyId, CallPartyFlip callPartyFlip)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->CallFlipParty");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->CallFlipParty");
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new ApiException(400, "Missing required parameter 'partyId' when calling CallControlApi->CallFlipParty");
            // verify the required parameter 'callPartyFlip' is set
            if (callPartyFlip == null)
                throw new ApiException(400, "Missing required parameter 'callPartyFlip' when calling CallControlApi->CallFlipParty");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/flip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (partyId != null) localVarPathParams.Add("partyId", this.Configuration.ApiClient.ParameterToString(partyId)); // path parameter
            if (callPartyFlip != null && callPartyFlip.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(callPartyFlip); // http body (model) parameter
            }
            else
            {
                localVarPostBody = callPartyFlip; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CallFlipParty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Call Flip on Party Performs call flip procedure by holding opposite party and calling to the specified target
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="callPartyFlip">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CallFlipPartyAsync (string accountId, string telephonySessionId, string partyId, CallPartyFlip callPartyFlip, CancellationToken cancellationToken = default(CancellationToken))
        {
             await CallFlipPartyWithHttpInfoAsync(accountId, telephonySessionId, partyId, callPartyFlip, cancellationToken);

        }

        /// <summary>
        /// Call Flip on Party Performs call flip procedure by holding opposite party and calling to the specified target
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="callPartyFlip">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CallFlipPartyWithHttpInfoAsync (string accountId, string telephonySessionId, string partyId, CallPartyFlip callPartyFlip, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->CallFlipParty");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->CallFlipParty");
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new ApiException(400, "Missing required parameter 'partyId' when calling CallControlApi->CallFlipParty");
            // verify the required parameter 'callPartyFlip' is set
            if (callPartyFlip == null)
                throw new ApiException(400, "Missing required parameter 'callPartyFlip' when calling CallControlApi->CallFlipParty");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/flip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (partyId != null) localVarPathParams.Add("partyId", this.Configuration.ApiClient.ParameterToString(partyId)); // path parameter
            if (callPartyFlip != null && callPartyFlip.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(callPartyFlip); // http body (model) parameter
            }
            else
            {
                localVarPostBody = callPartyFlip; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CallFlipParty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Call Park Parks a call to a virtual location from where it can further be retrieved by any user from any phone of the system. The call session and call party identifiers should be specified in path. Currently the users can park only their own incoming calls. Up to 50 calls can be parked simultaneously. Park location starts with asterisk (*) and ranges 801-899.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <returns>CallParty</returns>
        public CallParty CallParkParty (string accountId, string telephonySessionId, string partyId)
        {
             ApiResponse<CallParty> localVarResponse = CallParkPartyWithHttpInfo(accountId, telephonySessionId, partyId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Call Park Parks a call to a virtual location from where it can further be retrieved by any user from any phone of the system. The call session and call party identifiers should be specified in path. Currently the users can park only their own incoming calls. Up to 50 calls can be parked simultaneously. Park location starts with asterisk (*) and ranges 801-899.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <returns>ApiResponse of CallParty</returns>
        public ApiResponse<CallParty> CallParkPartyWithHttpInfo (string accountId, string telephonySessionId, string partyId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->CallParkParty");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->CallParkParty");
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new ApiException(400, "Missing required parameter 'partyId' when calling CallControlApi->CallParkParty");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/park";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (partyId != null) localVarPathParams.Add("partyId", this.Configuration.ApiClient.ParameterToString(partyId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CallParkParty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallParty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallParty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallParty)));
        }

        /// <summary>
        /// Call Park Parks a call to a virtual location from where it can further be retrieved by any user from any phone of the system. The call session and call party identifiers should be specified in path. Currently the users can park only their own incoming calls. Up to 50 calls can be parked simultaneously. Park location starts with asterisk (*) and ranges 801-899.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallParty</returns>
        public async System.Threading.Tasks.Task<CallParty> CallParkPartyAsync (string accountId, string telephonySessionId, string partyId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CallParty> localVarResponse = await CallParkPartyWithHttpInfoAsync(accountId, telephonySessionId, partyId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Call Park Parks a call to a virtual location from where it can further be retrieved by any user from any phone of the system. The call session and call party identifiers should be specified in path. Currently the users can park only their own incoming calls. Up to 50 calls can be parked simultaneously. Park location starts with asterisk (*) and ranges 801-899.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallParty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallParty>> CallParkPartyWithHttpInfoAsync (string accountId, string telephonySessionId, string partyId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->CallParkParty");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->CallParkParty");
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new ApiException(400, "Missing required parameter 'partyId' when calling CallControlApi->CallParkParty");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/park";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (partyId != null) localVarPathParams.Add("partyId", this.Configuration.ApiClient.ParameterToString(partyId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CallParkParty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallParty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallParty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallParty)));
        }

        /// <summary>
        /// Make CallOut Creates a new outbound call out session. Currently this method is supported for Softphone/Hardphone only, since device IDs for WebRTC/Mobile apps cannot be obtained.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="makeCallOutRequest">JSON body</param>
        /// <returns>CallSession</returns>
        public CallSession CreateCallOutCallSession (string accountId, MakeCallOutRequest makeCallOutRequest)
        {
             ApiResponse<CallSession> localVarResponse = CreateCallOutCallSessionWithHttpInfo(accountId, makeCallOutRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Make CallOut Creates a new outbound call out session. Currently this method is supported for Softphone/Hardphone only, since device IDs for WebRTC/Mobile apps cannot be obtained.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="makeCallOutRequest">JSON body</param>
        /// <returns>ApiResponse of CallSession</returns>
        public ApiResponse<CallSession> CreateCallOutCallSessionWithHttpInfo (string accountId, MakeCallOutRequest makeCallOutRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->CreateCallOutCallSession");
            // verify the required parameter 'makeCallOutRequest' is set
            if (makeCallOutRequest == null)
                throw new ApiException(400, "Missing required parameter 'makeCallOutRequest' when calling CallControlApi->CreateCallOutCallSession");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/call-out";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (makeCallOutRequest != null && makeCallOutRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(makeCallOutRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = makeCallOutRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCallOutCallSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallSession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallSession)));
        }

        /// <summary>
        /// Make CallOut Creates a new outbound call out session. Currently this method is supported for Softphone/Hardphone only, since device IDs for WebRTC/Mobile apps cannot be obtained.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="makeCallOutRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallSession</returns>
        public async System.Threading.Tasks.Task<CallSession> CreateCallOutCallSessionAsync (string accountId, MakeCallOutRequest makeCallOutRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CallSession> localVarResponse = await CreateCallOutCallSessionWithHttpInfoAsync(accountId, makeCallOutRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Make CallOut Creates a new outbound call out session. Currently this method is supported for Softphone/Hardphone only, since device IDs for WebRTC/Mobile apps cannot be obtained.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="makeCallOutRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallSession)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallSession>> CreateCallOutCallSessionWithHttpInfoAsync (string accountId, MakeCallOutRequest makeCallOutRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->CreateCallOutCallSession");
            // verify the required parameter 'makeCallOutRequest' is set
            if (makeCallOutRequest == null)
                throw new ApiException(400, "Missing required parameter 'makeCallOutRequest' when calling CallControlApi->CreateCallOutCallSession");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/call-out";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (makeCallOutRequest != null && makeCallOutRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(makeCallOutRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = makeCallOutRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCallOutCallSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallSession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallSession)));
        }

        /// <summary>
        /// Bring-In Call Party Adds a new party to the call session by bringing-in an established SIP call connection. The maximum number of parties to bring-in is 10; only 1 call party can be added per request. Currently the method is supported for sessions of 'Conference' origin only.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="addPartyRequest">JSON body</param>
        /// <returns>CallParty</returns>
        public CallParty CreateCallPartyWithBringIn (string accountId, string telephonySessionId, AddPartyRequest addPartyRequest)
        {
             ApiResponse<CallParty> localVarResponse = CreateCallPartyWithBringInWithHttpInfo(accountId, telephonySessionId, addPartyRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Bring-In Call Party Adds a new party to the call session by bringing-in an established SIP call connection. The maximum number of parties to bring-in is 10; only 1 call party can be added per request. Currently the method is supported for sessions of 'Conference' origin only.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="addPartyRequest">JSON body</param>
        /// <returns>ApiResponse of CallParty</returns>
        public ApiResponse<CallParty> CreateCallPartyWithBringInWithHttpInfo (string accountId, string telephonySessionId, AddPartyRequest addPartyRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->CreateCallPartyWithBringIn");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->CreateCallPartyWithBringIn");
            // verify the required parameter 'addPartyRequest' is set
            if (addPartyRequest == null)
                throw new ApiException(400, "Missing required parameter 'addPartyRequest' when calling CallControlApi->CreateCallPartyWithBringIn");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/bring-in";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (addPartyRequest != null && addPartyRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addPartyRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addPartyRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCallPartyWithBringIn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallParty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallParty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallParty)));
        }

        /// <summary>
        /// Bring-In Call Party Adds a new party to the call session by bringing-in an established SIP call connection. The maximum number of parties to bring-in is 10; only 1 call party can be added per request. Currently the method is supported for sessions of 'Conference' origin only.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="addPartyRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallParty</returns>
        public async System.Threading.Tasks.Task<CallParty> CreateCallPartyWithBringInAsync (string accountId, string telephonySessionId, AddPartyRequest addPartyRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CallParty> localVarResponse = await CreateCallPartyWithBringInWithHttpInfoAsync(accountId, telephonySessionId, addPartyRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Bring-In Call Party Adds a new party to the call session by bringing-in an established SIP call connection. The maximum number of parties to bring-in is 10; only 1 call party can be added per request. Currently the method is supported for sessions of 'Conference' origin only.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="addPartyRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallParty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallParty>> CreateCallPartyWithBringInWithHttpInfoAsync (string accountId, string telephonySessionId, AddPartyRequest addPartyRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->CreateCallPartyWithBringIn");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->CreateCallPartyWithBringIn");
            // verify the required parameter 'addPartyRequest' is set
            if (addPartyRequest == null)
                throw new ApiException(400, "Missing required parameter 'addPartyRequest' when calling CallControlApi->CreateCallPartyWithBringIn");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/bring-in";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (addPartyRequest != null && addPartyRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addPartyRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addPartyRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCallPartyWithBringIn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallParty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallParty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallParty)));
        }

        /// <summary>
        /// Start Conference Call Session Initiates a conference call session.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>CallSessionObject</returns>
        public CallSessionObject CreateConferenceCallSession (string accountId)
        {
             ApiResponse<CallSessionObject> localVarResponse = CreateConferenceCallSessionWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start Conference Call Session Initiates a conference call session.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of CallSessionObject</returns>
        public ApiResponse<CallSessionObject> CreateConferenceCallSessionWithHttpInfo (string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->CreateConferenceCallSession");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/conference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateConferenceCallSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallSessionObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallSessionObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallSessionObject)));
        }

        /// <summary>
        /// Start Conference Call Session Initiates a conference call session.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallSessionObject</returns>
        public async System.Threading.Tasks.Task<CallSessionObject> CreateConferenceCallSessionAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CallSessionObject> localVarResponse = await CreateConferenceCallSessionWithHttpInfoAsync(accountId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start Conference Call Session Initiates a conference call session.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallSessionObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallSessionObject>> CreateConferenceCallSessionWithHttpInfoAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->CreateConferenceCallSession");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/conference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateConferenceCallSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallSessionObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallSessionObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallSessionObject)));
        }

        /// <summary>
        /// Delete Call Party Removes a party from a call session by ID. A party can be deleted only if supervised or parked. It is possible to delete only one conference participant per request.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <returns></returns>
        public void DeleteCallParty (string accountId, string telephonySessionId, string partyId)
        {
             DeleteCallPartyWithHttpInfo(accountId, telephonySessionId, partyId);
        }

        /// <summary>
        /// Delete Call Party Removes a party from a call session by ID. A party can be deleted only if supervised or parked. It is possible to delete only one conference participant per request.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCallPartyWithHttpInfo (string accountId, string telephonySessionId, string partyId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->DeleteCallParty");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->DeleteCallParty");
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new ApiException(400, "Missing required parameter 'partyId' when calling CallControlApi->DeleteCallParty");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (partyId != null) localVarPathParams.Add("partyId", this.Configuration.ApiClient.ParameterToString(partyId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCallParty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Call Party Removes a party from a call session by ID. A party can be deleted only if supervised or parked. It is possible to delete only one conference participant per request.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCallPartyAsync (string accountId, string telephonySessionId, string partyId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteCallPartyWithHttpInfoAsync(accountId, telephonySessionId, partyId, cancellationToken);

        }

        /// <summary>
        /// Delete Call Party Removes a party from a call session by ID. A party can be deleted only if supervised or parked. It is possible to delete only one conference participant per request.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCallPartyWithHttpInfoAsync (string accountId, string telephonySessionId, string partyId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->DeleteCallParty");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->DeleteCallParty");
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new ApiException(400, "Missing required parameter 'partyId' when calling CallControlApi->DeleteCallParty");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (partyId != null) localVarPathParams.Add("partyId", this.Configuration.ApiClient.ParameterToString(partyId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCallParty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Drop Call Session Drops a call session.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <returns></returns>
        public void DeleteCallSession (string accountId, string telephonySessionId)
        {
             DeleteCallSessionWithHttpInfo(accountId, telephonySessionId);
        }

        /// <summary>
        /// Drop Call Session Drops a call session.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCallSessionWithHttpInfo (string accountId, string telephonySessionId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->DeleteCallSession");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->DeleteCallSession");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCallSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Drop Call Session Drops a call session.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCallSessionAsync (string accountId, string telephonySessionId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteCallSessionWithHttpInfoAsync(accountId, telephonySessionId, cancellationToken);

        }

        /// <summary>
        /// Drop Call Session Drops a call session.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCallSessionWithHttpInfoAsync (string accountId, string telephonySessionId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->DeleteCallSession");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->DeleteCallSession");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCallSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Forward Call Party Forwards a non-answered incoming call to the specified call party. Applicable for a call session in \"Setup\" or \"Proceeding\" state.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="forwardTarget">Specifies a call party to which the call will be forwarded. Only a single call party is allowed.</param>
        /// <returns>CallParty</returns>
        public CallParty ForwardCallParty (string accountId, string telephonySessionId, string partyId, ForwardTarget forwardTarget)
        {
             ApiResponse<CallParty> localVarResponse = ForwardCallPartyWithHttpInfo(accountId, telephonySessionId, partyId, forwardTarget);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Forward Call Party Forwards a non-answered incoming call to the specified call party. Applicable for a call session in \"Setup\" or \"Proceeding\" state.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="forwardTarget">Specifies a call party to which the call will be forwarded. Only a single call party is allowed.</param>
        /// <returns>ApiResponse of CallParty</returns>
        public ApiResponse<CallParty> ForwardCallPartyWithHttpInfo (string accountId, string telephonySessionId, string partyId, ForwardTarget forwardTarget)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->ForwardCallParty");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->ForwardCallParty");
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new ApiException(400, "Missing required parameter 'partyId' when calling CallControlApi->ForwardCallParty");
            // verify the required parameter 'forwardTarget' is set
            if (forwardTarget == null)
                throw new ApiException(400, "Missing required parameter 'forwardTarget' when calling CallControlApi->ForwardCallParty");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/forward";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (partyId != null) localVarPathParams.Add("partyId", this.Configuration.ApiClient.ParameterToString(partyId)); // path parameter
            if (forwardTarget != null && forwardTarget.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(forwardTarget); // http body (model) parameter
            }
            else
            {
                localVarPostBody = forwardTarget; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForwardCallParty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallParty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallParty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallParty)));
        }

        /// <summary>
        /// Forward Call Party Forwards a non-answered incoming call to the specified call party. Applicable for a call session in \"Setup\" or \"Proceeding\" state.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="forwardTarget">Specifies a call party to which the call will be forwarded. Only a single call party is allowed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallParty</returns>
        public async System.Threading.Tasks.Task<CallParty> ForwardCallPartyAsync (string accountId, string telephonySessionId, string partyId, ForwardTarget forwardTarget, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CallParty> localVarResponse = await ForwardCallPartyWithHttpInfoAsync(accountId, telephonySessionId, partyId, forwardTarget, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Forward Call Party Forwards a non-answered incoming call to the specified call party. Applicable for a call session in \"Setup\" or \"Proceeding\" state.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="forwardTarget">Specifies a call party to which the call will be forwarded. Only a single call party is allowed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallParty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallParty>> ForwardCallPartyWithHttpInfoAsync (string accountId, string telephonySessionId, string partyId, ForwardTarget forwardTarget, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->ForwardCallParty");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->ForwardCallParty");
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new ApiException(400, "Missing required parameter 'partyId' when calling CallControlApi->ForwardCallParty");
            // verify the required parameter 'forwardTarget' is set
            if (forwardTarget == null)
                throw new ApiException(400, "Missing required parameter 'forwardTarget' when calling CallControlApi->ForwardCallParty");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/forward";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (partyId != null) localVarPathParams.Add("partyId", this.Configuration.ApiClient.ParameterToString(partyId)); // path parameter
            if (forwardTarget != null && forwardTarget.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(forwardTarget); // http body (model) parameter
            }
            else
            {
                localVarPostBody = forwardTarget; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForwardCallParty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallParty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallParty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallParty)));
        }

        /// <summary>
        /// Hold Call Party Puts the party to stand-alone mode and starts to play Hold Music according to configuration & state to peers. There is a known limitation for Hold API - hold via REST API doesn't work with hold placed via RingCentral apps or HardPhone. It means that if you muted participant via Call Control API and RingCentral Desktop app, then you need to unhold both endpoints to remove Hold Music and bring media back.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <returns>CallParty</returns>
        public CallParty HoldCallParty (string accountId, string telephonySessionId, string partyId)
        {
             ApiResponse<CallParty> localVarResponse = HoldCallPartyWithHttpInfo(accountId, telephonySessionId, partyId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Hold Call Party Puts the party to stand-alone mode and starts to play Hold Music according to configuration & state to peers. There is a known limitation for Hold API - hold via REST API doesn't work with hold placed via RingCentral apps or HardPhone. It means that if you muted participant via Call Control API and RingCentral Desktop app, then you need to unhold both endpoints to remove Hold Music and bring media back.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <returns>ApiResponse of CallParty</returns>
        public ApiResponse<CallParty> HoldCallPartyWithHttpInfo (string accountId, string telephonySessionId, string partyId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->HoldCallParty");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->HoldCallParty");
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new ApiException(400, "Missing required parameter 'partyId' when calling CallControlApi->HoldCallParty");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/hold";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (partyId != null) localVarPathParams.Add("partyId", this.Configuration.ApiClient.ParameterToString(partyId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HoldCallParty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallParty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallParty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallParty)));
        }

        /// <summary>
        /// Hold Call Party Puts the party to stand-alone mode and starts to play Hold Music according to configuration & state to peers. There is a known limitation for Hold API - hold via REST API doesn't work with hold placed via RingCentral apps or HardPhone. It means that if you muted participant via Call Control API and RingCentral Desktop app, then you need to unhold both endpoints to remove Hold Music and bring media back.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallParty</returns>
        public async System.Threading.Tasks.Task<CallParty> HoldCallPartyAsync (string accountId, string telephonySessionId, string partyId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CallParty> localVarResponse = await HoldCallPartyWithHttpInfoAsync(accountId, telephonySessionId, partyId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Hold Call Party Puts the party to stand-alone mode and starts to play Hold Music according to configuration & state to peers. There is a known limitation for Hold API - hold via REST API doesn't work with hold placed via RingCentral apps or HardPhone. It means that if you muted participant via Call Control API and RingCentral Desktop app, then you need to unhold both endpoints to remove Hold Music and bring media back.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallParty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallParty>> HoldCallPartyWithHttpInfoAsync (string accountId, string telephonySessionId, string partyId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->HoldCallParty");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->HoldCallParty");
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new ApiException(400, "Missing required parameter 'partyId' when calling CallControlApi->HoldCallParty");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/hold";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (partyId != null) localVarPathParams.Add("partyId", this.Configuration.ApiClient.ParameterToString(partyId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HoldCallParty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallParty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallParty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallParty)));
        }

        /// <summary>
        /// Ignore Call in Queue Ignores a call to a call queue agent in `Setup` or `Proceeding` state.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="ignoreRequestBody">JSON body</param>
        /// <returns></returns>
        public void IgnoreCallInQueue (string accountId, string telephonySessionId, string partyId, IgnoreRequestBody ignoreRequestBody)
        {
             IgnoreCallInQueueWithHttpInfo(accountId, telephonySessionId, partyId, ignoreRequestBody);
        }

        /// <summary>
        /// Ignore Call in Queue Ignores a call to a call queue agent in `Setup` or `Proceeding` state.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="ignoreRequestBody">JSON body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> IgnoreCallInQueueWithHttpInfo (string accountId, string telephonySessionId, string partyId, IgnoreRequestBody ignoreRequestBody)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->IgnoreCallInQueue");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->IgnoreCallInQueue");
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new ApiException(400, "Missing required parameter 'partyId' when calling CallControlApi->IgnoreCallInQueue");
            // verify the required parameter 'ignoreRequestBody' is set
            if (ignoreRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'ignoreRequestBody' when calling CallControlApi->IgnoreCallInQueue");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/ignore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (partyId != null) localVarPathParams.Add("partyId", this.Configuration.ApiClient.ParameterToString(partyId)); // path parameter
            if (ignoreRequestBody != null && ignoreRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ignoreRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ignoreRequestBody; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IgnoreCallInQueue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Ignore Call in Queue Ignores a call to a call queue agent in `Setup` or `Proceeding` state.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="ignoreRequestBody">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IgnoreCallInQueueAsync (string accountId, string telephonySessionId, string partyId, IgnoreRequestBody ignoreRequestBody, CancellationToken cancellationToken = default(CancellationToken))
        {
             await IgnoreCallInQueueWithHttpInfoAsync(accountId, telephonySessionId, partyId, ignoreRequestBody, cancellationToken);

        }

        /// <summary>
        /// Ignore Call in Queue Ignores a call to a call queue agent in `Setup` or `Proceeding` state.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="ignoreRequestBody">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IgnoreCallInQueueWithHttpInfoAsync (string accountId, string telephonySessionId, string partyId, IgnoreRequestBody ignoreRequestBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->IgnoreCallInQueue");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->IgnoreCallInQueue");
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new ApiException(400, "Missing required parameter 'partyId' when calling CallControlApi->IgnoreCallInQueue");
            // verify the required parameter 'ignoreRequestBody' is set
            if (ignoreRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'ignoreRequestBody' when calling CallControlApi->IgnoreCallInQueue");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/ignore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (partyId != null) localVarPathParams.Add("partyId", this.Configuration.ApiClient.ParameterToString(partyId)); // path parameter
            if (ignoreRequestBody != null && ignoreRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ignoreRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ignoreRequestBody; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IgnoreCallInQueue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Pause/Resume Recording Pause/resume recording
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">Identifies a brand of a logged in user or a brand of a sign-up session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="recordingId">Internal identifier of a recording</param>
        /// <param name="callRecordingUpdate">JSON body</param>
        /// <returns>CallRecording</returns>
        public CallRecording PauseResumeCallRecording (string brandId, string accountId, string telephonySessionId, string partyId, string recordingId, CallRecordingUpdate callRecordingUpdate)
        {
             ApiResponse<CallRecording> localVarResponse = PauseResumeCallRecordingWithHttpInfo(brandId, accountId, telephonySessionId, partyId, recordingId, callRecordingUpdate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Pause/Resume Recording Pause/resume recording
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">Identifies a brand of a logged in user or a brand of a sign-up session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="recordingId">Internal identifier of a recording</param>
        /// <param name="callRecordingUpdate">JSON body</param>
        /// <returns>ApiResponse of CallRecording</returns>
        public ApiResponse<CallRecording> PauseResumeCallRecordingWithHttpInfo (string brandId, string accountId, string telephonySessionId, string partyId, string recordingId, CallRecordingUpdate callRecordingUpdate)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling CallControlApi->PauseResumeCallRecording");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->PauseResumeCallRecording");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->PauseResumeCallRecording");
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new ApiException(400, "Missing required parameter 'partyId' when calling CallControlApi->PauseResumeCallRecording");
            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
                throw new ApiException(400, "Missing required parameter 'recordingId' when calling CallControlApi->PauseResumeCallRecording");
            // verify the required parameter 'callRecordingUpdate' is set
            if (callRecordingUpdate == null)
                throw new ApiException(400, "Missing required parameter 'callRecordingUpdate' when calling CallControlApi->PauseResumeCallRecording");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/recordings/{recordingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (partyId != null) localVarPathParams.Add("partyId", this.Configuration.ApiClient.ParameterToString(partyId)); // path parameter
            if (recordingId != null) localVarPathParams.Add("recordingId", this.Configuration.ApiClient.ParameterToString(recordingId)); // path parameter
            if (brandId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "brandId", brandId)); // query parameter
            if (callRecordingUpdate != null && callRecordingUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(callRecordingUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = callRecordingUpdate; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PauseResumeCallRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallRecording>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallRecording) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallRecording)));
        }

        /// <summary>
        /// Pause/Resume Recording Pause/resume recording
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">Identifies a brand of a logged in user or a brand of a sign-up session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="recordingId">Internal identifier of a recording</param>
        /// <param name="callRecordingUpdate">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallRecording</returns>
        public async System.Threading.Tasks.Task<CallRecording> PauseResumeCallRecordingAsync (string brandId, string accountId, string telephonySessionId, string partyId, string recordingId, CallRecordingUpdate callRecordingUpdate, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CallRecording> localVarResponse = await PauseResumeCallRecordingWithHttpInfoAsync(brandId, accountId, telephonySessionId, partyId, recordingId, callRecordingUpdate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Pause/Resume Recording Pause/resume recording
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">Identifies a brand of a logged in user or a brand of a sign-up session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="recordingId">Internal identifier of a recording</param>
        /// <param name="callRecordingUpdate">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallRecording)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallRecording>> PauseResumeCallRecordingWithHttpInfoAsync (string brandId, string accountId, string telephonySessionId, string partyId, string recordingId, CallRecordingUpdate callRecordingUpdate, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling CallControlApi->PauseResumeCallRecording");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->PauseResumeCallRecording");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->PauseResumeCallRecording");
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new ApiException(400, "Missing required parameter 'partyId' when calling CallControlApi->PauseResumeCallRecording");
            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
                throw new ApiException(400, "Missing required parameter 'recordingId' when calling CallControlApi->PauseResumeCallRecording");
            // verify the required parameter 'callRecordingUpdate' is set
            if (callRecordingUpdate == null)
                throw new ApiException(400, "Missing required parameter 'callRecordingUpdate' when calling CallControlApi->PauseResumeCallRecording");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/recordings/{recordingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (partyId != null) localVarPathParams.Add("partyId", this.Configuration.ApiClient.ParameterToString(partyId)); // path parameter
            if (recordingId != null) localVarPathParams.Add("recordingId", this.Configuration.ApiClient.ParameterToString(recordingId)); // path parameter
            if (brandId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "brandId", brandId)); // query parameter
            if (callRecordingUpdate != null && callRecordingUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(callRecordingUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = callRecordingUpdate; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PauseResumeCallRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallRecording>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallRecording) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallRecording)));
        }

        /// <summary>
        /// Pickup Call Picks up a call parked to the specified park location.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="pickupTarget">Distributes a non-answered call to the defined target. Only a single target is allowed</param>
        /// <returns>CallParty</returns>
        public CallParty PickupCallParty (string accountId, string telephonySessionId, string partyId, PickupTarget pickupTarget)
        {
             ApiResponse<CallParty> localVarResponse = PickupCallPartyWithHttpInfo(accountId, telephonySessionId, partyId, pickupTarget);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Pickup Call Picks up a call parked to the specified park location.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="pickupTarget">Distributes a non-answered call to the defined target. Only a single target is allowed</param>
        /// <returns>ApiResponse of CallParty</returns>
        public ApiResponse<CallParty> PickupCallPartyWithHttpInfo (string accountId, string telephonySessionId, string partyId, PickupTarget pickupTarget)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->PickupCallParty");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->PickupCallParty");
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new ApiException(400, "Missing required parameter 'partyId' when calling CallControlApi->PickupCallParty");
            // verify the required parameter 'pickupTarget' is set
            if (pickupTarget == null)
                throw new ApiException(400, "Missing required parameter 'pickupTarget' when calling CallControlApi->PickupCallParty");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/pickup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (partyId != null) localVarPathParams.Add("partyId", this.Configuration.ApiClient.ParameterToString(partyId)); // path parameter
            if (pickupTarget != null && pickupTarget.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(pickupTarget); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pickupTarget; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PickupCallParty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallParty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallParty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallParty)));
        }

        /// <summary>
        /// Pickup Call Picks up a call parked to the specified park location.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="pickupTarget">Distributes a non-answered call to the defined target. Only a single target is allowed</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallParty</returns>
        public async System.Threading.Tasks.Task<CallParty> PickupCallPartyAsync (string accountId, string telephonySessionId, string partyId, PickupTarget pickupTarget, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CallParty> localVarResponse = await PickupCallPartyWithHttpInfoAsync(accountId, telephonySessionId, partyId, pickupTarget, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Pickup Call Picks up a call parked to the specified park location.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="pickupTarget">Distributes a non-answered call to the defined target. Only a single target is allowed</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallParty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallParty>> PickupCallPartyWithHttpInfoAsync (string accountId, string telephonySessionId, string partyId, PickupTarget pickupTarget, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->PickupCallParty");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->PickupCallParty");
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new ApiException(400, "Missing required parameter 'partyId' when calling CallControlApi->PickupCallParty");
            // verify the required parameter 'pickupTarget' is set
            if (pickupTarget == null)
                throw new ApiException(400, "Missing required parameter 'pickupTarget' when calling CallControlApi->PickupCallParty");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/pickup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (partyId != null) localVarPathParams.Add("partyId", this.Configuration.ApiClient.ParameterToString(partyId)); // path parameter
            if (pickupTarget != null && pickupTarget.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(pickupTarget); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pickupTarget; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PickupCallParty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallParty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallParty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallParty)));
        }

        /// <summary>
        /// Get Call Party Status Returns a call party status by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <returns>CallParty</returns>
        public CallParty ReadCallPartyStatus (string accountId, string telephonySessionId, string partyId)
        {
             ApiResponse<CallParty> localVarResponse = ReadCallPartyStatusWithHttpInfo(accountId, telephonySessionId, partyId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Party Status Returns a call party status by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <returns>ApiResponse of CallParty</returns>
        public ApiResponse<CallParty> ReadCallPartyStatusWithHttpInfo (string accountId, string telephonySessionId, string partyId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->ReadCallPartyStatus");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->ReadCallPartyStatus");
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new ApiException(400, "Missing required parameter 'partyId' when calling CallControlApi->ReadCallPartyStatus");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (partyId != null) localVarPathParams.Add("partyId", this.Configuration.ApiClient.ParameterToString(partyId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadCallPartyStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallParty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallParty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallParty)));
        }

        /// <summary>
        /// Get Call Party Status Returns a call party status by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallParty</returns>
        public async System.Threading.Tasks.Task<CallParty> ReadCallPartyStatusAsync (string accountId, string telephonySessionId, string partyId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CallParty> localVarResponse = await ReadCallPartyStatusWithHttpInfoAsync(accountId, telephonySessionId, partyId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Call Party Status Returns a call party status by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallParty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallParty>> ReadCallPartyStatusWithHttpInfoAsync (string accountId, string telephonySessionId, string partyId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->ReadCallPartyStatus");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->ReadCallPartyStatus");
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new ApiException(400, "Missing required parameter 'partyId' when calling CallControlApi->ReadCallPartyStatus");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (partyId != null) localVarPathParams.Add("partyId", this.Configuration.ApiClient.ParameterToString(partyId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadCallPartyStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallParty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallParty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallParty)));
        }

        /// <summary>
        /// Get Call Session Status Returns the status of a call session by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="timestamp">The date and time of a call session latest change (optional)</param>
        /// <param name="timeout">The time frame of awaiting for a status change before sending the resulting one in response (optional)</param>
        /// <returns>CallSessionObject</returns>
        public CallSessionObject ReadCallSessionStatus (string accountId, string telephonySessionId, string timestamp = default(string), string timeout = default(string))
        {
             ApiResponse<CallSessionObject> localVarResponse = ReadCallSessionStatusWithHttpInfo(accountId, telephonySessionId, timestamp, timeout);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Session Status Returns the status of a call session by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="timestamp">The date and time of a call session latest change (optional)</param>
        /// <param name="timeout">The time frame of awaiting for a status change before sending the resulting one in response (optional)</param>
        /// <returns>ApiResponse of CallSessionObject</returns>
        public ApiResponse<CallSessionObject> ReadCallSessionStatusWithHttpInfo (string accountId, string telephonySessionId, string timestamp = default(string), string timeout = default(string))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->ReadCallSessionStatus");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->ReadCallSessionStatus");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (timestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", timestamp)); // query parameter
            if (timeout != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeout", timeout)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadCallSessionStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallSessionObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallSessionObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallSessionObject)));
        }

        /// <summary>
        /// Get Call Session Status Returns the status of a call session by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="timestamp">The date and time of a call session latest change (optional)</param>
        /// <param name="timeout">The time frame of awaiting for a status change before sending the resulting one in response (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallSessionObject</returns>
        public async System.Threading.Tasks.Task<CallSessionObject> ReadCallSessionStatusAsync (string accountId, string telephonySessionId, string timestamp = default(string), string timeout = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CallSessionObject> localVarResponse = await ReadCallSessionStatusWithHttpInfoAsync(accountId, telephonySessionId, timestamp, timeout, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Call Session Status Returns the status of a call session by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="timestamp">The date and time of a call session latest change (optional)</param>
        /// <param name="timeout">The time frame of awaiting for a status change before sending the resulting one in response (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallSessionObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallSessionObject>> ReadCallSessionStatusWithHttpInfoAsync (string accountId, string telephonySessionId, string timestamp = default(string), string timeout = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->ReadCallSessionStatus");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->ReadCallSessionStatus");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (timestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", timestamp)); // query parameter
            if (timeout != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeout", timeout)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadCallSessionStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallSessionObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallSessionObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallSessionObject)));
        }

        /// <summary>
        /// Reject Call Party Rejects an inbound call in a \"Setup\" or \"Proceeding\" state
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <returns></returns>
        public void RejectParty (string accountId, string telephonySessionId, string partyId)
        {
             RejectPartyWithHttpInfo(accountId, telephonySessionId, partyId);
        }

        /// <summary>
        /// Reject Call Party Rejects an inbound call in a \"Setup\" or \"Proceeding\" state
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RejectPartyWithHttpInfo (string accountId, string telephonySessionId, string partyId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->RejectParty");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->RejectParty");
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new ApiException(400, "Missing required parameter 'partyId' when calling CallControlApi->RejectParty");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/reject";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (partyId != null) localVarPathParams.Add("partyId", this.Configuration.ApiClient.ParameterToString(partyId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RejectParty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reject Call Party Rejects an inbound call in a \"Setup\" or \"Proceeding\" state
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RejectPartyAsync (string accountId, string telephonySessionId, string partyId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await RejectPartyWithHttpInfoAsync(accountId, telephonySessionId, partyId, cancellationToken);

        }

        /// <summary>
        /// Reject Call Party Rejects an inbound call in a \"Setup\" or \"Proceeding\" state
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RejectPartyWithHttpInfoAsync (string accountId, string telephonySessionId, string partyId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->RejectParty");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->RejectParty");
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new ApiException(400, "Missing required parameter 'partyId' when calling CallControlApi->RejectParty");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/reject";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (partyId != null) localVarPathParams.Add("partyId", this.Configuration.ApiClient.ParameterToString(partyId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RejectParty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reply with Text Replies with text/pattern without picking up a call.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="callPartyReply">JSON body</param>
        /// <returns>ReplyParty</returns>
        public ReplyParty ReplyParty (string accountId, string telephonySessionId, string partyId, CallPartyReply callPartyReply)
        {
             ApiResponse<ReplyParty> localVarResponse = ReplyPartyWithHttpInfo(accountId, telephonySessionId, partyId, callPartyReply);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reply with Text Replies with text/pattern without picking up a call.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="callPartyReply">JSON body</param>
        /// <returns>ApiResponse of ReplyParty</returns>
        public ApiResponse<ReplyParty> ReplyPartyWithHttpInfo (string accountId, string telephonySessionId, string partyId, CallPartyReply callPartyReply)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->ReplyParty");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->ReplyParty");
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new ApiException(400, "Missing required parameter 'partyId' when calling CallControlApi->ReplyParty");
            // verify the required parameter 'callPartyReply' is set
            if (callPartyReply == null)
                throw new ApiException(400, "Missing required parameter 'callPartyReply' when calling CallControlApi->ReplyParty");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/reply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (partyId != null) localVarPathParams.Add("partyId", this.Configuration.ApiClient.ParameterToString(partyId)); // path parameter
            if (callPartyReply != null && callPartyReply.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(callPartyReply); // http body (model) parameter
            }
            else
            {
                localVarPostBody = callPartyReply; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplyParty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplyParty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ReplyParty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplyParty)));
        }

        /// <summary>
        /// Reply with Text Replies with text/pattern without picking up a call.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="callPartyReply">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ReplyParty</returns>
        public async System.Threading.Tasks.Task<ReplyParty> ReplyPartyAsync (string accountId, string telephonySessionId, string partyId, CallPartyReply callPartyReply, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ReplyParty> localVarResponse = await ReplyPartyWithHttpInfoAsync(accountId, telephonySessionId, partyId, callPartyReply, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reply with Text Replies with text/pattern without picking up a call.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="callPartyReply">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ReplyParty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReplyParty>> ReplyPartyWithHttpInfoAsync (string accountId, string telephonySessionId, string partyId, CallPartyReply callPartyReply, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->ReplyParty");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->ReplyParty");
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new ApiException(400, "Missing required parameter 'partyId' when calling CallControlApi->ReplyParty");
            // verify the required parameter 'callPartyReply' is set
            if (callPartyReply == null)
                throw new ApiException(400, "Missing required parameter 'callPartyReply' when calling CallControlApi->ReplyParty");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/reply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (partyId != null) localVarPathParams.Add("partyId", this.Configuration.ApiClient.ParameterToString(partyId)); // path parameter
            if (callPartyReply != null && callPartyReply.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(callPartyReply); // http body (model) parameter
            }
            else
            {
                localVarPostBody = callPartyReply; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplyParty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplyParty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ReplyParty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplyParty)));
        }

        /// <summary>
        /// Create Recording Starts a new call recording for the party
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <returns></returns>
        public void StartCallRecording (string accountId, string telephonySessionId, string partyId)
        {
             StartCallRecordingWithHttpInfo(accountId, telephonySessionId, partyId);
        }

        /// <summary>
        /// Create Recording Starts a new call recording for the party
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StartCallRecordingWithHttpInfo (string accountId, string telephonySessionId, string partyId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->StartCallRecording");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->StartCallRecording");
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new ApiException(400, "Missing required parameter 'partyId' when calling CallControlApi->StartCallRecording");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/recordings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (partyId != null) localVarPathParams.Add("partyId", this.Configuration.ApiClient.ParameterToString(partyId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartCallRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create Recording Starts a new call recording for the party
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StartCallRecordingAsync (string accountId, string telephonySessionId, string partyId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await StartCallRecordingWithHttpInfoAsync(accountId, telephonySessionId, partyId, cancellationToken);

        }

        /// <summary>
        /// Create Recording Starts a new call recording for the party
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StartCallRecordingWithHttpInfoAsync (string accountId, string telephonySessionId, string partyId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->StartCallRecording");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->StartCallRecording");
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new ApiException(400, "Missing required parameter 'partyId' when calling CallControlApi->StartCallRecording");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/recordings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (partyId != null) localVarPathParams.Add("partyId", this.Configuration.ApiClient.ParameterToString(partyId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartCallRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Supervise Call Party Allows to monitor a call party in 'Listen' mode. Input parameters are extension number of a monitored user and internal identifier of a supervisor's device. Call session and party identifiers should be specified in path. Please note that for this method dual channel audio flow is supported, which means that you need to make one more request for monitoring the second participant of a call. And as a result of each monitoring request the client receives SIP invite with the following header `p-rc-api-monitoring-ids` containing IDs of the monitored party and session. The flow is supported for calls with no more than 2 participants. Currently this method is supported for Softphone/Hardphone only, since device IDs for WebRTC/Mobile apps cannot be obtained.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="partySuperviseRequest">JSON body</param>
        /// <returns>PartySuperviseResponse</returns>
        public PartySuperviseResponse SuperviseCallParty (string accountId, string telephonySessionId, string partyId, PartySuperviseRequest partySuperviseRequest)
        {
             ApiResponse<PartySuperviseResponse> localVarResponse = SuperviseCallPartyWithHttpInfo(accountId, telephonySessionId, partyId, partySuperviseRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Supervise Call Party Allows to monitor a call party in 'Listen' mode. Input parameters are extension number of a monitored user and internal identifier of a supervisor's device. Call session and party identifiers should be specified in path. Please note that for this method dual channel audio flow is supported, which means that you need to make one more request for monitoring the second participant of a call. And as a result of each monitoring request the client receives SIP invite with the following header `p-rc-api-monitoring-ids` containing IDs of the monitored party and session. The flow is supported for calls with no more than 2 participants. Currently this method is supported for Softphone/Hardphone only, since device IDs for WebRTC/Mobile apps cannot be obtained.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="partySuperviseRequest">JSON body</param>
        /// <returns>ApiResponse of PartySuperviseResponse</returns>
        public ApiResponse<PartySuperviseResponse> SuperviseCallPartyWithHttpInfo (string accountId, string telephonySessionId, string partyId, PartySuperviseRequest partySuperviseRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->SuperviseCallParty");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->SuperviseCallParty");
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new ApiException(400, "Missing required parameter 'partyId' when calling CallControlApi->SuperviseCallParty");
            // verify the required parameter 'partySuperviseRequest' is set
            if (partySuperviseRequest == null)
                throw new ApiException(400, "Missing required parameter 'partySuperviseRequest' when calling CallControlApi->SuperviseCallParty");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/supervise";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (partyId != null) localVarPathParams.Add("partyId", this.Configuration.ApiClient.ParameterToString(partyId)); // path parameter
            if (partySuperviseRequest != null && partySuperviseRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(partySuperviseRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = partySuperviseRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SuperviseCallParty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PartySuperviseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PartySuperviseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PartySuperviseResponse)));
        }

        /// <summary>
        /// Supervise Call Party Allows to monitor a call party in 'Listen' mode. Input parameters are extension number of a monitored user and internal identifier of a supervisor's device. Call session and party identifiers should be specified in path. Please note that for this method dual channel audio flow is supported, which means that you need to make one more request for monitoring the second participant of a call. And as a result of each monitoring request the client receives SIP invite with the following header `p-rc-api-monitoring-ids` containing IDs of the monitored party and session. The flow is supported for calls with no more than 2 participants. Currently this method is supported for Softphone/Hardphone only, since device IDs for WebRTC/Mobile apps cannot be obtained.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="partySuperviseRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PartySuperviseResponse</returns>
        public async System.Threading.Tasks.Task<PartySuperviseResponse> SuperviseCallPartyAsync (string accountId, string telephonySessionId, string partyId, PartySuperviseRequest partySuperviseRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PartySuperviseResponse> localVarResponse = await SuperviseCallPartyWithHttpInfoAsync(accountId, telephonySessionId, partyId, partySuperviseRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Supervise Call Party Allows to monitor a call party in 'Listen' mode. Input parameters are extension number of a monitored user and internal identifier of a supervisor's device. Call session and party identifiers should be specified in path. Please note that for this method dual channel audio flow is supported, which means that you need to make one more request for monitoring the second participant of a call. And as a result of each monitoring request the client receives SIP invite with the following header `p-rc-api-monitoring-ids` containing IDs of the monitored party and session. The flow is supported for calls with no more than 2 participants. Currently this method is supported for Softphone/Hardphone only, since device IDs for WebRTC/Mobile apps cannot be obtained.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="partySuperviseRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PartySuperviseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PartySuperviseResponse>> SuperviseCallPartyWithHttpInfoAsync (string accountId, string telephonySessionId, string partyId, PartySuperviseRequest partySuperviseRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->SuperviseCallParty");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->SuperviseCallParty");
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new ApiException(400, "Missing required parameter 'partyId' when calling CallControlApi->SuperviseCallParty");
            // verify the required parameter 'partySuperviseRequest' is set
            if (partySuperviseRequest == null)
                throw new ApiException(400, "Missing required parameter 'partySuperviseRequest' when calling CallControlApi->SuperviseCallParty");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/supervise";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (partyId != null) localVarPathParams.Add("partyId", this.Configuration.ApiClient.ParameterToString(partyId)); // path parameter
            if (partySuperviseRequest != null && partySuperviseRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(partySuperviseRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = partySuperviseRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SuperviseCallParty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PartySuperviseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PartySuperviseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PartySuperviseResponse)));
        }

        /// <summary>
        /// Supervise Call Session Allows to monitor a call session in 'Listen' mode. Input parameters should contain internal identifiers of a monitored user and a supervisor's device. Call session should be specified in path. Please note that this method supports single channel audio flow, which means that audio of both call participants is mixed and delivered to the supervisor in single audio channel. Currently this method is supported for Softphone/Hardphone only, since device IDs for WebRTC/Mobile apps cannot be obtained.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="superviseCallSessionRequest">JSON body</param>
        /// <returns>SuperviseCallSession</returns>
        public SuperviseCallSession SuperviseCallSession (string accountId, string telephonySessionId, SuperviseCallSessionRequest superviseCallSessionRequest)
        {
             ApiResponse<SuperviseCallSession> localVarResponse = SuperviseCallSessionWithHttpInfo(accountId, telephonySessionId, superviseCallSessionRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Supervise Call Session Allows to monitor a call session in 'Listen' mode. Input parameters should contain internal identifiers of a monitored user and a supervisor's device. Call session should be specified in path. Please note that this method supports single channel audio flow, which means that audio of both call participants is mixed and delivered to the supervisor in single audio channel. Currently this method is supported for Softphone/Hardphone only, since device IDs for WebRTC/Mobile apps cannot be obtained.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="superviseCallSessionRequest">JSON body</param>
        /// <returns>ApiResponse of SuperviseCallSession</returns>
        public ApiResponse<SuperviseCallSession> SuperviseCallSessionWithHttpInfo (string accountId, string telephonySessionId, SuperviseCallSessionRequest superviseCallSessionRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->SuperviseCallSession");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->SuperviseCallSession");
            // verify the required parameter 'superviseCallSessionRequest' is set
            if (superviseCallSessionRequest == null)
                throw new ApiException(400, "Missing required parameter 'superviseCallSessionRequest' when calling CallControlApi->SuperviseCallSession");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/supervise";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (superviseCallSessionRequest != null && superviseCallSessionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(superviseCallSessionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = superviseCallSessionRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SuperviseCallSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuperviseCallSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuperviseCallSession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuperviseCallSession)));
        }

        /// <summary>
        /// Supervise Call Session Allows to monitor a call session in 'Listen' mode. Input parameters should contain internal identifiers of a monitored user and a supervisor's device. Call session should be specified in path. Please note that this method supports single channel audio flow, which means that audio of both call participants is mixed and delivered to the supervisor in single audio channel. Currently this method is supported for Softphone/Hardphone only, since device IDs for WebRTC/Mobile apps cannot be obtained.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="superviseCallSessionRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SuperviseCallSession</returns>
        public async System.Threading.Tasks.Task<SuperviseCallSession> SuperviseCallSessionAsync (string accountId, string telephonySessionId, SuperviseCallSessionRequest superviseCallSessionRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SuperviseCallSession> localVarResponse = await SuperviseCallSessionWithHttpInfoAsync(accountId, telephonySessionId, superviseCallSessionRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Supervise Call Session Allows to monitor a call session in 'Listen' mode. Input parameters should contain internal identifiers of a monitored user and a supervisor's device. Call session should be specified in path. Please note that this method supports single channel audio flow, which means that audio of both call participants is mixed and delivered to the supervisor in single audio channel. Currently this method is supported for Softphone/Hardphone only, since device IDs for WebRTC/Mobile apps cannot be obtained.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="superviseCallSessionRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SuperviseCallSession)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuperviseCallSession>> SuperviseCallSessionWithHttpInfoAsync (string accountId, string telephonySessionId, SuperviseCallSessionRequest superviseCallSessionRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->SuperviseCallSession");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->SuperviseCallSession");
            // verify the required parameter 'superviseCallSessionRequest' is set
            if (superviseCallSessionRequest == null)
                throw new ApiException(400, "Missing required parameter 'superviseCallSessionRequest' when calling CallControlApi->SuperviseCallSession");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/supervise";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (superviseCallSessionRequest != null && superviseCallSessionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(superviseCallSessionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = superviseCallSessionRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SuperviseCallSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuperviseCallSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuperviseCallSession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuperviseCallSession)));
        }

        /// <summary>
        /// Transfer Call Party Transfers an answered call to the specified call party. Applicable for a call session in \"Answered\" or \"Hold\" state.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="transferTarget">Specifies a call party to which the call will be transfered. Only a single call party is allowed.</param>
        /// <returns>CallParty</returns>
        public CallParty TransferCallParty (string accountId, string telephonySessionId, string partyId, TransferTarget transferTarget)
        {
             ApiResponse<CallParty> localVarResponse = TransferCallPartyWithHttpInfo(accountId, telephonySessionId, partyId, transferTarget);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer Call Party Transfers an answered call to the specified call party. Applicable for a call session in \"Answered\" or \"Hold\" state.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="transferTarget">Specifies a call party to which the call will be transfered. Only a single call party is allowed.</param>
        /// <returns>ApiResponse of CallParty</returns>
        public ApiResponse<CallParty> TransferCallPartyWithHttpInfo (string accountId, string telephonySessionId, string partyId, TransferTarget transferTarget)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->TransferCallParty");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->TransferCallParty");
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new ApiException(400, "Missing required parameter 'partyId' when calling CallControlApi->TransferCallParty");
            // verify the required parameter 'transferTarget' is set
            if (transferTarget == null)
                throw new ApiException(400, "Missing required parameter 'transferTarget' when calling CallControlApi->TransferCallParty");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (partyId != null) localVarPathParams.Add("partyId", this.Configuration.ApiClient.ParameterToString(partyId)); // path parameter
            if (transferTarget != null && transferTarget.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transferTarget); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transferTarget; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransferCallParty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallParty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallParty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallParty)));
        }

        /// <summary>
        /// Transfer Call Party Transfers an answered call to the specified call party. Applicable for a call session in \"Answered\" or \"Hold\" state.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="transferTarget">Specifies a call party to which the call will be transfered. Only a single call party is allowed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallParty</returns>
        public async System.Threading.Tasks.Task<CallParty> TransferCallPartyAsync (string accountId, string telephonySessionId, string partyId, TransferTarget transferTarget, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CallParty> localVarResponse = await TransferCallPartyWithHttpInfoAsync(accountId, telephonySessionId, partyId, transferTarget, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transfer Call Party Transfers an answered call to the specified call party. Applicable for a call session in \"Answered\" or \"Hold\" state.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="transferTarget">Specifies a call party to which the call will be transfered. Only a single call party is allowed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallParty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallParty>> TransferCallPartyWithHttpInfoAsync (string accountId, string telephonySessionId, string partyId, TransferTarget transferTarget, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->TransferCallParty");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->TransferCallParty");
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new ApiException(400, "Missing required parameter 'partyId' when calling CallControlApi->TransferCallParty");
            // verify the required parameter 'transferTarget' is set
            if (transferTarget == null)
                throw new ApiException(400, "Missing required parameter 'transferTarget' when calling CallControlApi->TransferCallParty");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (partyId != null) localVarPathParams.Add("partyId", this.Configuration.ApiClient.ParameterToString(partyId)); // path parameter
            if (transferTarget != null && transferTarget.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transferTarget); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transferTarget; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransferCallParty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallParty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallParty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallParty)));
        }

        /// <summary>
        /// Unhold Call Party Brings a party back into a call and stops to play Hold Music. There is a known limitation for Hold API - hold via REST API doesn't work with hold placed via RingCentral apps or HardPhone. It means that if you muted participant via Call Control API and RingCentral Desktop app, then you need to unhold both endpoints to remove Hold Music and bring media back.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <returns>CallParty</returns>
        public CallParty UnholdCallParty (string accountId, string telephonySessionId, string partyId)
        {
             ApiResponse<CallParty> localVarResponse = UnholdCallPartyWithHttpInfo(accountId, telephonySessionId, partyId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unhold Call Party Brings a party back into a call and stops to play Hold Music. There is a known limitation for Hold API - hold via REST API doesn't work with hold placed via RingCentral apps or HardPhone. It means that if you muted participant via Call Control API and RingCentral Desktop app, then you need to unhold both endpoints to remove Hold Music and bring media back.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <returns>ApiResponse of CallParty</returns>
        public ApiResponse<CallParty> UnholdCallPartyWithHttpInfo (string accountId, string telephonySessionId, string partyId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->UnholdCallParty");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->UnholdCallParty");
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new ApiException(400, "Missing required parameter 'partyId' when calling CallControlApi->UnholdCallParty");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/unhold";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (partyId != null) localVarPathParams.Add("partyId", this.Configuration.ApiClient.ParameterToString(partyId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnholdCallParty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallParty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallParty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallParty)));
        }

        /// <summary>
        /// Unhold Call Party Brings a party back into a call and stops to play Hold Music. There is a known limitation for Hold API - hold via REST API doesn't work with hold placed via RingCentral apps or HardPhone. It means that if you muted participant via Call Control API and RingCentral Desktop app, then you need to unhold both endpoints to remove Hold Music and bring media back.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallParty</returns>
        public async System.Threading.Tasks.Task<CallParty> UnholdCallPartyAsync (string accountId, string telephonySessionId, string partyId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CallParty> localVarResponse = await UnholdCallPartyWithHttpInfoAsync(accountId, telephonySessionId, partyId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unhold Call Party Brings a party back into a call and stops to play Hold Music. There is a known limitation for Hold API - hold via REST API doesn't work with hold placed via RingCentral apps or HardPhone. It means that if you muted participant via Call Control API and RingCentral Desktop app, then you need to unhold both endpoints to remove Hold Music and bring media back.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallParty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallParty>> UnholdCallPartyWithHttpInfoAsync (string accountId, string telephonySessionId, string partyId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->UnholdCallParty");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->UnholdCallParty");
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new ApiException(400, "Missing required parameter 'partyId' when calling CallControlApi->UnholdCallParty");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/unhold";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (partyId != null) localVarPathParams.Add("partyId", this.Configuration.ApiClient.ParameterToString(partyId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnholdCallParty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallParty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallParty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallParty)));
        }

        /// <summary>
        /// Update Call Party Modifies a call party by ID. There is a known limitation for Mute scenario - mute via REST API doesn't work with mute placed via RingCentral apps or HardPhone. It means that if you muted participant via Call Control API and Ringcentral Desktop app you need to unmute both endpoints to bring the media back.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="partyUpdateRequest">JSON body</param>
        /// <returns>CallParty</returns>
        public CallParty UpdateCallParty (string accountId, string telephonySessionId, string partyId, PartyUpdateRequest partyUpdateRequest)
        {
             ApiResponse<CallParty> localVarResponse = UpdateCallPartyWithHttpInfo(accountId, telephonySessionId, partyId, partyUpdateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Call Party Modifies a call party by ID. There is a known limitation for Mute scenario - mute via REST API doesn't work with mute placed via RingCentral apps or HardPhone. It means that if you muted participant via Call Control API and Ringcentral Desktop app you need to unmute both endpoints to bring the media back.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="partyUpdateRequest">JSON body</param>
        /// <returns>ApiResponse of CallParty</returns>
        public ApiResponse<CallParty> UpdateCallPartyWithHttpInfo (string accountId, string telephonySessionId, string partyId, PartyUpdateRequest partyUpdateRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->UpdateCallParty");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->UpdateCallParty");
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new ApiException(400, "Missing required parameter 'partyId' when calling CallControlApi->UpdateCallParty");
            // verify the required parameter 'partyUpdateRequest' is set
            if (partyUpdateRequest == null)
                throw new ApiException(400, "Missing required parameter 'partyUpdateRequest' when calling CallControlApi->UpdateCallParty");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (partyId != null) localVarPathParams.Add("partyId", this.Configuration.ApiClient.ParameterToString(partyId)); // path parameter
            if (partyUpdateRequest != null && partyUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(partyUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = partyUpdateRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCallParty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallParty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallParty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallParty)));
        }

        /// <summary>
        /// Update Call Party Modifies a call party by ID. There is a known limitation for Mute scenario - mute via REST API doesn't work with mute placed via RingCentral apps or HardPhone. It means that if you muted participant via Call Control API and Ringcentral Desktop app you need to unmute both endpoints to bring the media back.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="partyUpdateRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallParty</returns>
        public async System.Threading.Tasks.Task<CallParty> UpdateCallPartyAsync (string accountId, string telephonySessionId, string partyId, PartyUpdateRequest partyUpdateRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CallParty> localVarResponse = await UpdateCallPartyWithHttpInfoAsync(accountId, telephonySessionId, partyId, partyUpdateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Call Party Modifies a call party by ID. There is a known limitation for Mute scenario - mute via REST API doesn't work with mute placed via RingCentral apps or HardPhone. It means that if you muted participant via Call Control API and Ringcentral Desktop app you need to unmute both endpoints to bring the media back.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="telephonySessionId">Internal identifier of a call session</param>
        /// <param name="partyId">Internal identifier of a call party</param>
        /// <param name="partyUpdateRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallParty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallParty>> UpdateCallPartyWithHttpInfoAsync (string accountId, string telephonySessionId, string partyId, PartyUpdateRequest partyUpdateRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallControlApi->UpdateCallParty");
            // verify the required parameter 'telephonySessionId' is set
            if (telephonySessionId == null)
                throw new ApiException(400, "Missing required parameter 'telephonySessionId' when calling CallControlApi->UpdateCallParty");
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new ApiException(400, "Missing required parameter 'partyId' when calling CallControlApi->UpdateCallParty");
            // verify the required parameter 'partyUpdateRequest' is set
            if (partyUpdateRequest == null)
                throw new ApiException(400, "Missing required parameter 'partyUpdateRequest' when calling CallControlApi->UpdateCallParty");

            var localVarPath = "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (telephonySessionId != null) localVarPathParams.Add("telephonySessionId", this.Configuration.ApiClient.ParameterToString(telephonySessionId)); // path parameter
            if (partyId != null) localVarPathParams.Add("partyId", this.Configuration.ApiClient.ParameterToString(partyId)); // path parameter
            if (partyUpdateRequest != null && partyUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(partyUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = partyUpdateRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCallParty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallParty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallParty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallParty)));
        }

    }
}
