/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICallQueuesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Assign Multiple Call Queue Members
        /// </summary>
        /// <remarks>
        /// Updates a call queue group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="callQueueBulkAssignResource">Changes for the given group</param>
        /// <returns></returns>
        void AssignMultipleCallQueueMembers (string accountId, string groupId, CallQueueBulkAssignResource callQueueBulkAssignResource);

        /// <summary>
        /// Assign Multiple Call Queue Members
        /// </summary>
        /// <remarks>
        /// Updates a call queue group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="callQueueBulkAssignResource">Changes for the given group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssignMultipleCallQueueMembersWithHttpInfo (string accountId, string groupId, CallQueueBulkAssignResource callQueueBulkAssignResource);
        /// <summary>
        /// Assign Multiple Department Members
        /// </summary>
        /// <remarks>
        /// Adds and/or removes multiple call queue members. Please note, that this method is deprecated and legacy 'Department' entity corresponds to 'Call Queue' in modern RingCentral product terminology. In order to assign multiple call queue members please use the following method `POST/restapi/v1.0/account/{accountId}/call-queues/{groupId}/bulk-assign`.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="departmentBulkAssignResource"> (optional)</param>
        /// <returns></returns>
        [Obsolete]
        void AssignMultipleDepartmentMembers (string accountId, DepartmentBulkAssignResource departmentBulkAssignResource = default(DepartmentBulkAssignResource));

        /// <summary>
        /// Assign Multiple Department Members
        /// </summary>
        /// <remarks>
        /// Adds and/or removes multiple call queue members. Please note, that this method is deprecated and legacy 'Department' entity corresponds to 'Call Queue' in modern RingCentral product terminology. In order to assign multiple call queue members please use the following method `POST/restapi/v1.0/account/{accountId}/call-queues/{groupId}/bulk-assign`.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="departmentBulkAssignResource"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        ApiResponse<Object> AssignMultipleDepartmentMembersWithHttpInfo (string accountId, DepartmentBulkAssignResource departmentBulkAssignResource = default(DepartmentBulkAssignResource));
        /// <summary>
        /// Get Call Queue Members
        /// </summary>
        /// <remarks>
        /// Returns call queue group members.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <returns>CallQueueMembers</returns>
        CallQueueMembers ListCallQueueMembers (string accountId, string groupId, int? page = default(int?), int? perPage = default(int?));

        /// <summary>
        /// Get Call Queue Members
        /// </summary>
        /// <remarks>
        /// Returns call queue group members.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <returns>ApiResponse of CallQueueMembers</returns>
        ApiResponse<CallQueueMembers> ListCallQueueMembersWithHttpInfo (string accountId, string groupId, int? page = default(int?), int? perPage = default(int?));
        /// <summary>
        /// Get Call Queue List
        /// </summary>
        /// <remarks>
        /// Returns call queue group list.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="memberExtensionId">Internal identifier of an extension that is a member of every group within the result (optional)</param>
        /// <returns>CallQueues</returns>
        CallQueues ListCallQueues (string accountId, int? page = default(int?), int? perPage = default(int?), string memberExtensionId = default(string));

        /// <summary>
        /// Get Call Queue List
        /// </summary>
        /// <remarks>
        /// Returns call queue group list.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="memberExtensionId">Internal identifier of an extension that is a member of every group within the result (optional)</param>
        /// <returns>ApiResponse of CallQueues</returns>
        ApiResponse<CallQueues> ListCallQueuesWithHttpInfo (string accountId, int? page = default(int?), int? perPage = default(int?), string memberExtensionId = default(string));
        /// <summary>
        /// Get Department Member List
        /// </summary>
        /// <remarks>
        /// Viewing user account info (including name, business name, address and phone number/account number). Please note, that this method is deprecated and legacy 'Department' entity corresponds to 'Call Queue' in modern RingCentral product terminology. In order to retrieve call queue members please use the following method `GET/restapi/v1.0/account/{accountId}/call-queues/{groupId}/members`.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="departmentId">Internal identifier of a Department extension (same as extensionId but only the ID of a department extension is valid). Please note that legacy &#39;Department&#39; extension type corresponds to &#39;Call Queue&#39; extensions in modern RingCentral product terminology</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <returns>DepartmentMemberList</returns>
        [Obsolete]
        DepartmentMemberList ListDepartmentMembers (string accountId, long departmentId, int? page = default(int?), int? perPage = default(int?));

        /// <summary>
        /// Get Department Member List
        /// </summary>
        /// <remarks>
        /// Viewing user account info (including name, business name, address and phone number/account number). Please note, that this method is deprecated and legacy 'Department' entity corresponds to 'Call Queue' in modern RingCentral product terminology. In order to retrieve call queue members please use the following method `GET/restapi/v1.0/account/{accountId}/call-queues/{groupId}/members`.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="departmentId">Internal identifier of a Department extension (same as extensionId but only the ID of a department extension is valid). Please note that legacy &#39;Department&#39; extension type corresponds to &#39;Call Queue&#39; extensions in modern RingCentral product terminology</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <returns>ApiResponse of DepartmentMemberList</returns>
        [Obsolete]
        ApiResponse<DepartmentMemberList> ListDepartmentMembersWithHttpInfo (string accountId, long departmentId, int? page = default(int?), int? perPage = default(int?));
        /// <summary>
        /// Get Call Queue
        /// </summary>
        /// <remarks>
        /// Returns basic information on a call queue group extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <returns>CallQueueDetails</returns>
        CallQueueDetails ReadCallQueueInfo (string accountId, string groupId);

        /// <summary>
        /// Get Call Queue
        /// </summary>
        /// <remarks>
        /// Returns basic information on a call queue group extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <returns>ApiResponse of CallQueueDetails</returns>
        ApiResponse<CallQueueDetails> ReadCallQueueInfoWithHttpInfo (string accountId, string groupId);
        /// <summary>
        /// Update Call Queue
        /// </summary>
        /// <remarks>
        /// Updates information on a call queue group extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="callQueueUpdateDetails"></param>
        /// <returns>CallQueueDetails</returns>
        CallQueueDetails UpdateCallQueueInfo (string accountId, string groupId, CallQueueUpdateDetails callQueueUpdateDetails);

        /// <summary>
        /// Update Call Queue
        /// </summary>
        /// <remarks>
        /// Updates information on a call queue group extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="callQueueUpdateDetails"></param>
        /// <returns>ApiResponse of CallQueueDetails</returns>
        ApiResponse<CallQueueDetails> UpdateCallQueueInfoWithHttpInfo (string accountId, string groupId, CallQueueUpdateDetails callQueueUpdateDetails);
        /// <summary>
        /// Update User Call Queues
        /// </summary>
        /// <remarks>
        /// Updates the list of call queues where the user is an agent. This is a full update request, which means that if any queue where the user is an agent is not mentioned in request, then the user is automatically removed from this queue.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="userCallQueues"></param>
        /// <returns>UserCallQueues</returns>
        UserCallQueues UpdateUserCallQueues (string accountId, string extensionId, UserCallQueues userCallQueues);

        /// <summary>
        /// Update User Call Queues
        /// </summary>
        /// <remarks>
        /// Updates the list of call queues where the user is an agent. This is a full update request, which means that if any queue where the user is an agent is not mentioned in request, then the user is automatically removed from this queue.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="userCallQueues"></param>
        /// <returns>ApiResponse of UserCallQueues</returns>
        ApiResponse<UserCallQueues> UpdateUserCallQueuesWithHttpInfo (string accountId, string extensionId, UserCallQueues userCallQueues);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Assign Multiple Call Queue Members
        /// </summary>
        /// <remarks>
        /// Updates a call queue group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="callQueueBulkAssignResource">Changes for the given group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssignMultipleCallQueueMembersAsync (string accountId, string groupId, CallQueueBulkAssignResource callQueueBulkAssignResource, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Assign Multiple Call Queue Members
        /// </summary>
        /// <remarks>
        /// Updates a call queue group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="callQueueBulkAssignResource">Changes for the given group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssignMultipleCallQueueMembersWithHttpInfoAsync (string accountId, string groupId, CallQueueBulkAssignResource callQueueBulkAssignResource, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Assign Multiple Department Members
        /// </summary>
        /// <remarks>
        /// Adds and/or removes multiple call queue members. Please note, that this method is deprecated and legacy 'Department' entity corresponds to 'Call Queue' in modern RingCentral product terminology. In order to assign multiple call queue members please use the following method `POST/restapi/v1.0/account/{accountId}/call-queues/{groupId}/bulk-assign`.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="departmentBulkAssignResource"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        [Obsolete]
        System.Threading.Tasks.Task AssignMultipleDepartmentMembersAsync (string accountId, DepartmentBulkAssignResource departmentBulkAssignResource = default(DepartmentBulkAssignResource), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Assign Multiple Department Members
        /// </summary>
        /// <remarks>
        /// Adds and/or removes multiple call queue members. Please note, that this method is deprecated and legacy 'Department' entity corresponds to 'Call Queue' in modern RingCentral product terminology. In order to assign multiple call queue members please use the following method `POST/restapi/v1.0/account/{accountId}/call-queues/{groupId}/bulk-assign`.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="departmentBulkAssignResource"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Object>> AssignMultipleDepartmentMembersWithHttpInfoAsync (string accountId, DepartmentBulkAssignResource departmentBulkAssignResource = default(DepartmentBulkAssignResource), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Call Queue Members
        /// </summary>
        /// <remarks>
        /// Returns call queue group members.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallQueueMembers</returns>
        System.Threading.Tasks.Task<CallQueueMembers> ListCallQueueMembersAsync (string accountId, string groupId, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Call Queue Members
        /// </summary>
        /// <remarks>
        /// Returns call queue group members.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallQueueMembers)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallQueueMembers>> ListCallQueueMembersWithHttpInfoAsync (string accountId, string groupId, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Call Queue List
        /// </summary>
        /// <remarks>
        /// Returns call queue group list.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="memberExtensionId">Internal identifier of an extension that is a member of every group within the result (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallQueues</returns>
        System.Threading.Tasks.Task<CallQueues> ListCallQueuesAsync (string accountId, int? page = default(int?), int? perPage = default(int?), string memberExtensionId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Call Queue List
        /// </summary>
        /// <remarks>
        /// Returns call queue group list.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="memberExtensionId">Internal identifier of an extension that is a member of every group within the result (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallQueues)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallQueues>> ListCallQueuesWithHttpInfoAsync (string accountId, int? page = default(int?), int? perPage = default(int?), string memberExtensionId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Department Member List
        /// </summary>
        /// <remarks>
        /// Viewing user account info (including name, business name, address and phone number/account number). Please note, that this method is deprecated and legacy 'Department' entity corresponds to 'Call Queue' in modern RingCentral product terminology. In order to retrieve call queue members please use the following method `GET/restapi/v1.0/account/{accountId}/call-queues/{groupId}/members`.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="departmentId">Internal identifier of a Department extension (same as extensionId but only the ID of a department extension is valid). Please note that legacy &#39;Department&#39; extension type corresponds to &#39;Call Queue&#39; extensions in modern RingCentral product terminology</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DepartmentMemberList</returns>
        [Obsolete]
        System.Threading.Tasks.Task<DepartmentMemberList> ListDepartmentMembersAsync (string accountId, long departmentId, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Department Member List
        /// </summary>
        /// <remarks>
        /// Viewing user account info (including name, business name, address and phone number/account number). Please note, that this method is deprecated and legacy 'Department' entity corresponds to 'Call Queue' in modern RingCentral product terminology. In order to retrieve call queue members please use the following method `GET/restapi/v1.0/account/{accountId}/call-queues/{groupId}/members`.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="departmentId">Internal identifier of a Department extension (same as extensionId but only the ID of a department extension is valid). Please note that legacy &#39;Department&#39; extension type corresponds to &#39;Call Queue&#39; extensions in modern RingCentral product terminology</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DepartmentMemberList)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<DepartmentMemberList>> ListDepartmentMembersWithHttpInfoAsync (string accountId, long departmentId, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Call Queue
        /// </summary>
        /// <remarks>
        /// Returns basic information on a call queue group extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallQueueDetails</returns>
        System.Threading.Tasks.Task<CallQueueDetails> ReadCallQueueInfoAsync (string accountId, string groupId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Call Queue
        /// </summary>
        /// <remarks>
        /// Returns basic information on a call queue group extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallQueueDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallQueueDetails>> ReadCallQueueInfoWithHttpInfoAsync (string accountId, string groupId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Call Queue
        /// </summary>
        /// <remarks>
        /// Updates information on a call queue group extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="callQueueUpdateDetails"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallQueueDetails</returns>
        System.Threading.Tasks.Task<CallQueueDetails> UpdateCallQueueInfoAsync (string accountId, string groupId, CallQueueUpdateDetails callQueueUpdateDetails, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Call Queue
        /// </summary>
        /// <remarks>
        /// Updates information on a call queue group extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="callQueueUpdateDetails"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallQueueDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallQueueDetails>> UpdateCallQueueInfoWithHttpInfoAsync (string accountId, string groupId, CallQueueUpdateDetails callQueueUpdateDetails, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update User Call Queues
        /// </summary>
        /// <remarks>
        /// Updates the list of call queues where the user is an agent. This is a full update request, which means that if any queue where the user is an agent is not mentioned in request, then the user is automatically removed from this queue.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="userCallQueues"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserCallQueues</returns>
        System.Threading.Tasks.Task<UserCallQueues> UpdateUserCallQueuesAsync (string accountId, string extensionId, UserCallQueues userCallQueues, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update User Call Queues
        /// </summary>
        /// <remarks>
        /// Updates the list of call queues where the user is an agent. This is a full update request, which means that if any queue where the user is an agent is not mentioned in request, then the user is automatically removed from this queue.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="userCallQueues"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserCallQueues)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserCallQueues>> UpdateUserCallQueuesWithHttpInfoAsync (string accountId, string extensionId, UserCallQueues userCallQueues, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CallQueuesApi : ICallQueuesApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CallQueuesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CallQueuesApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallQueuesApi"/> class
        /// </summary>
        /// <returns></returns>
        public CallQueuesApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallQueuesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CallQueuesApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Assign Multiple Call Queue Members Updates a call queue group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="callQueueBulkAssignResource">Changes for the given group</param>
        /// <returns></returns>
        public void AssignMultipleCallQueueMembers (string accountId, string groupId, CallQueueBulkAssignResource callQueueBulkAssignResource)
        {
             AssignMultipleCallQueueMembersWithHttpInfo(accountId, groupId, callQueueBulkAssignResource);
        }

        /// <summary>
        /// Assign Multiple Call Queue Members Updates a call queue group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="callQueueBulkAssignResource">Changes for the given group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AssignMultipleCallQueueMembersWithHttpInfo (string accountId, string groupId, CallQueueBulkAssignResource callQueueBulkAssignResource)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallQueuesApi->AssignMultipleCallQueueMembers");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling CallQueuesApi->AssignMultipleCallQueueMembers");
            // verify the required parameter 'callQueueBulkAssignResource' is set
            if (callQueueBulkAssignResource == null)
                throw new ApiException(400, "Missing required parameter 'callQueueBulkAssignResource' when calling CallQueuesApi->AssignMultipleCallQueueMembers");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-queues/{groupId}/bulk-assign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (callQueueBulkAssignResource != null && callQueueBulkAssignResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(callQueueBulkAssignResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = callQueueBulkAssignResource; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignMultipleCallQueueMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Assign Multiple Call Queue Members Updates a call queue group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="callQueueBulkAssignResource">Changes for the given group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssignMultipleCallQueueMembersAsync (string accountId, string groupId, CallQueueBulkAssignResource callQueueBulkAssignResource, CancellationToken cancellationToken = default(CancellationToken))
        {
             await AssignMultipleCallQueueMembersWithHttpInfoAsync(accountId, groupId, callQueueBulkAssignResource, cancellationToken);

        }

        /// <summary>
        /// Assign Multiple Call Queue Members Updates a call queue group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="callQueueBulkAssignResource">Changes for the given group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssignMultipleCallQueueMembersWithHttpInfoAsync (string accountId, string groupId, CallQueueBulkAssignResource callQueueBulkAssignResource, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallQueuesApi->AssignMultipleCallQueueMembers");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling CallQueuesApi->AssignMultipleCallQueueMembers");
            // verify the required parameter 'callQueueBulkAssignResource' is set
            if (callQueueBulkAssignResource == null)
                throw new ApiException(400, "Missing required parameter 'callQueueBulkAssignResource' when calling CallQueuesApi->AssignMultipleCallQueueMembers");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-queues/{groupId}/bulk-assign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (callQueueBulkAssignResource != null && callQueueBulkAssignResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(callQueueBulkAssignResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = callQueueBulkAssignResource; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignMultipleCallQueueMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Assign Multiple Department Members Adds and/or removes multiple call queue members. Please note, that this method is deprecated and legacy 'Department' entity corresponds to 'Call Queue' in modern RingCentral product terminology. In order to assign multiple call queue members please use the following method `POST/restapi/v1.0/account/{accountId}/call-queues/{groupId}/bulk-assign`.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="departmentBulkAssignResource"> (optional)</param>
        /// <returns></returns>
        [Obsolete]
        public void AssignMultipleDepartmentMembers (string accountId, DepartmentBulkAssignResource departmentBulkAssignResource = default(DepartmentBulkAssignResource))
        {
             AssignMultipleDepartmentMembersWithHttpInfo(accountId, departmentBulkAssignResource);
        }

        /// <summary>
        /// Assign Multiple Department Members Adds and/or removes multiple call queue members. Please note, that this method is deprecated and legacy 'Department' entity corresponds to 'Call Queue' in modern RingCentral product terminology. In order to assign multiple call queue members please use the following method `POST/restapi/v1.0/account/{accountId}/call-queues/{groupId}/bulk-assign`.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="departmentBulkAssignResource"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        public ApiResponse<Object> AssignMultipleDepartmentMembersWithHttpInfo (string accountId, DepartmentBulkAssignResource departmentBulkAssignResource = default(DepartmentBulkAssignResource))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallQueuesApi->AssignMultipleDepartmentMembers");

            var localVarPath = "/restapi/v1.0/account/{accountId}/department/bulk-assign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (departmentBulkAssignResource != null && departmentBulkAssignResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(departmentBulkAssignResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = departmentBulkAssignResource; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignMultipleDepartmentMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Assign Multiple Department Members Adds and/or removes multiple call queue members. Please note, that this method is deprecated and legacy 'Department' entity corresponds to 'Call Queue' in modern RingCentral product terminology. In order to assign multiple call queue members please use the following method `POST/restapi/v1.0/account/{accountId}/call-queues/{groupId}/bulk-assign`.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="departmentBulkAssignResource"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task AssignMultipleDepartmentMembersAsync (string accountId, DepartmentBulkAssignResource departmentBulkAssignResource = default(DepartmentBulkAssignResource), CancellationToken cancellationToken = default(CancellationToken))
        {
             await AssignMultipleDepartmentMembersWithHttpInfoAsync(accountId, departmentBulkAssignResource, cancellationToken);

        }

        /// <summary>
        /// Assign Multiple Department Members Adds and/or removes multiple call queue members. Please note, that this method is deprecated and legacy 'Department' entity corresponds to 'Call Queue' in modern RingCentral product terminology. In order to assign multiple call queue members please use the following method `POST/restapi/v1.0/account/{accountId}/call-queues/{groupId}/bulk-assign`.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="departmentBulkAssignResource"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssignMultipleDepartmentMembersWithHttpInfoAsync (string accountId, DepartmentBulkAssignResource departmentBulkAssignResource = default(DepartmentBulkAssignResource), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallQueuesApi->AssignMultipleDepartmentMembers");

            var localVarPath = "/restapi/v1.0/account/{accountId}/department/bulk-assign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (departmentBulkAssignResource != null && departmentBulkAssignResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(departmentBulkAssignResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = departmentBulkAssignResource; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignMultipleDepartmentMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get Call Queue Members Returns call queue group members.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <returns>CallQueueMembers</returns>
        public CallQueueMembers ListCallQueueMembers (string accountId, string groupId, int? page = default(int?), int? perPage = default(int?))
        {
             ApiResponse<CallQueueMembers> localVarResponse = ListCallQueueMembersWithHttpInfo(accountId, groupId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Queue Members Returns call queue group members.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <returns>ApiResponse of CallQueueMembers</returns>
        public ApiResponse<CallQueueMembers> ListCallQueueMembersWithHttpInfo (string accountId, string groupId, int? page = default(int?), int? perPage = default(int?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallQueuesApi->ListCallQueueMembers");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling CallQueuesApi->ListCallQueueMembers");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-queues/{groupId}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCallQueueMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallQueueMembers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallQueueMembers) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallQueueMembers)));
        }

        /// <summary>
        /// Get Call Queue Members Returns call queue group members.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallQueueMembers</returns>
        public async System.Threading.Tasks.Task<CallQueueMembers> ListCallQueueMembersAsync (string accountId, string groupId, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CallQueueMembers> localVarResponse = await ListCallQueueMembersWithHttpInfoAsync(accountId, groupId, page, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Call Queue Members Returns call queue group members.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallQueueMembers)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallQueueMembers>> ListCallQueueMembersWithHttpInfoAsync (string accountId, string groupId, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallQueuesApi->ListCallQueueMembers");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling CallQueuesApi->ListCallQueueMembers");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-queues/{groupId}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCallQueueMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallQueueMembers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallQueueMembers) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallQueueMembers)));
        }

        /// <summary>
        /// Get Call Queue List Returns call queue group list.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="memberExtensionId">Internal identifier of an extension that is a member of every group within the result (optional)</param>
        /// <returns>CallQueues</returns>
        public CallQueues ListCallQueues (string accountId, int? page = default(int?), int? perPage = default(int?), string memberExtensionId = default(string))
        {
             ApiResponse<CallQueues> localVarResponse = ListCallQueuesWithHttpInfo(accountId, page, perPage, memberExtensionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Queue List Returns call queue group list.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="memberExtensionId">Internal identifier of an extension that is a member of every group within the result (optional)</param>
        /// <returns>ApiResponse of CallQueues</returns>
        public ApiResponse<CallQueues> ListCallQueuesWithHttpInfo (string accountId, int? page = default(int?), int? perPage = default(int?), string memberExtensionId = default(string))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallQueuesApi->ListCallQueues");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-queues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (memberExtensionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "memberExtensionId", memberExtensionId)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCallQueues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallQueues>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallQueues) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallQueues)));
        }

        /// <summary>
        /// Get Call Queue List Returns call queue group list.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="memberExtensionId">Internal identifier of an extension that is a member of every group within the result (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallQueues</returns>
        public async System.Threading.Tasks.Task<CallQueues> ListCallQueuesAsync (string accountId, int? page = default(int?), int? perPage = default(int?), string memberExtensionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CallQueues> localVarResponse = await ListCallQueuesWithHttpInfoAsync(accountId, page, perPage, memberExtensionId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Call Queue List Returns call queue group list.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="memberExtensionId">Internal identifier of an extension that is a member of every group within the result (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallQueues)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallQueues>> ListCallQueuesWithHttpInfoAsync (string accountId, int? page = default(int?), int? perPage = default(int?), string memberExtensionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallQueuesApi->ListCallQueues");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-queues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (memberExtensionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "memberExtensionId", memberExtensionId)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCallQueues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallQueues>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallQueues) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallQueues)));
        }

        /// <summary>
        /// Get Department Member List Viewing user account info (including name, business name, address and phone number/account number). Please note, that this method is deprecated and legacy 'Department' entity corresponds to 'Call Queue' in modern RingCentral product terminology. In order to retrieve call queue members please use the following method `GET/restapi/v1.0/account/{accountId}/call-queues/{groupId}/members`.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="departmentId">Internal identifier of a Department extension (same as extensionId but only the ID of a department extension is valid). Please note that legacy &#39;Department&#39; extension type corresponds to &#39;Call Queue&#39; extensions in modern RingCentral product terminology</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <returns>DepartmentMemberList</returns>
        [Obsolete]
        public DepartmentMemberList ListDepartmentMembers (string accountId, long departmentId, int? page = default(int?), int? perPage = default(int?))
        {
             ApiResponse<DepartmentMemberList> localVarResponse = ListDepartmentMembersWithHttpInfo(accountId, departmentId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Department Member List Viewing user account info (including name, business name, address and phone number/account number). Please note, that this method is deprecated and legacy 'Department' entity corresponds to 'Call Queue' in modern RingCentral product terminology. In order to retrieve call queue members please use the following method `GET/restapi/v1.0/account/{accountId}/call-queues/{groupId}/members`.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="departmentId">Internal identifier of a Department extension (same as extensionId but only the ID of a department extension is valid). Please note that legacy &#39;Department&#39; extension type corresponds to &#39;Call Queue&#39; extensions in modern RingCentral product terminology</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <returns>ApiResponse of DepartmentMemberList</returns>
        [Obsolete]
        public ApiResponse<DepartmentMemberList> ListDepartmentMembersWithHttpInfo (string accountId, long departmentId, int? page = default(int?), int? perPage = default(int?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallQueuesApi->ListDepartmentMembers");
            // verify the required parameter 'departmentId' is set
            if (departmentId == null)
                throw new ApiException(400, "Missing required parameter 'departmentId' when calling CallQueuesApi->ListDepartmentMembers");

            var localVarPath = "/restapi/v1.0/account/{accountId}/department/{departmentId}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (departmentId != null) localVarPathParams.Add("departmentId", this.Configuration.ApiClient.ParameterToString(departmentId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDepartmentMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DepartmentMemberList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DepartmentMemberList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DepartmentMemberList)));
        }

        /// <summary>
        /// Get Department Member List Viewing user account info (including name, business name, address and phone number/account number). Please note, that this method is deprecated and legacy 'Department' entity corresponds to 'Call Queue' in modern RingCentral product terminology. In order to retrieve call queue members please use the following method `GET/restapi/v1.0/account/{accountId}/call-queues/{groupId}/members`.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="departmentId">Internal identifier of a Department extension (same as extensionId but only the ID of a department extension is valid). Please note that legacy &#39;Department&#39; extension type corresponds to &#39;Call Queue&#39; extensions in modern RingCentral product terminology</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DepartmentMemberList</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<DepartmentMemberList> ListDepartmentMembersAsync (string accountId, long departmentId, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DepartmentMemberList> localVarResponse = await ListDepartmentMembersWithHttpInfoAsync(accountId, departmentId, page, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Department Member List Viewing user account info (including name, business name, address and phone number/account number). Please note, that this method is deprecated and legacy 'Department' entity corresponds to 'Call Queue' in modern RingCentral product terminology. In order to retrieve call queue members please use the following method `GET/restapi/v1.0/account/{accountId}/call-queues/{groupId}/members`.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="departmentId">Internal identifier of a Department extension (same as extensionId but only the ID of a department extension is valid). Please note that legacy &#39;Department&#39; extension type corresponds to &#39;Call Queue&#39; extensions in modern RingCentral product terminology</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DepartmentMemberList)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<DepartmentMemberList>> ListDepartmentMembersWithHttpInfoAsync (string accountId, long departmentId, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallQueuesApi->ListDepartmentMembers");
            // verify the required parameter 'departmentId' is set
            if (departmentId == null)
                throw new ApiException(400, "Missing required parameter 'departmentId' when calling CallQueuesApi->ListDepartmentMembers");

            var localVarPath = "/restapi/v1.0/account/{accountId}/department/{departmentId}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (departmentId != null) localVarPathParams.Add("departmentId", this.Configuration.ApiClient.ParameterToString(departmentId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDepartmentMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DepartmentMemberList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DepartmentMemberList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DepartmentMemberList)));
        }

        /// <summary>
        /// Get Call Queue Returns basic information on a call queue group extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <returns>CallQueueDetails</returns>
        public CallQueueDetails ReadCallQueueInfo (string accountId, string groupId)
        {
             ApiResponse<CallQueueDetails> localVarResponse = ReadCallQueueInfoWithHttpInfo(accountId, groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Queue Returns basic information on a call queue group extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <returns>ApiResponse of CallQueueDetails</returns>
        public ApiResponse<CallQueueDetails> ReadCallQueueInfoWithHttpInfo (string accountId, string groupId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallQueuesApi->ReadCallQueueInfo");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling CallQueuesApi->ReadCallQueueInfo");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-queues/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadCallQueueInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallQueueDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallQueueDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallQueueDetails)));
        }

        /// <summary>
        /// Get Call Queue Returns basic information on a call queue group extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallQueueDetails</returns>
        public async System.Threading.Tasks.Task<CallQueueDetails> ReadCallQueueInfoAsync (string accountId, string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CallQueueDetails> localVarResponse = await ReadCallQueueInfoWithHttpInfoAsync(accountId, groupId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Call Queue Returns basic information on a call queue group extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallQueueDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallQueueDetails>> ReadCallQueueInfoWithHttpInfoAsync (string accountId, string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallQueuesApi->ReadCallQueueInfo");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling CallQueuesApi->ReadCallQueueInfo");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-queues/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadCallQueueInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallQueueDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallQueueDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallQueueDetails)));
        }

        /// <summary>
        /// Update Call Queue Updates information on a call queue group extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="callQueueUpdateDetails"></param>
        /// <returns>CallQueueDetails</returns>
        public CallQueueDetails UpdateCallQueueInfo (string accountId, string groupId, CallQueueUpdateDetails callQueueUpdateDetails)
        {
             ApiResponse<CallQueueDetails> localVarResponse = UpdateCallQueueInfoWithHttpInfo(accountId, groupId, callQueueUpdateDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Call Queue Updates information on a call queue group extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="callQueueUpdateDetails"></param>
        /// <returns>ApiResponse of CallQueueDetails</returns>
        public ApiResponse<CallQueueDetails> UpdateCallQueueInfoWithHttpInfo (string accountId, string groupId, CallQueueUpdateDetails callQueueUpdateDetails)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallQueuesApi->UpdateCallQueueInfo");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling CallQueuesApi->UpdateCallQueueInfo");
            // verify the required parameter 'callQueueUpdateDetails' is set
            if (callQueueUpdateDetails == null)
                throw new ApiException(400, "Missing required parameter 'callQueueUpdateDetails' when calling CallQueuesApi->UpdateCallQueueInfo");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-queues/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (callQueueUpdateDetails != null && callQueueUpdateDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(callQueueUpdateDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = callQueueUpdateDetails; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCallQueueInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallQueueDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallQueueDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallQueueDetails)));
        }

        /// <summary>
        /// Update Call Queue Updates information on a call queue group extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="callQueueUpdateDetails"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallQueueDetails</returns>
        public async System.Threading.Tasks.Task<CallQueueDetails> UpdateCallQueueInfoAsync (string accountId, string groupId, CallQueueUpdateDetails callQueueUpdateDetails, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CallQueueDetails> localVarResponse = await UpdateCallQueueInfoWithHttpInfoAsync(accountId, groupId, callQueueUpdateDetails, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Call Queue Updates information on a call queue group extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="callQueueUpdateDetails"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallQueueDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallQueueDetails>> UpdateCallQueueInfoWithHttpInfoAsync (string accountId, string groupId, CallQueueUpdateDetails callQueueUpdateDetails, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallQueuesApi->UpdateCallQueueInfo");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling CallQueuesApi->UpdateCallQueueInfo");
            // verify the required parameter 'callQueueUpdateDetails' is set
            if (callQueueUpdateDetails == null)
                throw new ApiException(400, "Missing required parameter 'callQueueUpdateDetails' when calling CallQueuesApi->UpdateCallQueueInfo");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-queues/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (callQueueUpdateDetails != null && callQueueUpdateDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(callQueueUpdateDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = callQueueUpdateDetails; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCallQueueInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallQueueDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallQueueDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallQueueDetails)));
        }

        /// <summary>
        /// Update User Call Queues Updates the list of call queues where the user is an agent. This is a full update request, which means that if any queue where the user is an agent is not mentioned in request, then the user is automatically removed from this queue.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="userCallQueues"></param>
        /// <returns>UserCallQueues</returns>
        public UserCallQueues UpdateUserCallQueues (string accountId, string extensionId, UserCallQueues userCallQueues)
        {
             ApiResponse<UserCallQueues> localVarResponse = UpdateUserCallQueuesWithHttpInfo(accountId, extensionId, userCallQueues);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update User Call Queues Updates the list of call queues where the user is an agent. This is a full update request, which means that if any queue where the user is an agent is not mentioned in request, then the user is automatically removed from this queue.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="userCallQueues"></param>
        /// <returns>ApiResponse of UserCallQueues</returns>
        public ApiResponse<UserCallQueues> UpdateUserCallQueuesWithHttpInfo (string accountId, string extensionId, UserCallQueues userCallQueues)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallQueuesApi->UpdateUserCallQueues");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallQueuesApi->UpdateUserCallQueues");
            // verify the required parameter 'userCallQueues' is set
            if (userCallQueues == null)
                throw new ApiException(400, "Missing required parameter 'userCallQueues' when calling CallQueuesApi->UpdateUserCallQueues");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/call-queues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (userCallQueues != null && userCallQueues.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(userCallQueues); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userCallQueues; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserCallQueues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCallQueues>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserCallQueues) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCallQueues)));
        }

        /// <summary>
        /// Update User Call Queues Updates the list of call queues where the user is an agent. This is a full update request, which means that if any queue where the user is an agent is not mentioned in request, then the user is automatically removed from this queue.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="userCallQueues"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserCallQueues</returns>
        public async System.Threading.Tasks.Task<UserCallQueues> UpdateUserCallQueuesAsync (string accountId, string extensionId, UserCallQueues userCallQueues, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UserCallQueues> localVarResponse = await UpdateUserCallQueuesWithHttpInfoAsync(accountId, extensionId, userCallQueues, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update User Call Queues Updates the list of call queues where the user is an agent. This is a full update request, which means that if any queue where the user is an agent is not mentioned in request, then the user is automatically removed from this queue.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="userCallQueues"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserCallQueues)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserCallQueues>> UpdateUserCallQueuesWithHttpInfoAsync (string accountId, string extensionId, UserCallQueues userCallQueues, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallQueuesApi->UpdateUserCallQueues");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallQueuesApi->UpdateUserCallQueues");
            // verify the required parameter 'userCallQueues' is set
            if (userCallQueues == null)
                throw new ApiException(400, "Missing required parameter 'userCallQueues' when calling CallQueuesApi->UpdateUserCallQueues");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/call-queues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (userCallQueues != null && userCallQueues.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(userCallQueues); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userCallQueues; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserCallQueues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCallQueues>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserCallQueues) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCallQueues)));
        }

    }
}
