/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIVRApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create IVR Menu
        /// </summary>
        /// <remarks>
        /// Creates a company IVR menu.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="iVRMenuInfo">JSON body</param>
        /// <returns>IVRMenuInfo</returns>
        IVRMenuInfo CreateIVRMenu (string accountId, IVRMenuInfo iVRMenuInfo);

        /// <summary>
        /// Create IVR Menu
        /// </summary>
        /// <remarks>
        /// Creates a company IVR menu.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="iVRMenuInfo">JSON body</param>
        /// <returns>ApiResponse of IVRMenuInfo</returns>
        ApiResponse<IVRMenuInfo> CreateIVRMenuWithHttpInfo (string accountId, IVRMenuInfo iVRMenuInfo);
        /// <summary>
        /// Create IVR Prompts
        /// </summary>
        /// <remarks>
        /// Creates an IVR prompt.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="attachment">Audio file that will be used as a prompt. Attachment cannot be empty, only audio files are supported</param>
        /// <param name="name">Description of file contents. (optional)</param>
        /// <returns>PromptInfo</returns>
        PromptInfo CreateIVRPrompt (string accountId, System.IO.Stream attachment, string name = default(string));

        /// <summary>
        /// Create IVR Prompts
        /// </summary>
        /// <remarks>
        /// Creates an IVR prompt.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="attachment">Audio file that will be used as a prompt. Attachment cannot be empty, only audio files are supported</param>
        /// <param name="name">Description of file contents. (optional)</param>
        /// <returns>ApiResponse of PromptInfo</returns>
        ApiResponse<PromptInfo> CreateIVRPromptWithHttpInfo (string accountId, System.IO.Stream attachment, string name = default(string));
        /// <summary>
        /// Delete IVR Prompt
        /// </summary>
        /// <remarks>
        /// Deletes an IVR prompt by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="promptId"></param>
        /// <returns></returns>
        void DeleteIVRPrompt (string accountId, string promptId);

        /// <summary>
        /// Delete IVR Prompt
        /// </summary>
        /// <remarks>
        /// Deletes an IVR prompt by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="promptId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIVRPromptWithHttpInfo (string accountId, string promptId);
        /// <summary>
        /// Get IVR Prompt List
        /// </summary>
        /// <remarks>
        /// Returns the list of IVR prompts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>IVRPrompts</returns>
        IVRPrompts ListIVRPrompts (string accountId);

        /// <summary>
        /// Get IVR Prompt List
        /// </summary>
        /// <remarks>
        /// Returns the list of IVR prompts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of IVRPrompts</returns>
        ApiResponse<IVRPrompts> ListIVRPromptsWithHttpInfo (string accountId);
        /// <summary>
        /// Get IVR Menu
        /// </summary>
        /// <remarks>
        /// Returns a company IVR menu by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="ivrMenuId"></param>
        /// <returns>IVRMenuInfo</returns>
        IVRMenuInfo ReadIVRMenu (string accountId, string ivrMenuId);

        /// <summary>
        /// Get IVR Menu
        /// </summary>
        /// <remarks>
        /// Returns a company IVR menu by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="ivrMenuId"></param>
        /// <returns>ApiResponse of IVRMenuInfo</returns>
        ApiResponse<IVRMenuInfo> ReadIVRMenuWithHttpInfo (string accountId, string ivrMenuId);
        /// <summary>
        /// Get IVR Prompt
        /// </summary>
        /// <remarks>
        /// Returns an IVR prompt by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="promptId"></param>
        /// <returns>PromptInfo</returns>
        PromptInfo ReadIVRPrompt (string accountId, string promptId);

        /// <summary>
        /// Get IVR Prompt
        /// </summary>
        /// <remarks>
        /// Returns an IVR prompt by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="promptId"></param>
        /// <returns>ApiResponse of PromptInfo</returns>
        ApiResponse<PromptInfo> ReadIVRPromptWithHttpInfo (string accountId, string promptId);
        /// <summary>
        /// Get IVR Prompt Content
        /// </summary>
        /// <remarks>
        /// Returns media content of an IVR prompt by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="promptId"></param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream ReadIVRPromptContent (string accountId, string promptId);

        /// <summary>
        /// Get IVR Prompt Content
        /// </summary>
        /// <remarks>
        /// Returns media content of an IVR prompt by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="promptId"></param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> ReadIVRPromptContentWithHttpInfo (string accountId, string promptId);
        /// <summary>
        /// Update IVR Menu
        /// </summary>
        /// <remarks>
        /// Updates a company IVR menu by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="ivrMenuId"></param>
        /// <param name="iVRMenuInfo">JSON body</param>
        /// <returns>IVRMenuInfo</returns>
        IVRMenuInfo UpdateIVRMenu (string accountId, string ivrMenuId, IVRMenuInfo iVRMenuInfo);

        /// <summary>
        /// Update IVR Menu
        /// </summary>
        /// <remarks>
        /// Updates a company IVR menu by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="ivrMenuId"></param>
        /// <param name="iVRMenuInfo">JSON body</param>
        /// <returns>ApiResponse of IVRMenuInfo</returns>
        ApiResponse<IVRMenuInfo> UpdateIVRMenuWithHttpInfo (string accountId, string ivrMenuId, IVRMenuInfo iVRMenuInfo);
        /// <summary>
        /// Update IVR Prompt
        /// </summary>
        /// <remarks>
        /// Updates an IVR prompt by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="promptId"></param>
        /// <param name="updateIVRPromptRequest">JSON body (optional)</param>
        /// <returns>PromptInfo</returns>
        PromptInfo UpdateIVRPrompt (string accountId, string promptId, UpdateIVRPromptRequest updateIVRPromptRequest = default(UpdateIVRPromptRequest));

        /// <summary>
        /// Update IVR Prompt
        /// </summary>
        /// <remarks>
        /// Updates an IVR prompt by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="promptId"></param>
        /// <param name="updateIVRPromptRequest">JSON body (optional)</param>
        /// <returns>ApiResponse of PromptInfo</returns>
        ApiResponse<PromptInfo> UpdateIVRPromptWithHttpInfo (string accountId, string promptId, UpdateIVRPromptRequest updateIVRPromptRequest = default(UpdateIVRPromptRequest));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create IVR Menu
        /// </summary>
        /// <remarks>
        /// Creates a company IVR menu.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="iVRMenuInfo">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of IVRMenuInfo</returns>
        System.Threading.Tasks.Task<IVRMenuInfo> CreateIVRMenuAsync (string accountId, IVRMenuInfo iVRMenuInfo, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create IVR Menu
        /// </summary>
        /// <remarks>
        /// Creates a company IVR menu.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="iVRMenuInfo">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (IVRMenuInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<IVRMenuInfo>> CreateIVRMenuWithHttpInfoAsync (string accountId, IVRMenuInfo iVRMenuInfo, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create IVR Prompts
        /// </summary>
        /// <remarks>
        /// Creates an IVR prompt.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="attachment">Audio file that will be used as a prompt. Attachment cannot be empty, only audio files are supported</param>
        /// <param name="name">Description of file contents. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PromptInfo</returns>
        System.Threading.Tasks.Task<PromptInfo> CreateIVRPromptAsync (string accountId, System.IO.Stream attachment, string name = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create IVR Prompts
        /// </summary>
        /// <remarks>
        /// Creates an IVR prompt.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="attachment">Audio file that will be used as a prompt. Attachment cannot be empty, only audio files are supported</param>
        /// <param name="name">Description of file contents. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PromptInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<PromptInfo>> CreateIVRPromptWithHttpInfoAsync (string accountId, System.IO.Stream attachment, string name = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete IVR Prompt
        /// </summary>
        /// <remarks>
        /// Deletes an IVR prompt by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="promptId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteIVRPromptAsync (string accountId, string promptId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete IVR Prompt
        /// </summary>
        /// <remarks>
        /// Deletes an IVR prompt by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="promptId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteIVRPromptWithHttpInfoAsync (string accountId, string promptId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get IVR Prompt List
        /// </summary>
        /// <remarks>
        /// Returns the list of IVR prompts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of IVRPrompts</returns>
        System.Threading.Tasks.Task<IVRPrompts> ListIVRPromptsAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get IVR Prompt List
        /// </summary>
        /// <remarks>
        /// Returns the list of IVR prompts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (IVRPrompts)</returns>
        System.Threading.Tasks.Task<ApiResponse<IVRPrompts>> ListIVRPromptsWithHttpInfoAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get IVR Menu
        /// </summary>
        /// <remarks>
        /// Returns a company IVR menu by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="ivrMenuId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of IVRMenuInfo</returns>
        System.Threading.Tasks.Task<IVRMenuInfo> ReadIVRMenuAsync (string accountId, string ivrMenuId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get IVR Menu
        /// </summary>
        /// <remarks>
        /// Returns a company IVR menu by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="ivrMenuId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (IVRMenuInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<IVRMenuInfo>> ReadIVRMenuWithHttpInfoAsync (string accountId, string ivrMenuId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get IVR Prompt
        /// </summary>
        /// <remarks>
        /// Returns an IVR prompt by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="promptId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PromptInfo</returns>
        System.Threading.Tasks.Task<PromptInfo> ReadIVRPromptAsync (string accountId, string promptId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get IVR Prompt
        /// </summary>
        /// <remarks>
        /// Returns an IVR prompt by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="promptId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PromptInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<PromptInfo>> ReadIVRPromptWithHttpInfoAsync (string accountId, string promptId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get IVR Prompt Content
        /// </summary>
        /// <remarks>
        /// Returns media content of an IVR prompt by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="promptId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> ReadIVRPromptContentAsync (string accountId, string promptId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get IVR Prompt Content
        /// </summary>
        /// <remarks>
        /// Returns media content of an IVR prompt by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="promptId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ReadIVRPromptContentWithHttpInfoAsync (string accountId, string promptId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update IVR Menu
        /// </summary>
        /// <remarks>
        /// Updates a company IVR menu by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="ivrMenuId"></param>
        /// <param name="iVRMenuInfo">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of IVRMenuInfo</returns>
        System.Threading.Tasks.Task<IVRMenuInfo> UpdateIVRMenuAsync (string accountId, string ivrMenuId, IVRMenuInfo iVRMenuInfo, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update IVR Menu
        /// </summary>
        /// <remarks>
        /// Updates a company IVR menu by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="ivrMenuId"></param>
        /// <param name="iVRMenuInfo">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (IVRMenuInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<IVRMenuInfo>> UpdateIVRMenuWithHttpInfoAsync (string accountId, string ivrMenuId, IVRMenuInfo iVRMenuInfo, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update IVR Prompt
        /// </summary>
        /// <remarks>
        /// Updates an IVR prompt by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="promptId"></param>
        /// <param name="updateIVRPromptRequest">JSON body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PromptInfo</returns>
        System.Threading.Tasks.Task<PromptInfo> UpdateIVRPromptAsync (string accountId, string promptId, UpdateIVRPromptRequest updateIVRPromptRequest = default(UpdateIVRPromptRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update IVR Prompt
        /// </summary>
        /// <remarks>
        /// Updates an IVR prompt by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="promptId"></param>
        /// <param name="updateIVRPromptRequest">JSON body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PromptInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<PromptInfo>> UpdateIVRPromptWithHttpInfoAsync (string accountId, string promptId, UpdateIVRPromptRequest updateIVRPromptRequest = default(UpdateIVRPromptRequest), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IVRApi : IIVRApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IVRApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IVRApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IVRApi"/> class
        /// </summary>
        /// <returns></returns>
        public IVRApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IVRApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IVRApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create IVR Menu Creates a company IVR menu.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="iVRMenuInfo">JSON body</param>
        /// <returns>IVRMenuInfo</returns>
        public IVRMenuInfo CreateIVRMenu (string accountId, IVRMenuInfo iVRMenuInfo)
        {
             ApiResponse<IVRMenuInfo> localVarResponse = CreateIVRMenuWithHttpInfo(accountId, iVRMenuInfo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create IVR Menu Creates a company IVR menu.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="iVRMenuInfo">JSON body</param>
        /// <returns>ApiResponse of IVRMenuInfo</returns>
        public ApiResponse<IVRMenuInfo> CreateIVRMenuWithHttpInfo (string accountId, IVRMenuInfo iVRMenuInfo)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling IVRApi->CreateIVRMenu");
            // verify the required parameter 'iVRMenuInfo' is set
            if (iVRMenuInfo == null)
                throw new ApiException(400, "Missing required parameter 'iVRMenuInfo' when calling IVRApi->CreateIVRMenu");

            var localVarPath = "/restapi/v1.0/account/{accountId}/ivr-menus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (iVRMenuInfo != null && iVRMenuInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(iVRMenuInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = iVRMenuInfo; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIVRMenu", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IVRMenuInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IVRMenuInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IVRMenuInfo)));
        }

        /// <summary>
        /// Create IVR Menu Creates a company IVR menu.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="iVRMenuInfo">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of IVRMenuInfo</returns>
        public async System.Threading.Tasks.Task<IVRMenuInfo> CreateIVRMenuAsync (string accountId, IVRMenuInfo iVRMenuInfo, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<IVRMenuInfo> localVarResponse = await CreateIVRMenuWithHttpInfoAsync(accountId, iVRMenuInfo, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create IVR Menu Creates a company IVR menu.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="iVRMenuInfo">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (IVRMenuInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IVRMenuInfo>> CreateIVRMenuWithHttpInfoAsync (string accountId, IVRMenuInfo iVRMenuInfo, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling IVRApi->CreateIVRMenu");
            // verify the required parameter 'iVRMenuInfo' is set
            if (iVRMenuInfo == null)
                throw new ApiException(400, "Missing required parameter 'iVRMenuInfo' when calling IVRApi->CreateIVRMenu");

            var localVarPath = "/restapi/v1.0/account/{accountId}/ivr-menus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (iVRMenuInfo != null && iVRMenuInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(iVRMenuInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = iVRMenuInfo; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIVRMenu", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IVRMenuInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IVRMenuInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IVRMenuInfo)));
        }

        /// <summary>
        /// Create IVR Prompts Creates an IVR prompt.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="attachment">Audio file that will be used as a prompt. Attachment cannot be empty, only audio files are supported</param>
        /// <param name="name">Description of file contents. (optional)</param>
        /// <returns>PromptInfo</returns>
        public PromptInfo CreateIVRPrompt (string accountId, System.IO.Stream attachment, string name = default(string))
        {
             ApiResponse<PromptInfo> localVarResponse = CreateIVRPromptWithHttpInfo(accountId, attachment, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create IVR Prompts Creates an IVR prompt.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="attachment">Audio file that will be used as a prompt. Attachment cannot be empty, only audio files are supported</param>
        /// <param name="name">Description of file contents. (optional)</param>
        /// <returns>ApiResponse of PromptInfo</returns>
        public ApiResponse<PromptInfo> CreateIVRPromptWithHttpInfo (string accountId, System.IO.Stream attachment, string name = default(string))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling IVRApi->CreateIVRPrompt");
            // verify the required parameter 'attachment' is set
            if (attachment == null)
                throw new ApiException(400, "Missing required parameter 'attachment' when calling IVRApi->CreateIVRPrompt");

            var localVarPath = "/restapi/v1.0/account/{accountId}/ivr-prompts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (attachment != null) localVarFileParams.Add("attachment", this.Configuration.ApiClient.ParameterToFile("attachment", attachment));
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIVRPrompt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PromptInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PromptInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PromptInfo)));
        }

        /// <summary>
        /// Create IVR Prompts Creates an IVR prompt.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="attachment">Audio file that will be used as a prompt. Attachment cannot be empty, only audio files are supported</param>
        /// <param name="name">Description of file contents. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PromptInfo</returns>
        public async System.Threading.Tasks.Task<PromptInfo> CreateIVRPromptAsync (string accountId, System.IO.Stream attachment, string name = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PromptInfo> localVarResponse = await CreateIVRPromptWithHttpInfoAsync(accountId, attachment, name, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create IVR Prompts Creates an IVR prompt.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="attachment">Audio file that will be used as a prompt. Attachment cannot be empty, only audio files are supported</param>
        /// <param name="name">Description of file contents. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PromptInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PromptInfo>> CreateIVRPromptWithHttpInfoAsync (string accountId, System.IO.Stream attachment, string name = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling IVRApi->CreateIVRPrompt");
            // verify the required parameter 'attachment' is set
            if (attachment == null)
                throw new ApiException(400, "Missing required parameter 'attachment' when calling IVRApi->CreateIVRPrompt");

            var localVarPath = "/restapi/v1.0/account/{accountId}/ivr-prompts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (attachment != null) localVarFileParams.Add("attachment", this.Configuration.ApiClient.ParameterToFile("attachment", attachment));
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIVRPrompt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PromptInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PromptInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PromptInfo)));
        }

        /// <summary>
        /// Delete IVR Prompt Deletes an IVR prompt by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="promptId"></param>
        /// <returns></returns>
        public void DeleteIVRPrompt (string accountId, string promptId)
        {
             DeleteIVRPromptWithHttpInfo(accountId, promptId);
        }

        /// <summary>
        /// Delete IVR Prompt Deletes an IVR prompt by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="promptId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteIVRPromptWithHttpInfo (string accountId, string promptId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling IVRApi->DeleteIVRPrompt");
            // verify the required parameter 'promptId' is set
            if (promptId == null)
                throw new ApiException(400, "Missing required parameter 'promptId' when calling IVRApi->DeleteIVRPrompt");

            var localVarPath = "/restapi/v1.0/account/{accountId}/ivr-prompts/{promptId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (promptId != null) localVarPathParams.Add("promptId", this.Configuration.ApiClient.ParameterToString(promptId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteIVRPrompt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete IVR Prompt Deletes an IVR prompt by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="promptId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteIVRPromptAsync (string accountId, string promptId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteIVRPromptWithHttpInfoAsync(accountId, promptId, cancellationToken);

        }

        /// <summary>
        /// Delete IVR Prompt Deletes an IVR prompt by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="promptId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteIVRPromptWithHttpInfoAsync (string accountId, string promptId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling IVRApi->DeleteIVRPrompt");
            // verify the required parameter 'promptId' is set
            if (promptId == null)
                throw new ApiException(400, "Missing required parameter 'promptId' when calling IVRApi->DeleteIVRPrompt");

            var localVarPath = "/restapi/v1.0/account/{accountId}/ivr-prompts/{promptId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (promptId != null) localVarPathParams.Add("promptId", this.Configuration.ApiClient.ParameterToString(promptId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteIVRPrompt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get IVR Prompt List Returns the list of IVR prompts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>IVRPrompts</returns>
        public IVRPrompts ListIVRPrompts (string accountId)
        {
             ApiResponse<IVRPrompts> localVarResponse = ListIVRPromptsWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get IVR Prompt List Returns the list of IVR prompts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of IVRPrompts</returns>
        public ApiResponse<IVRPrompts> ListIVRPromptsWithHttpInfo (string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling IVRApi->ListIVRPrompts");

            var localVarPath = "/restapi/v1.0/account/{accountId}/ivr-prompts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListIVRPrompts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IVRPrompts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IVRPrompts) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IVRPrompts)));
        }

        /// <summary>
        /// Get IVR Prompt List Returns the list of IVR prompts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of IVRPrompts</returns>
        public async System.Threading.Tasks.Task<IVRPrompts> ListIVRPromptsAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<IVRPrompts> localVarResponse = await ListIVRPromptsWithHttpInfoAsync(accountId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get IVR Prompt List Returns the list of IVR prompts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (IVRPrompts)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IVRPrompts>> ListIVRPromptsWithHttpInfoAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling IVRApi->ListIVRPrompts");

            var localVarPath = "/restapi/v1.0/account/{accountId}/ivr-prompts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListIVRPrompts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IVRPrompts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IVRPrompts) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IVRPrompts)));
        }

        /// <summary>
        /// Get IVR Menu Returns a company IVR menu by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="ivrMenuId"></param>
        /// <returns>IVRMenuInfo</returns>
        public IVRMenuInfo ReadIVRMenu (string accountId, string ivrMenuId)
        {
             ApiResponse<IVRMenuInfo> localVarResponse = ReadIVRMenuWithHttpInfo(accountId, ivrMenuId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get IVR Menu Returns a company IVR menu by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="ivrMenuId"></param>
        /// <returns>ApiResponse of IVRMenuInfo</returns>
        public ApiResponse<IVRMenuInfo> ReadIVRMenuWithHttpInfo (string accountId, string ivrMenuId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling IVRApi->ReadIVRMenu");
            // verify the required parameter 'ivrMenuId' is set
            if (ivrMenuId == null)
                throw new ApiException(400, "Missing required parameter 'ivrMenuId' when calling IVRApi->ReadIVRMenu");

            var localVarPath = "/restapi/v1.0/account/{accountId}/ivr-menus/{ivrMenuId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (ivrMenuId != null) localVarPathParams.Add("ivrMenuId", this.Configuration.ApiClient.ParameterToString(ivrMenuId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadIVRMenu", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IVRMenuInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IVRMenuInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IVRMenuInfo)));
        }

        /// <summary>
        /// Get IVR Menu Returns a company IVR menu by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="ivrMenuId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of IVRMenuInfo</returns>
        public async System.Threading.Tasks.Task<IVRMenuInfo> ReadIVRMenuAsync (string accountId, string ivrMenuId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<IVRMenuInfo> localVarResponse = await ReadIVRMenuWithHttpInfoAsync(accountId, ivrMenuId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get IVR Menu Returns a company IVR menu by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="ivrMenuId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (IVRMenuInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IVRMenuInfo>> ReadIVRMenuWithHttpInfoAsync (string accountId, string ivrMenuId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling IVRApi->ReadIVRMenu");
            // verify the required parameter 'ivrMenuId' is set
            if (ivrMenuId == null)
                throw new ApiException(400, "Missing required parameter 'ivrMenuId' when calling IVRApi->ReadIVRMenu");

            var localVarPath = "/restapi/v1.0/account/{accountId}/ivr-menus/{ivrMenuId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (ivrMenuId != null) localVarPathParams.Add("ivrMenuId", this.Configuration.ApiClient.ParameterToString(ivrMenuId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadIVRMenu", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IVRMenuInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IVRMenuInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IVRMenuInfo)));
        }

        /// <summary>
        /// Get IVR Prompt Returns an IVR prompt by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="promptId"></param>
        /// <returns>PromptInfo</returns>
        public PromptInfo ReadIVRPrompt (string accountId, string promptId)
        {
             ApiResponse<PromptInfo> localVarResponse = ReadIVRPromptWithHttpInfo(accountId, promptId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get IVR Prompt Returns an IVR prompt by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="promptId"></param>
        /// <returns>ApiResponse of PromptInfo</returns>
        public ApiResponse<PromptInfo> ReadIVRPromptWithHttpInfo (string accountId, string promptId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling IVRApi->ReadIVRPrompt");
            // verify the required parameter 'promptId' is set
            if (promptId == null)
                throw new ApiException(400, "Missing required parameter 'promptId' when calling IVRApi->ReadIVRPrompt");

            var localVarPath = "/restapi/v1.0/account/{accountId}/ivr-prompts/{promptId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (promptId != null) localVarPathParams.Add("promptId", this.Configuration.ApiClient.ParameterToString(promptId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadIVRPrompt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PromptInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PromptInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PromptInfo)));
        }

        /// <summary>
        /// Get IVR Prompt Returns an IVR prompt by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="promptId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PromptInfo</returns>
        public async System.Threading.Tasks.Task<PromptInfo> ReadIVRPromptAsync (string accountId, string promptId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PromptInfo> localVarResponse = await ReadIVRPromptWithHttpInfoAsync(accountId, promptId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get IVR Prompt Returns an IVR prompt by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="promptId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PromptInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PromptInfo>> ReadIVRPromptWithHttpInfoAsync (string accountId, string promptId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling IVRApi->ReadIVRPrompt");
            // verify the required parameter 'promptId' is set
            if (promptId == null)
                throw new ApiException(400, "Missing required parameter 'promptId' when calling IVRApi->ReadIVRPrompt");

            var localVarPath = "/restapi/v1.0/account/{accountId}/ivr-prompts/{promptId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (promptId != null) localVarPathParams.Add("promptId", this.Configuration.ApiClient.ParameterToString(promptId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadIVRPrompt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PromptInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PromptInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PromptInfo)));
        }

        /// <summary>
        /// Get IVR Prompt Content Returns media content of an IVR prompt by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="promptId"></param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream ReadIVRPromptContent (string accountId, string promptId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = ReadIVRPromptContentWithHttpInfo(accountId, promptId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get IVR Prompt Content Returns media content of an IVR prompt by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="promptId"></param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> ReadIVRPromptContentWithHttpInfo (string accountId, string promptId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling IVRApi->ReadIVRPromptContent");
            // verify the required parameter 'promptId' is set
            if (promptId == null)
                throw new ApiException(400, "Missing required parameter 'promptId' when calling IVRApi->ReadIVRPromptContent");

            var localVarPath = "/restapi/v1.0/account/{accountId}/ivr-prompts/{promptId}/content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (promptId != null) localVarPathParams.Add("promptId", this.Configuration.ApiClient.ParameterToString(promptId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadIVRPromptContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get IVR Prompt Content Returns media content of an IVR prompt by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="promptId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> ReadIVRPromptContentAsync (string accountId, string promptId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await ReadIVRPromptContentWithHttpInfoAsync(accountId, promptId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get IVR Prompt Content Returns media content of an IVR prompt by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="promptId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ReadIVRPromptContentWithHttpInfoAsync (string accountId, string promptId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling IVRApi->ReadIVRPromptContent");
            // verify the required parameter 'promptId' is set
            if (promptId == null)
                throw new ApiException(400, "Missing required parameter 'promptId' when calling IVRApi->ReadIVRPromptContent");

            var localVarPath = "/restapi/v1.0/account/{accountId}/ivr-prompts/{promptId}/content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (promptId != null) localVarPathParams.Add("promptId", this.Configuration.ApiClient.ParameterToString(promptId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadIVRPromptContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Update IVR Menu Updates a company IVR menu by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="ivrMenuId"></param>
        /// <param name="iVRMenuInfo">JSON body</param>
        /// <returns>IVRMenuInfo</returns>
        public IVRMenuInfo UpdateIVRMenu (string accountId, string ivrMenuId, IVRMenuInfo iVRMenuInfo)
        {
             ApiResponse<IVRMenuInfo> localVarResponse = UpdateIVRMenuWithHttpInfo(accountId, ivrMenuId, iVRMenuInfo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update IVR Menu Updates a company IVR menu by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="ivrMenuId"></param>
        /// <param name="iVRMenuInfo">JSON body</param>
        /// <returns>ApiResponse of IVRMenuInfo</returns>
        public ApiResponse<IVRMenuInfo> UpdateIVRMenuWithHttpInfo (string accountId, string ivrMenuId, IVRMenuInfo iVRMenuInfo)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling IVRApi->UpdateIVRMenu");
            // verify the required parameter 'ivrMenuId' is set
            if (ivrMenuId == null)
                throw new ApiException(400, "Missing required parameter 'ivrMenuId' when calling IVRApi->UpdateIVRMenu");
            // verify the required parameter 'iVRMenuInfo' is set
            if (iVRMenuInfo == null)
                throw new ApiException(400, "Missing required parameter 'iVRMenuInfo' when calling IVRApi->UpdateIVRMenu");

            var localVarPath = "/restapi/v1.0/account/{accountId}/ivr-menus/{ivrMenuId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (ivrMenuId != null) localVarPathParams.Add("ivrMenuId", this.Configuration.ApiClient.ParameterToString(ivrMenuId)); // path parameter
            if (iVRMenuInfo != null && iVRMenuInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(iVRMenuInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = iVRMenuInfo; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateIVRMenu", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IVRMenuInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IVRMenuInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IVRMenuInfo)));
        }

        /// <summary>
        /// Update IVR Menu Updates a company IVR menu by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="ivrMenuId"></param>
        /// <param name="iVRMenuInfo">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of IVRMenuInfo</returns>
        public async System.Threading.Tasks.Task<IVRMenuInfo> UpdateIVRMenuAsync (string accountId, string ivrMenuId, IVRMenuInfo iVRMenuInfo, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<IVRMenuInfo> localVarResponse = await UpdateIVRMenuWithHttpInfoAsync(accountId, ivrMenuId, iVRMenuInfo, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update IVR Menu Updates a company IVR menu by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="ivrMenuId"></param>
        /// <param name="iVRMenuInfo">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (IVRMenuInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IVRMenuInfo>> UpdateIVRMenuWithHttpInfoAsync (string accountId, string ivrMenuId, IVRMenuInfo iVRMenuInfo, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling IVRApi->UpdateIVRMenu");
            // verify the required parameter 'ivrMenuId' is set
            if (ivrMenuId == null)
                throw new ApiException(400, "Missing required parameter 'ivrMenuId' when calling IVRApi->UpdateIVRMenu");
            // verify the required parameter 'iVRMenuInfo' is set
            if (iVRMenuInfo == null)
                throw new ApiException(400, "Missing required parameter 'iVRMenuInfo' when calling IVRApi->UpdateIVRMenu");

            var localVarPath = "/restapi/v1.0/account/{accountId}/ivr-menus/{ivrMenuId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (ivrMenuId != null) localVarPathParams.Add("ivrMenuId", this.Configuration.ApiClient.ParameterToString(ivrMenuId)); // path parameter
            if (iVRMenuInfo != null && iVRMenuInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(iVRMenuInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = iVRMenuInfo; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateIVRMenu", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IVRMenuInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IVRMenuInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IVRMenuInfo)));
        }

        /// <summary>
        /// Update IVR Prompt Updates an IVR prompt by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="promptId"></param>
        /// <param name="updateIVRPromptRequest">JSON body (optional)</param>
        /// <returns>PromptInfo</returns>
        public PromptInfo UpdateIVRPrompt (string accountId, string promptId, UpdateIVRPromptRequest updateIVRPromptRequest = default(UpdateIVRPromptRequest))
        {
             ApiResponse<PromptInfo> localVarResponse = UpdateIVRPromptWithHttpInfo(accountId, promptId, updateIVRPromptRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update IVR Prompt Updates an IVR prompt by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="promptId"></param>
        /// <param name="updateIVRPromptRequest">JSON body (optional)</param>
        /// <returns>ApiResponse of PromptInfo</returns>
        public ApiResponse<PromptInfo> UpdateIVRPromptWithHttpInfo (string accountId, string promptId, UpdateIVRPromptRequest updateIVRPromptRequest = default(UpdateIVRPromptRequest))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling IVRApi->UpdateIVRPrompt");
            // verify the required parameter 'promptId' is set
            if (promptId == null)
                throw new ApiException(400, "Missing required parameter 'promptId' when calling IVRApi->UpdateIVRPrompt");

            var localVarPath = "/restapi/v1.0/account/{accountId}/ivr-prompts/{promptId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (promptId != null) localVarPathParams.Add("promptId", this.Configuration.ApiClient.ParameterToString(promptId)); // path parameter
            if (updateIVRPromptRequest != null && updateIVRPromptRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateIVRPromptRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateIVRPromptRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateIVRPrompt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PromptInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PromptInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PromptInfo)));
        }

        /// <summary>
        /// Update IVR Prompt Updates an IVR prompt by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="promptId"></param>
        /// <param name="updateIVRPromptRequest">JSON body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PromptInfo</returns>
        public async System.Threading.Tasks.Task<PromptInfo> UpdateIVRPromptAsync (string accountId, string promptId, UpdateIVRPromptRequest updateIVRPromptRequest = default(UpdateIVRPromptRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PromptInfo> localVarResponse = await UpdateIVRPromptWithHttpInfoAsync(accountId, promptId, updateIVRPromptRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update IVR Prompt Updates an IVR prompt by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="promptId"></param>
        /// <param name="updateIVRPromptRequest">JSON body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PromptInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PromptInfo>> UpdateIVRPromptWithHttpInfoAsync (string accountId, string promptId, UpdateIVRPromptRequest updateIVRPromptRequest = default(UpdateIVRPromptRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling IVRApi->UpdateIVRPrompt");
            // verify the required parameter 'promptId' is set
            if (promptId == null)
                throw new ApiException(400, "Missing required parameter 'promptId' when calling IVRApi->UpdateIVRPrompt");

            var localVarPath = "/restapi/v1.0/account/{accountId}/ivr-prompts/{promptId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (promptId != null) localVarPathParams.Add("promptId", this.Configuration.ApiClient.ParameterToString(promptId)); // path parameter
            if (updateIVRPromptRequest != null && updateIVRPromptRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateIVRPromptRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateIVRPromptRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateIVRPrompt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PromptInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PromptInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PromptInfo)));
        }

    }
}
