/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICallLogApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete User Call Log
        /// </summary>
        /// <remarks>
        /// Deletes filtered call log records.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="dateTo">The end datetime for records deletion in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601]  format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <returns></returns>
        void DeleteUserCallLog (string accountId, string extensionId, DateTime? dateTo = default(DateTime?));

        /// <summary>
        /// Delete User Call Log
        /// </summary>
        /// <remarks>
        /// Deletes filtered call log records.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="dateTo">The end datetime for records deletion in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601]  format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserCallLogWithHttpInfo (string accountId, string extensionId, DateTime? dateTo = default(DateTime?));
        /// <summary>
        /// Get Company Active Calls
        /// </summary>
        /// <remarks>
        /// Returns records of all calls that are in progress, ordered by start time in descending order.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="direction">The direction for the result records. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="type">Call type of a record. If not specified, all call types are returned. Multiple values are accepted (optional)</param>
        /// <param name="transport">Call transport type. &#39;PSTN&#39; specifies that a call leg is initiated from the PSTN network provider; &#39;VoIP&#39; - from an RC phone. By default this filter is disabled (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <returns>CompanyActiveCallsResponse</returns>
        CompanyActiveCallsResponse ListCompanyActiveCalls (string accountId, List<string> direction = default(List<string>), string view = default(string), List<string> type = default(List<string>), List<string> transport = default(List<string>), int? page = default(int?), int? perPage = default(int?));

        /// <summary>
        /// Get Company Active Calls
        /// </summary>
        /// <remarks>
        /// Returns records of all calls that are in progress, ordered by start time in descending order.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="direction">The direction for the result records. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="type">Call type of a record. If not specified, all call types are returned. Multiple values are accepted (optional)</param>
        /// <param name="transport">Call transport type. &#39;PSTN&#39; specifies that a call leg is initiated from the PSTN network provider; &#39;VoIP&#39; - from an RC phone. By default this filter is disabled (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <returns>ApiResponse of CompanyActiveCallsResponse</returns>
        ApiResponse<CompanyActiveCallsResponse> ListCompanyActiveCallsWithHttpInfo (string accountId, List<string> direction = default(List<string>), string view = default(string), List<string> type = default(List<string>), List<string> transport = default(List<string>), int? page = default(int?), int? perPage = default(int?));
        /// <summary>
        /// Get User Active Calls
        /// </summary>
        /// <remarks>
        /// Returns records of all extension calls that are in progress, ordered by start time in descending order.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="direction">The direction for the result records. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="type">Call type of a record. If not specified, all call types are returned. Multiple values are accepted (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <returns>UserActiveCallsResponse</returns>
        UserActiveCallsResponse ListExtensionActiveCalls (string accountId, string extensionId, List<string> direction = default(List<string>), string view = default(string), List<string> type = default(List<string>), int? page = default(int?), int? perPage = default(int?));

        /// <summary>
        /// Get User Active Calls
        /// </summary>
        /// <remarks>
        /// Returns records of all extension calls that are in progress, ordered by start time in descending order.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="direction">The direction for the result records. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="type">Call type of a record. If not specified, all call types are returned. Multiple values are accepted (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <returns>ApiResponse of UserActiveCallsResponse</returns>
        ApiResponse<UserActiveCallsResponse> ListExtensionActiveCallsWithHttpInfo (string accountId, string extensionId, List<string> direction = default(List<string>), string view = default(string), List<string> type = default(List<string>), int? page = default(int?), int? perPage = default(int?));
        /// <summary>
        /// Get Company Call Log Records
        /// </summary>
        /// <remarks>
        /// Returns call log records filtered by parameters specified.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionNumber">Extension number of a user. If specified, returns call log for a particular extension only (optional)</param>
        /// <param name="phoneNumber">Phone number of a caller/callee in e.164 format without a plus sign &#39;+&#39;. If specified, all incoming and outgoing calls with this phone number are returned. Cannot be specified together with the &#x60;extensionNumber&#x60; filter (optional)</param>
        /// <param name="direction">The direction for the result records. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)</param>
        /// <param name="type">Call type of a record. If not specified, all call types are returned. Multiple values are accepted (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="withRecording">**Deprecated**. Supported for compatibility reasons only. &#x60;true&#x60; if only recorded calls are returned. The default value is &#x60;false&#x60;. If both &#x60;withRecording&#x60; and &#x60;recordingType&#x60; are specified, &#x60;withRecording&#x60; is ignored (optional)</param>
        /// <param name="recordingType">Type of a call recording. If not specified, then calls without recordings are also returned (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601]  format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)</param>
        /// <param name="dateTo">The end datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601]  format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="sessionId">Internal identifier of a call session (optional)</param>
        /// <returns>AccountCallLogResponse</returns>
        AccountCallLogResponse ReadCompanyCallLog (string accountId, string extensionNumber = default(string), string phoneNumber = default(string), List<string> direction = default(List<string>), List<string> type = default(List<string>), string view = default(string), bool? withRecording = default(bool?), string recordingType = default(string), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), int? page = default(int?), int? perPage = default(int?), string sessionId = default(string));

        /// <summary>
        /// Get Company Call Log Records
        /// </summary>
        /// <remarks>
        /// Returns call log records filtered by parameters specified.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionNumber">Extension number of a user. If specified, returns call log for a particular extension only (optional)</param>
        /// <param name="phoneNumber">Phone number of a caller/callee in e.164 format without a plus sign &#39;+&#39;. If specified, all incoming and outgoing calls with this phone number are returned. Cannot be specified together with the &#x60;extensionNumber&#x60; filter (optional)</param>
        /// <param name="direction">The direction for the result records. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)</param>
        /// <param name="type">Call type of a record. If not specified, all call types are returned. Multiple values are accepted (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="withRecording">**Deprecated**. Supported for compatibility reasons only. &#x60;true&#x60; if only recorded calls are returned. The default value is &#x60;false&#x60;. If both &#x60;withRecording&#x60; and &#x60;recordingType&#x60; are specified, &#x60;withRecording&#x60; is ignored (optional)</param>
        /// <param name="recordingType">Type of a call recording. If not specified, then calls without recordings are also returned (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601]  format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)</param>
        /// <param name="dateTo">The end datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601]  format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="sessionId">Internal identifier of a call session (optional)</param>
        /// <returns>ApiResponse of AccountCallLogResponse</returns>
        ApiResponse<AccountCallLogResponse> ReadCompanyCallLogWithHttpInfo (string accountId, string extensionNumber = default(string), string phoneNumber = default(string), List<string> direction = default(List<string>), List<string> type = default(List<string>), string view = default(string), bool? withRecording = default(bool?), string recordingType = default(string), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), int? page = default(int?), int? perPage = default(int?), string sessionId = default(string));
        /// <summary>
        /// Get Company Call Log Record(s)
        /// </summary>
        /// <remarks>
        /// Returns individual call log record(s) by ID(s). Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="callRecordId">Internal identifier of a call log record</param>
        /// <param name="view">View of call records. The view value specified for &#39;FSync&#39; will also be applied for &#39;ISync&#39; by default, since it cannot be changed for ISync (optional, default to Simple)</param>
        /// <returns>CompanyCallLogRecord</returns>
        CompanyCallLogRecord ReadCompanyCallRecord (string accountId, string callRecordId, string view = default(string));

        /// <summary>
        /// Get Company Call Log Record(s)
        /// </summary>
        /// <remarks>
        /// Returns individual call log record(s) by ID(s). Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="callRecordId">Internal identifier of a call log record</param>
        /// <param name="view">View of call records. The view value specified for &#39;FSync&#39; will also be applied for &#39;ISync&#39; by default, since it cannot be changed for ISync (optional, default to Simple)</param>
        /// <returns>ApiResponse of CompanyCallLogRecord</returns>
        ApiResponse<CompanyCallLogRecord> ReadCompanyCallRecordWithHttpInfo (string accountId, string callRecordId, string view = default(string));
        /// <summary>
        /// Get User Call Log Records
        /// </summary>
        /// <remarks>
        /// Returns call log records filtered by parameters specified.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="extensionNumber">Extension number of a user. If specified, returns call log for a particular extension only (optional)</param>
        /// <param name="showBlocked">If &#39;True&#39; then calls from/to blocked numbers are returned (optional, default to true)</param>
        /// <param name="phoneNumber">Phone number of a caller/callee in e.164 format without a plus sign &#39;+&#39;. If specified, all incoming and outgoing calls with this phone number are returned (optional)</param>
        /// <param name="direction">The direction for the resulting records. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)</param>
        /// <param name="sessionId">Internal identifier of a session (optional)</param>
        /// <param name="type">Call type of a record. It is allowed to specify more than one type. If not specified, all call types are returned. Multiple values are accepted (optional)</param>
        /// <param name="transport">Call transport type. &#39;PSTN&#39; specifies that a call leg is initiated from the PSTN network provider; &#39;VoIP&#39; - from an RC phone. By default this filter is disabled (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="withRecording">**Deprecated**. Supported for compatibility reasons. &#x60;True&#x60; if only recorded calls are returned. If both &#x60;withRecording&#x60; and &#x60;recordingType&#x60; are specified, then &#x60;withRecording&#x60; is ignored (optional, default to false)</param>
        /// <param name="recordingType">Type of a call recording. If not specified, then calls without recordings are also returned (optional)</param>
        /// <param name="dateTo">The end datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items). The default value is 100. The maximum value is 1000, for detailed call log - 250 (optional, default to 100)</param>
        /// <param name="showDeleted">If &#39;True&#39; then deleted calls are returned (optional, default to false)</param>
        /// <returns>UserCallLogResponse</returns>
        UserCallLogResponse ReadUserCallLog (string accountId, string extensionId, string extensionNumber = default(string), bool? showBlocked = default(bool?), string phoneNumber = default(string), List<string> direction = default(List<string>), string sessionId = default(string), List<string> type = default(List<string>), List<string> transport = default(List<string>), string view = default(string), bool? withRecording = default(bool?), string recordingType = default(string), DateTime? dateTo = default(DateTime?), DateTime? dateFrom = default(DateTime?), int? page = default(int?), int? perPage = default(int?), bool? showDeleted = default(bool?));

        /// <summary>
        /// Get User Call Log Records
        /// </summary>
        /// <remarks>
        /// Returns call log records filtered by parameters specified.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="extensionNumber">Extension number of a user. If specified, returns call log for a particular extension only (optional)</param>
        /// <param name="showBlocked">If &#39;True&#39; then calls from/to blocked numbers are returned (optional, default to true)</param>
        /// <param name="phoneNumber">Phone number of a caller/callee in e.164 format without a plus sign &#39;+&#39;. If specified, all incoming and outgoing calls with this phone number are returned (optional)</param>
        /// <param name="direction">The direction for the resulting records. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)</param>
        /// <param name="sessionId">Internal identifier of a session (optional)</param>
        /// <param name="type">Call type of a record. It is allowed to specify more than one type. If not specified, all call types are returned. Multiple values are accepted (optional)</param>
        /// <param name="transport">Call transport type. &#39;PSTN&#39; specifies that a call leg is initiated from the PSTN network provider; &#39;VoIP&#39; - from an RC phone. By default this filter is disabled (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="withRecording">**Deprecated**. Supported for compatibility reasons. &#x60;True&#x60; if only recorded calls are returned. If both &#x60;withRecording&#x60; and &#x60;recordingType&#x60; are specified, then &#x60;withRecording&#x60; is ignored (optional, default to false)</param>
        /// <param name="recordingType">Type of a call recording. If not specified, then calls without recordings are also returned (optional)</param>
        /// <param name="dateTo">The end datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items). The default value is 100. The maximum value is 1000, for detailed call log - 250 (optional, default to 100)</param>
        /// <param name="showDeleted">If &#39;True&#39; then deleted calls are returned (optional, default to false)</param>
        /// <returns>ApiResponse of UserCallLogResponse</returns>
        ApiResponse<UserCallLogResponse> ReadUserCallLogWithHttpInfo (string accountId, string extensionId, string extensionNumber = default(string), bool? showBlocked = default(bool?), string phoneNumber = default(string), List<string> direction = default(List<string>), string sessionId = default(string), List<string> type = default(List<string>), List<string> transport = default(List<string>), string view = default(string), bool? withRecording = default(bool?), string recordingType = default(string), DateTime? dateTo = default(DateTime?), DateTime? dateFrom = default(DateTime?), int? page = default(int?), int? perPage = default(int?), bool? showDeleted = default(bool?));
        /// <summary>
        /// Get User Call Record
        /// </summary>
        /// <remarks>
        /// Returns call log records by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRecordId"></param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="view">View of call records. The view value specified for &#39;FSync&#39; will also be applied for &#39;ISync&#39; by default, since it cannot be changed for ISync (optional, default to Simple)</param>
        /// <returns>UserCallLogRecord</returns>
        UserCallLogRecord ReadUserCallRecord (List<string> callRecordId, string extensionId, string accountId, string view = default(string));

        /// <summary>
        /// Get User Call Record
        /// </summary>
        /// <remarks>
        /// Returns call log records by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRecordId"></param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="view">View of call records. The view value specified for &#39;FSync&#39; will also be applied for &#39;ISync&#39; by default, since it cannot be changed for ISync (optional, default to Simple)</param>
        /// <returns>ApiResponse of UserCallLogRecord</returns>
        ApiResponse<UserCallLogRecord> ReadUserCallRecordWithHttpInfo (List<string> callRecordId, string extensionId, string accountId, string view = default(string));
        /// <summary>
        /// Sync Company Call Log
        /// </summary>
        /// <remarks>
        /// Synchronizes company call log records.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="syncType">Type of synchronization. (optional, default to FSync)</param>
        /// <param name="syncToken">Value of syncToken property of last sync request response (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601]  format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is the current moment (optional)</param>
        /// <param name="recordCount">For &#39;FSync&#39; the parameter is mandatory, it limits the number of records to be returned in response. For &#39;ISync&#39; it specifies with how many records to extend sync frame to the past, the maximum number of records is 250 (optional)</param>
        /// <param name="statusGroup">Type of calls to be returned. (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="showDeleted">Supported for ISync. If &#39;True&#39; then deleted call records are returned (optional, default to false)</param>
        /// <returns>AccountCallLogSyncResponse</returns>
        AccountCallLogSyncResponse SyncAccountCallLog (string accountId, string syncType = default(string), string syncToken = default(string), DateTime? dateFrom = default(DateTime?), int? recordCount = default(int?), List<string> statusGroup = default(List<string>), string view = default(string), bool? showDeleted = default(bool?));

        /// <summary>
        /// Sync Company Call Log
        /// </summary>
        /// <remarks>
        /// Synchronizes company call log records.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="syncType">Type of synchronization. (optional, default to FSync)</param>
        /// <param name="syncToken">Value of syncToken property of last sync request response (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601]  format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is the current moment (optional)</param>
        /// <param name="recordCount">For &#39;FSync&#39; the parameter is mandatory, it limits the number of records to be returned in response. For &#39;ISync&#39; it specifies with how many records to extend sync frame to the past, the maximum number of records is 250 (optional)</param>
        /// <param name="statusGroup">Type of calls to be returned. (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="showDeleted">Supported for ISync. If &#39;True&#39; then deleted call records are returned (optional, default to false)</param>
        /// <returns>ApiResponse of AccountCallLogSyncResponse</returns>
        ApiResponse<AccountCallLogSyncResponse> SyncAccountCallLogWithHttpInfo (string accountId, string syncType = default(string), string syncToken = default(string), DateTime? dateFrom = default(DateTime?), int? recordCount = default(int?), List<string> statusGroup = default(List<string>), string view = default(string), bool? showDeleted = default(bool?));
        /// <summary>
        /// Sync User Call Log
        /// </summary>
        /// <remarks>
        /// Synchronizes call log records.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="syncType">Type of synchronization (optional, default to FSync)</param>
        /// <param name="syncToken">Value of syncToken property of last sync request response (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is the current moment (optional)</param>
        /// <param name="recordCount">For &#39;FSync&#39; the parameter is mandatory, it limits the number of records to be returned in response. For &#39;ISync&#39; it specifies with how many records to extend sync Frame to the past, the maximum number of records is 250 (optional)</param>
        /// <param name="statusGroup">Type of calls to be returned. The default value is &#39;All&#39; (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="showDeleted">Supported for ISync. If &#39;True&#39; then deleted call records are returned (optional, default to false)</param>
        /// <returns>CallLogSync</returns>
        CallLogSync SyncUserCallLog (string accountId, string extensionId, string syncType = default(string), string syncToken = default(string), DateTime? dateFrom = default(DateTime?), int? recordCount = default(int?), List<string> statusGroup = default(List<string>), string view = default(string), bool? showDeleted = default(bool?));

        /// <summary>
        /// Sync User Call Log
        /// </summary>
        /// <remarks>
        /// Synchronizes call log records.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="syncType">Type of synchronization (optional, default to FSync)</param>
        /// <param name="syncToken">Value of syncToken property of last sync request response (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is the current moment (optional)</param>
        /// <param name="recordCount">For &#39;FSync&#39; the parameter is mandatory, it limits the number of records to be returned in response. For &#39;ISync&#39; it specifies with how many records to extend sync Frame to the past, the maximum number of records is 250 (optional)</param>
        /// <param name="statusGroup">Type of calls to be returned. The default value is &#39;All&#39; (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="showDeleted">Supported for ISync. If &#39;True&#39; then deleted call records are returned (optional, default to false)</param>
        /// <returns>ApiResponse of CallLogSync</returns>
        ApiResponse<CallLogSync> SyncUserCallLogWithHttpInfo (string accountId, string extensionId, string syncType = default(string), string syncToken = default(string), DateTime? dateFrom = default(DateTime?), int? recordCount = default(int?), List<string> statusGroup = default(List<string>), string view = default(string), bool? showDeleted = default(bool?));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete User Call Log
        /// </summary>
        /// <remarks>
        /// Deletes filtered call log records.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="dateTo">The end datetime for records deletion in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601]  format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserCallLogAsync (string accountId, string extensionId, DateTime? dateTo = default(DateTime?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete User Call Log
        /// </summary>
        /// <remarks>
        /// Deletes filtered call log records.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="dateTo">The end datetime for records deletion in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601]  format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserCallLogWithHttpInfoAsync (string accountId, string extensionId, DateTime? dateTo = default(DateTime?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Company Active Calls
        /// </summary>
        /// <remarks>
        /// Returns records of all calls that are in progress, ordered by start time in descending order.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="direction">The direction for the result records. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="type">Call type of a record. If not specified, all call types are returned. Multiple values are accepted (optional)</param>
        /// <param name="transport">Call transport type. &#39;PSTN&#39; specifies that a call leg is initiated from the PSTN network provider; &#39;VoIP&#39; - from an RC phone. By default this filter is disabled (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CompanyActiveCallsResponse</returns>
        System.Threading.Tasks.Task<CompanyActiveCallsResponse> ListCompanyActiveCallsAsync (string accountId, List<string> direction = default(List<string>), string view = default(string), List<string> type = default(List<string>), List<string> transport = default(List<string>), int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Company Active Calls
        /// </summary>
        /// <remarks>
        /// Returns records of all calls that are in progress, ordered by start time in descending order.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="direction">The direction for the result records. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="type">Call type of a record. If not specified, all call types are returned. Multiple values are accepted (optional)</param>
        /// <param name="transport">Call transport type. &#39;PSTN&#39; specifies that a call leg is initiated from the PSTN network provider; &#39;VoIP&#39; - from an RC phone. By default this filter is disabled (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CompanyActiveCallsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompanyActiveCallsResponse>> ListCompanyActiveCallsWithHttpInfoAsync (string accountId, List<string> direction = default(List<string>), string view = default(string), List<string> type = default(List<string>), List<string> transport = default(List<string>), int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get User Active Calls
        /// </summary>
        /// <remarks>
        /// Returns records of all extension calls that are in progress, ordered by start time in descending order.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="direction">The direction for the result records. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="type">Call type of a record. If not specified, all call types are returned. Multiple values are accepted (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserActiveCallsResponse</returns>
        System.Threading.Tasks.Task<UserActiveCallsResponse> ListExtensionActiveCallsAsync (string accountId, string extensionId, List<string> direction = default(List<string>), string view = default(string), List<string> type = default(List<string>), int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get User Active Calls
        /// </summary>
        /// <remarks>
        /// Returns records of all extension calls that are in progress, ordered by start time in descending order.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="direction">The direction for the result records. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="type">Call type of a record. If not specified, all call types are returned. Multiple values are accepted (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserActiveCallsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserActiveCallsResponse>> ListExtensionActiveCallsWithHttpInfoAsync (string accountId, string extensionId, List<string> direction = default(List<string>), string view = default(string), List<string> type = default(List<string>), int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Company Call Log Records
        /// </summary>
        /// <remarks>
        /// Returns call log records filtered by parameters specified.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionNumber">Extension number of a user. If specified, returns call log for a particular extension only (optional)</param>
        /// <param name="phoneNumber">Phone number of a caller/callee in e.164 format without a plus sign &#39;+&#39;. If specified, all incoming and outgoing calls with this phone number are returned. Cannot be specified together with the &#x60;extensionNumber&#x60; filter (optional)</param>
        /// <param name="direction">The direction for the result records. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)</param>
        /// <param name="type">Call type of a record. If not specified, all call types are returned. Multiple values are accepted (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="withRecording">**Deprecated**. Supported for compatibility reasons only. &#x60;true&#x60; if only recorded calls are returned. The default value is &#x60;false&#x60;. If both &#x60;withRecording&#x60; and &#x60;recordingType&#x60; are specified, &#x60;withRecording&#x60; is ignored (optional)</param>
        /// <param name="recordingType">Type of a call recording. If not specified, then calls without recordings are also returned (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601]  format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)</param>
        /// <param name="dateTo">The end datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601]  format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="sessionId">Internal identifier of a call session (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AccountCallLogResponse</returns>
        System.Threading.Tasks.Task<AccountCallLogResponse> ReadCompanyCallLogAsync (string accountId, string extensionNumber = default(string), string phoneNumber = default(string), List<string> direction = default(List<string>), List<string> type = default(List<string>), string view = default(string), bool? withRecording = default(bool?), string recordingType = default(string), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), int? page = default(int?), int? perPage = default(int?), string sessionId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Company Call Log Records
        /// </summary>
        /// <remarks>
        /// Returns call log records filtered by parameters specified.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionNumber">Extension number of a user. If specified, returns call log for a particular extension only (optional)</param>
        /// <param name="phoneNumber">Phone number of a caller/callee in e.164 format without a plus sign &#39;+&#39;. If specified, all incoming and outgoing calls with this phone number are returned. Cannot be specified together with the &#x60;extensionNumber&#x60; filter (optional)</param>
        /// <param name="direction">The direction for the result records. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)</param>
        /// <param name="type">Call type of a record. If not specified, all call types are returned. Multiple values are accepted (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="withRecording">**Deprecated**. Supported for compatibility reasons only. &#x60;true&#x60; if only recorded calls are returned. The default value is &#x60;false&#x60;. If both &#x60;withRecording&#x60; and &#x60;recordingType&#x60; are specified, &#x60;withRecording&#x60; is ignored (optional)</param>
        /// <param name="recordingType">Type of a call recording. If not specified, then calls without recordings are also returned (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601]  format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)</param>
        /// <param name="dateTo">The end datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601]  format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="sessionId">Internal identifier of a call session (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AccountCallLogResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountCallLogResponse>> ReadCompanyCallLogWithHttpInfoAsync (string accountId, string extensionNumber = default(string), string phoneNumber = default(string), List<string> direction = default(List<string>), List<string> type = default(List<string>), string view = default(string), bool? withRecording = default(bool?), string recordingType = default(string), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), int? page = default(int?), int? perPage = default(int?), string sessionId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Company Call Log Record(s)
        /// </summary>
        /// <remarks>
        /// Returns individual call log record(s) by ID(s). Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="callRecordId">Internal identifier of a call log record</param>
        /// <param name="view">View of call records. The view value specified for &#39;FSync&#39; will also be applied for &#39;ISync&#39; by default, since it cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CompanyCallLogRecord</returns>
        System.Threading.Tasks.Task<CompanyCallLogRecord> ReadCompanyCallRecordAsync (string accountId, string callRecordId, string view = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Company Call Log Record(s)
        /// </summary>
        /// <remarks>
        /// Returns individual call log record(s) by ID(s). Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="callRecordId">Internal identifier of a call log record</param>
        /// <param name="view">View of call records. The view value specified for &#39;FSync&#39; will also be applied for &#39;ISync&#39; by default, since it cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CompanyCallLogRecord)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompanyCallLogRecord>> ReadCompanyCallRecordWithHttpInfoAsync (string accountId, string callRecordId, string view = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get User Call Log Records
        /// </summary>
        /// <remarks>
        /// Returns call log records filtered by parameters specified.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="extensionNumber">Extension number of a user. If specified, returns call log for a particular extension only (optional)</param>
        /// <param name="showBlocked">If &#39;True&#39; then calls from/to blocked numbers are returned (optional, default to true)</param>
        /// <param name="phoneNumber">Phone number of a caller/callee in e.164 format without a plus sign &#39;+&#39;. If specified, all incoming and outgoing calls with this phone number are returned (optional)</param>
        /// <param name="direction">The direction for the resulting records. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)</param>
        /// <param name="sessionId">Internal identifier of a session (optional)</param>
        /// <param name="type">Call type of a record. It is allowed to specify more than one type. If not specified, all call types are returned. Multiple values are accepted (optional)</param>
        /// <param name="transport">Call transport type. &#39;PSTN&#39; specifies that a call leg is initiated from the PSTN network provider; &#39;VoIP&#39; - from an RC phone. By default this filter is disabled (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="withRecording">**Deprecated**. Supported for compatibility reasons. &#x60;True&#x60; if only recorded calls are returned. If both &#x60;withRecording&#x60; and &#x60;recordingType&#x60; are specified, then &#x60;withRecording&#x60; is ignored (optional, default to false)</param>
        /// <param name="recordingType">Type of a call recording. If not specified, then calls without recordings are also returned (optional)</param>
        /// <param name="dateTo">The end datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items). The default value is 100. The maximum value is 1000, for detailed call log - 250 (optional, default to 100)</param>
        /// <param name="showDeleted">If &#39;True&#39; then deleted calls are returned (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserCallLogResponse</returns>
        System.Threading.Tasks.Task<UserCallLogResponse> ReadUserCallLogAsync (string accountId, string extensionId, string extensionNumber = default(string), bool? showBlocked = default(bool?), string phoneNumber = default(string), List<string> direction = default(List<string>), string sessionId = default(string), List<string> type = default(List<string>), List<string> transport = default(List<string>), string view = default(string), bool? withRecording = default(bool?), string recordingType = default(string), DateTime? dateTo = default(DateTime?), DateTime? dateFrom = default(DateTime?), int? page = default(int?), int? perPage = default(int?), bool? showDeleted = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get User Call Log Records
        /// </summary>
        /// <remarks>
        /// Returns call log records filtered by parameters specified.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="extensionNumber">Extension number of a user. If specified, returns call log for a particular extension only (optional)</param>
        /// <param name="showBlocked">If &#39;True&#39; then calls from/to blocked numbers are returned (optional, default to true)</param>
        /// <param name="phoneNumber">Phone number of a caller/callee in e.164 format without a plus sign &#39;+&#39;. If specified, all incoming and outgoing calls with this phone number are returned (optional)</param>
        /// <param name="direction">The direction for the resulting records. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)</param>
        /// <param name="sessionId">Internal identifier of a session (optional)</param>
        /// <param name="type">Call type of a record. It is allowed to specify more than one type. If not specified, all call types are returned. Multiple values are accepted (optional)</param>
        /// <param name="transport">Call transport type. &#39;PSTN&#39; specifies that a call leg is initiated from the PSTN network provider; &#39;VoIP&#39; - from an RC phone. By default this filter is disabled (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="withRecording">**Deprecated**. Supported for compatibility reasons. &#x60;True&#x60; if only recorded calls are returned. If both &#x60;withRecording&#x60; and &#x60;recordingType&#x60; are specified, then &#x60;withRecording&#x60; is ignored (optional, default to false)</param>
        /// <param name="recordingType">Type of a call recording. If not specified, then calls without recordings are also returned (optional)</param>
        /// <param name="dateTo">The end datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items). The default value is 100. The maximum value is 1000, for detailed call log - 250 (optional, default to 100)</param>
        /// <param name="showDeleted">If &#39;True&#39; then deleted calls are returned (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserCallLogResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserCallLogResponse>> ReadUserCallLogWithHttpInfoAsync (string accountId, string extensionId, string extensionNumber = default(string), bool? showBlocked = default(bool?), string phoneNumber = default(string), List<string> direction = default(List<string>), string sessionId = default(string), List<string> type = default(List<string>), List<string> transport = default(List<string>), string view = default(string), bool? withRecording = default(bool?), string recordingType = default(string), DateTime? dateTo = default(DateTime?), DateTime? dateFrom = default(DateTime?), int? page = default(int?), int? perPage = default(int?), bool? showDeleted = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get User Call Record
        /// </summary>
        /// <remarks>
        /// Returns call log records by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRecordId"></param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="view">View of call records. The view value specified for &#39;FSync&#39; will also be applied for &#39;ISync&#39; by default, since it cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserCallLogRecord</returns>
        System.Threading.Tasks.Task<UserCallLogRecord> ReadUserCallRecordAsync (List<string> callRecordId, string extensionId, string accountId, string view = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get User Call Record
        /// </summary>
        /// <remarks>
        /// Returns call log records by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRecordId"></param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="view">View of call records. The view value specified for &#39;FSync&#39; will also be applied for &#39;ISync&#39; by default, since it cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserCallLogRecord)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserCallLogRecord>> ReadUserCallRecordWithHttpInfoAsync (List<string> callRecordId, string extensionId, string accountId, string view = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Sync Company Call Log
        /// </summary>
        /// <remarks>
        /// Synchronizes company call log records.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="syncType">Type of synchronization. (optional, default to FSync)</param>
        /// <param name="syncToken">Value of syncToken property of last sync request response (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601]  format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is the current moment (optional)</param>
        /// <param name="recordCount">For &#39;FSync&#39; the parameter is mandatory, it limits the number of records to be returned in response. For &#39;ISync&#39; it specifies with how many records to extend sync frame to the past, the maximum number of records is 250 (optional)</param>
        /// <param name="statusGroup">Type of calls to be returned. (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="showDeleted">Supported for ISync. If &#39;True&#39; then deleted call records are returned (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AccountCallLogSyncResponse</returns>
        System.Threading.Tasks.Task<AccountCallLogSyncResponse> SyncAccountCallLogAsync (string accountId, string syncType = default(string), string syncToken = default(string), DateTime? dateFrom = default(DateTime?), int? recordCount = default(int?), List<string> statusGroup = default(List<string>), string view = default(string), bool? showDeleted = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sync Company Call Log
        /// </summary>
        /// <remarks>
        /// Synchronizes company call log records.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="syncType">Type of synchronization. (optional, default to FSync)</param>
        /// <param name="syncToken">Value of syncToken property of last sync request response (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601]  format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is the current moment (optional)</param>
        /// <param name="recordCount">For &#39;FSync&#39; the parameter is mandatory, it limits the number of records to be returned in response. For &#39;ISync&#39; it specifies with how many records to extend sync frame to the past, the maximum number of records is 250 (optional)</param>
        /// <param name="statusGroup">Type of calls to be returned. (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="showDeleted">Supported for ISync. If &#39;True&#39; then deleted call records are returned (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AccountCallLogSyncResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountCallLogSyncResponse>> SyncAccountCallLogWithHttpInfoAsync (string accountId, string syncType = default(string), string syncToken = default(string), DateTime? dateFrom = default(DateTime?), int? recordCount = default(int?), List<string> statusGroup = default(List<string>), string view = default(string), bool? showDeleted = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Sync User Call Log
        /// </summary>
        /// <remarks>
        /// Synchronizes call log records.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="syncType">Type of synchronization (optional, default to FSync)</param>
        /// <param name="syncToken">Value of syncToken property of last sync request response (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is the current moment (optional)</param>
        /// <param name="recordCount">For &#39;FSync&#39; the parameter is mandatory, it limits the number of records to be returned in response. For &#39;ISync&#39; it specifies with how many records to extend sync Frame to the past, the maximum number of records is 250 (optional)</param>
        /// <param name="statusGroup">Type of calls to be returned. The default value is &#39;All&#39; (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="showDeleted">Supported for ISync. If &#39;True&#39; then deleted call records are returned (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallLogSync</returns>
        System.Threading.Tasks.Task<CallLogSync> SyncUserCallLogAsync (string accountId, string extensionId, string syncType = default(string), string syncToken = default(string), DateTime? dateFrom = default(DateTime?), int? recordCount = default(int?), List<string> statusGroup = default(List<string>), string view = default(string), bool? showDeleted = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sync User Call Log
        /// </summary>
        /// <remarks>
        /// Synchronizes call log records.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="syncType">Type of synchronization (optional, default to FSync)</param>
        /// <param name="syncToken">Value of syncToken property of last sync request response (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is the current moment (optional)</param>
        /// <param name="recordCount">For &#39;FSync&#39; the parameter is mandatory, it limits the number of records to be returned in response. For &#39;ISync&#39; it specifies with how many records to extend sync Frame to the past, the maximum number of records is 250 (optional)</param>
        /// <param name="statusGroup">Type of calls to be returned. The default value is &#39;All&#39; (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="showDeleted">Supported for ISync. If &#39;True&#39; then deleted call records are returned (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallLogSync)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallLogSync>> SyncUserCallLogWithHttpInfoAsync (string accountId, string extensionId, string syncType = default(string), string syncToken = default(string), DateTime? dateFrom = default(DateTime?), int? recordCount = default(int?), List<string> statusGroup = default(List<string>), string view = default(string), bool? showDeleted = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CallLogApi : ICallLogApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CallLogApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CallLogApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallLogApi"/> class
        /// </summary>
        /// <returns></returns>
        public CallLogApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallLogApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CallLogApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete User Call Log Deletes filtered call log records.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="dateTo">The end datetime for records deletion in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601]  format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <returns></returns>
        public void DeleteUserCallLog (string accountId, string extensionId, DateTime? dateTo = default(DateTime?))
        {
             DeleteUserCallLogWithHttpInfo(accountId, extensionId, dateTo);
        }

        /// <summary>
        /// Delete User Call Log Deletes filtered call log records.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="dateTo">The end datetime for records deletion in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601]  format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteUserCallLogWithHttpInfo (string accountId, string extensionId, DateTime? dateTo = default(DateTime?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallLogApi->DeleteUserCallLog");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallLogApi->DeleteUserCallLog");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/call-log";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateTo", dateTo)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserCallLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete User Call Log Deletes filtered call log records.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="dateTo">The end datetime for records deletion in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601]  format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserCallLogAsync (string accountId, string extensionId, DateTime? dateTo = default(DateTime?), CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteUserCallLogWithHttpInfoAsync(accountId, extensionId, dateTo, cancellationToken);

        }

        /// <summary>
        /// Delete User Call Log Deletes filtered call log records.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="dateTo">The end datetime for records deletion in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601]  format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserCallLogWithHttpInfoAsync (string accountId, string extensionId, DateTime? dateTo = default(DateTime?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallLogApi->DeleteUserCallLog");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallLogApi->DeleteUserCallLog");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/call-log";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateTo", dateTo)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserCallLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get Company Active Calls Returns records of all calls that are in progress, ordered by start time in descending order.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="direction">The direction for the result records. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="type">Call type of a record. If not specified, all call types are returned. Multiple values are accepted (optional)</param>
        /// <param name="transport">Call transport type. &#39;PSTN&#39; specifies that a call leg is initiated from the PSTN network provider; &#39;VoIP&#39; - from an RC phone. By default this filter is disabled (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <returns>CompanyActiveCallsResponse</returns>
        public CompanyActiveCallsResponse ListCompanyActiveCalls (string accountId, List<string> direction = default(List<string>), string view = default(string), List<string> type = default(List<string>), List<string> transport = default(List<string>), int? page = default(int?), int? perPage = default(int?))
        {
             ApiResponse<CompanyActiveCallsResponse> localVarResponse = ListCompanyActiveCallsWithHttpInfo(accountId, direction, view, type, transport, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Company Active Calls Returns records of all calls that are in progress, ordered by start time in descending order.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="direction">The direction for the result records. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="type">Call type of a record. If not specified, all call types are returned. Multiple values are accepted (optional)</param>
        /// <param name="transport">Call transport type. &#39;PSTN&#39; specifies that a call leg is initiated from the PSTN network provider; &#39;VoIP&#39; - from an RC phone. By default this filter is disabled (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <returns>ApiResponse of CompanyActiveCallsResponse</returns>
        public ApiResponse<CompanyActiveCallsResponse> ListCompanyActiveCallsWithHttpInfo (string accountId, List<string> direction = default(List<string>), string view = default(string), List<string> type = default(List<string>), List<string> transport = default(List<string>), int? page = default(int?), int? perPage = default(int?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallLogApi->ListCompanyActiveCalls");

            var localVarPath = "/restapi/v1.0/account/{accountId}/active-calls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "direction", direction)); // query parameter
            if (view != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "view", view)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "type", type)); // query parameter
            if (transport != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "transport", transport)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCompanyActiveCalls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompanyActiveCallsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CompanyActiveCallsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompanyActiveCallsResponse)));
        }

        /// <summary>
        /// Get Company Active Calls Returns records of all calls that are in progress, ordered by start time in descending order.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="direction">The direction for the result records. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="type">Call type of a record. If not specified, all call types are returned. Multiple values are accepted (optional)</param>
        /// <param name="transport">Call transport type. &#39;PSTN&#39; specifies that a call leg is initiated from the PSTN network provider; &#39;VoIP&#39; - from an RC phone. By default this filter is disabled (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CompanyActiveCallsResponse</returns>
        public async System.Threading.Tasks.Task<CompanyActiveCallsResponse> ListCompanyActiveCallsAsync (string accountId, List<string> direction = default(List<string>), string view = default(string), List<string> type = default(List<string>), List<string> transport = default(List<string>), int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CompanyActiveCallsResponse> localVarResponse = await ListCompanyActiveCallsWithHttpInfoAsync(accountId, direction, view, type, transport, page, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Company Active Calls Returns records of all calls that are in progress, ordered by start time in descending order.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="direction">The direction for the result records. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="type">Call type of a record. If not specified, all call types are returned. Multiple values are accepted (optional)</param>
        /// <param name="transport">Call transport type. &#39;PSTN&#39; specifies that a call leg is initiated from the PSTN network provider; &#39;VoIP&#39; - from an RC phone. By default this filter is disabled (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CompanyActiveCallsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CompanyActiveCallsResponse>> ListCompanyActiveCallsWithHttpInfoAsync (string accountId, List<string> direction = default(List<string>), string view = default(string), List<string> type = default(List<string>), List<string> transport = default(List<string>), int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallLogApi->ListCompanyActiveCalls");

            var localVarPath = "/restapi/v1.0/account/{accountId}/active-calls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "direction", direction)); // query parameter
            if (view != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "view", view)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "type", type)); // query parameter
            if (transport != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "transport", transport)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCompanyActiveCalls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompanyActiveCallsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CompanyActiveCallsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompanyActiveCallsResponse)));
        }

        /// <summary>
        /// Get User Active Calls Returns records of all extension calls that are in progress, ordered by start time in descending order.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="direction">The direction for the result records. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="type">Call type of a record. If not specified, all call types are returned. Multiple values are accepted (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <returns>UserActiveCallsResponse</returns>
        public UserActiveCallsResponse ListExtensionActiveCalls (string accountId, string extensionId, List<string> direction = default(List<string>), string view = default(string), List<string> type = default(List<string>), int? page = default(int?), int? perPage = default(int?))
        {
             ApiResponse<UserActiveCallsResponse> localVarResponse = ListExtensionActiveCallsWithHttpInfo(accountId, extensionId, direction, view, type, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Active Calls Returns records of all extension calls that are in progress, ordered by start time in descending order.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="direction">The direction for the result records. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="type">Call type of a record. If not specified, all call types are returned. Multiple values are accepted (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <returns>ApiResponse of UserActiveCallsResponse</returns>
        public ApiResponse<UserActiveCallsResponse> ListExtensionActiveCallsWithHttpInfo (string accountId, string extensionId, List<string> direction = default(List<string>), string view = default(string), List<string> type = default(List<string>), int? page = default(int?), int? perPage = default(int?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallLogApi->ListExtensionActiveCalls");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallLogApi->ListExtensionActiveCalls");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/active-calls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "direction", direction)); // query parameter
            if (view != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "view", view)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "type", type)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListExtensionActiveCalls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserActiveCallsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserActiveCallsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserActiveCallsResponse)));
        }

        /// <summary>
        /// Get User Active Calls Returns records of all extension calls that are in progress, ordered by start time in descending order.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="direction">The direction for the result records. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="type">Call type of a record. If not specified, all call types are returned. Multiple values are accepted (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserActiveCallsResponse</returns>
        public async System.Threading.Tasks.Task<UserActiveCallsResponse> ListExtensionActiveCallsAsync (string accountId, string extensionId, List<string> direction = default(List<string>), string view = default(string), List<string> type = default(List<string>), int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UserActiveCallsResponse> localVarResponse = await ListExtensionActiveCallsWithHttpInfoAsync(accountId, extensionId, direction, view, type, page, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get User Active Calls Returns records of all extension calls that are in progress, ordered by start time in descending order.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="direction">The direction for the result records. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="type">Call type of a record. If not specified, all call types are returned. Multiple values are accepted (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserActiveCallsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserActiveCallsResponse>> ListExtensionActiveCallsWithHttpInfoAsync (string accountId, string extensionId, List<string> direction = default(List<string>), string view = default(string), List<string> type = default(List<string>), int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallLogApi->ListExtensionActiveCalls");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallLogApi->ListExtensionActiveCalls");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/active-calls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "direction", direction)); // query parameter
            if (view != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "view", view)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "type", type)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListExtensionActiveCalls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserActiveCallsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserActiveCallsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserActiveCallsResponse)));
        }

        /// <summary>
        /// Get Company Call Log Records Returns call log records filtered by parameters specified.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionNumber">Extension number of a user. If specified, returns call log for a particular extension only (optional)</param>
        /// <param name="phoneNumber">Phone number of a caller/callee in e.164 format without a plus sign &#39;+&#39;. If specified, all incoming and outgoing calls with this phone number are returned. Cannot be specified together with the &#x60;extensionNumber&#x60; filter (optional)</param>
        /// <param name="direction">The direction for the result records. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)</param>
        /// <param name="type">Call type of a record. If not specified, all call types are returned. Multiple values are accepted (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="withRecording">**Deprecated**. Supported for compatibility reasons only. &#x60;true&#x60; if only recorded calls are returned. The default value is &#x60;false&#x60;. If both &#x60;withRecording&#x60; and &#x60;recordingType&#x60; are specified, &#x60;withRecording&#x60; is ignored (optional)</param>
        /// <param name="recordingType">Type of a call recording. If not specified, then calls without recordings are also returned (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601]  format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)</param>
        /// <param name="dateTo">The end datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601]  format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="sessionId">Internal identifier of a call session (optional)</param>
        /// <returns>AccountCallLogResponse</returns>
        public AccountCallLogResponse ReadCompanyCallLog (string accountId, string extensionNumber = default(string), string phoneNumber = default(string), List<string> direction = default(List<string>), List<string> type = default(List<string>), string view = default(string), bool? withRecording = default(bool?), string recordingType = default(string), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), int? page = default(int?), int? perPage = default(int?), string sessionId = default(string))
        {
             ApiResponse<AccountCallLogResponse> localVarResponse = ReadCompanyCallLogWithHttpInfo(accountId, extensionNumber, phoneNumber, direction, type, view, withRecording, recordingType, dateFrom, dateTo, page, perPage, sessionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Company Call Log Records Returns call log records filtered by parameters specified.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionNumber">Extension number of a user. If specified, returns call log for a particular extension only (optional)</param>
        /// <param name="phoneNumber">Phone number of a caller/callee in e.164 format without a plus sign &#39;+&#39;. If specified, all incoming and outgoing calls with this phone number are returned. Cannot be specified together with the &#x60;extensionNumber&#x60; filter (optional)</param>
        /// <param name="direction">The direction for the result records. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)</param>
        /// <param name="type">Call type of a record. If not specified, all call types are returned. Multiple values are accepted (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="withRecording">**Deprecated**. Supported for compatibility reasons only. &#x60;true&#x60; if only recorded calls are returned. The default value is &#x60;false&#x60;. If both &#x60;withRecording&#x60; and &#x60;recordingType&#x60; are specified, &#x60;withRecording&#x60; is ignored (optional)</param>
        /// <param name="recordingType">Type of a call recording. If not specified, then calls without recordings are also returned (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601]  format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)</param>
        /// <param name="dateTo">The end datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601]  format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="sessionId">Internal identifier of a call session (optional)</param>
        /// <returns>ApiResponse of AccountCallLogResponse</returns>
        public ApiResponse<AccountCallLogResponse> ReadCompanyCallLogWithHttpInfo (string accountId, string extensionNumber = default(string), string phoneNumber = default(string), List<string> direction = default(List<string>), List<string> type = default(List<string>), string view = default(string), bool? withRecording = default(bool?), string recordingType = default(string), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), int? page = default(int?), int? perPage = default(int?), string sessionId = default(string))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallLogApi->ReadCompanyCallLog");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-log";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extensionNumber", extensionNumber)); // query parameter
            if (phoneNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phoneNumber", phoneNumber)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "direction", direction)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "type", type)); // query parameter
            if (view != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "view", view)); // query parameter
            if (withRecording != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withRecording", withRecording)); // query parameter
            if (recordingType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordingType", recordingType)); // query parameter
            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateFrom", dateFrom)); // query parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateTo", dateTo)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (sessionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sessionId", sessionId)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadCompanyCallLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountCallLogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccountCallLogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountCallLogResponse)));
        }

        /// <summary>
        /// Get Company Call Log Records Returns call log records filtered by parameters specified.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionNumber">Extension number of a user. If specified, returns call log for a particular extension only (optional)</param>
        /// <param name="phoneNumber">Phone number of a caller/callee in e.164 format without a plus sign &#39;+&#39;. If specified, all incoming and outgoing calls with this phone number are returned. Cannot be specified together with the &#x60;extensionNumber&#x60; filter (optional)</param>
        /// <param name="direction">The direction for the result records. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)</param>
        /// <param name="type">Call type of a record. If not specified, all call types are returned. Multiple values are accepted (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="withRecording">**Deprecated**. Supported for compatibility reasons only. &#x60;true&#x60; if only recorded calls are returned. The default value is &#x60;false&#x60;. If both &#x60;withRecording&#x60; and &#x60;recordingType&#x60; are specified, &#x60;withRecording&#x60; is ignored (optional)</param>
        /// <param name="recordingType">Type of a call recording. If not specified, then calls without recordings are also returned (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601]  format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)</param>
        /// <param name="dateTo">The end datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601]  format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="sessionId">Internal identifier of a call session (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AccountCallLogResponse</returns>
        public async System.Threading.Tasks.Task<AccountCallLogResponse> ReadCompanyCallLogAsync (string accountId, string extensionNumber = default(string), string phoneNumber = default(string), List<string> direction = default(List<string>), List<string> type = default(List<string>), string view = default(string), bool? withRecording = default(bool?), string recordingType = default(string), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), int? page = default(int?), int? perPage = default(int?), string sessionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AccountCallLogResponse> localVarResponse = await ReadCompanyCallLogWithHttpInfoAsync(accountId, extensionNumber, phoneNumber, direction, type, view, withRecording, recordingType, dateFrom, dateTo, page, perPage, sessionId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Company Call Log Records Returns call log records filtered by parameters specified.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionNumber">Extension number of a user. If specified, returns call log for a particular extension only (optional)</param>
        /// <param name="phoneNumber">Phone number of a caller/callee in e.164 format without a plus sign &#39;+&#39;. If specified, all incoming and outgoing calls with this phone number are returned. Cannot be specified together with the &#x60;extensionNumber&#x60; filter (optional)</param>
        /// <param name="direction">The direction for the result records. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)</param>
        /// <param name="type">Call type of a record. If not specified, all call types are returned. Multiple values are accepted (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="withRecording">**Deprecated**. Supported for compatibility reasons only. &#x60;true&#x60; if only recorded calls are returned. The default value is &#x60;false&#x60;. If both &#x60;withRecording&#x60; and &#x60;recordingType&#x60; are specified, &#x60;withRecording&#x60; is ignored (optional)</param>
        /// <param name="recordingType">Type of a call recording. If not specified, then calls without recordings are also returned (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601]  format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)</param>
        /// <param name="dateTo">The end datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601]  format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="sessionId">Internal identifier of a call session (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AccountCallLogResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountCallLogResponse>> ReadCompanyCallLogWithHttpInfoAsync (string accountId, string extensionNumber = default(string), string phoneNumber = default(string), List<string> direction = default(List<string>), List<string> type = default(List<string>), string view = default(string), bool? withRecording = default(bool?), string recordingType = default(string), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), int? page = default(int?), int? perPage = default(int?), string sessionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallLogApi->ReadCompanyCallLog");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-log";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extensionNumber", extensionNumber)); // query parameter
            if (phoneNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phoneNumber", phoneNumber)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "direction", direction)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "type", type)); // query parameter
            if (view != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "view", view)); // query parameter
            if (withRecording != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withRecording", withRecording)); // query parameter
            if (recordingType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordingType", recordingType)); // query parameter
            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateFrom", dateFrom)); // query parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateTo", dateTo)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (sessionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sessionId", sessionId)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadCompanyCallLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountCallLogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccountCallLogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountCallLogResponse)));
        }

        /// <summary>
        /// Get Company Call Log Record(s) Returns individual call log record(s) by ID(s). Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="callRecordId">Internal identifier of a call log record</param>
        /// <param name="view">View of call records. The view value specified for &#39;FSync&#39; will also be applied for &#39;ISync&#39; by default, since it cannot be changed for ISync (optional, default to Simple)</param>
        /// <returns>CompanyCallLogRecord</returns>
        public CompanyCallLogRecord ReadCompanyCallRecord (string accountId, string callRecordId, string view = default(string))
        {
             ApiResponse<CompanyCallLogRecord> localVarResponse = ReadCompanyCallRecordWithHttpInfo(accountId, callRecordId, view);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Company Call Log Record(s) Returns individual call log record(s) by ID(s). Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="callRecordId">Internal identifier of a call log record</param>
        /// <param name="view">View of call records. The view value specified for &#39;FSync&#39; will also be applied for &#39;ISync&#39; by default, since it cannot be changed for ISync (optional, default to Simple)</param>
        /// <returns>ApiResponse of CompanyCallLogRecord</returns>
        public ApiResponse<CompanyCallLogRecord> ReadCompanyCallRecordWithHttpInfo (string accountId, string callRecordId, string view = default(string))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallLogApi->ReadCompanyCallRecord");
            // verify the required parameter 'callRecordId' is set
            if (callRecordId == null)
                throw new ApiException(400, "Missing required parameter 'callRecordId' when calling CallLogApi->ReadCompanyCallRecord");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-log/{callRecordId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (callRecordId != null) localVarPathParams.Add("callRecordId", this.Configuration.ApiClient.ParameterToString(callRecordId)); // path parameter
            if (view != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "view", view)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadCompanyCallRecord", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompanyCallLogRecord>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CompanyCallLogRecord) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompanyCallLogRecord)));
        }

        /// <summary>
        /// Get Company Call Log Record(s) Returns individual call log record(s) by ID(s). Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="callRecordId">Internal identifier of a call log record</param>
        /// <param name="view">View of call records. The view value specified for &#39;FSync&#39; will also be applied for &#39;ISync&#39; by default, since it cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CompanyCallLogRecord</returns>
        public async System.Threading.Tasks.Task<CompanyCallLogRecord> ReadCompanyCallRecordAsync (string accountId, string callRecordId, string view = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CompanyCallLogRecord> localVarResponse = await ReadCompanyCallRecordWithHttpInfoAsync(accountId, callRecordId, view, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Company Call Log Record(s) Returns individual call log record(s) by ID(s). Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="callRecordId">Internal identifier of a call log record</param>
        /// <param name="view">View of call records. The view value specified for &#39;FSync&#39; will also be applied for &#39;ISync&#39; by default, since it cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CompanyCallLogRecord)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CompanyCallLogRecord>> ReadCompanyCallRecordWithHttpInfoAsync (string accountId, string callRecordId, string view = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallLogApi->ReadCompanyCallRecord");
            // verify the required parameter 'callRecordId' is set
            if (callRecordId == null)
                throw new ApiException(400, "Missing required parameter 'callRecordId' when calling CallLogApi->ReadCompanyCallRecord");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-log/{callRecordId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (callRecordId != null) localVarPathParams.Add("callRecordId", this.Configuration.ApiClient.ParameterToString(callRecordId)); // path parameter
            if (view != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "view", view)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadCompanyCallRecord", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompanyCallLogRecord>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CompanyCallLogRecord) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompanyCallLogRecord)));
        }

        /// <summary>
        /// Get User Call Log Records Returns call log records filtered by parameters specified.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="extensionNumber">Extension number of a user. If specified, returns call log for a particular extension only (optional)</param>
        /// <param name="showBlocked">If &#39;True&#39; then calls from/to blocked numbers are returned (optional, default to true)</param>
        /// <param name="phoneNumber">Phone number of a caller/callee in e.164 format without a plus sign &#39;+&#39;. If specified, all incoming and outgoing calls with this phone number are returned (optional)</param>
        /// <param name="direction">The direction for the resulting records. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)</param>
        /// <param name="sessionId">Internal identifier of a session (optional)</param>
        /// <param name="type">Call type of a record. It is allowed to specify more than one type. If not specified, all call types are returned. Multiple values are accepted (optional)</param>
        /// <param name="transport">Call transport type. &#39;PSTN&#39; specifies that a call leg is initiated from the PSTN network provider; &#39;VoIP&#39; - from an RC phone. By default this filter is disabled (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="withRecording">**Deprecated**. Supported for compatibility reasons. &#x60;True&#x60; if only recorded calls are returned. If both &#x60;withRecording&#x60; and &#x60;recordingType&#x60; are specified, then &#x60;withRecording&#x60; is ignored (optional, default to false)</param>
        /// <param name="recordingType">Type of a call recording. If not specified, then calls without recordings are also returned (optional)</param>
        /// <param name="dateTo">The end datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items). The default value is 100. The maximum value is 1000, for detailed call log - 250 (optional, default to 100)</param>
        /// <param name="showDeleted">If &#39;True&#39; then deleted calls are returned (optional, default to false)</param>
        /// <returns>UserCallLogResponse</returns>
        public UserCallLogResponse ReadUserCallLog (string accountId, string extensionId, string extensionNumber = default(string), bool? showBlocked = default(bool?), string phoneNumber = default(string), List<string> direction = default(List<string>), string sessionId = default(string), List<string> type = default(List<string>), List<string> transport = default(List<string>), string view = default(string), bool? withRecording = default(bool?), string recordingType = default(string), DateTime? dateTo = default(DateTime?), DateTime? dateFrom = default(DateTime?), int? page = default(int?), int? perPage = default(int?), bool? showDeleted = default(bool?))
        {
             ApiResponse<UserCallLogResponse> localVarResponse = ReadUserCallLogWithHttpInfo(accountId, extensionId, extensionNumber, showBlocked, phoneNumber, direction, sessionId, type, transport, view, withRecording, recordingType, dateTo, dateFrom, page, perPage, showDeleted);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Call Log Records Returns call log records filtered by parameters specified.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="extensionNumber">Extension number of a user. If specified, returns call log for a particular extension only (optional)</param>
        /// <param name="showBlocked">If &#39;True&#39; then calls from/to blocked numbers are returned (optional, default to true)</param>
        /// <param name="phoneNumber">Phone number of a caller/callee in e.164 format without a plus sign &#39;+&#39;. If specified, all incoming and outgoing calls with this phone number are returned (optional)</param>
        /// <param name="direction">The direction for the resulting records. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)</param>
        /// <param name="sessionId">Internal identifier of a session (optional)</param>
        /// <param name="type">Call type of a record. It is allowed to specify more than one type. If not specified, all call types are returned. Multiple values are accepted (optional)</param>
        /// <param name="transport">Call transport type. &#39;PSTN&#39; specifies that a call leg is initiated from the PSTN network provider; &#39;VoIP&#39; - from an RC phone. By default this filter is disabled (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="withRecording">**Deprecated**. Supported for compatibility reasons. &#x60;True&#x60; if only recorded calls are returned. If both &#x60;withRecording&#x60; and &#x60;recordingType&#x60; are specified, then &#x60;withRecording&#x60; is ignored (optional, default to false)</param>
        /// <param name="recordingType">Type of a call recording. If not specified, then calls without recordings are also returned (optional)</param>
        /// <param name="dateTo">The end datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items). The default value is 100. The maximum value is 1000, for detailed call log - 250 (optional, default to 100)</param>
        /// <param name="showDeleted">If &#39;True&#39; then deleted calls are returned (optional, default to false)</param>
        /// <returns>ApiResponse of UserCallLogResponse</returns>
        public ApiResponse<UserCallLogResponse> ReadUserCallLogWithHttpInfo (string accountId, string extensionId, string extensionNumber = default(string), bool? showBlocked = default(bool?), string phoneNumber = default(string), List<string> direction = default(List<string>), string sessionId = default(string), List<string> type = default(List<string>), List<string> transport = default(List<string>), string view = default(string), bool? withRecording = default(bool?), string recordingType = default(string), DateTime? dateTo = default(DateTime?), DateTime? dateFrom = default(DateTime?), int? page = default(int?), int? perPage = default(int?), bool? showDeleted = default(bool?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallLogApi->ReadUserCallLog");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallLogApi->ReadUserCallLog");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/call-log";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (extensionNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extensionNumber", extensionNumber)); // query parameter
            if (showBlocked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showBlocked", showBlocked)); // query parameter
            if (phoneNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phoneNumber", phoneNumber)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "direction", direction)); // query parameter
            if (sessionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sessionId", sessionId)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "type", type)); // query parameter
            if (transport != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "transport", transport)); // query parameter
            if (view != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "view", view)); // query parameter
            if (withRecording != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withRecording", withRecording)); // query parameter
            if (recordingType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordingType", recordingType)); // query parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateTo", dateTo)); // query parameter
            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateFrom", dateFrom)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (showDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showDeleted", showDeleted)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadUserCallLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCallLogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserCallLogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCallLogResponse)));
        }

        /// <summary>
        /// Get User Call Log Records Returns call log records filtered by parameters specified.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="extensionNumber">Extension number of a user. If specified, returns call log for a particular extension only (optional)</param>
        /// <param name="showBlocked">If &#39;True&#39; then calls from/to blocked numbers are returned (optional, default to true)</param>
        /// <param name="phoneNumber">Phone number of a caller/callee in e.164 format without a plus sign &#39;+&#39;. If specified, all incoming and outgoing calls with this phone number are returned (optional)</param>
        /// <param name="direction">The direction for the resulting records. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)</param>
        /// <param name="sessionId">Internal identifier of a session (optional)</param>
        /// <param name="type">Call type of a record. It is allowed to specify more than one type. If not specified, all call types are returned. Multiple values are accepted (optional)</param>
        /// <param name="transport">Call transport type. &#39;PSTN&#39; specifies that a call leg is initiated from the PSTN network provider; &#39;VoIP&#39; - from an RC phone. By default this filter is disabled (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="withRecording">**Deprecated**. Supported for compatibility reasons. &#x60;True&#x60; if only recorded calls are returned. If both &#x60;withRecording&#x60; and &#x60;recordingType&#x60; are specified, then &#x60;withRecording&#x60; is ignored (optional, default to false)</param>
        /// <param name="recordingType">Type of a call recording. If not specified, then calls without recordings are also returned (optional)</param>
        /// <param name="dateTo">The end datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items). The default value is 100. The maximum value is 1000, for detailed call log - 250 (optional, default to 100)</param>
        /// <param name="showDeleted">If &#39;True&#39; then deleted calls are returned (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserCallLogResponse</returns>
        public async System.Threading.Tasks.Task<UserCallLogResponse> ReadUserCallLogAsync (string accountId, string extensionId, string extensionNumber = default(string), bool? showBlocked = default(bool?), string phoneNumber = default(string), List<string> direction = default(List<string>), string sessionId = default(string), List<string> type = default(List<string>), List<string> transport = default(List<string>), string view = default(string), bool? withRecording = default(bool?), string recordingType = default(string), DateTime? dateTo = default(DateTime?), DateTime? dateFrom = default(DateTime?), int? page = default(int?), int? perPage = default(int?), bool? showDeleted = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UserCallLogResponse> localVarResponse = await ReadUserCallLogWithHttpInfoAsync(accountId, extensionId, extensionNumber, showBlocked, phoneNumber, direction, sessionId, type, transport, view, withRecording, recordingType, dateTo, dateFrom, page, perPage, showDeleted, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get User Call Log Records Returns call log records filtered by parameters specified.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="extensionNumber">Extension number of a user. If specified, returns call log for a particular extension only (optional)</param>
        /// <param name="showBlocked">If &#39;True&#39; then calls from/to blocked numbers are returned (optional, default to true)</param>
        /// <param name="phoneNumber">Phone number of a caller/callee in e.164 format without a plus sign &#39;+&#39;. If specified, all incoming and outgoing calls with this phone number are returned (optional)</param>
        /// <param name="direction">The direction for the resulting records. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)</param>
        /// <param name="sessionId">Internal identifier of a session (optional)</param>
        /// <param name="type">Call type of a record. It is allowed to specify more than one type. If not specified, all call types are returned. Multiple values are accepted (optional)</param>
        /// <param name="transport">Call transport type. &#39;PSTN&#39; specifies that a call leg is initiated from the PSTN network provider; &#39;VoIP&#39; - from an RC phone. By default this filter is disabled (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="withRecording">**Deprecated**. Supported for compatibility reasons. &#x60;True&#x60; if only recorded calls are returned. If both &#x60;withRecording&#x60; and &#x60;recordingType&#x60; are specified, then &#x60;withRecording&#x60; is ignored (optional, default to false)</param>
        /// <param name="recordingType">Type of a call recording. If not specified, then calls without recordings are also returned (optional)</param>
        /// <param name="dateTo">The end datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items). The default value is 100. The maximum value is 1000, for detailed call log - 250 (optional, default to 100)</param>
        /// <param name="showDeleted">If &#39;True&#39; then deleted calls are returned (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserCallLogResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserCallLogResponse>> ReadUserCallLogWithHttpInfoAsync (string accountId, string extensionId, string extensionNumber = default(string), bool? showBlocked = default(bool?), string phoneNumber = default(string), List<string> direction = default(List<string>), string sessionId = default(string), List<string> type = default(List<string>), List<string> transport = default(List<string>), string view = default(string), bool? withRecording = default(bool?), string recordingType = default(string), DateTime? dateTo = default(DateTime?), DateTime? dateFrom = default(DateTime?), int? page = default(int?), int? perPage = default(int?), bool? showDeleted = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallLogApi->ReadUserCallLog");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallLogApi->ReadUserCallLog");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/call-log";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (extensionNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extensionNumber", extensionNumber)); // query parameter
            if (showBlocked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showBlocked", showBlocked)); // query parameter
            if (phoneNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phoneNumber", phoneNumber)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "direction", direction)); // query parameter
            if (sessionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sessionId", sessionId)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "type", type)); // query parameter
            if (transport != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "transport", transport)); // query parameter
            if (view != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "view", view)); // query parameter
            if (withRecording != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withRecording", withRecording)); // query parameter
            if (recordingType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordingType", recordingType)); // query parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateTo", dateTo)); // query parameter
            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateFrom", dateFrom)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (showDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showDeleted", showDeleted)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadUserCallLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCallLogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserCallLogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCallLogResponse)));
        }

        /// <summary>
        /// Get User Call Record Returns call log records by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRecordId"></param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="view">View of call records. The view value specified for &#39;FSync&#39; will also be applied for &#39;ISync&#39; by default, since it cannot be changed for ISync (optional, default to Simple)</param>
        /// <returns>UserCallLogRecord</returns>
        public UserCallLogRecord ReadUserCallRecord (List<string> callRecordId, string extensionId, string accountId, string view = default(string))
        {
             ApiResponse<UserCallLogRecord> localVarResponse = ReadUserCallRecordWithHttpInfo(callRecordId, extensionId, accountId, view);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Call Record Returns call log records by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRecordId"></param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="view">View of call records. The view value specified for &#39;FSync&#39; will also be applied for &#39;ISync&#39; by default, since it cannot be changed for ISync (optional, default to Simple)</param>
        /// <returns>ApiResponse of UserCallLogRecord</returns>
        public ApiResponse<UserCallLogRecord> ReadUserCallRecordWithHttpInfo (List<string> callRecordId, string extensionId, string accountId, string view = default(string))
        {
            // verify the required parameter 'callRecordId' is set
            if (callRecordId == null)
                throw new ApiException(400, "Missing required parameter 'callRecordId' when calling CallLogApi->ReadUserCallRecord");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallLogApi->ReadUserCallRecord");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallLogApi->ReadUserCallRecord");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/call-log/{callRecordId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (callRecordId != null) localVarPathParams.Add("callRecordId", this.Configuration.ApiClient.ParameterToString(callRecordId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (view != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "view", view)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadUserCallRecord", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCallLogRecord>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserCallLogRecord) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCallLogRecord)));
        }

        /// <summary>
        /// Get User Call Record Returns call log records by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRecordId"></param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="view">View of call records. The view value specified for &#39;FSync&#39; will also be applied for &#39;ISync&#39; by default, since it cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserCallLogRecord</returns>
        public async System.Threading.Tasks.Task<UserCallLogRecord> ReadUserCallRecordAsync (List<string> callRecordId, string extensionId, string accountId, string view = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UserCallLogRecord> localVarResponse = await ReadUserCallRecordWithHttpInfoAsync(callRecordId, extensionId, accountId, view, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get User Call Record Returns call log records by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRecordId"></param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="view">View of call records. The view value specified for &#39;FSync&#39; will also be applied for &#39;ISync&#39; by default, since it cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserCallLogRecord)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserCallLogRecord>> ReadUserCallRecordWithHttpInfoAsync (List<string> callRecordId, string extensionId, string accountId, string view = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'callRecordId' is set
            if (callRecordId == null)
                throw new ApiException(400, "Missing required parameter 'callRecordId' when calling CallLogApi->ReadUserCallRecord");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallLogApi->ReadUserCallRecord");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallLogApi->ReadUserCallRecord");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/call-log/{callRecordId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (callRecordId != null) localVarPathParams.Add("callRecordId", this.Configuration.ApiClient.ParameterToString(callRecordId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (view != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "view", view)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadUserCallRecord", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCallLogRecord>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserCallLogRecord) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCallLogRecord)));
        }

        /// <summary>
        /// Sync Company Call Log Synchronizes company call log records.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="syncType">Type of synchronization. (optional, default to FSync)</param>
        /// <param name="syncToken">Value of syncToken property of last sync request response (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601]  format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is the current moment (optional)</param>
        /// <param name="recordCount">For &#39;FSync&#39; the parameter is mandatory, it limits the number of records to be returned in response. For &#39;ISync&#39; it specifies with how many records to extend sync frame to the past, the maximum number of records is 250 (optional)</param>
        /// <param name="statusGroup">Type of calls to be returned. (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="showDeleted">Supported for ISync. If &#39;True&#39; then deleted call records are returned (optional, default to false)</param>
        /// <returns>AccountCallLogSyncResponse</returns>
        public AccountCallLogSyncResponse SyncAccountCallLog (string accountId, string syncType = default(string), string syncToken = default(string), DateTime? dateFrom = default(DateTime?), int? recordCount = default(int?), List<string> statusGroup = default(List<string>), string view = default(string), bool? showDeleted = default(bool?))
        {
             ApiResponse<AccountCallLogSyncResponse> localVarResponse = SyncAccountCallLogWithHttpInfo(accountId, syncType, syncToken, dateFrom, recordCount, statusGroup, view, showDeleted);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sync Company Call Log Synchronizes company call log records.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="syncType">Type of synchronization. (optional, default to FSync)</param>
        /// <param name="syncToken">Value of syncToken property of last sync request response (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601]  format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is the current moment (optional)</param>
        /// <param name="recordCount">For &#39;FSync&#39; the parameter is mandatory, it limits the number of records to be returned in response. For &#39;ISync&#39; it specifies with how many records to extend sync frame to the past, the maximum number of records is 250 (optional)</param>
        /// <param name="statusGroup">Type of calls to be returned. (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="showDeleted">Supported for ISync. If &#39;True&#39; then deleted call records are returned (optional, default to false)</param>
        /// <returns>ApiResponse of AccountCallLogSyncResponse</returns>
        public ApiResponse<AccountCallLogSyncResponse> SyncAccountCallLogWithHttpInfo (string accountId, string syncType = default(string), string syncToken = default(string), DateTime? dateFrom = default(DateTime?), int? recordCount = default(int?), List<string> statusGroup = default(List<string>), string view = default(string), bool? showDeleted = default(bool?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallLogApi->SyncAccountCallLog");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-log-sync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (syncType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "syncType", syncType)); // query parameter
            if (syncToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "syncToken", syncToken)); // query parameter
            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateFrom", dateFrom)); // query parameter
            if (recordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordCount", recordCount)); // query parameter
            if (statusGroup != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "statusGroup", statusGroup)); // query parameter
            if (view != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "view", view)); // query parameter
            if (showDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showDeleted", showDeleted)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SyncAccountCallLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountCallLogSyncResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccountCallLogSyncResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountCallLogSyncResponse)));
        }

        /// <summary>
        /// Sync Company Call Log Synchronizes company call log records.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="syncType">Type of synchronization. (optional, default to FSync)</param>
        /// <param name="syncToken">Value of syncToken property of last sync request response (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601]  format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is the current moment (optional)</param>
        /// <param name="recordCount">For &#39;FSync&#39; the parameter is mandatory, it limits the number of records to be returned in response. For &#39;ISync&#39; it specifies with how many records to extend sync frame to the past, the maximum number of records is 250 (optional)</param>
        /// <param name="statusGroup">Type of calls to be returned. (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="showDeleted">Supported for ISync. If &#39;True&#39; then deleted call records are returned (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AccountCallLogSyncResponse</returns>
        public async System.Threading.Tasks.Task<AccountCallLogSyncResponse> SyncAccountCallLogAsync (string accountId, string syncType = default(string), string syncToken = default(string), DateTime? dateFrom = default(DateTime?), int? recordCount = default(int?), List<string> statusGroup = default(List<string>), string view = default(string), bool? showDeleted = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AccountCallLogSyncResponse> localVarResponse = await SyncAccountCallLogWithHttpInfoAsync(accountId, syncType, syncToken, dateFrom, recordCount, statusGroup, view, showDeleted, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sync Company Call Log Synchronizes company call log records.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="syncType">Type of synchronization. (optional, default to FSync)</param>
        /// <param name="syncToken">Value of syncToken property of last sync request response (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601]  format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is the current moment (optional)</param>
        /// <param name="recordCount">For &#39;FSync&#39; the parameter is mandatory, it limits the number of records to be returned in response. For &#39;ISync&#39; it specifies with how many records to extend sync frame to the past, the maximum number of records is 250 (optional)</param>
        /// <param name="statusGroup">Type of calls to be returned. (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="showDeleted">Supported for ISync. If &#39;True&#39; then deleted call records are returned (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AccountCallLogSyncResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountCallLogSyncResponse>> SyncAccountCallLogWithHttpInfoAsync (string accountId, string syncType = default(string), string syncToken = default(string), DateTime? dateFrom = default(DateTime?), int? recordCount = default(int?), List<string> statusGroup = default(List<string>), string view = default(string), bool? showDeleted = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallLogApi->SyncAccountCallLog");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-log-sync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (syncType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "syncType", syncType)); // query parameter
            if (syncToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "syncToken", syncToken)); // query parameter
            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateFrom", dateFrom)); // query parameter
            if (recordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordCount", recordCount)); // query parameter
            if (statusGroup != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "statusGroup", statusGroup)); // query parameter
            if (view != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "view", view)); // query parameter
            if (showDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showDeleted", showDeleted)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SyncAccountCallLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountCallLogSyncResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccountCallLogSyncResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountCallLogSyncResponse)));
        }

        /// <summary>
        /// Sync User Call Log Synchronizes call log records.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="syncType">Type of synchronization (optional, default to FSync)</param>
        /// <param name="syncToken">Value of syncToken property of last sync request response (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is the current moment (optional)</param>
        /// <param name="recordCount">For &#39;FSync&#39; the parameter is mandatory, it limits the number of records to be returned in response. For &#39;ISync&#39; it specifies with how many records to extend sync Frame to the past, the maximum number of records is 250 (optional)</param>
        /// <param name="statusGroup">Type of calls to be returned. The default value is &#39;All&#39; (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="showDeleted">Supported for ISync. If &#39;True&#39; then deleted call records are returned (optional, default to false)</param>
        /// <returns>CallLogSync</returns>
        public CallLogSync SyncUserCallLog (string accountId, string extensionId, string syncType = default(string), string syncToken = default(string), DateTime? dateFrom = default(DateTime?), int? recordCount = default(int?), List<string> statusGroup = default(List<string>), string view = default(string), bool? showDeleted = default(bool?))
        {
             ApiResponse<CallLogSync> localVarResponse = SyncUserCallLogWithHttpInfo(accountId, extensionId, syncType, syncToken, dateFrom, recordCount, statusGroup, view, showDeleted);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sync User Call Log Synchronizes call log records.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="syncType">Type of synchronization (optional, default to FSync)</param>
        /// <param name="syncToken">Value of syncToken property of last sync request response (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is the current moment (optional)</param>
        /// <param name="recordCount">For &#39;FSync&#39; the parameter is mandatory, it limits the number of records to be returned in response. For &#39;ISync&#39; it specifies with how many records to extend sync Frame to the past, the maximum number of records is 250 (optional)</param>
        /// <param name="statusGroup">Type of calls to be returned. The default value is &#39;All&#39; (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="showDeleted">Supported for ISync. If &#39;True&#39; then deleted call records are returned (optional, default to false)</param>
        /// <returns>ApiResponse of CallLogSync</returns>
        public ApiResponse<CallLogSync> SyncUserCallLogWithHttpInfo (string accountId, string extensionId, string syncType = default(string), string syncToken = default(string), DateTime? dateFrom = default(DateTime?), int? recordCount = default(int?), List<string> statusGroup = default(List<string>), string view = default(string), bool? showDeleted = default(bool?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallLogApi->SyncUserCallLog");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallLogApi->SyncUserCallLog");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/call-log-sync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (syncType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "syncType", syncType)); // query parameter
            if (syncToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "syncToken", syncToken)); // query parameter
            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateFrom", dateFrom)); // query parameter
            if (recordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordCount", recordCount)); // query parameter
            if (statusGroup != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "statusGroup", statusGroup)); // query parameter
            if (view != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "view", view)); // query parameter
            if (showDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showDeleted", showDeleted)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SyncUserCallLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallLogSync>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallLogSync) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallLogSync)));
        }

        /// <summary>
        /// Sync User Call Log Synchronizes call log records.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="syncType">Type of synchronization (optional, default to FSync)</param>
        /// <param name="syncToken">Value of syncToken property of last sync request response (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is the current moment (optional)</param>
        /// <param name="recordCount">For &#39;FSync&#39; the parameter is mandatory, it limits the number of records to be returned in response. For &#39;ISync&#39; it specifies with how many records to extend sync Frame to the past, the maximum number of records is 250 (optional)</param>
        /// <param name="statusGroup">Type of calls to be returned. The default value is &#39;All&#39; (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="showDeleted">Supported for ISync. If &#39;True&#39; then deleted call records are returned (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallLogSync</returns>
        public async System.Threading.Tasks.Task<CallLogSync> SyncUserCallLogAsync (string accountId, string extensionId, string syncType = default(string), string syncToken = default(string), DateTime? dateFrom = default(DateTime?), int? recordCount = default(int?), List<string> statusGroup = default(List<string>), string view = default(string), bool? showDeleted = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CallLogSync> localVarResponse = await SyncUserCallLogWithHttpInfoAsync(accountId, extensionId, syncType, syncToken, dateFrom, recordCount, statusGroup, view, showDeleted, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sync User Call Log Synchronizes call log records.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="syncType">Type of synchronization (optional, default to FSync)</param>
        /// <param name="syncToken">Value of syncToken property of last sync request response (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting records in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is the current moment (optional)</param>
        /// <param name="recordCount">For &#39;FSync&#39; the parameter is mandatory, it limits the number of records to be returned in response. For &#39;ISync&#39; it specifies with how many records to extend sync Frame to the past, the maximum number of records is 250 (optional)</param>
        /// <param name="statusGroup">Type of calls to be returned. The default value is &#39;All&#39; (optional)</param>
        /// <param name="view">View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync (optional, default to Simple)</param>
        /// <param name="showDeleted">Supported for ISync. If &#39;True&#39; then deleted call records are returned (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallLogSync)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallLogSync>> SyncUserCallLogWithHttpInfoAsync (string accountId, string extensionId, string syncType = default(string), string syncToken = default(string), DateTime? dateFrom = default(DateTime?), int? recordCount = default(int?), List<string> statusGroup = default(List<string>), string view = default(string), bool? showDeleted = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallLogApi->SyncUserCallLog");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallLogApi->SyncUserCallLog");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/call-log-sync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (syncType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "syncType", syncType)); // query parameter
            if (syncToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "syncToken", syncToken)); // query parameter
            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateFrom", dateFrom)); // query parameter
            if (recordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordCount", recordCount)); // query parameter
            if (statusGroup != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "statusGroup", statusGroup)); // query parameter
            if (view != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "view", view)); // query parameter
            if (showDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showDeleted", showDeleted)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SyncUserCallLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallLogSync>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallLogSync) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallLogSync)));
        }

    }
}
