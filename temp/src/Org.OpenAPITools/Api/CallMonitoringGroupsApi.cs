/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICallMonitoringGroupsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Call Monitoring Group
        /// </summary>
        /// <remarks>
        /// Creates a new call monitoring group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createCallMonitoringGroupRequest">Parameters of a call monitoring group that will be created</param>
        /// <returns>CallMonitoringGroup</returns>
        CallMonitoringGroup CreateCallMonitoringGroup (string accountId, CreateCallMonitoringGroupRequest createCallMonitoringGroupRequest);

        /// <summary>
        /// Create Call Monitoring Group
        /// </summary>
        /// <remarks>
        /// Creates a new call monitoring group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createCallMonitoringGroupRequest">Parameters of a call monitoring group that will be created</param>
        /// <returns>ApiResponse of CallMonitoringGroup</returns>
        ApiResponse<CallMonitoringGroup> CreateCallMonitoringGroupWithHttpInfo (string accountId, CreateCallMonitoringGroupRequest createCallMonitoringGroupRequest);
        /// <summary>
        /// Delete Call Monitoring Group
        /// </summary>
        /// <remarks>
        /// Removes information about the given call monitoring group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <returns></returns>
        void DeleteCallMonitoringGroup (string accountId, string groupId);

        /// <summary>
        /// Delete Call Monitoring Group
        /// </summary>
        /// <remarks>
        /// Removes information about the given call monitoring group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCallMonitoringGroupWithHttpInfo (string accountId, string groupId);
        /// <summary>
        /// Get Call Monitoring Group Member List
        /// </summary>
        /// <remarks>
        /// Returns call monitoring group members.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <returns>CallMonitoringGroupMemberList</returns>
        CallMonitoringGroupMemberList ListCallMonitoringGroupMembers (string accountId, string groupId, int? page = default(int?), int? perPage = default(int?));

        /// <summary>
        /// Get Call Monitoring Group Member List
        /// </summary>
        /// <remarks>
        /// Returns call monitoring group members.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <returns>ApiResponse of CallMonitoringGroupMemberList</returns>
        ApiResponse<CallMonitoringGroupMemberList> ListCallMonitoringGroupMembersWithHttpInfo (string accountId, string groupId, int? page = default(int?), int? perPage = default(int?));
        /// <summary>
        /// Get Call Monitoring Groups List
        /// </summary>
        /// <remarks>
        /// Returns call monitoring groups that can be filtered by some extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="memberExtensionId">Internal identifier of an extension that is a member of every group within the result (optional)</param>
        /// <returns>CallMonitoringGroups</returns>
        CallMonitoringGroups ListCallMonitoringGroups (string accountId, int? page = default(int?), int? perPage = default(int?), string memberExtensionId = default(string));

        /// <summary>
        /// Get Call Monitoring Groups List
        /// </summary>
        /// <remarks>
        /// Returns call monitoring groups that can be filtered by some extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="memberExtensionId">Internal identifier of an extension that is a member of every group within the result (optional)</param>
        /// <returns>ApiResponse of CallMonitoringGroups</returns>
        ApiResponse<CallMonitoringGroups> ListCallMonitoringGroupsWithHttpInfo (string accountId, int? page = default(int?), int? perPage = default(int?), string memberExtensionId = default(string));
        /// <summary>
        /// Updates Call Monitoring Group
        /// </summary>
        /// <remarks>
        /// Updates call monitoring group name by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId">Internal identifier of a call monitoring group</param>
        /// <param name="createCallMonitoringGroupRequest">Parameters of a call monitoring group that will be updated</param>
        /// <returns>CallMonitoringGroup</returns>
        CallMonitoringGroup UpdateCallMonitoringGroup (string accountId, string groupId, CreateCallMonitoringGroupRequest createCallMonitoringGroupRequest);

        /// <summary>
        /// Updates Call Monitoring Group
        /// </summary>
        /// <remarks>
        /// Updates call monitoring group name by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId">Internal identifier of a call monitoring group</param>
        /// <param name="createCallMonitoringGroupRequest">Parameters of a call monitoring group that will be updated</param>
        /// <returns>ApiResponse of CallMonitoringGroup</returns>
        ApiResponse<CallMonitoringGroup> UpdateCallMonitoringGroupWithHttpInfo (string accountId, string groupId, CreateCallMonitoringGroupRequest createCallMonitoringGroupRequest);
        /// <summary>
        /// Update Call Monitoring Group List
        /// </summary>
        /// <remarks>
        /// Updates call monitoring groups.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="callMonitoringBulkAssign">Changes for the given group</param>
        /// <returns></returns>
        void UpdateCallMonitoringGroupList (string accountId, string groupId, CallMonitoringBulkAssign callMonitoringBulkAssign);

        /// <summary>
        /// Update Call Monitoring Group List
        /// </summary>
        /// <remarks>
        /// Updates call monitoring groups.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="callMonitoringBulkAssign">Changes for the given group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateCallMonitoringGroupListWithHttpInfo (string accountId, string groupId, CallMonitoringBulkAssign callMonitoringBulkAssign);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create Call Monitoring Group
        /// </summary>
        /// <remarks>
        /// Creates a new call monitoring group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createCallMonitoringGroupRequest">Parameters of a call monitoring group that will be created</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallMonitoringGroup</returns>
        System.Threading.Tasks.Task<CallMonitoringGroup> CreateCallMonitoringGroupAsync (string accountId, CreateCallMonitoringGroupRequest createCallMonitoringGroupRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Call Monitoring Group
        /// </summary>
        /// <remarks>
        /// Creates a new call monitoring group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createCallMonitoringGroupRequest">Parameters of a call monitoring group that will be created</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallMonitoringGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallMonitoringGroup>> CreateCallMonitoringGroupWithHttpInfoAsync (string accountId, CreateCallMonitoringGroupRequest createCallMonitoringGroupRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete Call Monitoring Group
        /// </summary>
        /// <remarks>
        /// Removes information about the given call monitoring group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCallMonitoringGroupAsync (string accountId, string groupId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Call Monitoring Group
        /// </summary>
        /// <remarks>
        /// Removes information about the given call monitoring group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCallMonitoringGroupWithHttpInfoAsync (string accountId, string groupId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Call Monitoring Group Member List
        /// </summary>
        /// <remarks>
        /// Returns call monitoring group members.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallMonitoringGroupMemberList</returns>
        System.Threading.Tasks.Task<CallMonitoringGroupMemberList> ListCallMonitoringGroupMembersAsync (string accountId, string groupId, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Call Monitoring Group Member List
        /// </summary>
        /// <remarks>
        /// Returns call monitoring group members.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallMonitoringGroupMemberList)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallMonitoringGroupMemberList>> ListCallMonitoringGroupMembersWithHttpInfoAsync (string accountId, string groupId, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Call Monitoring Groups List
        /// </summary>
        /// <remarks>
        /// Returns call monitoring groups that can be filtered by some extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="memberExtensionId">Internal identifier of an extension that is a member of every group within the result (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallMonitoringGroups</returns>
        System.Threading.Tasks.Task<CallMonitoringGroups> ListCallMonitoringGroupsAsync (string accountId, int? page = default(int?), int? perPage = default(int?), string memberExtensionId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Call Monitoring Groups List
        /// </summary>
        /// <remarks>
        /// Returns call monitoring groups that can be filtered by some extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="memberExtensionId">Internal identifier of an extension that is a member of every group within the result (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallMonitoringGroups)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallMonitoringGroups>> ListCallMonitoringGroupsWithHttpInfoAsync (string accountId, int? page = default(int?), int? perPage = default(int?), string memberExtensionId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates Call Monitoring Group
        /// </summary>
        /// <remarks>
        /// Updates call monitoring group name by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId">Internal identifier of a call monitoring group</param>
        /// <param name="createCallMonitoringGroupRequest">Parameters of a call monitoring group that will be updated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallMonitoringGroup</returns>
        System.Threading.Tasks.Task<CallMonitoringGroup> UpdateCallMonitoringGroupAsync (string accountId, string groupId, CreateCallMonitoringGroupRequest createCallMonitoringGroupRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates Call Monitoring Group
        /// </summary>
        /// <remarks>
        /// Updates call monitoring group name by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId">Internal identifier of a call monitoring group</param>
        /// <param name="createCallMonitoringGroupRequest">Parameters of a call monitoring group that will be updated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallMonitoringGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallMonitoringGroup>> UpdateCallMonitoringGroupWithHttpInfoAsync (string accountId, string groupId, CreateCallMonitoringGroupRequest createCallMonitoringGroupRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Call Monitoring Group List
        /// </summary>
        /// <remarks>
        /// Updates call monitoring groups.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="callMonitoringBulkAssign">Changes for the given group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateCallMonitoringGroupListAsync (string accountId, string groupId, CallMonitoringBulkAssign callMonitoringBulkAssign, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Call Monitoring Group List
        /// </summary>
        /// <remarks>
        /// Updates call monitoring groups.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="callMonitoringBulkAssign">Changes for the given group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCallMonitoringGroupListWithHttpInfoAsync (string accountId, string groupId, CallMonitoringBulkAssign callMonitoringBulkAssign, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CallMonitoringGroupsApi : ICallMonitoringGroupsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CallMonitoringGroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CallMonitoringGroupsApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallMonitoringGroupsApi"/> class
        /// </summary>
        /// <returns></returns>
        public CallMonitoringGroupsApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallMonitoringGroupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CallMonitoringGroupsApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create Call Monitoring Group Creates a new call monitoring group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createCallMonitoringGroupRequest">Parameters of a call monitoring group that will be created</param>
        /// <returns>CallMonitoringGroup</returns>
        public CallMonitoringGroup CreateCallMonitoringGroup (string accountId, CreateCallMonitoringGroupRequest createCallMonitoringGroupRequest)
        {
             ApiResponse<CallMonitoringGroup> localVarResponse = CreateCallMonitoringGroupWithHttpInfo(accountId, createCallMonitoringGroupRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Call Monitoring Group Creates a new call monitoring group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createCallMonitoringGroupRequest">Parameters of a call monitoring group that will be created</param>
        /// <returns>ApiResponse of CallMonitoringGroup</returns>
        public ApiResponse<CallMonitoringGroup> CreateCallMonitoringGroupWithHttpInfo (string accountId, CreateCallMonitoringGroupRequest createCallMonitoringGroupRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallMonitoringGroupsApi->CreateCallMonitoringGroup");
            // verify the required parameter 'createCallMonitoringGroupRequest' is set
            if (createCallMonitoringGroupRequest == null)
                throw new ApiException(400, "Missing required parameter 'createCallMonitoringGroupRequest' when calling CallMonitoringGroupsApi->CreateCallMonitoringGroup");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-monitoring-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (createCallMonitoringGroupRequest != null && createCallMonitoringGroupRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createCallMonitoringGroupRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCallMonitoringGroupRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCallMonitoringGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallMonitoringGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallMonitoringGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallMonitoringGroup)));
        }

        /// <summary>
        /// Create Call Monitoring Group Creates a new call monitoring group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createCallMonitoringGroupRequest">Parameters of a call monitoring group that will be created</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallMonitoringGroup</returns>
        public async System.Threading.Tasks.Task<CallMonitoringGroup> CreateCallMonitoringGroupAsync (string accountId, CreateCallMonitoringGroupRequest createCallMonitoringGroupRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CallMonitoringGroup> localVarResponse = await CreateCallMonitoringGroupWithHttpInfoAsync(accountId, createCallMonitoringGroupRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Call Monitoring Group Creates a new call monitoring group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createCallMonitoringGroupRequest">Parameters of a call monitoring group that will be created</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallMonitoringGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallMonitoringGroup>> CreateCallMonitoringGroupWithHttpInfoAsync (string accountId, CreateCallMonitoringGroupRequest createCallMonitoringGroupRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallMonitoringGroupsApi->CreateCallMonitoringGroup");
            // verify the required parameter 'createCallMonitoringGroupRequest' is set
            if (createCallMonitoringGroupRequest == null)
                throw new ApiException(400, "Missing required parameter 'createCallMonitoringGroupRequest' when calling CallMonitoringGroupsApi->CreateCallMonitoringGroup");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-monitoring-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (createCallMonitoringGroupRequest != null && createCallMonitoringGroupRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createCallMonitoringGroupRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCallMonitoringGroupRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCallMonitoringGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallMonitoringGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallMonitoringGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallMonitoringGroup)));
        }

        /// <summary>
        /// Delete Call Monitoring Group Removes information about the given call monitoring group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <returns></returns>
        public void DeleteCallMonitoringGroup (string accountId, string groupId)
        {
             DeleteCallMonitoringGroupWithHttpInfo(accountId, groupId);
        }

        /// <summary>
        /// Delete Call Monitoring Group Removes information about the given call monitoring group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCallMonitoringGroupWithHttpInfo (string accountId, string groupId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallMonitoringGroupsApi->DeleteCallMonitoringGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling CallMonitoringGroupsApi->DeleteCallMonitoringGroup");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-monitoring-groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCallMonitoringGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Call Monitoring Group Removes information about the given call monitoring group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCallMonitoringGroupAsync (string accountId, string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteCallMonitoringGroupWithHttpInfoAsync(accountId, groupId, cancellationToken);

        }

        /// <summary>
        /// Delete Call Monitoring Group Removes information about the given call monitoring group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCallMonitoringGroupWithHttpInfoAsync (string accountId, string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallMonitoringGroupsApi->DeleteCallMonitoringGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling CallMonitoringGroupsApi->DeleteCallMonitoringGroup");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-monitoring-groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCallMonitoringGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get Call Monitoring Group Member List Returns call monitoring group members.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <returns>CallMonitoringGroupMemberList</returns>
        public CallMonitoringGroupMemberList ListCallMonitoringGroupMembers (string accountId, string groupId, int? page = default(int?), int? perPage = default(int?))
        {
             ApiResponse<CallMonitoringGroupMemberList> localVarResponse = ListCallMonitoringGroupMembersWithHttpInfo(accountId, groupId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Monitoring Group Member List Returns call monitoring group members.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <returns>ApiResponse of CallMonitoringGroupMemberList</returns>
        public ApiResponse<CallMonitoringGroupMemberList> ListCallMonitoringGroupMembersWithHttpInfo (string accountId, string groupId, int? page = default(int?), int? perPage = default(int?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallMonitoringGroupsApi->ListCallMonitoringGroupMembers");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling CallMonitoringGroupsApi->ListCallMonitoringGroupMembers");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-monitoring-groups/{groupId}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCallMonitoringGroupMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallMonitoringGroupMemberList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallMonitoringGroupMemberList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallMonitoringGroupMemberList)));
        }

        /// <summary>
        /// Get Call Monitoring Group Member List Returns call monitoring group members.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallMonitoringGroupMemberList</returns>
        public async System.Threading.Tasks.Task<CallMonitoringGroupMemberList> ListCallMonitoringGroupMembersAsync (string accountId, string groupId, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CallMonitoringGroupMemberList> localVarResponse = await ListCallMonitoringGroupMembersWithHttpInfoAsync(accountId, groupId, page, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Call Monitoring Group Member List Returns call monitoring group members.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallMonitoringGroupMemberList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallMonitoringGroupMemberList>> ListCallMonitoringGroupMembersWithHttpInfoAsync (string accountId, string groupId, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallMonitoringGroupsApi->ListCallMonitoringGroupMembers");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling CallMonitoringGroupsApi->ListCallMonitoringGroupMembers");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-monitoring-groups/{groupId}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCallMonitoringGroupMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallMonitoringGroupMemberList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallMonitoringGroupMemberList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallMonitoringGroupMemberList)));
        }

        /// <summary>
        /// Get Call Monitoring Groups List Returns call monitoring groups that can be filtered by some extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="memberExtensionId">Internal identifier of an extension that is a member of every group within the result (optional)</param>
        /// <returns>CallMonitoringGroups</returns>
        public CallMonitoringGroups ListCallMonitoringGroups (string accountId, int? page = default(int?), int? perPage = default(int?), string memberExtensionId = default(string))
        {
             ApiResponse<CallMonitoringGroups> localVarResponse = ListCallMonitoringGroupsWithHttpInfo(accountId, page, perPage, memberExtensionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Monitoring Groups List Returns call monitoring groups that can be filtered by some extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="memberExtensionId">Internal identifier of an extension that is a member of every group within the result (optional)</param>
        /// <returns>ApiResponse of CallMonitoringGroups</returns>
        public ApiResponse<CallMonitoringGroups> ListCallMonitoringGroupsWithHttpInfo (string accountId, int? page = default(int?), int? perPage = default(int?), string memberExtensionId = default(string))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallMonitoringGroupsApi->ListCallMonitoringGroups");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-monitoring-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (memberExtensionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "memberExtensionId", memberExtensionId)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCallMonitoringGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallMonitoringGroups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallMonitoringGroups) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallMonitoringGroups)));
        }

        /// <summary>
        /// Get Call Monitoring Groups List Returns call monitoring groups that can be filtered by some extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="memberExtensionId">Internal identifier of an extension that is a member of every group within the result (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallMonitoringGroups</returns>
        public async System.Threading.Tasks.Task<CallMonitoringGroups> ListCallMonitoringGroupsAsync (string accountId, int? page = default(int?), int? perPage = default(int?), string memberExtensionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CallMonitoringGroups> localVarResponse = await ListCallMonitoringGroupsWithHttpInfoAsync(accountId, page, perPage, memberExtensionId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Call Monitoring Groups List Returns call monitoring groups that can be filtered by some extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="memberExtensionId">Internal identifier of an extension that is a member of every group within the result (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallMonitoringGroups)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallMonitoringGroups>> ListCallMonitoringGroupsWithHttpInfoAsync (string accountId, int? page = default(int?), int? perPage = default(int?), string memberExtensionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallMonitoringGroupsApi->ListCallMonitoringGroups");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-monitoring-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (memberExtensionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "memberExtensionId", memberExtensionId)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCallMonitoringGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallMonitoringGroups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallMonitoringGroups) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallMonitoringGroups)));
        }

        /// <summary>
        /// Updates Call Monitoring Group Updates call monitoring group name by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId">Internal identifier of a call monitoring group</param>
        /// <param name="createCallMonitoringGroupRequest">Parameters of a call monitoring group that will be updated</param>
        /// <returns>CallMonitoringGroup</returns>
        public CallMonitoringGroup UpdateCallMonitoringGroup (string accountId, string groupId, CreateCallMonitoringGroupRequest createCallMonitoringGroupRequest)
        {
             ApiResponse<CallMonitoringGroup> localVarResponse = UpdateCallMonitoringGroupWithHttpInfo(accountId, groupId, createCallMonitoringGroupRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates Call Monitoring Group Updates call monitoring group name by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId">Internal identifier of a call monitoring group</param>
        /// <param name="createCallMonitoringGroupRequest">Parameters of a call monitoring group that will be updated</param>
        /// <returns>ApiResponse of CallMonitoringGroup</returns>
        public ApiResponse<CallMonitoringGroup> UpdateCallMonitoringGroupWithHttpInfo (string accountId, string groupId, CreateCallMonitoringGroupRequest createCallMonitoringGroupRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallMonitoringGroupsApi->UpdateCallMonitoringGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling CallMonitoringGroupsApi->UpdateCallMonitoringGroup");
            // verify the required parameter 'createCallMonitoringGroupRequest' is set
            if (createCallMonitoringGroupRequest == null)
                throw new ApiException(400, "Missing required parameter 'createCallMonitoringGroupRequest' when calling CallMonitoringGroupsApi->UpdateCallMonitoringGroup");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-monitoring-groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (createCallMonitoringGroupRequest != null && createCallMonitoringGroupRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createCallMonitoringGroupRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCallMonitoringGroupRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCallMonitoringGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallMonitoringGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallMonitoringGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallMonitoringGroup)));
        }

        /// <summary>
        /// Updates Call Monitoring Group Updates call monitoring group name by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId">Internal identifier of a call monitoring group</param>
        /// <param name="createCallMonitoringGroupRequest">Parameters of a call monitoring group that will be updated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallMonitoringGroup</returns>
        public async System.Threading.Tasks.Task<CallMonitoringGroup> UpdateCallMonitoringGroupAsync (string accountId, string groupId, CreateCallMonitoringGroupRequest createCallMonitoringGroupRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CallMonitoringGroup> localVarResponse = await UpdateCallMonitoringGroupWithHttpInfoAsync(accountId, groupId, createCallMonitoringGroupRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates Call Monitoring Group Updates call monitoring group name by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId">Internal identifier of a call monitoring group</param>
        /// <param name="createCallMonitoringGroupRequest">Parameters of a call monitoring group that will be updated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallMonitoringGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallMonitoringGroup>> UpdateCallMonitoringGroupWithHttpInfoAsync (string accountId, string groupId, CreateCallMonitoringGroupRequest createCallMonitoringGroupRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallMonitoringGroupsApi->UpdateCallMonitoringGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling CallMonitoringGroupsApi->UpdateCallMonitoringGroup");
            // verify the required parameter 'createCallMonitoringGroupRequest' is set
            if (createCallMonitoringGroupRequest == null)
                throw new ApiException(400, "Missing required parameter 'createCallMonitoringGroupRequest' when calling CallMonitoringGroupsApi->UpdateCallMonitoringGroup");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-monitoring-groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (createCallMonitoringGroupRequest != null && createCallMonitoringGroupRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createCallMonitoringGroupRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCallMonitoringGroupRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCallMonitoringGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallMonitoringGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallMonitoringGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallMonitoringGroup)));
        }

        /// <summary>
        /// Update Call Monitoring Group List Updates call monitoring groups.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="callMonitoringBulkAssign">Changes for the given group</param>
        /// <returns></returns>
        public void UpdateCallMonitoringGroupList (string accountId, string groupId, CallMonitoringBulkAssign callMonitoringBulkAssign)
        {
             UpdateCallMonitoringGroupListWithHttpInfo(accountId, groupId, callMonitoringBulkAssign);
        }

        /// <summary>
        /// Update Call Monitoring Group List Updates call monitoring groups.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="callMonitoringBulkAssign">Changes for the given group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateCallMonitoringGroupListWithHttpInfo (string accountId, string groupId, CallMonitoringBulkAssign callMonitoringBulkAssign)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallMonitoringGroupsApi->UpdateCallMonitoringGroupList");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling CallMonitoringGroupsApi->UpdateCallMonitoringGroupList");
            // verify the required parameter 'callMonitoringBulkAssign' is set
            if (callMonitoringBulkAssign == null)
                throw new ApiException(400, "Missing required parameter 'callMonitoringBulkAssign' when calling CallMonitoringGroupsApi->UpdateCallMonitoringGroupList");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-monitoring-groups/{groupId}/bulk-assign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (callMonitoringBulkAssign != null && callMonitoringBulkAssign.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(callMonitoringBulkAssign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = callMonitoringBulkAssign; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCallMonitoringGroupList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update Call Monitoring Group List Updates call monitoring groups.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="callMonitoringBulkAssign">Changes for the given group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateCallMonitoringGroupListAsync (string accountId, string groupId, CallMonitoringBulkAssign callMonitoringBulkAssign, CancellationToken cancellationToken = default(CancellationToken))
        {
             await UpdateCallMonitoringGroupListWithHttpInfoAsync(accountId, groupId, callMonitoringBulkAssign, cancellationToken);

        }

        /// <summary>
        /// Update Call Monitoring Group List Updates call monitoring groups.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId"></param>
        /// <param name="callMonitoringBulkAssign">Changes for the given group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCallMonitoringGroupListWithHttpInfoAsync (string accountId, string groupId, CallMonitoringBulkAssign callMonitoringBulkAssign, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallMonitoringGroupsApi->UpdateCallMonitoringGroupList");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling CallMonitoringGroupsApi->UpdateCallMonitoringGroupList");
            // verify the required parameter 'callMonitoringBulkAssign' is set
            if (callMonitoringBulkAssign == null)
                throw new ApiException(400, "Missing required parameter 'callMonitoringBulkAssign' when calling CallMonitoringGroupsApi->UpdateCallMonitoringGroupList");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-monitoring-groups/{groupId}/bulk-assign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (callMonitoringBulkAssign != null && callMonitoringBulkAssign.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(callMonitoringBulkAssign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = callMonitoringBulkAssign; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCallMonitoringGroupList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
