/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICallBlockingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Blocked/Allowed Number
        /// </summary>
        /// <remarks>
        /// Updates either blocked or allowed phone number list with a new phone number.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="addBlockedAllowedPhoneNumber">JSON body</param>
        /// <returns>BlockedAllowedPhoneNumberInfo</returns>
        BlockedAllowedPhoneNumberInfo CreateBlockedAllowedNumber (string accountId, string extensionId, AddBlockedAllowedPhoneNumber addBlockedAllowedPhoneNumber);

        /// <summary>
        /// Add Blocked/Allowed Number
        /// </summary>
        /// <remarks>
        /// Updates either blocked or allowed phone number list with a new phone number.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="addBlockedAllowedPhoneNumber">JSON body</param>
        /// <returns>ApiResponse of BlockedAllowedPhoneNumberInfo</returns>
        ApiResponse<BlockedAllowedPhoneNumberInfo> CreateBlockedAllowedNumberWithHttpInfo (string accountId, string extensionId, AddBlockedAllowedPhoneNumber addBlockedAllowedPhoneNumber);
        /// <summary>
        /// Delete Blocked/Allowed Number
        /// </summary>
        /// <remarks>
        /// Deletes blocked or allowed phone number(s) by their ID(s). Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="blockedNumberId"></param>
        /// <returns></returns>
        void DeleteBlockedAllowedNumber (string accountId, string extensionId, string blockedNumberId);

        /// <summary>
        /// Delete Blocked/Allowed Number
        /// </summary>
        /// <remarks>
        /// Deletes blocked or allowed phone number(s) by their ID(s). Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="blockedNumberId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBlockedAllowedNumberWithHttpInfo (string accountId, string extensionId, string blockedNumberId);
        /// <summary>
        /// Get Blocked/Allowed Phone Numbers
        /// </summary>
        /// <remarks>
        /// Returns the lists of blocked and allowed phone numbers.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <returns>BlockedAllowedPhoneNumbersList</returns>
        BlockedAllowedPhoneNumbersList ListBlockedAllowedNumbers (string accountId, string extensionId, int? page = default(int?), int? perPage = default(int?), string status = default(string));

        /// <summary>
        /// Get Blocked/Allowed Phone Numbers
        /// </summary>
        /// <remarks>
        /// Returns the lists of blocked and allowed phone numbers.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <returns>ApiResponse of BlockedAllowedPhoneNumbersList</returns>
        ApiResponse<BlockedAllowedPhoneNumbersList> ListBlockedAllowedNumbersWithHttpInfo (string accountId, string extensionId, int? page = default(int?), int? perPage = default(int?), string status = default(string));
        /// <summary>
        /// Get Blocked/Allowed Number
        /// </summary>
        /// <remarks>
        /// Returns blocked or allowed phone number(s) by their ID(s). Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="blockedNumberId"></param>
        /// <returns>BlockedAllowedPhoneNumberInfo</returns>
        BlockedAllowedPhoneNumberInfo ReadBlockedAllowedNumber (string accountId, string extensionId, string blockedNumberId);

        /// <summary>
        /// Get Blocked/Allowed Number
        /// </summary>
        /// <remarks>
        /// Returns blocked or allowed phone number(s) by their ID(s). Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="blockedNumberId"></param>
        /// <returns>ApiResponse of BlockedAllowedPhoneNumberInfo</returns>
        ApiResponse<BlockedAllowedPhoneNumberInfo> ReadBlockedAllowedNumberWithHttpInfo (string accountId, string extensionId, string blockedNumberId);
        /// <summary>
        /// Get Caller Blocking Settings
        /// </summary>
        /// <remarks>
        /// Returns the current caller blocking settings of a user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <returns>CallerBlockingSettings</returns>
        CallerBlockingSettings ReadCallerBlockingSettings (string accountId, string extensionId);

        /// <summary>
        /// Get Caller Blocking Settings
        /// </summary>
        /// <remarks>
        /// Returns the current caller blocking settings of a user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <returns>ApiResponse of CallerBlockingSettings</returns>
        ApiResponse<CallerBlockingSettings> ReadCallerBlockingSettingsWithHttpInfo (string accountId, string extensionId);
        /// <summary>
        /// Update Blocked/Allowed Number
        /// </summary>
        /// <remarks>
        /// Updates blocked or allowed phone number(s) by their ID(s). Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="blockedNumberId"></param>
        /// <param name="addBlockedAllowedPhoneNumber"> (optional)</param>
        /// <returns>BlockedAllowedPhoneNumberInfo</returns>
        BlockedAllowedPhoneNumberInfo UpdateBlockedAllowedNumber (string accountId, string extensionId, string blockedNumberId, AddBlockedAllowedPhoneNumber addBlockedAllowedPhoneNumber = default(AddBlockedAllowedPhoneNumber));

        /// <summary>
        /// Update Blocked/Allowed Number
        /// </summary>
        /// <remarks>
        /// Updates blocked or allowed phone number(s) by their ID(s). Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="blockedNumberId"></param>
        /// <param name="addBlockedAllowedPhoneNumber"> (optional)</param>
        /// <returns>ApiResponse of BlockedAllowedPhoneNumberInfo</returns>
        ApiResponse<BlockedAllowedPhoneNumberInfo> UpdateBlockedAllowedNumberWithHttpInfo (string accountId, string extensionId, string blockedNumberId, AddBlockedAllowedPhoneNumber addBlockedAllowedPhoneNumber = default(AddBlockedAllowedPhoneNumber));
        /// <summary>
        /// Update Caller Blocking Settings
        /// </summary>
        /// <remarks>
        /// Updates the current caller blocking settings of a user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="callerBlockingSettingsUpdate"> (optional)</param>
        /// <returns>CallerBlockingSettings</returns>
        CallerBlockingSettings UpdateCallerBlockingSettings (string accountId, string extensionId, CallerBlockingSettingsUpdate callerBlockingSettingsUpdate = default(CallerBlockingSettingsUpdate));

        /// <summary>
        /// Update Caller Blocking Settings
        /// </summary>
        /// <remarks>
        /// Updates the current caller blocking settings of a user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="callerBlockingSettingsUpdate"> (optional)</param>
        /// <returns>ApiResponse of CallerBlockingSettings</returns>
        ApiResponse<CallerBlockingSettings> UpdateCallerBlockingSettingsWithHttpInfo (string accountId, string extensionId, CallerBlockingSettingsUpdate callerBlockingSettingsUpdate = default(CallerBlockingSettingsUpdate));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add Blocked/Allowed Number
        /// </summary>
        /// <remarks>
        /// Updates either blocked or allowed phone number list with a new phone number.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="addBlockedAllowedPhoneNumber">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BlockedAllowedPhoneNumberInfo</returns>
        System.Threading.Tasks.Task<BlockedAllowedPhoneNumberInfo> CreateBlockedAllowedNumberAsync (string accountId, string extensionId, AddBlockedAllowedPhoneNumber addBlockedAllowedPhoneNumber, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add Blocked/Allowed Number
        /// </summary>
        /// <remarks>
        /// Updates either blocked or allowed phone number list with a new phone number.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="addBlockedAllowedPhoneNumber">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BlockedAllowedPhoneNumberInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockedAllowedPhoneNumberInfo>> CreateBlockedAllowedNumberWithHttpInfoAsync (string accountId, string extensionId, AddBlockedAllowedPhoneNumber addBlockedAllowedPhoneNumber, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete Blocked/Allowed Number
        /// </summary>
        /// <remarks>
        /// Deletes blocked or allowed phone number(s) by their ID(s). Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="blockedNumberId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBlockedAllowedNumberAsync (string accountId, string extensionId, string blockedNumberId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Blocked/Allowed Number
        /// </summary>
        /// <remarks>
        /// Deletes blocked or allowed phone number(s) by their ID(s). Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="blockedNumberId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBlockedAllowedNumberWithHttpInfoAsync (string accountId, string extensionId, string blockedNumberId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Blocked/Allowed Phone Numbers
        /// </summary>
        /// <remarks>
        /// Returns the lists of blocked and allowed phone numbers.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BlockedAllowedPhoneNumbersList</returns>
        System.Threading.Tasks.Task<BlockedAllowedPhoneNumbersList> ListBlockedAllowedNumbersAsync (string accountId, string extensionId, int? page = default(int?), int? perPage = default(int?), string status = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Blocked/Allowed Phone Numbers
        /// </summary>
        /// <remarks>
        /// Returns the lists of blocked and allowed phone numbers.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BlockedAllowedPhoneNumbersList)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockedAllowedPhoneNumbersList>> ListBlockedAllowedNumbersWithHttpInfoAsync (string accountId, string extensionId, int? page = default(int?), int? perPage = default(int?), string status = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Blocked/Allowed Number
        /// </summary>
        /// <remarks>
        /// Returns blocked or allowed phone number(s) by their ID(s). Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="blockedNumberId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BlockedAllowedPhoneNumberInfo</returns>
        System.Threading.Tasks.Task<BlockedAllowedPhoneNumberInfo> ReadBlockedAllowedNumberAsync (string accountId, string extensionId, string blockedNumberId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Blocked/Allowed Number
        /// </summary>
        /// <remarks>
        /// Returns blocked or allowed phone number(s) by their ID(s). Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="blockedNumberId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BlockedAllowedPhoneNumberInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockedAllowedPhoneNumberInfo>> ReadBlockedAllowedNumberWithHttpInfoAsync (string accountId, string extensionId, string blockedNumberId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Caller Blocking Settings
        /// </summary>
        /// <remarks>
        /// Returns the current caller blocking settings of a user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallerBlockingSettings</returns>
        System.Threading.Tasks.Task<CallerBlockingSettings> ReadCallerBlockingSettingsAsync (string accountId, string extensionId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Caller Blocking Settings
        /// </summary>
        /// <remarks>
        /// Returns the current caller blocking settings of a user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallerBlockingSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallerBlockingSettings>> ReadCallerBlockingSettingsWithHttpInfoAsync (string accountId, string extensionId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Blocked/Allowed Number
        /// </summary>
        /// <remarks>
        /// Updates blocked or allowed phone number(s) by their ID(s). Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="blockedNumberId"></param>
        /// <param name="addBlockedAllowedPhoneNumber"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BlockedAllowedPhoneNumberInfo</returns>
        System.Threading.Tasks.Task<BlockedAllowedPhoneNumberInfo> UpdateBlockedAllowedNumberAsync (string accountId, string extensionId, string blockedNumberId, AddBlockedAllowedPhoneNumber addBlockedAllowedPhoneNumber = default(AddBlockedAllowedPhoneNumber), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Blocked/Allowed Number
        /// </summary>
        /// <remarks>
        /// Updates blocked or allowed phone number(s) by their ID(s). Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="blockedNumberId"></param>
        /// <param name="addBlockedAllowedPhoneNumber"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BlockedAllowedPhoneNumberInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockedAllowedPhoneNumberInfo>> UpdateBlockedAllowedNumberWithHttpInfoAsync (string accountId, string extensionId, string blockedNumberId, AddBlockedAllowedPhoneNumber addBlockedAllowedPhoneNumber = default(AddBlockedAllowedPhoneNumber), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Caller Blocking Settings
        /// </summary>
        /// <remarks>
        /// Updates the current caller blocking settings of a user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="callerBlockingSettingsUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallerBlockingSettings</returns>
        System.Threading.Tasks.Task<CallerBlockingSettings> UpdateCallerBlockingSettingsAsync (string accountId, string extensionId, CallerBlockingSettingsUpdate callerBlockingSettingsUpdate = default(CallerBlockingSettingsUpdate), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Caller Blocking Settings
        /// </summary>
        /// <remarks>
        /// Updates the current caller blocking settings of a user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="callerBlockingSettingsUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallerBlockingSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallerBlockingSettings>> UpdateCallerBlockingSettingsWithHttpInfoAsync (string accountId, string extensionId, CallerBlockingSettingsUpdate callerBlockingSettingsUpdate = default(CallerBlockingSettingsUpdate), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CallBlockingApi : ICallBlockingApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CallBlockingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CallBlockingApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallBlockingApi"/> class
        /// </summary>
        /// <returns></returns>
        public CallBlockingApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallBlockingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CallBlockingApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add Blocked/Allowed Number Updates either blocked or allowed phone number list with a new phone number.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="addBlockedAllowedPhoneNumber">JSON body</param>
        /// <returns>BlockedAllowedPhoneNumberInfo</returns>
        public BlockedAllowedPhoneNumberInfo CreateBlockedAllowedNumber (string accountId, string extensionId, AddBlockedAllowedPhoneNumber addBlockedAllowedPhoneNumber)
        {
             ApiResponse<BlockedAllowedPhoneNumberInfo> localVarResponse = CreateBlockedAllowedNumberWithHttpInfo(accountId, extensionId, addBlockedAllowedPhoneNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Blocked/Allowed Number Updates either blocked or allowed phone number list with a new phone number.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="addBlockedAllowedPhoneNumber">JSON body</param>
        /// <returns>ApiResponse of BlockedAllowedPhoneNumberInfo</returns>
        public ApiResponse<BlockedAllowedPhoneNumberInfo> CreateBlockedAllowedNumberWithHttpInfo (string accountId, string extensionId, AddBlockedAllowedPhoneNumber addBlockedAllowedPhoneNumber)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallBlockingApi->CreateBlockedAllowedNumber");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallBlockingApi->CreateBlockedAllowedNumber");
            // verify the required parameter 'addBlockedAllowedPhoneNumber' is set
            if (addBlockedAllowedPhoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'addBlockedAllowedPhoneNumber' when calling CallBlockingApi->CreateBlockedAllowedNumber");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/caller-blocking/phone-numbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (addBlockedAllowedPhoneNumber != null && addBlockedAllowedPhoneNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addBlockedAllowedPhoneNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addBlockedAllowedPhoneNumber; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBlockedAllowedNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockedAllowedPhoneNumberInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BlockedAllowedPhoneNumberInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockedAllowedPhoneNumberInfo)));
        }

        /// <summary>
        /// Add Blocked/Allowed Number Updates either blocked or allowed phone number list with a new phone number.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="addBlockedAllowedPhoneNumber">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BlockedAllowedPhoneNumberInfo</returns>
        public async System.Threading.Tasks.Task<BlockedAllowedPhoneNumberInfo> CreateBlockedAllowedNumberAsync (string accountId, string extensionId, AddBlockedAllowedPhoneNumber addBlockedAllowedPhoneNumber, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BlockedAllowedPhoneNumberInfo> localVarResponse = await CreateBlockedAllowedNumberWithHttpInfoAsync(accountId, extensionId, addBlockedAllowedPhoneNumber, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Blocked/Allowed Number Updates either blocked or allowed phone number list with a new phone number.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="addBlockedAllowedPhoneNumber">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BlockedAllowedPhoneNumberInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BlockedAllowedPhoneNumberInfo>> CreateBlockedAllowedNumberWithHttpInfoAsync (string accountId, string extensionId, AddBlockedAllowedPhoneNumber addBlockedAllowedPhoneNumber, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallBlockingApi->CreateBlockedAllowedNumber");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallBlockingApi->CreateBlockedAllowedNumber");
            // verify the required parameter 'addBlockedAllowedPhoneNumber' is set
            if (addBlockedAllowedPhoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'addBlockedAllowedPhoneNumber' when calling CallBlockingApi->CreateBlockedAllowedNumber");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/caller-blocking/phone-numbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (addBlockedAllowedPhoneNumber != null && addBlockedAllowedPhoneNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addBlockedAllowedPhoneNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addBlockedAllowedPhoneNumber; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBlockedAllowedNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockedAllowedPhoneNumberInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BlockedAllowedPhoneNumberInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockedAllowedPhoneNumberInfo)));
        }

        /// <summary>
        /// Delete Blocked/Allowed Number Deletes blocked or allowed phone number(s) by their ID(s). Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="blockedNumberId"></param>
        /// <returns></returns>
        public void DeleteBlockedAllowedNumber (string accountId, string extensionId, string blockedNumberId)
        {
             DeleteBlockedAllowedNumberWithHttpInfo(accountId, extensionId, blockedNumberId);
        }

        /// <summary>
        /// Delete Blocked/Allowed Number Deletes blocked or allowed phone number(s) by their ID(s). Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="blockedNumberId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteBlockedAllowedNumberWithHttpInfo (string accountId, string extensionId, string blockedNumberId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallBlockingApi->DeleteBlockedAllowedNumber");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallBlockingApi->DeleteBlockedAllowedNumber");
            // verify the required parameter 'blockedNumberId' is set
            if (blockedNumberId == null)
                throw new ApiException(400, "Missing required parameter 'blockedNumberId' when calling CallBlockingApi->DeleteBlockedAllowedNumber");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/caller-blocking/phone-numbers/{blockedNumberId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (blockedNumberId != null) localVarPathParams.Add("blockedNumberId", this.Configuration.ApiClient.ParameterToString(blockedNumberId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBlockedAllowedNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Blocked/Allowed Number Deletes blocked or allowed phone number(s) by their ID(s). Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="blockedNumberId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBlockedAllowedNumberAsync (string accountId, string extensionId, string blockedNumberId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteBlockedAllowedNumberWithHttpInfoAsync(accountId, extensionId, blockedNumberId, cancellationToken);

        }

        /// <summary>
        /// Delete Blocked/Allowed Number Deletes blocked or allowed phone number(s) by their ID(s). Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="blockedNumberId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBlockedAllowedNumberWithHttpInfoAsync (string accountId, string extensionId, string blockedNumberId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallBlockingApi->DeleteBlockedAllowedNumber");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallBlockingApi->DeleteBlockedAllowedNumber");
            // verify the required parameter 'blockedNumberId' is set
            if (blockedNumberId == null)
                throw new ApiException(400, "Missing required parameter 'blockedNumberId' when calling CallBlockingApi->DeleteBlockedAllowedNumber");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/caller-blocking/phone-numbers/{blockedNumberId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (blockedNumberId != null) localVarPathParams.Add("blockedNumberId", this.Configuration.ApiClient.ParameterToString(blockedNumberId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBlockedAllowedNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get Blocked/Allowed Phone Numbers Returns the lists of blocked and allowed phone numbers.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <returns>BlockedAllowedPhoneNumbersList</returns>
        public BlockedAllowedPhoneNumbersList ListBlockedAllowedNumbers (string accountId, string extensionId, int? page = default(int?), int? perPage = default(int?), string status = default(string))
        {
             ApiResponse<BlockedAllowedPhoneNumbersList> localVarResponse = ListBlockedAllowedNumbersWithHttpInfo(accountId, extensionId, page, perPage, status);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Blocked/Allowed Phone Numbers Returns the lists of blocked and allowed phone numbers.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <returns>ApiResponse of BlockedAllowedPhoneNumbersList</returns>
        public ApiResponse<BlockedAllowedPhoneNumbersList> ListBlockedAllowedNumbersWithHttpInfo (string accountId, string extensionId, int? page = default(int?), int? perPage = default(int?), string status = default(string))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallBlockingApi->ListBlockedAllowedNumbers");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallBlockingApi->ListBlockedAllowedNumbers");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/caller-blocking/phone-numbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBlockedAllowedNumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockedAllowedPhoneNumbersList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BlockedAllowedPhoneNumbersList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockedAllowedPhoneNumbersList)));
        }

        /// <summary>
        /// Get Blocked/Allowed Phone Numbers Returns the lists of blocked and allowed phone numbers.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BlockedAllowedPhoneNumbersList</returns>
        public async System.Threading.Tasks.Task<BlockedAllowedPhoneNumbersList> ListBlockedAllowedNumbersAsync (string accountId, string extensionId, int? page = default(int?), int? perPage = default(int?), string status = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BlockedAllowedPhoneNumbersList> localVarResponse = await ListBlockedAllowedNumbersWithHttpInfoAsync(accountId, extensionId, page, perPage, status, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Blocked/Allowed Phone Numbers Returns the lists of blocked and allowed phone numbers.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BlockedAllowedPhoneNumbersList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BlockedAllowedPhoneNumbersList>> ListBlockedAllowedNumbersWithHttpInfoAsync (string accountId, string extensionId, int? page = default(int?), int? perPage = default(int?), string status = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallBlockingApi->ListBlockedAllowedNumbers");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallBlockingApi->ListBlockedAllowedNumbers");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/caller-blocking/phone-numbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBlockedAllowedNumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockedAllowedPhoneNumbersList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BlockedAllowedPhoneNumbersList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockedAllowedPhoneNumbersList)));
        }

        /// <summary>
        /// Get Blocked/Allowed Number Returns blocked or allowed phone number(s) by their ID(s). Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="blockedNumberId"></param>
        /// <returns>BlockedAllowedPhoneNumberInfo</returns>
        public BlockedAllowedPhoneNumberInfo ReadBlockedAllowedNumber (string accountId, string extensionId, string blockedNumberId)
        {
             ApiResponse<BlockedAllowedPhoneNumberInfo> localVarResponse = ReadBlockedAllowedNumberWithHttpInfo(accountId, extensionId, blockedNumberId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Blocked/Allowed Number Returns blocked or allowed phone number(s) by their ID(s). Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="blockedNumberId"></param>
        /// <returns>ApiResponse of BlockedAllowedPhoneNumberInfo</returns>
        public ApiResponse<BlockedAllowedPhoneNumberInfo> ReadBlockedAllowedNumberWithHttpInfo (string accountId, string extensionId, string blockedNumberId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallBlockingApi->ReadBlockedAllowedNumber");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallBlockingApi->ReadBlockedAllowedNumber");
            // verify the required parameter 'blockedNumberId' is set
            if (blockedNumberId == null)
                throw new ApiException(400, "Missing required parameter 'blockedNumberId' when calling CallBlockingApi->ReadBlockedAllowedNumber");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/caller-blocking/phone-numbers/{blockedNumberId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (blockedNumberId != null) localVarPathParams.Add("blockedNumberId", this.Configuration.ApiClient.ParameterToString(blockedNumberId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadBlockedAllowedNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockedAllowedPhoneNumberInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BlockedAllowedPhoneNumberInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockedAllowedPhoneNumberInfo)));
        }

        /// <summary>
        /// Get Blocked/Allowed Number Returns blocked or allowed phone number(s) by their ID(s). Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="blockedNumberId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BlockedAllowedPhoneNumberInfo</returns>
        public async System.Threading.Tasks.Task<BlockedAllowedPhoneNumberInfo> ReadBlockedAllowedNumberAsync (string accountId, string extensionId, string blockedNumberId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BlockedAllowedPhoneNumberInfo> localVarResponse = await ReadBlockedAllowedNumberWithHttpInfoAsync(accountId, extensionId, blockedNumberId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Blocked/Allowed Number Returns blocked or allowed phone number(s) by their ID(s). Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="blockedNumberId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BlockedAllowedPhoneNumberInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BlockedAllowedPhoneNumberInfo>> ReadBlockedAllowedNumberWithHttpInfoAsync (string accountId, string extensionId, string blockedNumberId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallBlockingApi->ReadBlockedAllowedNumber");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallBlockingApi->ReadBlockedAllowedNumber");
            // verify the required parameter 'blockedNumberId' is set
            if (blockedNumberId == null)
                throw new ApiException(400, "Missing required parameter 'blockedNumberId' when calling CallBlockingApi->ReadBlockedAllowedNumber");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/caller-blocking/phone-numbers/{blockedNumberId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (blockedNumberId != null) localVarPathParams.Add("blockedNumberId", this.Configuration.ApiClient.ParameterToString(blockedNumberId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadBlockedAllowedNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockedAllowedPhoneNumberInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BlockedAllowedPhoneNumberInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockedAllowedPhoneNumberInfo)));
        }

        /// <summary>
        /// Get Caller Blocking Settings Returns the current caller blocking settings of a user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <returns>CallerBlockingSettings</returns>
        public CallerBlockingSettings ReadCallerBlockingSettings (string accountId, string extensionId)
        {
             ApiResponse<CallerBlockingSettings> localVarResponse = ReadCallerBlockingSettingsWithHttpInfo(accountId, extensionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Caller Blocking Settings Returns the current caller blocking settings of a user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <returns>ApiResponse of CallerBlockingSettings</returns>
        public ApiResponse<CallerBlockingSettings> ReadCallerBlockingSettingsWithHttpInfo (string accountId, string extensionId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallBlockingApi->ReadCallerBlockingSettings");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallBlockingApi->ReadCallerBlockingSettings");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/caller-blocking";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadCallerBlockingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallerBlockingSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallerBlockingSettings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallerBlockingSettings)));
        }

        /// <summary>
        /// Get Caller Blocking Settings Returns the current caller blocking settings of a user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallerBlockingSettings</returns>
        public async System.Threading.Tasks.Task<CallerBlockingSettings> ReadCallerBlockingSettingsAsync (string accountId, string extensionId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CallerBlockingSettings> localVarResponse = await ReadCallerBlockingSettingsWithHttpInfoAsync(accountId, extensionId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Caller Blocking Settings Returns the current caller blocking settings of a user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallerBlockingSettings)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallerBlockingSettings>> ReadCallerBlockingSettingsWithHttpInfoAsync (string accountId, string extensionId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallBlockingApi->ReadCallerBlockingSettings");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallBlockingApi->ReadCallerBlockingSettings");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/caller-blocking";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadCallerBlockingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallerBlockingSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallerBlockingSettings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallerBlockingSettings)));
        }

        /// <summary>
        /// Update Blocked/Allowed Number Updates blocked or allowed phone number(s) by their ID(s). Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="blockedNumberId"></param>
        /// <param name="addBlockedAllowedPhoneNumber"> (optional)</param>
        /// <returns>BlockedAllowedPhoneNumberInfo</returns>
        public BlockedAllowedPhoneNumberInfo UpdateBlockedAllowedNumber (string accountId, string extensionId, string blockedNumberId, AddBlockedAllowedPhoneNumber addBlockedAllowedPhoneNumber = default(AddBlockedAllowedPhoneNumber))
        {
             ApiResponse<BlockedAllowedPhoneNumberInfo> localVarResponse = UpdateBlockedAllowedNumberWithHttpInfo(accountId, extensionId, blockedNumberId, addBlockedAllowedPhoneNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Blocked/Allowed Number Updates blocked or allowed phone number(s) by their ID(s). Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="blockedNumberId"></param>
        /// <param name="addBlockedAllowedPhoneNumber"> (optional)</param>
        /// <returns>ApiResponse of BlockedAllowedPhoneNumberInfo</returns>
        public ApiResponse<BlockedAllowedPhoneNumberInfo> UpdateBlockedAllowedNumberWithHttpInfo (string accountId, string extensionId, string blockedNumberId, AddBlockedAllowedPhoneNumber addBlockedAllowedPhoneNumber = default(AddBlockedAllowedPhoneNumber))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallBlockingApi->UpdateBlockedAllowedNumber");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallBlockingApi->UpdateBlockedAllowedNumber");
            // verify the required parameter 'blockedNumberId' is set
            if (blockedNumberId == null)
                throw new ApiException(400, "Missing required parameter 'blockedNumberId' when calling CallBlockingApi->UpdateBlockedAllowedNumber");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/caller-blocking/phone-numbers/{blockedNumberId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (blockedNumberId != null) localVarPathParams.Add("blockedNumberId", this.Configuration.ApiClient.ParameterToString(blockedNumberId)); // path parameter
            if (addBlockedAllowedPhoneNumber != null && addBlockedAllowedPhoneNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addBlockedAllowedPhoneNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addBlockedAllowedPhoneNumber; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBlockedAllowedNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockedAllowedPhoneNumberInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BlockedAllowedPhoneNumberInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockedAllowedPhoneNumberInfo)));
        }

        /// <summary>
        /// Update Blocked/Allowed Number Updates blocked or allowed phone number(s) by their ID(s). Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="blockedNumberId"></param>
        /// <param name="addBlockedAllowedPhoneNumber"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BlockedAllowedPhoneNumberInfo</returns>
        public async System.Threading.Tasks.Task<BlockedAllowedPhoneNumberInfo> UpdateBlockedAllowedNumberAsync (string accountId, string extensionId, string blockedNumberId, AddBlockedAllowedPhoneNumber addBlockedAllowedPhoneNumber = default(AddBlockedAllowedPhoneNumber), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BlockedAllowedPhoneNumberInfo> localVarResponse = await UpdateBlockedAllowedNumberWithHttpInfoAsync(accountId, extensionId, blockedNumberId, addBlockedAllowedPhoneNumber, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Blocked/Allowed Number Updates blocked or allowed phone number(s) by their ID(s). Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="blockedNumberId"></param>
        /// <param name="addBlockedAllowedPhoneNumber"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BlockedAllowedPhoneNumberInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BlockedAllowedPhoneNumberInfo>> UpdateBlockedAllowedNumberWithHttpInfoAsync (string accountId, string extensionId, string blockedNumberId, AddBlockedAllowedPhoneNumber addBlockedAllowedPhoneNumber = default(AddBlockedAllowedPhoneNumber), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallBlockingApi->UpdateBlockedAllowedNumber");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallBlockingApi->UpdateBlockedAllowedNumber");
            // verify the required parameter 'blockedNumberId' is set
            if (blockedNumberId == null)
                throw new ApiException(400, "Missing required parameter 'blockedNumberId' when calling CallBlockingApi->UpdateBlockedAllowedNumber");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/caller-blocking/phone-numbers/{blockedNumberId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (blockedNumberId != null) localVarPathParams.Add("blockedNumberId", this.Configuration.ApiClient.ParameterToString(blockedNumberId)); // path parameter
            if (addBlockedAllowedPhoneNumber != null && addBlockedAllowedPhoneNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addBlockedAllowedPhoneNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addBlockedAllowedPhoneNumber; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBlockedAllowedNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockedAllowedPhoneNumberInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BlockedAllowedPhoneNumberInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockedAllowedPhoneNumberInfo)));
        }

        /// <summary>
        /// Update Caller Blocking Settings Updates the current caller blocking settings of a user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="callerBlockingSettingsUpdate"> (optional)</param>
        /// <returns>CallerBlockingSettings</returns>
        public CallerBlockingSettings UpdateCallerBlockingSettings (string accountId, string extensionId, CallerBlockingSettingsUpdate callerBlockingSettingsUpdate = default(CallerBlockingSettingsUpdate))
        {
             ApiResponse<CallerBlockingSettings> localVarResponse = UpdateCallerBlockingSettingsWithHttpInfo(accountId, extensionId, callerBlockingSettingsUpdate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Caller Blocking Settings Updates the current caller blocking settings of a user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="callerBlockingSettingsUpdate"> (optional)</param>
        /// <returns>ApiResponse of CallerBlockingSettings</returns>
        public ApiResponse<CallerBlockingSettings> UpdateCallerBlockingSettingsWithHttpInfo (string accountId, string extensionId, CallerBlockingSettingsUpdate callerBlockingSettingsUpdate = default(CallerBlockingSettingsUpdate))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallBlockingApi->UpdateCallerBlockingSettings");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallBlockingApi->UpdateCallerBlockingSettings");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/caller-blocking";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (callerBlockingSettingsUpdate != null && callerBlockingSettingsUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(callerBlockingSettingsUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = callerBlockingSettingsUpdate; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCallerBlockingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallerBlockingSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallerBlockingSettings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallerBlockingSettings)));
        }

        /// <summary>
        /// Update Caller Blocking Settings Updates the current caller blocking settings of a user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="callerBlockingSettingsUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallerBlockingSettings</returns>
        public async System.Threading.Tasks.Task<CallerBlockingSettings> UpdateCallerBlockingSettingsAsync (string accountId, string extensionId, CallerBlockingSettingsUpdate callerBlockingSettingsUpdate = default(CallerBlockingSettingsUpdate), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CallerBlockingSettings> localVarResponse = await UpdateCallerBlockingSettingsWithHttpInfoAsync(accountId, extensionId, callerBlockingSettingsUpdate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Caller Blocking Settings Updates the current caller blocking settings of a user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId"></param>
        /// <param name="callerBlockingSettingsUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallerBlockingSettings)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallerBlockingSettings>> UpdateCallerBlockingSettingsWithHttpInfoAsync (string accountId, string extensionId, CallerBlockingSettingsUpdate callerBlockingSettingsUpdate = default(CallerBlockingSettingsUpdate), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallBlockingApi->UpdateCallerBlockingSettings");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallBlockingApi->UpdateCallerBlockingSettings");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/caller-blocking";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (callerBlockingSettingsUpdate != null && callerBlockingSettingsUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(callerBlockingSettingsUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = callerBlockingSettingsUpdate; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCallerBlockingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallerBlockingSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallerBlockingSettings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallerBlockingSettings)));
        }

    }
}
