/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPhoneNumbersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Company Phone Number List
        /// </summary>
        /// <remarks>
        /// Returns the list of phone numbers assigned to RingCentral customer account. Both company-level and extension-level numbers are returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="usageType">Usage type of a phone number (optional)</param>
        /// <param name="status">Status of a phone number. Multiple values are supported (optional)</param>
        /// <returns>AccountPhoneNumbers</returns>
        AccountPhoneNumbers ListAccountPhoneNumbers (string accountId, int? page = default(int?), int? perPage = default(int?), List<string> usageType = default(List<string>), string status = default(string));

        /// <summary>
        /// Get Company Phone Number List
        /// </summary>
        /// <remarks>
        /// Returns the list of phone numbers assigned to RingCentral customer account. Both company-level and extension-level numbers are returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="usageType">Usage type of a phone number (optional)</param>
        /// <param name="status">Status of a phone number. Multiple values are supported (optional)</param>
        /// <returns>ApiResponse of AccountPhoneNumbers</returns>
        ApiResponse<AccountPhoneNumbers> ListAccountPhoneNumbersWithHttpInfo (string accountId, int? page = default(int?), int? perPage = default(int?), List<string> usageType = default(List<string>), string status = default(string));
        /// <summary>
        /// Get Extension Phone Number List
        /// </summary>
        /// <remarks>
        /// Returns the list of phone numbers that are used by a particular extension, and can be filtered by the phone number type. The returned list contains all numbers which are directly mapped to a given extension plus the features and also company-level numbers which may be used when performing different operations on behalf of this extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="status">Status of a phone number. Multiple values are supported (optional)</param>
        /// <param name="usageType">Usage type of a phone number (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)</param>
        /// <param name="perPage">Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)</param>
        /// <returns>GetExtensionPhoneNumbersResponse</returns>
        GetExtensionPhoneNumbersResponse ListExtensionPhoneNumbers (string accountId, string extensionId, string status = default(string), List<string> usageType = default(List<string>), int? page = default(int?), int? perPage = default(int?));

        /// <summary>
        /// Get Extension Phone Number List
        /// </summary>
        /// <remarks>
        /// Returns the list of phone numbers that are used by a particular extension, and can be filtered by the phone number type. The returned list contains all numbers which are directly mapped to a given extension plus the features and also company-level numbers which may be used when performing different operations on behalf of this extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="status">Status of a phone number. Multiple values are supported (optional)</param>
        /// <param name="usageType">Usage type of a phone number (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)</param>
        /// <param name="perPage">Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)</param>
        /// <returns>ApiResponse of GetExtensionPhoneNumbersResponse</returns>
        ApiResponse<GetExtensionPhoneNumbersResponse> ListExtensionPhoneNumbersWithHttpInfo (string accountId, string extensionId, string status = default(string), List<string> usageType = default(List<string>), int? page = default(int?), int? perPage = default(int?));
        /// <summary>
        /// Parse Phone Number
        /// </summary>
        /// <remarks>
        /// Returns one or more parsed and/or formatted phone numbers that are passed as a string.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parsePhoneNumberRequest">JSON body</param>
        /// <param name="homeCountry">Internal identifier of a home country. The default value is ISO code (ISO 3166) of the user&#39;s home country or brand country, if the user is undefined (optional)</param>
        /// <param name="nationalAsPriority">The default value is &#39;False&#39;. If &#39;True&#39;, the numbers that are closer to the home country are given higher priority (optional)</param>
        /// <returns>ParsePhoneNumberResponse</returns>
        ParsePhoneNumberResponse ParsePhoneNumber (ParsePhoneNumberRequest parsePhoneNumberRequest, string homeCountry = default(string), bool? nationalAsPriority = default(bool?));

        /// <summary>
        /// Parse Phone Number
        /// </summary>
        /// <remarks>
        /// Returns one or more parsed and/or formatted phone numbers that are passed as a string.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parsePhoneNumberRequest">JSON body</param>
        /// <param name="homeCountry">Internal identifier of a home country. The default value is ISO code (ISO 3166) of the user&#39;s home country or brand country, if the user is undefined (optional)</param>
        /// <param name="nationalAsPriority">The default value is &#39;False&#39;. If &#39;True&#39;, the numbers that are closer to the home country are given higher priority (optional)</param>
        /// <returns>ApiResponse of ParsePhoneNumberResponse</returns>
        ApiResponse<ParsePhoneNumberResponse> ParsePhoneNumberWithHttpInfo (ParsePhoneNumberRequest parsePhoneNumberRequest, string homeCountry = default(string), bool? nationalAsPriority = default(bool?));
        /// <summary>
        /// Get Phone Number
        /// </summary>
        /// <remarks>
        /// Returns the phone number(s) belonging to a certain account or extension by phoneNumberId(s). Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="phoneNumberId">Internal identifier of a phone number</param>
        /// <returns>CompanyPhoneNumberInfo</returns>
        CompanyPhoneNumberInfo ReadAccountPhoneNumber (string accountId, long phoneNumberId);

        /// <summary>
        /// Get Phone Number
        /// </summary>
        /// <remarks>
        /// Returns the phone number(s) belonging to a certain account or extension by phoneNumberId(s). Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="phoneNumberId">Internal identifier of a phone number</param>
        /// <returns>ApiResponse of CompanyPhoneNumberInfo</returns>
        ApiResponse<CompanyPhoneNumberInfo> ReadAccountPhoneNumberWithHttpInfo (string accountId, long phoneNumberId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Company Phone Number List
        /// </summary>
        /// <remarks>
        /// Returns the list of phone numbers assigned to RingCentral customer account. Both company-level and extension-level numbers are returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="usageType">Usage type of a phone number (optional)</param>
        /// <param name="status">Status of a phone number. Multiple values are supported (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AccountPhoneNumbers</returns>
        System.Threading.Tasks.Task<AccountPhoneNumbers> ListAccountPhoneNumbersAsync (string accountId, int? page = default(int?), int? perPage = default(int?), List<string> usageType = default(List<string>), string status = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Company Phone Number List
        /// </summary>
        /// <remarks>
        /// Returns the list of phone numbers assigned to RingCentral customer account. Both company-level and extension-level numbers are returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="usageType">Usage type of a phone number (optional)</param>
        /// <param name="status">Status of a phone number. Multiple values are supported (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AccountPhoneNumbers)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountPhoneNumbers>> ListAccountPhoneNumbersWithHttpInfoAsync (string accountId, int? page = default(int?), int? perPage = default(int?), List<string> usageType = default(List<string>), string status = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Extension Phone Number List
        /// </summary>
        /// <remarks>
        /// Returns the list of phone numbers that are used by a particular extension, and can be filtered by the phone number type. The returned list contains all numbers which are directly mapped to a given extension plus the features and also company-level numbers which may be used when performing different operations on behalf of this extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="status">Status of a phone number. Multiple values are supported (optional)</param>
        /// <param name="usageType">Usage type of a phone number (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)</param>
        /// <param name="perPage">Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetExtensionPhoneNumbersResponse</returns>
        System.Threading.Tasks.Task<GetExtensionPhoneNumbersResponse> ListExtensionPhoneNumbersAsync (string accountId, string extensionId, string status = default(string), List<string> usageType = default(List<string>), int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Extension Phone Number List
        /// </summary>
        /// <remarks>
        /// Returns the list of phone numbers that are used by a particular extension, and can be filtered by the phone number type. The returned list contains all numbers which are directly mapped to a given extension plus the features and also company-level numbers which may be used when performing different operations on behalf of this extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="status">Status of a phone number. Multiple values are supported (optional)</param>
        /// <param name="usageType">Usage type of a phone number (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)</param>
        /// <param name="perPage">Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetExtensionPhoneNumbersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetExtensionPhoneNumbersResponse>> ListExtensionPhoneNumbersWithHttpInfoAsync (string accountId, string extensionId, string status = default(string), List<string> usageType = default(List<string>), int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Parse Phone Number
        /// </summary>
        /// <remarks>
        /// Returns one or more parsed and/or formatted phone numbers that are passed as a string.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parsePhoneNumberRequest">JSON body</param>
        /// <param name="homeCountry">Internal identifier of a home country. The default value is ISO code (ISO 3166) of the user&#39;s home country or brand country, if the user is undefined (optional)</param>
        /// <param name="nationalAsPriority">The default value is &#39;False&#39;. If &#39;True&#39;, the numbers that are closer to the home country are given higher priority (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ParsePhoneNumberResponse</returns>
        System.Threading.Tasks.Task<ParsePhoneNumberResponse> ParsePhoneNumberAsync (ParsePhoneNumberRequest parsePhoneNumberRequest, string homeCountry = default(string), bool? nationalAsPriority = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Parse Phone Number
        /// </summary>
        /// <remarks>
        /// Returns one or more parsed and/or formatted phone numbers that are passed as a string.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parsePhoneNumberRequest">JSON body</param>
        /// <param name="homeCountry">Internal identifier of a home country. The default value is ISO code (ISO 3166) of the user&#39;s home country or brand country, if the user is undefined (optional)</param>
        /// <param name="nationalAsPriority">The default value is &#39;False&#39;. If &#39;True&#39;, the numbers that are closer to the home country are given higher priority (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ParsePhoneNumberResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ParsePhoneNumberResponse>> ParsePhoneNumberWithHttpInfoAsync (ParsePhoneNumberRequest parsePhoneNumberRequest, string homeCountry = default(string), bool? nationalAsPriority = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Phone Number
        /// </summary>
        /// <remarks>
        /// Returns the phone number(s) belonging to a certain account or extension by phoneNumberId(s). Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="phoneNumberId">Internal identifier of a phone number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CompanyPhoneNumberInfo</returns>
        System.Threading.Tasks.Task<CompanyPhoneNumberInfo> ReadAccountPhoneNumberAsync (string accountId, long phoneNumberId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Phone Number
        /// </summary>
        /// <remarks>
        /// Returns the phone number(s) belonging to a certain account or extension by phoneNumberId(s). Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="phoneNumberId">Internal identifier of a phone number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CompanyPhoneNumberInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompanyPhoneNumberInfo>> ReadAccountPhoneNumberWithHttpInfoAsync (string accountId, long phoneNumberId, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PhoneNumbersApi : IPhoneNumbersApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneNumbersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PhoneNumbersApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneNumbersApi"/> class
        /// </summary>
        /// <returns></returns>
        public PhoneNumbersApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneNumbersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PhoneNumbersApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Company Phone Number List Returns the list of phone numbers assigned to RingCentral customer account. Both company-level and extension-level numbers are returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="usageType">Usage type of a phone number (optional)</param>
        /// <param name="status">Status of a phone number. Multiple values are supported (optional)</param>
        /// <returns>AccountPhoneNumbers</returns>
        public AccountPhoneNumbers ListAccountPhoneNumbers (string accountId, int? page = default(int?), int? perPage = default(int?), List<string> usageType = default(List<string>), string status = default(string))
        {
             ApiResponse<AccountPhoneNumbers> localVarResponse = ListAccountPhoneNumbersWithHttpInfo(accountId, page, perPage, usageType, status);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Company Phone Number List Returns the list of phone numbers assigned to RingCentral customer account. Both company-level and extension-level numbers are returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="usageType">Usage type of a phone number (optional)</param>
        /// <param name="status">Status of a phone number. Multiple values are supported (optional)</param>
        /// <returns>ApiResponse of AccountPhoneNumbers</returns>
        public ApiResponse<AccountPhoneNumbers> ListAccountPhoneNumbersWithHttpInfo (string accountId, int? page = default(int?), int? perPage = default(int?), List<string> usageType = default(List<string>), string status = default(string))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PhoneNumbersApi->ListAccountPhoneNumbers");

            var localVarPath = "/restapi/v1.0/account/{accountId}/phone-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (usageType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "usageType", usageType)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAccountPhoneNumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountPhoneNumbers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccountPhoneNumbers) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountPhoneNumbers)));
        }

        /// <summary>
        /// Get Company Phone Number List Returns the list of phone numbers assigned to RingCentral customer account. Both company-level and extension-level numbers are returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="usageType">Usage type of a phone number (optional)</param>
        /// <param name="status">Status of a phone number. Multiple values are supported (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AccountPhoneNumbers</returns>
        public async System.Threading.Tasks.Task<AccountPhoneNumbers> ListAccountPhoneNumbersAsync (string accountId, int? page = default(int?), int? perPage = default(int?), List<string> usageType = default(List<string>), string status = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AccountPhoneNumbers> localVarResponse = await ListAccountPhoneNumbersWithHttpInfoAsync(accountId, page, perPage, usageType, status, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Company Phone Number List Returns the list of phone numbers assigned to RingCentral customer account. Both company-level and extension-level numbers are returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="usageType">Usage type of a phone number (optional)</param>
        /// <param name="status">Status of a phone number. Multiple values are supported (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AccountPhoneNumbers)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountPhoneNumbers>> ListAccountPhoneNumbersWithHttpInfoAsync (string accountId, int? page = default(int?), int? perPage = default(int?), List<string> usageType = default(List<string>), string status = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PhoneNumbersApi->ListAccountPhoneNumbers");

            var localVarPath = "/restapi/v1.0/account/{accountId}/phone-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (usageType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "usageType", usageType)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAccountPhoneNumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountPhoneNumbers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccountPhoneNumbers) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountPhoneNumbers)));
        }

        /// <summary>
        /// Get Extension Phone Number List Returns the list of phone numbers that are used by a particular extension, and can be filtered by the phone number type. The returned list contains all numbers which are directly mapped to a given extension plus the features and also company-level numbers which may be used when performing different operations on behalf of this extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="status">Status of a phone number. Multiple values are supported (optional)</param>
        /// <param name="usageType">Usage type of a phone number (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)</param>
        /// <param name="perPage">Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)</param>
        /// <returns>GetExtensionPhoneNumbersResponse</returns>
        public GetExtensionPhoneNumbersResponse ListExtensionPhoneNumbers (string accountId, string extensionId, string status = default(string), List<string> usageType = default(List<string>), int? page = default(int?), int? perPage = default(int?))
        {
             ApiResponse<GetExtensionPhoneNumbersResponse> localVarResponse = ListExtensionPhoneNumbersWithHttpInfo(accountId, extensionId, status, usageType, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Extension Phone Number List Returns the list of phone numbers that are used by a particular extension, and can be filtered by the phone number type. The returned list contains all numbers which are directly mapped to a given extension plus the features and also company-level numbers which may be used when performing different operations on behalf of this extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="status">Status of a phone number. Multiple values are supported (optional)</param>
        /// <param name="usageType">Usage type of a phone number (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)</param>
        /// <param name="perPage">Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)</param>
        /// <returns>ApiResponse of GetExtensionPhoneNumbersResponse</returns>
        public ApiResponse<GetExtensionPhoneNumbersResponse> ListExtensionPhoneNumbersWithHttpInfo (string accountId, string extensionId, string status = default(string), List<string> usageType = default(List<string>), int? page = default(int?), int? perPage = default(int?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PhoneNumbersApi->ListExtensionPhoneNumbers");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling PhoneNumbersApi->ListExtensionPhoneNumbers");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/phone-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (usageType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "usageType", usageType)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListExtensionPhoneNumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetExtensionPhoneNumbersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetExtensionPhoneNumbersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetExtensionPhoneNumbersResponse)));
        }

        /// <summary>
        /// Get Extension Phone Number List Returns the list of phone numbers that are used by a particular extension, and can be filtered by the phone number type. The returned list contains all numbers which are directly mapped to a given extension plus the features and also company-level numbers which may be used when performing different operations on behalf of this extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="status">Status of a phone number. Multiple values are supported (optional)</param>
        /// <param name="usageType">Usage type of a phone number (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)</param>
        /// <param name="perPage">Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetExtensionPhoneNumbersResponse</returns>
        public async System.Threading.Tasks.Task<GetExtensionPhoneNumbersResponse> ListExtensionPhoneNumbersAsync (string accountId, string extensionId, string status = default(string), List<string> usageType = default(List<string>), int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetExtensionPhoneNumbersResponse> localVarResponse = await ListExtensionPhoneNumbersWithHttpInfoAsync(accountId, extensionId, status, usageType, page, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Extension Phone Number List Returns the list of phone numbers that are used by a particular extension, and can be filtered by the phone number type. The returned list contains all numbers which are directly mapped to a given extension plus the features and also company-level numbers which may be used when performing different operations on behalf of this extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="status">Status of a phone number. Multiple values are supported (optional)</param>
        /// <param name="usageType">Usage type of a phone number (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)</param>
        /// <param name="perPage">Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetExtensionPhoneNumbersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetExtensionPhoneNumbersResponse>> ListExtensionPhoneNumbersWithHttpInfoAsync (string accountId, string extensionId, string status = default(string), List<string> usageType = default(List<string>), int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PhoneNumbersApi->ListExtensionPhoneNumbers");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling PhoneNumbersApi->ListExtensionPhoneNumbers");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/phone-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (usageType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "usageType", usageType)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListExtensionPhoneNumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetExtensionPhoneNumbersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetExtensionPhoneNumbersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetExtensionPhoneNumbersResponse)));
        }

        /// <summary>
        /// Parse Phone Number Returns one or more parsed and/or formatted phone numbers that are passed as a string.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parsePhoneNumberRequest">JSON body</param>
        /// <param name="homeCountry">Internal identifier of a home country. The default value is ISO code (ISO 3166) of the user&#39;s home country or brand country, if the user is undefined (optional)</param>
        /// <param name="nationalAsPriority">The default value is &#39;False&#39;. If &#39;True&#39;, the numbers that are closer to the home country are given higher priority (optional)</param>
        /// <returns>ParsePhoneNumberResponse</returns>
        public ParsePhoneNumberResponse ParsePhoneNumber (ParsePhoneNumberRequest parsePhoneNumberRequest, string homeCountry = default(string), bool? nationalAsPriority = default(bool?))
        {
             ApiResponse<ParsePhoneNumberResponse> localVarResponse = ParsePhoneNumberWithHttpInfo(parsePhoneNumberRequest, homeCountry, nationalAsPriority);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Parse Phone Number Returns one or more parsed and/or formatted phone numbers that are passed as a string.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parsePhoneNumberRequest">JSON body</param>
        /// <param name="homeCountry">Internal identifier of a home country. The default value is ISO code (ISO 3166) of the user&#39;s home country or brand country, if the user is undefined (optional)</param>
        /// <param name="nationalAsPriority">The default value is &#39;False&#39;. If &#39;True&#39;, the numbers that are closer to the home country are given higher priority (optional)</param>
        /// <returns>ApiResponse of ParsePhoneNumberResponse</returns>
        public ApiResponse<ParsePhoneNumberResponse> ParsePhoneNumberWithHttpInfo (ParsePhoneNumberRequest parsePhoneNumberRequest, string homeCountry = default(string), bool? nationalAsPriority = default(bool?))
        {
            // verify the required parameter 'parsePhoneNumberRequest' is set
            if (parsePhoneNumberRequest == null)
                throw new ApiException(400, "Missing required parameter 'parsePhoneNumberRequest' when calling PhoneNumbersApi->ParsePhoneNumber");

            var localVarPath = "/restapi/v1.0/number-parser/parse";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (homeCountry != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "homeCountry", homeCountry)); // query parameter
            if (nationalAsPriority != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nationalAsPriority", nationalAsPriority)); // query parameter
            if (parsePhoneNumberRequest != null && parsePhoneNumberRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parsePhoneNumberRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parsePhoneNumberRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ParsePhoneNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ParsePhoneNumberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ParsePhoneNumberResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ParsePhoneNumberResponse)));
        }

        /// <summary>
        /// Parse Phone Number Returns one or more parsed and/or formatted phone numbers that are passed as a string.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parsePhoneNumberRequest">JSON body</param>
        /// <param name="homeCountry">Internal identifier of a home country. The default value is ISO code (ISO 3166) of the user&#39;s home country or brand country, if the user is undefined (optional)</param>
        /// <param name="nationalAsPriority">The default value is &#39;False&#39;. If &#39;True&#39;, the numbers that are closer to the home country are given higher priority (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ParsePhoneNumberResponse</returns>
        public async System.Threading.Tasks.Task<ParsePhoneNumberResponse> ParsePhoneNumberAsync (ParsePhoneNumberRequest parsePhoneNumberRequest, string homeCountry = default(string), bool? nationalAsPriority = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ParsePhoneNumberResponse> localVarResponse = await ParsePhoneNumberWithHttpInfoAsync(parsePhoneNumberRequest, homeCountry, nationalAsPriority, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Parse Phone Number Returns one or more parsed and/or formatted phone numbers that are passed as a string.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parsePhoneNumberRequest">JSON body</param>
        /// <param name="homeCountry">Internal identifier of a home country. The default value is ISO code (ISO 3166) of the user&#39;s home country or brand country, if the user is undefined (optional)</param>
        /// <param name="nationalAsPriority">The default value is &#39;False&#39;. If &#39;True&#39;, the numbers that are closer to the home country are given higher priority (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ParsePhoneNumberResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ParsePhoneNumberResponse>> ParsePhoneNumberWithHttpInfoAsync (ParsePhoneNumberRequest parsePhoneNumberRequest, string homeCountry = default(string), bool? nationalAsPriority = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'parsePhoneNumberRequest' is set
            if (parsePhoneNumberRequest == null)
                throw new ApiException(400, "Missing required parameter 'parsePhoneNumberRequest' when calling PhoneNumbersApi->ParsePhoneNumber");

            var localVarPath = "/restapi/v1.0/number-parser/parse";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (homeCountry != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "homeCountry", homeCountry)); // query parameter
            if (nationalAsPriority != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nationalAsPriority", nationalAsPriority)); // query parameter
            if (parsePhoneNumberRequest != null && parsePhoneNumberRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parsePhoneNumberRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parsePhoneNumberRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ParsePhoneNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ParsePhoneNumberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ParsePhoneNumberResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ParsePhoneNumberResponse)));
        }

        /// <summary>
        /// Get Phone Number Returns the phone number(s) belonging to a certain account or extension by phoneNumberId(s). Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="phoneNumberId">Internal identifier of a phone number</param>
        /// <returns>CompanyPhoneNumberInfo</returns>
        public CompanyPhoneNumberInfo ReadAccountPhoneNumber (string accountId, long phoneNumberId)
        {
             ApiResponse<CompanyPhoneNumberInfo> localVarResponse = ReadAccountPhoneNumberWithHttpInfo(accountId, phoneNumberId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Phone Number Returns the phone number(s) belonging to a certain account or extension by phoneNumberId(s). Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="phoneNumberId">Internal identifier of a phone number</param>
        /// <returns>ApiResponse of CompanyPhoneNumberInfo</returns>
        public ApiResponse<CompanyPhoneNumberInfo> ReadAccountPhoneNumberWithHttpInfo (string accountId, long phoneNumberId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PhoneNumbersApi->ReadAccountPhoneNumber");
            // verify the required parameter 'phoneNumberId' is set
            if (phoneNumberId == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumberId' when calling PhoneNumbersApi->ReadAccountPhoneNumber");

            var localVarPath = "/restapi/v1.0/account/{accountId}/phone-number/{phoneNumberId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (phoneNumberId != null) localVarPathParams.Add("phoneNumberId", this.Configuration.ApiClient.ParameterToString(phoneNumberId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadAccountPhoneNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompanyPhoneNumberInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CompanyPhoneNumberInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompanyPhoneNumberInfo)));
        }

        /// <summary>
        /// Get Phone Number Returns the phone number(s) belonging to a certain account or extension by phoneNumberId(s). Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="phoneNumberId">Internal identifier of a phone number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CompanyPhoneNumberInfo</returns>
        public async System.Threading.Tasks.Task<CompanyPhoneNumberInfo> ReadAccountPhoneNumberAsync (string accountId, long phoneNumberId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CompanyPhoneNumberInfo> localVarResponse = await ReadAccountPhoneNumberWithHttpInfoAsync(accountId, phoneNumberId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Phone Number Returns the phone number(s) belonging to a certain account or extension by phoneNumberId(s). Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="phoneNumberId">Internal identifier of a phone number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CompanyPhoneNumberInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CompanyPhoneNumberInfo>> ReadAccountPhoneNumberWithHttpInfoAsync (string accountId, long phoneNumberId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PhoneNumbersApi->ReadAccountPhoneNumber");
            // verify the required parameter 'phoneNumberId' is set
            if (phoneNumberId == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumberId' when calling PhoneNumbersApi->ReadAccountPhoneNumber");

            var localVarPath = "/restapi/v1.0/account/{accountId}/phone-number/{phoneNumberId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (phoneNumberId != null) localVarPathParams.Add("phoneNumberId", this.Configuration.ApiClient.ParameterToString(phoneNumberId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadAccountPhoneNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompanyPhoneNumberInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CompanyPhoneNumberInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompanyPhoneNumberInfo)));
        }

    }
}
