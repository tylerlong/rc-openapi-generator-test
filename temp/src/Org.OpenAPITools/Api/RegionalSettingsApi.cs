/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRegionalSettingsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Country List
        /// </summary>
        /// <remarks>
        /// Returns all the countries available for calling.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginAllowed">Specifies whether login with the phone numbers of this country is enabled or not (optional)</param>
        /// <param name="signupAllowed">Indicates whether signup/billing is allowed for a country. If not specified all countries are returned (according to other filters specified if any) (optional)</param>
        /// <param name="numberSelling">Specifies if RingCentral sells phone numbers of this country (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="freeSoftphoneLine">Specifies if free phone line for softphone is available for a country or not (optional)</param>
        /// <returns>GetCountryListResponse</returns>
        GetCountryListResponse ListCountries (bool? loginAllowed = default(bool?), bool? signupAllowed = default(bool?), bool? numberSelling = default(bool?), int? page = default(int?), int? perPage = default(int?), bool? freeSoftphoneLine = default(bool?));

        /// <summary>
        /// Get Country List
        /// </summary>
        /// <remarks>
        /// Returns all the countries available for calling.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginAllowed">Specifies whether login with the phone numbers of this country is enabled or not (optional)</param>
        /// <param name="signupAllowed">Indicates whether signup/billing is allowed for a country. If not specified all countries are returned (according to other filters specified if any) (optional)</param>
        /// <param name="numberSelling">Specifies if RingCentral sells phone numbers of this country (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="freeSoftphoneLine">Specifies if free phone line for softphone is available for a country or not (optional)</param>
        /// <returns>ApiResponse of GetCountryListResponse</returns>
        ApiResponse<GetCountryListResponse> ListCountriesWithHttpInfo (bool? loginAllowed = default(bool?), bool? signupAllowed = default(bool?), bool? numberSelling = default(bool?), int? page = default(int?), int? perPage = default(int?), bool? freeSoftphoneLine = default(bool?));
        /// <summary>
        /// Get Language List
        /// </summary>
        /// <remarks>
        /// Returns the information about supported languages.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>LanguageList</returns>
        LanguageList ListLanguages ();

        /// <summary>
        /// Get Language List
        /// </summary>
        /// <remarks>
        /// Returns the information about supported languages.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of LanguageList</returns>
        ApiResponse<LanguageList> ListLanguagesWithHttpInfo ();
        /// <summary>
        /// Get Location List
        /// </summary>
        /// <remarks>
        /// Returns all available locations for a certain state.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy">Sorts results by the property specified (optional, default to City)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="stateId">Internal identifier of a state (optional)</param>
        /// <param name="withNxx">Specifies if nxx codes are returned (optional)</param>
        /// <returns>GetLocationListResponse</returns>
        GetLocationListResponse ListLocations (string orderBy = default(string), int? page = default(int?), int? perPage = default(int?), string stateId = default(string), bool? withNxx = default(bool?));

        /// <summary>
        /// Get Location List
        /// </summary>
        /// <remarks>
        /// Returns all available locations for a certain state.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy">Sorts results by the property specified (optional, default to City)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="stateId">Internal identifier of a state (optional)</param>
        /// <param name="withNxx">Specifies if nxx codes are returned (optional)</param>
        /// <returns>ApiResponse of GetLocationListResponse</returns>
        ApiResponse<GetLocationListResponse> ListLocationsWithHttpInfo (string orderBy = default(string), int? page = default(int?), int? perPage = default(int?), string stateId = default(string), bool? withNxx = default(bool?));
        /// <summary>
        /// Get States List
        /// </summary>
        /// <remarks>
        /// Returns all the states of a certain country
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allCountries">If set to &#39;True&#39; then states for all countries are returned and &#x60;countryId&#x60; is ignored, even if specified. If the value is empty then the parameter is ignored (optional)</param>
        /// <param name="countryId">Internal identifier of a country (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="withPhoneNumbers">If &#39;True&#39;, the list of states with phone numbers available for buying is returned (optional, default to false)</param>
        /// <returns>GetStateListResponse</returns>
        GetStateListResponse ListStates (bool? allCountries = default(bool?), long? countryId = default(long?), int? page = default(int?), int? perPage = default(int?), bool? withPhoneNumbers = default(bool?));

        /// <summary>
        /// Get States List
        /// </summary>
        /// <remarks>
        /// Returns all the states of a certain country
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allCountries">If set to &#39;True&#39; then states for all countries are returned and &#x60;countryId&#x60; is ignored, even if specified. If the value is empty then the parameter is ignored (optional)</param>
        /// <param name="countryId">Internal identifier of a country (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="withPhoneNumbers">If &#39;True&#39;, the list of states with phone numbers available for buying is returned (optional, default to false)</param>
        /// <returns>ApiResponse of GetStateListResponse</returns>
        ApiResponse<GetStateListResponse> ListStatesWithHttpInfo (bool? allCountries = default(bool?), long? countryId = default(long?), int? page = default(int?), int? perPage = default(int?), bool? withPhoneNumbers = default(bool?));
        /// <summary>
        /// Get Timezone List
        /// </summary>
        /// <remarks>
        /// Returns all available timezones.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to &quot;100&quot;)</param>
        /// <returns>GetTimezoneListResponse</returns>
        GetTimezoneListResponse ListTimezones (string page = default(string), string perPage = default(string));

        /// <summary>
        /// Get Timezone List
        /// </summary>
        /// <remarks>
        /// Returns all available timezones.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to &quot;100&quot;)</param>
        /// <returns>ApiResponse of GetTimezoneListResponse</returns>
        ApiResponse<GetTimezoneListResponse> ListTimezonesWithHttpInfo (string page = default(string), string perPage = default(string));
        /// <summary>
        /// Get Country
        /// </summary>
        /// <remarks>
        /// Returns the information on a specific country.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">Internal identifier of a country</param>
        /// <returns>GetCountryInfoDictionaryResponse</returns>
        GetCountryInfoDictionaryResponse ReadCountry (long countryId);

        /// <summary>
        /// Get Country
        /// </summary>
        /// <remarks>
        /// Returns the information on a specific country.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">Internal identifier of a country</param>
        /// <returns>ApiResponse of GetCountryInfoDictionaryResponse</returns>
        ApiResponse<GetCountryInfoDictionaryResponse> ReadCountryWithHttpInfo (long countryId);
        /// <summary>
        /// Get Language
        /// </summary>
        /// <remarks>
        /// Returns language by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageId">Internal identifier of a language</param>
        /// <returns>LanguageInfo</returns>
        LanguageInfo ReadLanguage (long languageId);

        /// <summary>
        /// Get Language
        /// </summary>
        /// <remarks>
        /// Returns language by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageId">Internal identifier of a language</param>
        /// <returns>ApiResponse of LanguageInfo</returns>
        ApiResponse<LanguageInfo> ReadLanguageWithHttpInfo (long languageId);
        /// <summary>
        /// Get State
        /// </summary>
        /// <remarks>
        /// Returns the information on a specific state.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateId">Internal identifier of a state</param>
        /// <returns>GetStateInfoResponse</returns>
        GetStateInfoResponse ReadState (long stateId);

        /// <summary>
        /// Get State
        /// </summary>
        /// <remarks>
        /// Returns the information on a specific state.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateId">Internal identifier of a state</param>
        /// <returns>ApiResponse of GetStateInfoResponse</returns>
        ApiResponse<GetStateInfoResponse> ReadStateWithHttpInfo (long stateId);
        /// <summary>
        /// Get Timezone
        /// </summary>
        /// <remarks>
        /// Returns the information on a certain timezone.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timezoneId">Internal identifier of a timezone</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to &quot;100&quot;)</param>
        /// <returns>GetTimezoneInfoResponse</returns>
        GetTimezoneInfoResponse ReadTimezone (long timezoneId, string page = default(string), string perPage = default(string));

        /// <summary>
        /// Get Timezone
        /// </summary>
        /// <remarks>
        /// Returns the information on a certain timezone.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timezoneId">Internal identifier of a timezone</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to &quot;100&quot;)</param>
        /// <returns>ApiResponse of GetTimezoneInfoResponse</returns>
        ApiResponse<GetTimezoneInfoResponse> ReadTimezoneWithHttpInfo (long timezoneId, string page = default(string), string perPage = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Country List
        /// </summary>
        /// <remarks>
        /// Returns all the countries available for calling.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginAllowed">Specifies whether login with the phone numbers of this country is enabled or not (optional)</param>
        /// <param name="signupAllowed">Indicates whether signup/billing is allowed for a country. If not specified all countries are returned (according to other filters specified if any) (optional)</param>
        /// <param name="numberSelling">Specifies if RingCentral sells phone numbers of this country (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="freeSoftphoneLine">Specifies if free phone line for softphone is available for a country or not (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetCountryListResponse</returns>
        System.Threading.Tasks.Task<GetCountryListResponse> ListCountriesAsync (bool? loginAllowed = default(bool?), bool? signupAllowed = default(bool?), bool? numberSelling = default(bool?), int? page = default(int?), int? perPage = default(int?), bool? freeSoftphoneLine = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Country List
        /// </summary>
        /// <remarks>
        /// Returns all the countries available for calling.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginAllowed">Specifies whether login with the phone numbers of this country is enabled or not (optional)</param>
        /// <param name="signupAllowed">Indicates whether signup/billing is allowed for a country. If not specified all countries are returned (according to other filters specified if any) (optional)</param>
        /// <param name="numberSelling">Specifies if RingCentral sells phone numbers of this country (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="freeSoftphoneLine">Specifies if free phone line for softphone is available for a country or not (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetCountryListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCountryListResponse>> ListCountriesWithHttpInfoAsync (bool? loginAllowed = default(bool?), bool? signupAllowed = default(bool?), bool? numberSelling = default(bool?), int? page = default(int?), int? perPage = default(int?), bool? freeSoftphoneLine = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Language List
        /// </summary>
        /// <remarks>
        /// Returns the information about supported languages.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of LanguageList</returns>
        System.Threading.Tasks.Task<LanguageList> ListLanguagesAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Language List
        /// </summary>
        /// <remarks>
        /// Returns the information about supported languages.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (LanguageList)</returns>
        System.Threading.Tasks.Task<ApiResponse<LanguageList>> ListLanguagesWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Location List
        /// </summary>
        /// <remarks>
        /// Returns all available locations for a certain state.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy">Sorts results by the property specified (optional, default to City)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="stateId">Internal identifier of a state (optional)</param>
        /// <param name="withNxx">Specifies if nxx codes are returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetLocationListResponse</returns>
        System.Threading.Tasks.Task<GetLocationListResponse> ListLocationsAsync (string orderBy = default(string), int? page = default(int?), int? perPage = default(int?), string stateId = default(string), bool? withNxx = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Location List
        /// </summary>
        /// <remarks>
        /// Returns all available locations for a certain state.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy">Sorts results by the property specified (optional, default to City)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="stateId">Internal identifier of a state (optional)</param>
        /// <param name="withNxx">Specifies if nxx codes are returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetLocationListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetLocationListResponse>> ListLocationsWithHttpInfoAsync (string orderBy = default(string), int? page = default(int?), int? perPage = default(int?), string stateId = default(string), bool? withNxx = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get States List
        /// </summary>
        /// <remarks>
        /// Returns all the states of a certain country
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allCountries">If set to &#39;True&#39; then states for all countries are returned and &#x60;countryId&#x60; is ignored, even if specified. If the value is empty then the parameter is ignored (optional)</param>
        /// <param name="countryId">Internal identifier of a country (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="withPhoneNumbers">If &#39;True&#39;, the list of states with phone numbers available for buying is returned (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetStateListResponse</returns>
        System.Threading.Tasks.Task<GetStateListResponse> ListStatesAsync (bool? allCountries = default(bool?), long? countryId = default(long?), int? page = default(int?), int? perPage = default(int?), bool? withPhoneNumbers = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get States List
        /// </summary>
        /// <remarks>
        /// Returns all the states of a certain country
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allCountries">If set to &#39;True&#39; then states for all countries are returned and &#x60;countryId&#x60; is ignored, even if specified. If the value is empty then the parameter is ignored (optional)</param>
        /// <param name="countryId">Internal identifier of a country (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="withPhoneNumbers">If &#39;True&#39;, the list of states with phone numbers available for buying is returned (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetStateListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetStateListResponse>> ListStatesWithHttpInfoAsync (bool? allCountries = default(bool?), long? countryId = default(long?), int? page = default(int?), int? perPage = default(int?), bool? withPhoneNumbers = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Timezone List
        /// </summary>
        /// <remarks>
        /// Returns all available timezones.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to &quot;100&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetTimezoneListResponse</returns>
        System.Threading.Tasks.Task<GetTimezoneListResponse> ListTimezonesAsync (string page = default(string), string perPage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Timezone List
        /// </summary>
        /// <remarks>
        /// Returns all available timezones.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to &quot;100&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetTimezoneListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTimezoneListResponse>> ListTimezonesWithHttpInfoAsync (string page = default(string), string perPage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Country
        /// </summary>
        /// <remarks>
        /// Returns the information on a specific country.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">Internal identifier of a country</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetCountryInfoDictionaryResponse</returns>
        System.Threading.Tasks.Task<GetCountryInfoDictionaryResponse> ReadCountryAsync (long countryId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Country
        /// </summary>
        /// <remarks>
        /// Returns the information on a specific country.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">Internal identifier of a country</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetCountryInfoDictionaryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCountryInfoDictionaryResponse>> ReadCountryWithHttpInfoAsync (long countryId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Language
        /// </summary>
        /// <remarks>
        /// Returns language by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageId">Internal identifier of a language</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of LanguageInfo</returns>
        System.Threading.Tasks.Task<LanguageInfo> ReadLanguageAsync (long languageId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Language
        /// </summary>
        /// <remarks>
        /// Returns language by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageId">Internal identifier of a language</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (LanguageInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<LanguageInfo>> ReadLanguageWithHttpInfoAsync (long languageId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get State
        /// </summary>
        /// <remarks>
        /// Returns the information on a specific state.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateId">Internal identifier of a state</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetStateInfoResponse</returns>
        System.Threading.Tasks.Task<GetStateInfoResponse> ReadStateAsync (long stateId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get State
        /// </summary>
        /// <remarks>
        /// Returns the information on a specific state.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateId">Internal identifier of a state</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetStateInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetStateInfoResponse>> ReadStateWithHttpInfoAsync (long stateId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Timezone
        /// </summary>
        /// <remarks>
        /// Returns the information on a certain timezone.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timezoneId">Internal identifier of a timezone</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to &quot;100&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetTimezoneInfoResponse</returns>
        System.Threading.Tasks.Task<GetTimezoneInfoResponse> ReadTimezoneAsync (long timezoneId, string page = default(string), string perPage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Timezone
        /// </summary>
        /// <remarks>
        /// Returns the information on a certain timezone.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timezoneId">Internal identifier of a timezone</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to &quot;100&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetTimezoneInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTimezoneInfoResponse>> ReadTimezoneWithHttpInfoAsync (long timezoneId, string page = default(string), string perPage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RegionalSettingsApi : IRegionalSettingsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RegionalSettingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RegionalSettingsApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RegionalSettingsApi"/> class
        /// </summary>
        /// <returns></returns>
        public RegionalSettingsApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RegionalSettingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RegionalSettingsApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Country List Returns all the countries available for calling.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginAllowed">Specifies whether login with the phone numbers of this country is enabled or not (optional)</param>
        /// <param name="signupAllowed">Indicates whether signup/billing is allowed for a country. If not specified all countries are returned (according to other filters specified if any) (optional)</param>
        /// <param name="numberSelling">Specifies if RingCentral sells phone numbers of this country (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="freeSoftphoneLine">Specifies if free phone line for softphone is available for a country or not (optional)</param>
        /// <returns>GetCountryListResponse</returns>
        public GetCountryListResponse ListCountries (bool? loginAllowed = default(bool?), bool? signupAllowed = default(bool?), bool? numberSelling = default(bool?), int? page = default(int?), int? perPage = default(int?), bool? freeSoftphoneLine = default(bool?))
        {
             ApiResponse<GetCountryListResponse> localVarResponse = ListCountriesWithHttpInfo(loginAllowed, signupAllowed, numberSelling, page, perPage, freeSoftphoneLine);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Country List Returns all the countries available for calling.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginAllowed">Specifies whether login with the phone numbers of this country is enabled or not (optional)</param>
        /// <param name="signupAllowed">Indicates whether signup/billing is allowed for a country. If not specified all countries are returned (according to other filters specified if any) (optional)</param>
        /// <param name="numberSelling">Specifies if RingCentral sells phone numbers of this country (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="freeSoftphoneLine">Specifies if free phone line for softphone is available for a country or not (optional)</param>
        /// <returns>ApiResponse of GetCountryListResponse</returns>
        public ApiResponse<GetCountryListResponse> ListCountriesWithHttpInfo (bool? loginAllowed = default(bool?), bool? signupAllowed = default(bool?), bool? numberSelling = default(bool?), int? page = default(int?), int? perPage = default(int?), bool? freeSoftphoneLine = default(bool?))
        {

            var localVarPath = "/restapi/v1.0/dictionary/country";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loginAllowed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loginAllowed", loginAllowed)); // query parameter
            if (signupAllowed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "signupAllowed", signupAllowed)); // query parameter
            if (numberSelling != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "numberSelling", numberSelling)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (freeSoftphoneLine != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "freeSoftphoneLine", freeSoftphoneLine)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCountries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCountryListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetCountryListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCountryListResponse)));
        }

        /// <summary>
        /// Get Country List Returns all the countries available for calling.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginAllowed">Specifies whether login with the phone numbers of this country is enabled or not (optional)</param>
        /// <param name="signupAllowed">Indicates whether signup/billing is allowed for a country. If not specified all countries are returned (according to other filters specified if any) (optional)</param>
        /// <param name="numberSelling">Specifies if RingCentral sells phone numbers of this country (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="freeSoftphoneLine">Specifies if free phone line for softphone is available for a country or not (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetCountryListResponse</returns>
        public async System.Threading.Tasks.Task<GetCountryListResponse> ListCountriesAsync (bool? loginAllowed = default(bool?), bool? signupAllowed = default(bool?), bool? numberSelling = default(bool?), int? page = default(int?), int? perPage = default(int?), bool? freeSoftphoneLine = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetCountryListResponse> localVarResponse = await ListCountriesWithHttpInfoAsync(loginAllowed, signupAllowed, numberSelling, page, perPage, freeSoftphoneLine, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Country List Returns all the countries available for calling.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginAllowed">Specifies whether login with the phone numbers of this country is enabled or not (optional)</param>
        /// <param name="signupAllowed">Indicates whether signup/billing is allowed for a country. If not specified all countries are returned (according to other filters specified if any) (optional)</param>
        /// <param name="numberSelling">Specifies if RingCentral sells phone numbers of this country (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="freeSoftphoneLine">Specifies if free phone line for softphone is available for a country or not (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetCountryListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCountryListResponse>> ListCountriesWithHttpInfoAsync (bool? loginAllowed = default(bool?), bool? signupAllowed = default(bool?), bool? numberSelling = default(bool?), int? page = default(int?), int? perPage = default(int?), bool? freeSoftphoneLine = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/restapi/v1.0/dictionary/country";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loginAllowed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loginAllowed", loginAllowed)); // query parameter
            if (signupAllowed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "signupAllowed", signupAllowed)); // query parameter
            if (numberSelling != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "numberSelling", numberSelling)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (freeSoftphoneLine != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "freeSoftphoneLine", freeSoftphoneLine)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCountries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCountryListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetCountryListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCountryListResponse)));
        }

        /// <summary>
        /// Get Language List Returns the information about supported languages.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>LanguageList</returns>
        public LanguageList ListLanguages ()
        {
             ApiResponse<LanguageList> localVarResponse = ListLanguagesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Language List Returns the information about supported languages.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of LanguageList</returns>
        public ApiResponse<LanguageList> ListLanguagesWithHttpInfo ()
        {

            var localVarPath = "/restapi/v1.0/dictionary/language";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListLanguages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LanguageList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LanguageList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LanguageList)));
        }

        /// <summary>
        /// Get Language List Returns the information about supported languages.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of LanguageList</returns>
        public async System.Threading.Tasks.Task<LanguageList> ListLanguagesAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<LanguageList> localVarResponse = await ListLanguagesWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Language List Returns the information about supported languages.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (LanguageList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LanguageList>> ListLanguagesWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/restapi/v1.0/dictionary/language";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListLanguages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LanguageList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LanguageList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LanguageList)));
        }

        /// <summary>
        /// Get Location List Returns all available locations for a certain state.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy">Sorts results by the property specified (optional, default to City)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="stateId">Internal identifier of a state (optional)</param>
        /// <param name="withNxx">Specifies if nxx codes are returned (optional)</param>
        /// <returns>GetLocationListResponse</returns>
        public GetLocationListResponse ListLocations (string orderBy = default(string), int? page = default(int?), int? perPage = default(int?), string stateId = default(string), bool? withNxx = default(bool?))
        {
             ApiResponse<GetLocationListResponse> localVarResponse = ListLocationsWithHttpInfo(orderBy, page, perPage, stateId, withNxx);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Location List Returns all available locations for a certain state.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy">Sorts results by the property specified (optional, default to City)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="stateId">Internal identifier of a state (optional)</param>
        /// <param name="withNxx">Specifies if nxx codes are returned (optional)</param>
        /// <returns>ApiResponse of GetLocationListResponse</returns>
        public ApiResponse<GetLocationListResponse> ListLocationsWithHttpInfo (string orderBy = default(string), int? page = default(int?), int? perPage = default(int?), string stateId = default(string), bool? withNxx = default(bool?))
        {

            var localVarPath = "/restapi/v1.0/dictionary/location";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (stateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stateId", stateId)); // query parameter
            if (withNxx != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withNxx", withNxx)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListLocations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetLocationListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetLocationListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetLocationListResponse)));
        }

        /// <summary>
        /// Get Location List Returns all available locations for a certain state.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy">Sorts results by the property specified (optional, default to City)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="stateId">Internal identifier of a state (optional)</param>
        /// <param name="withNxx">Specifies if nxx codes are returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetLocationListResponse</returns>
        public async System.Threading.Tasks.Task<GetLocationListResponse> ListLocationsAsync (string orderBy = default(string), int? page = default(int?), int? perPage = default(int?), string stateId = default(string), bool? withNxx = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetLocationListResponse> localVarResponse = await ListLocationsWithHttpInfoAsync(orderBy, page, perPage, stateId, withNxx, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Location List Returns all available locations for a certain state.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy">Sorts results by the property specified (optional, default to City)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="stateId">Internal identifier of a state (optional)</param>
        /// <param name="withNxx">Specifies if nxx codes are returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetLocationListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetLocationListResponse>> ListLocationsWithHttpInfoAsync (string orderBy = default(string), int? page = default(int?), int? perPage = default(int?), string stateId = default(string), bool? withNxx = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/restapi/v1.0/dictionary/location";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (stateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stateId", stateId)); // query parameter
            if (withNxx != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withNxx", withNxx)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListLocations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetLocationListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetLocationListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetLocationListResponse)));
        }

        /// <summary>
        /// Get States List Returns all the states of a certain country
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allCountries">If set to &#39;True&#39; then states for all countries are returned and &#x60;countryId&#x60; is ignored, even if specified. If the value is empty then the parameter is ignored (optional)</param>
        /// <param name="countryId">Internal identifier of a country (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="withPhoneNumbers">If &#39;True&#39;, the list of states with phone numbers available for buying is returned (optional, default to false)</param>
        /// <returns>GetStateListResponse</returns>
        public GetStateListResponse ListStates (bool? allCountries = default(bool?), long? countryId = default(long?), int? page = default(int?), int? perPage = default(int?), bool? withPhoneNumbers = default(bool?))
        {
             ApiResponse<GetStateListResponse> localVarResponse = ListStatesWithHttpInfo(allCountries, countryId, page, perPage, withPhoneNumbers);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get States List Returns all the states of a certain country
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allCountries">If set to &#39;True&#39; then states for all countries are returned and &#x60;countryId&#x60; is ignored, even if specified. If the value is empty then the parameter is ignored (optional)</param>
        /// <param name="countryId">Internal identifier of a country (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="withPhoneNumbers">If &#39;True&#39;, the list of states with phone numbers available for buying is returned (optional, default to false)</param>
        /// <returns>ApiResponse of GetStateListResponse</returns>
        public ApiResponse<GetStateListResponse> ListStatesWithHttpInfo (bool? allCountries = default(bool?), long? countryId = default(long?), int? page = default(int?), int? perPage = default(int?), bool? withPhoneNumbers = default(bool?))
        {

            var localVarPath = "/restapi/v1.0/dictionary/state";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allCountries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allCountries", allCountries)); // query parameter
            if (countryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "countryId", countryId)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (withPhoneNumbers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withPhoneNumbers", withPhoneNumbers)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListStates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetStateListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetStateListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetStateListResponse)));
        }

        /// <summary>
        /// Get States List Returns all the states of a certain country
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allCountries">If set to &#39;True&#39; then states for all countries are returned and &#x60;countryId&#x60; is ignored, even if specified. If the value is empty then the parameter is ignored (optional)</param>
        /// <param name="countryId">Internal identifier of a country (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="withPhoneNumbers">If &#39;True&#39;, the list of states with phone numbers available for buying is returned (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetStateListResponse</returns>
        public async System.Threading.Tasks.Task<GetStateListResponse> ListStatesAsync (bool? allCountries = default(bool?), long? countryId = default(long?), int? page = default(int?), int? perPage = default(int?), bool? withPhoneNumbers = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetStateListResponse> localVarResponse = await ListStatesWithHttpInfoAsync(allCountries, countryId, page, perPage, withPhoneNumbers, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get States List Returns all the states of a certain country
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allCountries">If set to &#39;True&#39; then states for all countries are returned and &#x60;countryId&#x60; is ignored, even if specified. If the value is empty then the parameter is ignored (optional)</param>
        /// <param name="countryId">Internal identifier of a country (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="withPhoneNumbers">If &#39;True&#39;, the list of states with phone numbers available for buying is returned (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetStateListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetStateListResponse>> ListStatesWithHttpInfoAsync (bool? allCountries = default(bool?), long? countryId = default(long?), int? page = default(int?), int? perPage = default(int?), bool? withPhoneNumbers = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/restapi/v1.0/dictionary/state";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allCountries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allCountries", allCountries)); // query parameter
            if (countryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "countryId", countryId)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (withPhoneNumbers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withPhoneNumbers", withPhoneNumbers)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListStates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetStateListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetStateListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetStateListResponse)));
        }

        /// <summary>
        /// Get Timezone List Returns all available timezones.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to &quot;100&quot;)</param>
        /// <returns>GetTimezoneListResponse</returns>
        public GetTimezoneListResponse ListTimezones (string page = default(string), string perPage = default(string))
        {
             ApiResponse<GetTimezoneListResponse> localVarResponse = ListTimezonesWithHttpInfo(page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Timezone List Returns all available timezones.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to &quot;100&quot;)</param>
        /// <returns>ApiResponse of GetTimezoneListResponse</returns>
        public ApiResponse<GetTimezoneListResponse> ListTimezonesWithHttpInfo (string page = default(string), string perPage = default(string))
        {

            var localVarPath = "/restapi/v1.0/dictionary/timezone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTimezones", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTimezoneListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTimezoneListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTimezoneListResponse)));
        }

        /// <summary>
        /// Get Timezone List Returns all available timezones.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to &quot;100&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetTimezoneListResponse</returns>
        public async System.Threading.Tasks.Task<GetTimezoneListResponse> ListTimezonesAsync (string page = default(string), string perPage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetTimezoneListResponse> localVarResponse = await ListTimezonesWithHttpInfoAsync(page, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Timezone List Returns all available timezones.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to &quot;100&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetTimezoneListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTimezoneListResponse>> ListTimezonesWithHttpInfoAsync (string page = default(string), string perPage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/restapi/v1.0/dictionary/timezone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTimezones", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTimezoneListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTimezoneListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTimezoneListResponse)));
        }

        /// <summary>
        /// Get Country Returns the information on a specific country.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">Internal identifier of a country</param>
        /// <returns>GetCountryInfoDictionaryResponse</returns>
        public GetCountryInfoDictionaryResponse ReadCountry (long countryId)
        {
             ApiResponse<GetCountryInfoDictionaryResponse> localVarResponse = ReadCountryWithHttpInfo(countryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Country Returns the information on a specific country.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">Internal identifier of a country</param>
        /// <returns>ApiResponse of GetCountryInfoDictionaryResponse</returns>
        public ApiResponse<GetCountryInfoDictionaryResponse> ReadCountryWithHttpInfo (long countryId)
        {
            // verify the required parameter 'countryId' is set
            if (countryId == null)
                throw new ApiException(400, "Missing required parameter 'countryId' when calling RegionalSettingsApi->ReadCountry");

            var localVarPath = "/restapi/v1.0/dictionary/country/{countryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (countryId != null) localVarPathParams.Add("countryId", this.Configuration.ApiClient.ParameterToString(countryId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadCountry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCountryInfoDictionaryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetCountryInfoDictionaryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCountryInfoDictionaryResponse)));
        }

        /// <summary>
        /// Get Country Returns the information on a specific country.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">Internal identifier of a country</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetCountryInfoDictionaryResponse</returns>
        public async System.Threading.Tasks.Task<GetCountryInfoDictionaryResponse> ReadCountryAsync (long countryId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetCountryInfoDictionaryResponse> localVarResponse = await ReadCountryWithHttpInfoAsync(countryId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Country Returns the information on a specific country.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">Internal identifier of a country</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetCountryInfoDictionaryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCountryInfoDictionaryResponse>> ReadCountryWithHttpInfoAsync (long countryId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'countryId' is set
            if (countryId == null)
                throw new ApiException(400, "Missing required parameter 'countryId' when calling RegionalSettingsApi->ReadCountry");

            var localVarPath = "/restapi/v1.0/dictionary/country/{countryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (countryId != null) localVarPathParams.Add("countryId", this.Configuration.ApiClient.ParameterToString(countryId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadCountry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCountryInfoDictionaryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetCountryInfoDictionaryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCountryInfoDictionaryResponse)));
        }

        /// <summary>
        /// Get Language Returns language by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageId">Internal identifier of a language</param>
        /// <returns>LanguageInfo</returns>
        public LanguageInfo ReadLanguage (long languageId)
        {
             ApiResponse<LanguageInfo> localVarResponse = ReadLanguageWithHttpInfo(languageId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Language Returns language by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageId">Internal identifier of a language</param>
        /// <returns>ApiResponse of LanguageInfo</returns>
        public ApiResponse<LanguageInfo> ReadLanguageWithHttpInfo (long languageId)
        {
            // verify the required parameter 'languageId' is set
            if (languageId == null)
                throw new ApiException(400, "Missing required parameter 'languageId' when calling RegionalSettingsApi->ReadLanguage");

            var localVarPath = "/restapi/v1.0/dictionary/language/{languageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (languageId != null) localVarPathParams.Add("languageId", this.Configuration.ApiClient.ParameterToString(languageId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadLanguage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LanguageInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LanguageInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LanguageInfo)));
        }

        /// <summary>
        /// Get Language Returns language by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageId">Internal identifier of a language</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of LanguageInfo</returns>
        public async System.Threading.Tasks.Task<LanguageInfo> ReadLanguageAsync (long languageId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<LanguageInfo> localVarResponse = await ReadLanguageWithHttpInfoAsync(languageId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Language Returns language by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageId">Internal identifier of a language</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (LanguageInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LanguageInfo>> ReadLanguageWithHttpInfoAsync (long languageId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'languageId' is set
            if (languageId == null)
                throw new ApiException(400, "Missing required parameter 'languageId' when calling RegionalSettingsApi->ReadLanguage");

            var localVarPath = "/restapi/v1.0/dictionary/language/{languageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (languageId != null) localVarPathParams.Add("languageId", this.Configuration.ApiClient.ParameterToString(languageId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadLanguage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LanguageInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LanguageInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LanguageInfo)));
        }

        /// <summary>
        /// Get State Returns the information on a specific state.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateId">Internal identifier of a state</param>
        /// <returns>GetStateInfoResponse</returns>
        public GetStateInfoResponse ReadState (long stateId)
        {
             ApiResponse<GetStateInfoResponse> localVarResponse = ReadStateWithHttpInfo(stateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get State Returns the information on a specific state.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateId">Internal identifier of a state</param>
        /// <returns>ApiResponse of GetStateInfoResponse</returns>
        public ApiResponse<GetStateInfoResponse> ReadStateWithHttpInfo (long stateId)
        {
            // verify the required parameter 'stateId' is set
            if (stateId == null)
                throw new ApiException(400, "Missing required parameter 'stateId' when calling RegionalSettingsApi->ReadState");

            var localVarPath = "/restapi/v1.0/dictionary/state/{stateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stateId != null) localVarPathParams.Add("stateId", this.Configuration.ApiClient.ParameterToString(stateId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetStateInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetStateInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetStateInfoResponse)));
        }

        /// <summary>
        /// Get State Returns the information on a specific state.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateId">Internal identifier of a state</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetStateInfoResponse</returns>
        public async System.Threading.Tasks.Task<GetStateInfoResponse> ReadStateAsync (long stateId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetStateInfoResponse> localVarResponse = await ReadStateWithHttpInfoAsync(stateId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get State Returns the information on a specific state.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateId">Internal identifier of a state</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetStateInfoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetStateInfoResponse>> ReadStateWithHttpInfoAsync (long stateId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'stateId' is set
            if (stateId == null)
                throw new ApiException(400, "Missing required parameter 'stateId' when calling RegionalSettingsApi->ReadState");

            var localVarPath = "/restapi/v1.0/dictionary/state/{stateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stateId != null) localVarPathParams.Add("stateId", this.Configuration.ApiClient.ParameterToString(stateId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetStateInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetStateInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetStateInfoResponse)));
        }

        /// <summary>
        /// Get Timezone Returns the information on a certain timezone.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timezoneId">Internal identifier of a timezone</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to &quot;100&quot;)</param>
        /// <returns>GetTimezoneInfoResponse</returns>
        public GetTimezoneInfoResponse ReadTimezone (long timezoneId, string page = default(string), string perPage = default(string))
        {
             ApiResponse<GetTimezoneInfoResponse> localVarResponse = ReadTimezoneWithHttpInfo(timezoneId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Timezone Returns the information on a certain timezone.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timezoneId">Internal identifier of a timezone</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to &quot;100&quot;)</param>
        /// <returns>ApiResponse of GetTimezoneInfoResponse</returns>
        public ApiResponse<GetTimezoneInfoResponse> ReadTimezoneWithHttpInfo (long timezoneId, string page = default(string), string perPage = default(string))
        {
            // verify the required parameter 'timezoneId' is set
            if (timezoneId == null)
                throw new ApiException(400, "Missing required parameter 'timezoneId' when calling RegionalSettingsApi->ReadTimezone");

            var localVarPath = "/restapi/v1.0/dictionary/timezone/{timezoneId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timezoneId != null) localVarPathParams.Add("timezoneId", this.Configuration.ApiClient.ParameterToString(timezoneId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadTimezone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTimezoneInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTimezoneInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTimezoneInfoResponse)));
        }

        /// <summary>
        /// Get Timezone Returns the information on a certain timezone.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timezoneId">Internal identifier of a timezone</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to &quot;100&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetTimezoneInfoResponse</returns>
        public async System.Threading.Tasks.Task<GetTimezoneInfoResponse> ReadTimezoneAsync (long timezoneId, string page = default(string), string perPage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetTimezoneInfoResponse> localVarResponse = await ReadTimezoneWithHttpInfoAsync(timezoneId, page, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Timezone Returns the information on a certain timezone.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timezoneId">Internal identifier of a timezone</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to &quot;100&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetTimezoneInfoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTimezoneInfoResponse>> ReadTimezoneWithHttpInfoAsync (long timezoneId, string page = default(string), string perPage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'timezoneId' is set
            if (timezoneId == null)
                throw new ApiException(400, "Missing required parameter 'timezoneId' when calling RegionalSettingsApi->ReadTimezone");

            var localVarPath = "/restapi/v1.0/dictionary/timezone/{timezoneId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timezoneId != null) localVarPathParams.Add("timezoneId", this.Configuration.ApiClient.ParameterToString(timezoneId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadTimezone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTimezoneInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTimezoneInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTimezoneInfoResponse)));
        }

    }
}
