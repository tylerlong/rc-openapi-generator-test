/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICallHandlingRulesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Call Handling Rule
        /// </summary>
        /// <remarks>
        /// Creates a custom call handling rule for a particular caller ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="createAnsweringRuleRequest">JSON body</param>
        /// <returns>CustomAnsweringRuleInfo</returns>
        CustomAnsweringRuleInfo CreateAnsweringRule (string accountId, string extensionId, CreateAnsweringRuleRequest createAnsweringRuleRequest);

        /// <summary>
        /// Create Call Handling Rule
        /// </summary>
        /// <remarks>
        /// Creates a custom call handling rule for a particular caller ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="createAnsweringRuleRequest">JSON body</param>
        /// <returns>ApiResponse of CustomAnsweringRuleInfo</returns>
        ApiResponse<CustomAnsweringRuleInfo> CreateAnsweringRuleWithHttpInfo (string accountId, string extensionId, CreateAnsweringRuleRequest createAnsweringRuleRequest);
        /// <summary>
        /// Create Company Call Handling Rule
        /// </summary>
        /// <remarks>
        /// Creates call handling rule on account level.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="companyAnsweringRuleRequest">JSON body</param>
        /// <returns>CompanyAnsweringRuleInfo</returns>
        CompanyAnsweringRuleInfo CreateCompanyAnsweringRule (string accountId, CompanyAnsweringRuleRequest companyAnsweringRuleRequest);

        /// <summary>
        /// Create Company Call Handling Rule
        /// </summary>
        /// <remarks>
        /// Creates call handling rule on account level.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="companyAnsweringRuleRequest">JSON body</param>
        /// <returns>ApiResponse of CompanyAnsweringRuleInfo</returns>
        ApiResponse<CompanyAnsweringRuleInfo> CreateCompanyAnsweringRuleWithHttpInfo (string accountId, CompanyAnsweringRuleRequest companyAnsweringRuleRequest);
        /// <summary>
        /// Delete Call Handling Rule
        /// </summary>
        /// <remarks>
        /// Deletes a custom call handling rule by a particular ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule</param>
        /// <returns></returns>
        void DeleteAnsweringRule (string accountId, string extensionId, string ruleId);

        /// <summary>
        /// Delete Call Handling Rule
        /// </summary>
        /// <remarks>
        /// Deletes a custom call handling rule by a particular ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAnsweringRuleWithHttpInfo (string accountId, string extensionId, string ruleId);
        /// <summary>
        /// Delete Company Call Handling Rule
        /// </summary>
        /// <remarks>
        /// Deletes a company custom call handling rule by a particular ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule</param>
        /// <returns></returns>
        void DeleteCompanyAnsweringRule (string accountId, string ruleId);

        /// <summary>
        /// Delete Company Call Handling Rule
        /// </summary>
        /// <remarks>
        /// Deletes a company custom call handling rule by a particular ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCompanyAnsweringRuleWithHttpInfo (string accountId, string ruleId);
        /// <summary>
        /// Get Forward All Calls
        /// </summary>
        /// <remarks>
        /// Returns information about *Forward All Calls* feature setting.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <returns>ForwardAllCallsInfo</returns>
        ForwardAllCallsInfo GetForwardAllCalls (string accountId, string extensionId);

        /// <summary>
        /// Get Forward All Calls
        /// </summary>
        /// <remarks>
        /// Returns information about *Forward All Calls* feature setting.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <returns>ApiResponse of ForwardAllCallsInfo</returns>
        ApiResponse<ForwardAllCallsInfo> GetForwardAllCallsWithHttpInfo (string accountId, string extensionId);
        /// <summary>
        /// Get Call Handling Rules
        /// </summary>
        /// <remarks>
        /// Returns call handling rules of an extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="type">Filters custom call handling rules of the extension (optional)</param>
        /// <param name="view"> (optional, default to Simple)</param>
        /// <param name="enabledOnly">If true, then only active call handling rules are returned (optional, default to false)</param>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <returns>UserAnsweringRuleList</returns>
        UserAnsweringRuleList ListAnsweringRules (string accountId, string extensionId, string type = default(string), string view = default(string), bool? enabledOnly = default(bool?), string page = default(string), string perPage = default(string));

        /// <summary>
        /// Get Call Handling Rules
        /// </summary>
        /// <remarks>
        /// Returns call handling rules of an extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="type">Filters custom call handling rules of the extension (optional)</param>
        /// <param name="view"> (optional, default to Simple)</param>
        /// <param name="enabledOnly">If true, then only active call handling rules are returned (optional, default to false)</param>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <returns>ApiResponse of UserAnsweringRuleList</returns>
        ApiResponse<UserAnsweringRuleList> ListAnsweringRulesWithHttpInfo (string accountId, string extensionId, string type = default(string), string view = default(string), bool? enabledOnly = default(bool?), string page = default(string), string perPage = default(string));
        /// <summary>
        /// Get Company Call Handling Rule List
        /// </summary>
        /// <remarks>
        /// Returns a list of company call handling rules.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items per page) (optional, default to 100)</param>
        /// <returns>CompanyAnsweringRuleList</returns>
        CompanyAnsweringRuleList ListCompanyAnsweringRules (string accountId, int? page = default(int?), int? perPage = default(int?));

        /// <summary>
        /// Get Company Call Handling Rule List
        /// </summary>
        /// <remarks>
        /// Returns a list of company call handling rules.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items per page) (optional, default to 100)</param>
        /// <returns>ApiResponse of CompanyAnsweringRuleList</returns>
        ApiResponse<CompanyAnsweringRuleList> ListCompanyAnsweringRulesWithHttpInfo (string accountId, int? page = default(int?), int? perPage = default(int?));
        /// <summary>
        /// Get Call Handling Rule
        /// </summary>
        /// <remarks>
        /// Returns a call handling rule by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule. The value can be standard digital ID or specific ID - either &#39;business-hours-rule&#39; or &#39;after-hours-rule&#39;</param>
        /// <param name="showInactiveNumbers">Indicates whether inactive numbers should be returned or not (optional, default to false)</param>
        /// <returns>AnsweringRuleInfo</returns>
        AnsweringRuleInfo ReadAnsweringRule (string accountId, string extensionId, string ruleId, bool? showInactiveNumbers = default(bool?));

        /// <summary>
        /// Get Call Handling Rule
        /// </summary>
        /// <remarks>
        /// Returns a call handling rule by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule. The value can be standard digital ID or specific ID - either &#39;business-hours-rule&#39; or &#39;after-hours-rule&#39;</param>
        /// <param name="showInactiveNumbers">Indicates whether inactive numbers should be returned or not (optional, default to false)</param>
        /// <returns>ApiResponse of AnsweringRuleInfo</returns>
        ApiResponse<AnsweringRuleInfo> ReadAnsweringRuleWithHttpInfo (string accountId, string extensionId, string ruleId, bool? showInactiveNumbers = default(bool?));
        /// <summary>
        /// Get Company Call Handling Rule
        /// </summary>
        /// <remarks>
        /// Returns a company call handling rule by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule. The value can be standard digital ID or specific ID - either &#39;business-hours-rule&#39; or &#39;after-hours-rule&#39;</param>
        /// <returns>CompanyAnsweringRuleInfo</returns>
        CompanyAnsweringRuleInfo ReadCompanyAnsweringRule (string accountId, string ruleId);

        /// <summary>
        /// Get Company Call Handling Rule
        /// </summary>
        /// <remarks>
        /// Returns a company call handling rule by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule. The value can be standard digital ID or specific ID - either &#39;business-hours-rule&#39; or &#39;after-hours-rule&#39;</param>
        /// <returns>ApiResponse of CompanyAnsweringRuleInfo</returns>
        ApiResponse<CompanyAnsweringRuleInfo> ReadCompanyAnsweringRuleWithHttpInfo (string accountId, string ruleId);
        /// <summary>
        /// Update Call Handling Rule
        /// </summary>
        /// <remarks>
        /// Updates a custom call handling rule for a particular caller ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule</param>
        /// <param name="updateAnsweringRuleRequest">JSON body</param>
        /// <returns>AnsweringRuleInfo</returns>
        AnsweringRuleInfo UpdateAnsweringRule (string accountId, string extensionId, string ruleId, UpdateAnsweringRuleRequest updateAnsweringRuleRequest);

        /// <summary>
        /// Update Call Handling Rule
        /// </summary>
        /// <remarks>
        /// Updates a custom call handling rule for a particular caller ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule</param>
        /// <param name="updateAnsweringRuleRequest">JSON body</param>
        /// <returns>ApiResponse of AnsweringRuleInfo</returns>
        ApiResponse<AnsweringRuleInfo> UpdateAnsweringRuleWithHttpInfo (string accountId, string extensionId, string ruleId, UpdateAnsweringRuleRequest updateAnsweringRuleRequest);
        /// <summary>
        /// Update Company Call Handling Rule
        /// </summary>
        /// <remarks>
        /// Updates a company call handling rule.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule. The value can be standard digital ID or specific ID - either &#39;business-hours-rule&#39; or &#39;after-hours-rule&#39;</param>
        /// <param name="companyAnsweringRuleUpdate">JSON body</param>
        /// <returns>CompanyAnsweringRuleInfo</returns>
        CompanyAnsweringRuleInfo UpdateCompanyAnsweringRule (string accountId, string ruleId, CompanyAnsweringRuleUpdate companyAnsweringRuleUpdate);

        /// <summary>
        /// Update Company Call Handling Rule
        /// </summary>
        /// <remarks>
        /// Updates a company call handling rule.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule. The value can be standard digital ID or specific ID - either &#39;business-hours-rule&#39; or &#39;after-hours-rule&#39;</param>
        /// <param name="companyAnsweringRuleUpdate">JSON body</param>
        /// <returns>ApiResponse of CompanyAnsweringRuleInfo</returns>
        ApiResponse<CompanyAnsweringRuleInfo> UpdateCompanyAnsweringRuleWithHttpInfo (string accountId, string ruleId, CompanyAnsweringRuleUpdate companyAnsweringRuleUpdate);
        /// <summary>
        /// Update Forward All Calls
        /// </summary>
        /// <remarks>
        /// Updates *Forward All Calls* feature setting.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="forwardAllCallsInfo">JSON body</param>
        /// <returns>ForwardAllCallsInfo</returns>
        ForwardAllCallsInfo UpdateForwardAllCalls (string accountId, string extensionId, ForwardAllCallsInfo forwardAllCallsInfo);

        /// <summary>
        /// Update Forward All Calls
        /// </summary>
        /// <remarks>
        /// Updates *Forward All Calls* feature setting.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="forwardAllCallsInfo">JSON body</param>
        /// <returns>ApiResponse of ForwardAllCallsInfo</returns>
        ApiResponse<ForwardAllCallsInfo> UpdateForwardAllCallsWithHttpInfo (string accountId, string extensionId, ForwardAllCallsInfo forwardAllCallsInfo);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create Call Handling Rule
        /// </summary>
        /// <remarks>
        /// Creates a custom call handling rule for a particular caller ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="createAnsweringRuleRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomAnsweringRuleInfo</returns>
        System.Threading.Tasks.Task<CustomAnsweringRuleInfo> CreateAnsweringRuleAsync (string accountId, string extensionId, CreateAnsweringRuleRequest createAnsweringRuleRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Call Handling Rule
        /// </summary>
        /// <remarks>
        /// Creates a custom call handling rule for a particular caller ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="createAnsweringRuleRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomAnsweringRuleInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomAnsweringRuleInfo>> CreateAnsweringRuleWithHttpInfoAsync (string accountId, string extensionId, CreateAnsweringRuleRequest createAnsweringRuleRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create Company Call Handling Rule
        /// </summary>
        /// <remarks>
        /// Creates call handling rule on account level.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="companyAnsweringRuleRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CompanyAnsweringRuleInfo</returns>
        System.Threading.Tasks.Task<CompanyAnsweringRuleInfo> CreateCompanyAnsweringRuleAsync (string accountId, CompanyAnsweringRuleRequest companyAnsweringRuleRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Company Call Handling Rule
        /// </summary>
        /// <remarks>
        /// Creates call handling rule on account level.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="companyAnsweringRuleRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CompanyAnsweringRuleInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompanyAnsweringRuleInfo>> CreateCompanyAnsweringRuleWithHttpInfoAsync (string accountId, CompanyAnsweringRuleRequest companyAnsweringRuleRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete Call Handling Rule
        /// </summary>
        /// <remarks>
        /// Deletes a custom call handling rule by a particular ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAnsweringRuleAsync (string accountId, string extensionId, string ruleId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Call Handling Rule
        /// </summary>
        /// <remarks>
        /// Deletes a custom call handling rule by a particular ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAnsweringRuleWithHttpInfoAsync (string accountId, string extensionId, string ruleId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete Company Call Handling Rule
        /// </summary>
        /// <remarks>
        /// Deletes a company custom call handling rule by a particular ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCompanyAnsweringRuleAsync (string accountId, string ruleId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Company Call Handling Rule
        /// </summary>
        /// <remarks>
        /// Deletes a company custom call handling rule by a particular ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCompanyAnsweringRuleWithHttpInfoAsync (string accountId, string ruleId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Forward All Calls
        /// </summary>
        /// <remarks>
        /// Returns information about *Forward All Calls* feature setting.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ForwardAllCallsInfo</returns>
        System.Threading.Tasks.Task<ForwardAllCallsInfo> GetForwardAllCallsAsync (string accountId, string extensionId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Forward All Calls
        /// </summary>
        /// <remarks>
        /// Returns information about *Forward All Calls* feature setting.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ForwardAllCallsInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ForwardAllCallsInfo>> GetForwardAllCallsWithHttpInfoAsync (string accountId, string extensionId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Call Handling Rules
        /// </summary>
        /// <remarks>
        /// Returns call handling rules of an extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="type">Filters custom call handling rules of the extension (optional)</param>
        /// <param name="view"> (optional, default to Simple)</param>
        /// <param name="enabledOnly">If true, then only active call handling rules are returned (optional, default to false)</param>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserAnsweringRuleList</returns>
        System.Threading.Tasks.Task<UserAnsweringRuleList> ListAnsweringRulesAsync (string accountId, string extensionId, string type = default(string), string view = default(string), bool? enabledOnly = default(bool?), string page = default(string), string perPage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Call Handling Rules
        /// </summary>
        /// <remarks>
        /// Returns call handling rules of an extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="type">Filters custom call handling rules of the extension (optional)</param>
        /// <param name="view"> (optional, default to Simple)</param>
        /// <param name="enabledOnly">If true, then only active call handling rules are returned (optional, default to false)</param>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserAnsweringRuleList)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserAnsweringRuleList>> ListAnsweringRulesWithHttpInfoAsync (string accountId, string extensionId, string type = default(string), string view = default(string), bool? enabledOnly = default(bool?), string page = default(string), string perPage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Company Call Handling Rule List
        /// </summary>
        /// <remarks>
        /// Returns a list of company call handling rules.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items per page) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CompanyAnsweringRuleList</returns>
        System.Threading.Tasks.Task<CompanyAnsweringRuleList> ListCompanyAnsweringRulesAsync (string accountId, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Company Call Handling Rule List
        /// </summary>
        /// <remarks>
        /// Returns a list of company call handling rules.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items per page) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CompanyAnsweringRuleList)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompanyAnsweringRuleList>> ListCompanyAnsweringRulesWithHttpInfoAsync (string accountId, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Call Handling Rule
        /// </summary>
        /// <remarks>
        /// Returns a call handling rule by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule. The value can be standard digital ID or specific ID - either &#39;business-hours-rule&#39; or &#39;after-hours-rule&#39;</param>
        /// <param name="showInactiveNumbers">Indicates whether inactive numbers should be returned or not (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AnsweringRuleInfo</returns>
        System.Threading.Tasks.Task<AnsweringRuleInfo> ReadAnsweringRuleAsync (string accountId, string extensionId, string ruleId, bool? showInactiveNumbers = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Call Handling Rule
        /// </summary>
        /// <remarks>
        /// Returns a call handling rule by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule. The value can be standard digital ID or specific ID - either &#39;business-hours-rule&#39; or &#39;after-hours-rule&#39;</param>
        /// <param name="showInactiveNumbers">Indicates whether inactive numbers should be returned or not (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AnsweringRuleInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnsweringRuleInfo>> ReadAnsweringRuleWithHttpInfoAsync (string accountId, string extensionId, string ruleId, bool? showInactiveNumbers = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Company Call Handling Rule
        /// </summary>
        /// <remarks>
        /// Returns a company call handling rule by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule. The value can be standard digital ID or specific ID - either &#39;business-hours-rule&#39; or &#39;after-hours-rule&#39;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CompanyAnsweringRuleInfo</returns>
        System.Threading.Tasks.Task<CompanyAnsweringRuleInfo> ReadCompanyAnsweringRuleAsync (string accountId, string ruleId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Company Call Handling Rule
        /// </summary>
        /// <remarks>
        /// Returns a company call handling rule by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule. The value can be standard digital ID or specific ID - either &#39;business-hours-rule&#39; or &#39;after-hours-rule&#39;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CompanyAnsweringRuleInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompanyAnsweringRuleInfo>> ReadCompanyAnsweringRuleWithHttpInfoAsync (string accountId, string ruleId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Call Handling Rule
        /// </summary>
        /// <remarks>
        /// Updates a custom call handling rule for a particular caller ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule</param>
        /// <param name="updateAnsweringRuleRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AnsweringRuleInfo</returns>
        System.Threading.Tasks.Task<AnsweringRuleInfo> UpdateAnsweringRuleAsync (string accountId, string extensionId, string ruleId, UpdateAnsweringRuleRequest updateAnsweringRuleRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Call Handling Rule
        /// </summary>
        /// <remarks>
        /// Updates a custom call handling rule for a particular caller ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule</param>
        /// <param name="updateAnsweringRuleRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AnsweringRuleInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnsweringRuleInfo>> UpdateAnsweringRuleWithHttpInfoAsync (string accountId, string extensionId, string ruleId, UpdateAnsweringRuleRequest updateAnsweringRuleRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Company Call Handling Rule
        /// </summary>
        /// <remarks>
        /// Updates a company call handling rule.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule. The value can be standard digital ID or specific ID - either &#39;business-hours-rule&#39; or &#39;after-hours-rule&#39;</param>
        /// <param name="companyAnsweringRuleUpdate">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CompanyAnsweringRuleInfo</returns>
        System.Threading.Tasks.Task<CompanyAnsweringRuleInfo> UpdateCompanyAnsweringRuleAsync (string accountId, string ruleId, CompanyAnsweringRuleUpdate companyAnsweringRuleUpdate, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Company Call Handling Rule
        /// </summary>
        /// <remarks>
        /// Updates a company call handling rule.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule. The value can be standard digital ID or specific ID - either &#39;business-hours-rule&#39; or &#39;after-hours-rule&#39;</param>
        /// <param name="companyAnsweringRuleUpdate">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CompanyAnsweringRuleInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompanyAnsweringRuleInfo>> UpdateCompanyAnsweringRuleWithHttpInfoAsync (string accountId, string ruleId, CompanyAnsweringRuleUpdate companyAnsweringRuleUpdate, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Forward All Calls
        /// </summary>
        /// <remarks>
        /// Updates *Forward All Calls* feature setting.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="forwardAllCallsInfo">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ForwardAllCallsInfo</returns>
        System.Threading.Tasks.Task<ForwardAllCallsInfo> UpdateForwardAllCallsAsync (string accountId, string extensionId, ForwardAllCallsInfo forwardAllCallsInfo, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Forward All Calls
        /// </summary>
        /// <remarks>
        /// Updates *Forward All Calls* feature setting.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="forwardAllCallsInfo">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ForwardAllCallsInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ForwardAllCallsInfo>> UpdateForwardAllCallsWithHttpInfoAsync (string accountId, string extensionId, ForwardAllCallsInfo forwardAllCallsInfo, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CallHandlingRulesApi : ICallHandlingRulesApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CallHandlingRulesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CallHandlingRulesApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallHandlingRulesApi"/> class
        /// </summary>
        /// <returns></returns>
        public CallHandlingRulesApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallHandlingRulesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CallHandlingRulesApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create Call Handling Rule Creates a custom call handling rule for a particular caller ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="createAnsweringRuleRequest">JSON body</param>
        /// <returns>CustomAnsweringRuleInfo</returns>
        public CustomAnsweringRuleInfo CreateAnsweringRule (string accountId, string extensionId, CreateAnsweringRuleRequest createAnsweringRuleRequest)
        {
             ApiResponse<CustomAnsweringRuleInfo> localVarResponse = CreateAnsweringRuleWithHttpInfo(accountId, extensionId, createAnsweringRuleRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Call Handling Rule Creates a custom call handling rule for a particular caller ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="createAnsweringRuleRequest">JSON body</param>
        /// <returns>ApiResponse of CustomAnsweringRuleInfo</returns>
        public ApiResponse<CustomAnsweringRuleInfo> CreateAnsweringRuleWithHttpInfo (string accountId, string extensionId, CreateAnsweringRuleRequest createAnsweringRuleRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallHandlingRulesApi->CreateAnsweringRule");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallHandlingRulesApi->CreateAnsweringRule");
            // verify the required parameter 'createAnsweringRuleRequest' is set
            if (createAnsweringRuleRequest == null)
                throw new ApiException(400, "Missing required parameter 'createAnsweringRuleRequest' when calling CallHandlingRulesApi->CreateAnsweringRule");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/answering-rule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (createAnsweringRuleRequest != null && createAnsweringRuleRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createAnsweringRuleRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createAnsweringRuleRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAnsweringRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomAnsweringRuleInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomAnsweringRuleInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomAnsweringRuleInfo)));
        }

        /// <summary>
        /// Create Call Handling Rule Creates a custom call handling rule for a particular caller ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="createAnsweringRuleRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomAnsweringRuleInfo</returns>
        public async System.Threading.Tasks.Task<CustomAnsweringRuleInfo> CreateAnsweringRuleAsync (string accountId, string extensionId, CreateAnsweringRuleRequest createAnsweringRuleRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CustomAnsweringRuleInfo> localVarResponse = await CreateAnsweringRuleWithHttpInfoAsync(accountId, extensionId, createAnsweringRuleRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Call Handling Rule Creates a custom call handling rule for a particular caller ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="createAnsweringRuleRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomAnsweringRuleInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomAnsweringRuleInfo>> CreateAnsweringRuleWithHttpInfoAsync (string accountId, string extensionId, CreateAnsweringRuleRequest createAnsweringRuleRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallHandlingRulesApi->CreateAnsweringRule");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallHandlingRulesApi->CreateAnsweringRule");
            // verify the required parameter 'createAnsweringRuleRequest' is set
            if (createAnsweringRuleRequest == null)
                throw new ApiException(400, "Missing required parameter 'createAnsweringRuleRequest' when calling CallHandlingRulesApi->CreateAnsweringRule");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/answering-rule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (createAnsweringRuleRequest != null && createAnsweringRuleRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createAnsweringRuleRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createAnsweringRuleRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAnsweringRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomAnsweringRuleInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomAnsweringRuleInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomAnsweringRuleInfo)));
        }

        /// <summary>
        /// Create Company Call Handling Rule Creates call handling rule on account level.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="companyAnsweringRuleRequest">JSON body</param>
        /// <returns>CompanyAnsweringRuleInfo</returns>
        public CompanyAnsweringRuleInfo CreateCompanyAnsweringRule (string accountId, CompanyAnsweringRuleRequest companyAnsweringRuleRequest)
        {
             ApiResponse<CompanyAnsweringRuleInfo> localVarResponse = CreateCompanyAnsweringRuleWithHttpInfo(accountId, companyAnsweringRuleRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Company Call Handling Rule Creates call handling rule on account level.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="companyAnsweringRuleRequest">JSON body</param>
        /// <returns>ApiResponse of CompanyAnsweringRuleInfo</returns>
        public ApiResponse<CompanyAnsweringRuleInfo> CreateCompanyAnsweringRuleWithHttpInfo (string accountId, CompanyAnsweringRuleRequest companyAnsweringRuleRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallHandlingRulesApi->CreateCompanyAnsweringRule");
            // verify the required parameter 'companyAnsweringRuleRequest' is set
            if (companyAnsweringRuleRequest == null)
                throw new ApiException(400, "Missing required parameter 'companyAnsweringRuleRequest' when calling CallHandlingRulesApi->CreateCompanyAnsweringRule");

            var localVarPath = "/restapi/v1.0/account/{accountId}/answering-rule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (companyAnsweringRuleRequest != null && companyAnsweringRuleRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(companyAnsweringRuleRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = companyAnsweringRuleRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCompanyAnsweringRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompanyAnsweringRuleInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CompanyAnsweringRuleInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompanyAnsweringRuleInfo)));
        }

        /// <summary>
        /// Create Company Call Handling Rule Creates call handling rule on account level.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="companyAnsweringRuleRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CompanyAnsweringRuleInfo</returns>
        public async System.Threading.Tasks.Task<CompanyAnsweringRuleInfo> CreateCompanyAnsweringRuleAsync (string accountId, CompanyAnsweringRuleRequest companyAnsweringRuleRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CompanyAnsweringRuleInfo> localVarResponse = await CreateCompanyAnsweringRuleWithHttpInfoAsync(accountId, companyAnsweringRuleRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Company Call Handling Rule Creates call handling rule on account level.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="companyAnsweringRuleRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CompanyAnsweringRuleInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CompanyAnsweringRuleInfo>> CreateCompanyAnsweringRuleWithHttpInfoAsync (string accountId, CompanyAnsweringRuleRequest companyAnsweringRuleRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallHandlingRulesApi->CreateCompanyAnsweringRule");
            // verify the required parameter 'companyAnsweringRuleRequest' is set
            if (companyAnsweringRuleRequest == null)
                throw new ApiException(400, "Missing required parameter 'companyAnsweringRuleRequest' when calling CallHandlingRulesApi->CreateCompanyAnsweringRule");

            var localVarPath = "/restapi/v1.0/account/{accountId}/answering-rule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (companyAnsweringRuleRequest != null && companyAnsweringRuleRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(companyAnsweringRuleRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = companyAnsweringRuleRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCompanyAnsweringRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompanyAnsweringRuleInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CompanyAnsweringRuleInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompanyAnsweringRuleInfo)));
        }

        /// <summary>
        /// Delete Call Handling Rule Deletes a custom call handling rule by a particular ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule</param>
        /// <returns></returns>
        public void DeleteAnsweringRule (string accountId, string extensionId, string ruleId)
        {
             DeleteAnsweringRuleWithHttpInfo(accountId, extensionId, ruleId);
        }

        /// <summary>
        /// Delete Call Handling Rule Deletes a custom call handling rule by a particular ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAnsweringRuleWithHttpInfo (string accountId, string extensionId, string ruleId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallHandlingRulesApi->DeleteAnsweringRule");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallHandlingRulesApi->DeleteAnsweringRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling CallHandlingRulesApi->DeleteAnsweringRule");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/answering-rule/{ruleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAnsweringRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Call Handling Rule Deletes a custom call handling rule by a particular ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAnsweringRuleAsync (string accountId, string extensionId, string ruleId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteAnsweringRuleWithHttpInfoAsync(accountId, extensionId, ruleId, cancellationToken);

        }

        /// <summary>
        /// Delete Call Handling Rule Deletes a custom call handling rule by a particular ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAnsweringRuleWithHttpInfoAsync (string accountId, string extensionId, string ruleId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallHandlingRulesApi->DeleteAnsweringRule");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallHandlingRulesApi->DeleteAnsweringRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling CallHandlingRulesApi->DeleteAnsweringRule");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/answering-rule/{ruleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAnsweringRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Company Call Handling Rule Deletes a company custom call handling rule by a particular ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule</param>
        /// <returns></returns>
        public void DeleteCompanyAnsweringRule (string accountId, string ruleId)
        {
             DeleteCompanyAnsweringRuleWithHttpInfo(accountId, ruleId);
        }

        /// <summary>
        /// Delete Company Call Handling Rule Deletes a company custom call handling rule by a particular ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCompanyAnsweringRuleWithHttpInfo (string accountId, string ruleId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallHandlingRulesApi->DeleteCompanyAnsweringRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling CallHandlingRulesApi->DeleteCompanyAnsweringRule");

            var localVarPath = "/restapi/v1.0/account/{accountId}/answering-rule/{ruleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCompanyAnsweringRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Company Call Handling Rule Deletes a company custom call handling rule by a particular ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCompanyAnsweringRuleAsync (string accountId, string ruleId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteCompanyAnsweringRuleWithHttpInfoAsync(accountId, ruleId, cancellationToken);

        }

        /// <summary>
        /// Delete Company Call Handling Rule Deletes a company custom call handling rule by a particular ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCompanyAnsweringRuleWithHttpInfoAsync (string accountId, string ruleId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallHandlingRulesApi->DeleteCompanyAnsweringRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling CallHandlingRulesApi->DeleteCompanyAnsweringRule");

            var localVarPath = "/restapi/v1.0/account/{accountId}/answering-rule/{ruleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCompanyAnsweringRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get Forward All Calls Returns information about *Forward All Calls* feature setting.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <returns>ForwardAllCallsInfo</returns>
        public ForwardAllCallsInfo GetForwardAllCalls (string accountId, string extensionId)
        {
             ApiResponse<ForwardAllCallsInfo> localVarResponse = GetForwardAllCallsWithHttpInfo(accountId, extensionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Forward All Calls Returns information about *Forward All Calls* feature setting.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <returns>ApiResponse of ForwardAllCallsInfo</returns>
        public ApiResponse<ForwardAllCallsInfo> GetForwardAllCallsWithHttpInfo (string accountId, string extensionId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallHandlingRulesApi->GetForwardAllCalls");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallHandlingRulesApi->GetForwardAllCalls");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/forward-all-calls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetForwardAllCalls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ForwardAllCallsInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ForwardAllCallsInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ForwardAllCallsInfo)));
        }

        /// <summary>
        /// Get Forward All Calls Returns information about *Forward All Calls* feature setting.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ForwardAllCallsInfo</returns>
        public async System.Threading.Tasks.Task<ForwardAllCallsInfo> GetForwardAllCallsAsync (string accountId, string extensionId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ForwardAllCallsInfo> localVarResponse = await GetForwardAllCallsWithHttpInfoAsync(accountId, extensionId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Forward All Calls Returns information about *Forward All Calls* feature setting.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ForwardAllCallsInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ForwardAllCallsInfo>> GetForwardAllCallsWithHttpInfoAsync (string accountId, string extensionId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallHandlingRulesApi->GetForwardAllCalls");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallHandlingRulesApi->GetForwardAllCalls");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/forward-all-calls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetForwardAllCalls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ForwardAllCallsInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ForwardAllCallsInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ForwardAllCallsInfo)));
        }

        /// <summary>
        /// Get Call Handling Rules Returns call handling rules of an extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="type">Filters custom call handling rules of the extension (optional)</param>
        /// <param name="view"> (optional, default to Simple)</param>
        /// <param name="enabledOnly">If true, then only active call handling rules are returned (optional, default to false)</param>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <returns>UserAnsweringRuleList</returns>
        public UserAnsweringRuleList ListAnsweringRules (string accountId, string extensionId, string type = default(string), string view = default(string), bool? enabledOnly = default(bool?), string page = default(string), string perPage = default(string))
        {
             ApiResponse<UserAnsweringRuleList> localVarResponse = ListAnsweringRulesWithHttpInfo(accountId, extensionId, type, view, enabledOnly, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Handling Rules Returns call handling rules of an extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="type">Filters custom call handling rules of the extension (optional)</param>
        /// <param name="view"> (optional, default to Simple)</param>
        /// <param name="enabledOnly">If true, then only active call handling rules are returned (optional, default to false)</param>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <returns>ApiResponse of UserAnsweringRuleList</returns>
        public ApiResponse<UserAnsweringRuleList> ListAnsweringRulesWithHttpInfo (string accountId, string extensionId, string type = default(string), string view = default(string), bool? enabledOnly = default(bool?), string page = default(string), string perPage = default(string))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallHandlingRulesApi->ListAnsweringRules");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallHandlingRulesApi->ListAnsweringRules");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/answering-rule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (view != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "view", view)); // query parameter
            if (enabledOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enabledOnly", enabledOnly)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAnsweringRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAnsweringRuleList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserAnsweringRuleList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAnsweringRuleList)));
        }

        /// <summary>
        /// Get Call Handling Rules Returns call handling rules of an extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="type">Filters custom call handling rules of the extension (optional)</param>
        /// <param name="view"> (optional, default to Simple)</param>
        /// <param name="enabledOnly">If true, then only active call handling rules are returned (optional, default to false)</param>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserAnsweringRuleList</returns>
        public async System.Threading.Tasks.Task<UserAnsweringRuleList> ListAnsweringRulesAsync (string accountId, string extensionId, string type = default(string), string view = default(string), bool? enabledOnly = default(bool?), string page = default(string), string perPage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UserAnsweringRuleList> localVarResponse = await ListAnsweringRulesWithHttpInfoAsync(accountId, extensionId, type, view, enabledOnly, page, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Call Handling Rules Returns call handling rules of an extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="type">Filters custom call handling rules of the extension (optional)</param>
        /// <param name="view"> (optional, default to Simple)</param>
        /// <param name="enabledOnly">If true, then only active call handling rules are returned (optional, default to false)</param>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserAnsweringRuleList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserAnsweringRuleList>> ListAnsweringRulesWithHttpInfoAsync (string accountId, string extensionId, string type = default(string), string view = default(string), bool? enabledOnly = default(bool?), string page = default(string), string perPage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallHandlingRulesApi->ListAnsweringRules");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallHandlingRulesApi->ListAnsweringRules");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/answering-rule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (view != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "view", view)); // query parameter
            if (enabledOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enabledOnly", enabledOnly)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAnsweringRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAnsweringRuleList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserAnsweringRuleList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAnsweringRuleList)));
        }

        /// <summary>
        /// Get Company Call Handling Rule List Returns a list of company call handling rules.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items per page) (optional, default to 100)</param>
        /// <returns>CompanyAnsweringRuleList</returns>
        public CompanyAnsweringRuleList ListCompanyAnsweringRules (string accountId, int? page = default(int?), int? perPage = default(int?))
        {
             ApiResponse<CompanyAnsweringRuleList> localVarResponse = ListCompanyAnsweringRulesWithHttpInfo(accountId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Company Call Handling Rule List Returns a list of company call handling rules.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items per page) (optional, default to 100)</param>
        /// <returns>ApiResponse of CompanyAnsweringRuleList</returns>
        public ApiResponse<CompanyAnsweringRuleList> ListCompanyAnsweringRulesWithHttpInfo (string accountId, int? page = default(int?), int? perPage = default(int?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallHandlingRulesApi->ListCompanyAnsweringRules");

            var localVarPath = "/restapi/v1.0/account/{accountId}/answering-rule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCompanyAnsweringRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompanyAnsweringRuleList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CompanyAnsweringRuleList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompanyAnsweringRuleList)));
        }

        /// <summary>
        /// Get Company Call Handling Rule List Returns a list of company call handling rules.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items per page) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CompanyAnsweringRuleList</returns>
        public async System.Threading.Tasks.Task<CompanyAnsweringRuleList> ListCompanyAnsweringRulesAsync (string accountId, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CompanyAnsweringRuleList> localVarResponse = await ListCompanyAnsweringRulesWithHttpInfoAsync(accountId, page, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Company Call Handling Rule List Returns a list of company call handling rules.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items per page) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CompanyAnsweringRuleList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CompanyAnsweringRuleList>> ListCompanyAnsweringRulesWithHttpInfoAsync (string accountId, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallHandlingRulesApi->ListCompanyAnsweringRules");

            var localVarPath = "/restapi/v1.0/account/{accountId}/answering-rule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCompanyAnsweringRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompanyAnsweringRuleList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CompanyAnsweringRuleList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompanyAnsweringRuleList)));
        }

        /// <summary>
        /// Get Call Handling Rule Returns a call handling rule by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule. The value can be standard digital ID or specific ID - either &#39;business-hours-rule&#39; or &#39;after-hours-rule&#39;</param>
        /// <param name="showInactiveNumbers">Indicates whether inactive numbers should be returned or not (optional, default to false)</param>
        /// <returns>AnsweringRuleInfo</returns>
        public AnsweringRuleInfo ReadAnsweringRule (string accountId, string extensionId, string ruleId, bool? showInactiveNumbers = default(bool?))
        {
             ApiResponse<AnsweringRuleInfo> localVarResponse = ReadAnsweringRuleWithHttpInfo(accountId, extensionId, ruleId, showInactiveNumbers);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Handling Rule Returns a call handling rule by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule. The value can be standard digital ID or specific ID - either &#39;business-hours-rule&#39; or &#39;after-hours-rule&#39;</param>
        /// <param name="showInactiveNumbers">Indicates whether inactive numbers should be returned or not (optional, default to false)</param>
        /// <returns>ApiResponse of AnsweringRuleInfo</returns>
        public ApiResponse<AnsweringRuleInfo> ReadAnsweringRuleWithHttpInfo (string accountId, string extensionId, string ruleId, bool? showInactiveNumbers = default(bool?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallHandlingRulesApi->ReadAnsweringRule");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallHandlingRulesApi->ReadAnsweringRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling CallHandlingRulesApi->ReadAnsweringRule");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/answering-rule/{ruleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            if (showInactiveNumbers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showInactiveNumbers", showInactiveNumbers)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadAnsweringRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnsweringRuleInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AnsweringRuleInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnsweringRuleInfo)));
        }

        /// <summary>
        /// Get Call Handling Rule Returns a call handling rule by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule. The value can be standard digital ID or specific ID - either &#39;business-hours-rule&#39; or &#39;after-hours-rule&#39;</param>
        /// <param name="showInactiveNumbers">Indicates whether inactive numbers should be returned or not (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AnsweringRuleInfo</returns>
        public async System.Threading.Tasks.Task<AnsweringRuleInfo> ReadAnsweringRuleAsync (string accountId, string extensionId, string ruleId, bool? showInactiveNumbers = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AnsweringRuleInfo> localVarResponse = await ReadAnsweringRuleWithHttpInfoAsync(accountId, extensionId, ruleId, showInactiveNumbers, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Call Handling Rule Returns a call handling rule by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule. The value can be standard digital ID or specific ID - either &#39;business-hours-rule&#39; or &#39;after-hours-rule&#39;</param>
        /// <param name="showInactiveNumbers">Indicates whether inactive numbers should be returned or not (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AnsweringRuleInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnsweringRuleInfo>> ReadAnsweringRuleWithHttpInfoAsync (string accountId, string extensionId, string ruleId, bool? showInactiveNumbers = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallHandlingRulesApi->ReadAnsweringRule");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallHandlingRulesApi->ReadAnsweringRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling CallHandlingRulesApi->ReadAnsweringRule");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/answering-rule/{ruleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            if (showInactiveNumbers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showInactiveNumbers", showInactiveNumbers)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadAnsweringRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnsweringRuleInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AnsweringRuleInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnsweringRuleInfo)));
        }

        /// <summary>
        /// Get Company Call Handling Rule Returns a company call handling rule by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule. The value can be standard digital ID or specific ID - either &#39;business-hours-rule&#39; or &#39;after-hours-rule&#39;</param>
        /// <returns>CompanyAnsweringRuleInfo</returns>
        public CompanyAnsweringRuleInfo ReadCompanyAnsweringRule (string accountId, string ruleId)
        {
             ApiResponse<CompanyAnsweringRuleInfo> localVarResponse = ReadCompanyAnsweringRuleWithHttpInfo(accountId, ruleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Company Call Handling Rule Returns a company call handling rule by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule. The value can be standard digital ID or specific ID - either &#39;business-hours-rule&#39; or &#39;after-hours-rule&#39;</param>
        /// <returns>ApiResponse of CompanyAnsweringRuleInfo</returns>
        public ApiResponse<CompanyAnsweringRuleInfo> ReadCompanyAnsweringRuleWithHttpInfo (string accountId, string ruleId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallHandlingRulesApi->ReadCompanyAnsweringRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling CallHandlingRulesApi->ReadCompanyAnsweringRule");

            var localVarPath = "/restapi/v1.0/account/{accountId}/answering-rule/{ruleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadCompanyAnsweringRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompanyAnsweringRuleInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CompanyAnsweringRuleInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompanyAnsweringRuleInfo)));
        }

        /// <summary>
        /// Get Company Call Handling Rule Returns a company call handling rule by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule. The value can be standard digital ID or specific ID - either &#39;business-hours-rule&#39; or &#39;after-hours-rule&#39;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CompanyAnsweringRuleInfo</returns>
        public async System.Threading.Tasks.Task<CompanyAnsweringRuleInfo> ReadCompanyAnsweringRuleAsync (string accountId, string ruleId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CompanyAnsweringRuleInfo> localVarResponse = await ReadCompanyAnsweringRuleWithHttpInfoAsync(accountId, ruleId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Company Call Handling Rule Returns a company call handling rule by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule. The value can be standard digital ID or specific ID - either &#39;business-hours-rule&#39; or &#39;after-hours-rule&#39;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CompanyAnsweringRuleInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CompanyAnsweringRuleInfo>> ReadCompanyAnsweringRuleWithHttpInfoAsync (string accountId, string ruleId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallHandlingRulesApi->ReadCompanyAnsweringRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling CallHandlingRulesApi->ReadCompanyAnsweringRule");

            var localVarPath = "/restapi/v1.0/account/{accountId}/answering-rule/{ruleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadCompanyAnsweringRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompanyAnsweringRuleInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CompanyAnsweringRuleInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompanyAnsweringRuleInfo)));
        }

        /// <summary>
        /// Update Call Handling Rule Updates a custom call handling rule for a particular caller ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule</param>
        /// <param name="updateAnsweringRuleRequest">JSON body</param>
        /// <returns>AnsweringRuleInfo</returns>
        public AnsweringRuleInfo UpdateAnsweringRule (string accountId, string extensionId, string ruleId, UpdateAnsweringRuleRequest updateAnsweringRuleRequest)
        {
             ApiResponse<AnsweringRuleInfo> localVarResponse = UpdateAnsweringRuleWithHttpInfo(accountId, extensionId, ruleId, updateAnsweringRuleRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Call Handling Rule Updates a custom call handling rule for a particular caller ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule</param>
        /// <param name="updateAnsweringRuleRequest">JSON body</param>
        /// <returns>ApiResponse of AnsweringRuleInfo</returns>
        public ApiResponse<AnsweringRuleInfo> UpdateAnsweringRuleWithHttpInfo (string accountId, string extensionId, string ruleId, UpdateAnsweringRuleRequest updateAnsweringRuleRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallHandlingRulesApi->UpdateAnsweringRule");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallHandlingRulesApi->UpdateAnsweringRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling CallHandlingRulesApi->UpdateAnsweringRule");
            // verify the required parameter 'updateAnsweringRuleRequest' is set
            if (updateAnsweringRuleRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateAnsweringRuleRequest' when calling CallHandlingRulesApi->UpdateAnsweringRule");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/answering-rule/{ruleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            if (updateAnsweringRuleRequest != null && updateAnsweringRuleRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateAnsweringRuleRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateAnsweringRuleRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAnsweringRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnsweringRuleInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AnsweringRuleInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnsweringRuleInfo)));
        }

        /// <summary>
        /// Update Call Handling Rule Updates a custom call handling rule for a particular caller ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule</param>
        /// <param name="updateAnsweringRuleRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AnsweringRuleInfo</returns>
        public async System.Threading.Tasks.Task<AnsweringRuleInfo> UpdateAnsweringRuleAsync (string accountId, string extensionId, string ruleId, UpdateAnsweringRuleRequest updateAnsweringRuleRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AnsweringRuleInfo> localVarResponse = await UpdateAnsweringRuleWithHttpInfoAsync(accountId, extensionId, ruleId, updateAnsweringRuleRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Call Handling Rule Updates a custom call handling rule for a particular caller ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule</param>
        /// <param name="updateAnsweringRuleRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AnsweringRuleInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnsweringRuleInfo>> UpdateAnsweringRuleWithHttpInfoAsync (string accountId, string extensionId, string ruleId, UpdateAnsweringRuleRequest updateAnsweringRuleRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallHandlingRulesApi->UpdateAnsweringRule");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallHandlingRulesApi->UpdateAnsweringRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling CallHandlingRulesApi->UpdateAnsweringRule");
            // verify the required parameter 'updateAnsweringRuleRequest' is set
            if (updateAnsweringRuleRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateAnsweringRuleRequest' when calling CallHandlingRulesApi->UpdateAnsweringRule");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/answering-rule/{ruleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            if (updateAnsweringRuleRequest != null && updateAnsweringRuleRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateAnsweringRuleRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateAnsweringRuleRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAnsweringRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnsweringRuleInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AnsweringRuleInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnsweringRuleInfo)));
        }

        /// <summary>
        /// Update Company Call Handling Rule Updates a company call handling rule.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule. The value can be standard digital ID or specific ID - either &#39;business-hours-rule&#39; or &#39;after-hours-rule&#39;</param>
        /// <param name="companyAnsweringRuleUpdate">JSON body</param>
        /// <returns>CompanyAnsweringRuleInfo</returns>
        public CompanyAnsweringRuleInfo UpdateCompanyAnsweringRule (string accountId, string ruleId, CompanyAnsweringRuleUpdate companyAnsweringRuleUpdate)
        {
             ApiResponse<CompanyAnsweringRuleInfo> localVarResponse = UpdateCompanyAnsweringRuleWithHttpInfo(accountId, ruleId, companyAnsweringRuleUpdate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Company Call Handling Rule Updates a company call handling rule.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule. The value can be standard digital ID or specific ID - either &#39;business-hours-rule&#39; or &#39;after-hours-rule&#39;</param>
        /// <param name="companyAnsweringRuleUpdate">JSON body</param>
        /// <returns>ApiResponse of CompanyAnsweringRuleInfo</returns>
        public ApiResponse<CompanyAnsweringRuleInfo> UpdateCompanyAnsweringRuleWithHttpInfo (string accountId, string ruleId, CompanyAnsweringRuleUpdate companyAnsweringRuleUpdate)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallHandlingRulesApi->UpdateCompanyAnsweringRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling CallHandlingRulesApi->UpdateCompanyAnsweringRule");
            // verify the required parameter 'companyAnsweringRuleUpdate' is set
            if (companyAnsweringRuleUpdate == null)
                throw new ApiException(400, "Missing required parameter 'companyAnsweringRuleUpdate' when calling CallHandlingRulesApi->UpdateCompanyAnsweringRule");

            var localVarPath = "/restapi/v1.0/account/{accountId}/answering-rule/{ruleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            if (companyAnsweringRuleUpdate != null && companyAnsweringRuleUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(companyAnsweringRuleUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = companyAnsweringRuleUpdate; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCompanyAnsweringRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompanyAnsweringRuleInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CompanyAnsweringRuleInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompanyAnsweringRuleInfo)));
        }

        /// <summary>
        /// Update Company Call Handling Rule Updates a company call handling rule.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule. The value can be standard digital ID or specific ID - either &#39;business-hours-rule&#39; or &#39;after-hours-rule&#39;</param>
        /// <param name="companyAnsweringRuleUpdate">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CompanyAnsweringRuleInfo</returns>
        public async System.Threading.Tasks.Task<CompanyAnsweringRuleInfo> UpdateCompanyAnsweringRuleAsync (string accountId, string ruleId, CompanyAnsweringRuleUpdate companyAnsweringRuleUpdate, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CompanyAnsweringRuleInfo> localVarResponse = await UpdateCompanyAnsweringRuleWithHttpInfoAsync(accountId, ruleId, companyAnsweringRuleUpdate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Company Call Handling Rule Updates a company call handling rule.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="ruleId">Internal identifier of an answering rule. The value can be standard digital ID or specific ID - either &#39;business-hours-rule&#39; or &#39;after-hours-rule&#39;</param>
        /// <param name="companyAnsweringRuleUpdate">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CompanyAnsweringRuleInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CompanyAnsweringRuleInfo>> UpdateCompanyAnsweringRuleWithHttpInfoAsync (string accountId, string ruleId, CompanyAnsweringRuleUpdate companyAnsweringRuleUpdate, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallHandlingRulesApi->UpdateCompanyAnsweringRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling CallHandlingRulesApi->UpdateCompanyAnsweringRule");
            // verify the required parameter 'companyAnsweringRuleUpdate' is set
            if (companyAnsweringRuleUpdate == null)
                throw new ApiException(400, "Missing required parameter 'companyAnsweringRuleUpdate' when calling CallHandlingRulesApi->UpdateCompanyAnsweringRule");

            var localVarPath = "/restapi/v1.0/account/{accountId}/answering-rule/{ruleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            if (companyAnsweringRuleUpdate != null && companyAnsweringRuleUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(companyAnsweringRuleUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = companyAnsweringRuleUpdate; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCompanyAnsweringRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompanyAnsweringRuleInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CompanyAnsweringRuleInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompanyAnsweringRuleInfo)));
        }

        /// <summary>
        /// Update Forward All Calls Updates *Forward All Calls* feature setting.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="forwardAllCallsInfo">JSON body</param>
        /// <returns>ForwardAllCallsInfo</returns>
        public ForwardAllCallsInfo UpdateForwardAllCalls (string accountId, string extensionId, ForwardAllCallsInfo forwardAllCallsInfo)
        {
             ApiResponse<ForwardAllCallsInfo> localVarResponse = UpdateForwardAllCallsWithHttpInfo(accountId, extensionId, forwardAllCallsInfo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Forward All Calls Updates *Forward All Calls* feature setting.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="forwardAllCallsInfo">JSON body</param>
        /// <returns>ApiResponse of ForwardAllCallsInfo</returns>
        public ApiResponse<ForwardAllCallsInfo> UpdateForwardAllCallsWithHttpInfo (string accountId, string extensionId, ForwardAllCallsInfo forwardAllCallsInfo)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallHandlingRulesApi->UpdateForwardAllCalls");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallHandlingRulesApi->UpdateForwardAllCalls");
            // verify the required parameter 'forwardAllCallsInfo' is set
            if (forwardAllCallsInfo == null)
                throw new ApiException(400, "Missing required parameter 'forwardAllCallsInfo' when calling CallHandlingRulesApi->UpdateForwardAllCalls");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/forward-all-calls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (forwardAllCallsInfo != null && forwardAllCallsInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(forwardAllCallsInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = forwardAllCallsInfo; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateForwardAllCalls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ForwardAllCallsInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ForwardAllCallsInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ForwardAllCallsInfo)));
        }

        /// <summary>
        /// Update Forward All Calls Updates *Forward All Calls* feature setting.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="forwardAllCallsInfo">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ForwardAllCallsInfo</returns>
        public async System.Threading.Tasks.Task<ForwardAllCallsInfo> UpdateForwardAllCallsAsync (string accountId, string extensionId, ForwardAllCallsInfo forwardAllCallsInfo, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ForwardAllCallsInfo> localVarResponse = await UpdateForwardAllCallsWithHttpInfoAsync(accountId, extensionId, forwardAllCallsInfo, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Forward All Calls Updates *Forward All Calls* feature setting.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="forwardAllCallsInfo">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ForwardAllCallsInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ForwardAllCallsInfo>> UpdateForwardAllCallsWithHttpInfoAsync (string accountId, string extensionId, ForwardAllCallsInfo forwardAllCallsInfo, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallHandlingRulesApi->UpdateForwardAllCalls");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallHandlingRulesApi->UpdateForwardAllCalls");
            // verify the required parameter 'forwardAllCallsInfo' is set
            if (forwardAllCallsInfo == null)
                throw new ApiException(400, "Missing required parameter 'forwardAllCallsInfo' when calling CallHandlingRulesApi->UpdateForwardAllCalls");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/forward-all-calls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (forwardAllCallsInfo != null && forwardAllCallsInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(forwardAllCallsInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = forwardAllCallsInfo; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateForwardAllCalls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ForwardAllCallsInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ForwardAllCallsInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ForwardAllCallsInfo)));
        }

    }
}
