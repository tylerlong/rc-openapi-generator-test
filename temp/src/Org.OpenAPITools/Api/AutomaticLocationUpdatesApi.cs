/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAutomaticLocationUpdatesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Enable Automatic Location Updates for Users
        /// </summary>
        /// <remarks>
        /// Enables or disables Automatic Location Updates feature for multiple account users.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="bulkAssignAutomaticLocationUpdatesUsers"> (optional)</param>
        /// <returns></returns>
        void AssignMultipleAutomaticLocationUpdatesUsers (string accountId, BulkAssignAutomaticLocationUpdatesUsers bulkAssignAutomaticLocationUpdatesUsers = default(BulkAssignAutomaticLocationUpdatesUsers));

        /// <summary>
        /// Enable Automatic Location Updates for Users
        /// </summary>
        /// <remarks>
        /// Enables or disables Automatic Location Updates feature for multiple account users.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="bulkAssignAutomaticLocationUpdatesUsers"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssignMultipleAutomaticLocationUpdatesUsersWithHttpInfo (string accountId, BulkAssignAutomaticLocationUpdatesUsers bulkAssignAutomaticLocationUpdatesUsers = default(BulkAssignAutomaticLocationUpdatesUsers));
        /// <summary>
        /// Enable Automatic Location Updates for Devices
        /// </summary>
        /// <remarks>
        /// Enables or disables Automatic Location Updates feature for the specified common phones.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="assignMultipleDevicesAutomaticLocationUpdates"> (optional)</param>
        /// <returns></returns>
        void AssignMultipleDevicesAutomaticLocationUpdates (string accountId, AssignMultipleDevicesAutomaticLocationUpdates assignMultipleDevicesAutomaticLocationUpdates = default(AssignMultipleDevicesAutomaticLocationUpdates));

        /// <summary>
        /// Enable Automatic Location Updates for Devices
        /// </summary>
        /// <remarks>
        /// Enables or disables Automatic Location Updates feature for the specified common phones.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="assignMultipleDevicesAutomaticLocationUpdates"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssignMultipleDevicesAutomaticLocationUpdatesWithHttpInfo (string accountId, AssignMultipleDevicesAutomaticLocationUpdates assignMultipleDevicesAutomaticLocationUpdates = default(AssignMultipleDevicesAutomaticLocationUpdates));
        /// <summary>
        /// Add Emergency Location
        /// </summary>
        /// <remarks>
        /// Creates a new emergency response location for the company.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="emergencyLocationInfoRequest">JSON body</param>
        /// <returns></returns>
        void CreateEmergencyLocation (string accountId, EmergencyLocationInfoRequest emergencyLocationInfoRequest);

        /// <summary>
        /// Add Emergency Location
        /// </summary>
        /// <remarks>
        /// Creates a new emergency response location for the company.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="emergencyLocationInfoRequest">JSON body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateEmergencyLocationWithHttpInfo (string accountId, EmergencyLocationInfoRequest emergencyLocationInfoRequest);
        /// <summary>
        /// Create User Emergency Location
        /// </summary>
        /// <remarks>
        /// Creates a personal emergency response location for the current user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="createUserEmergencyLocationRequest"></param>
        /// <returns>EmergencyLocationInfo</returns>
        EmergencyLocationInfo CreateExtensionEmergencyLocation (string accountId, string extensionId, CreateUserEmergencyLocationRequest createUserEmergencyLocationRequest);

        /// <summary>
        /// Create User Emergency Location
        /// </summary>
        /// <remarks>
        /// Creates a personal emergency response location for the current user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="createUserEmergencyLocationRequest"></param>
        /// <returns>ApiResponse of EmergencyLocationInfo</returns>
        ApiResponse<EmergencyLocationInfo> CreateExtensionEmergencyLocationWithHttpInfo (string accountId, string extensionId, CreateUserEmergencyLocationRequest createUserEmergencyLocationRequest);
        /// <summary>
        /// Create Multiple Switches
        /// </summary>
        /// <remarks>
        /// Creates multiple switches in corporate map. The maximum number of switches per request is 10 000; limitation for account is 10 000.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createMultipleSwitchesRequest"></param>
        /// <returns>CreateMultipleSwitchesResponse</returns>
        CreateMultipleSwitchesResponse CreateMultipleSwitches (string accountId, CreateMultipleSwitchesRequest createMultipleSwitchesRequest);

        /// <summary>
        /// Create Multiple Switches
        /// </summary>
        /// <remarks>
        /// Creates multiple switches in corporate map. The maximum number of switches per request is 10 000; limitation for account is 10 000.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createMultipleSwitchesRequest"></param>
        /// <returns>ApiResponse of CreateMultipleSwitchesResponse</returns>
        ApiResponse<CreateMultipleSwitchesResponse> CreateMultipleSwitchesWithHttpInfo (string accountId, CreateMultipleSwitchesRequest createMultipleSwitchesRequest);
        /// <summary>
        /// Create Multiple Wireless Points
        /// </summary>
        /// <remarks>
        /// Creates multiple wireless points in corporate map. The maximum number of wireless points per request is 10 000; limitation for account is 70 000.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createMultipleWirelessPointsRequest"></param>
        /// <returns>CreateMultipleWirelessPointsResponse</returns>
        CreateMultipleWirelessPointsResponse CreateMultipleWirelessPoints (string accountId, CreateMultipleWirelessPointsRequest createMultipleWirelessPointsRequest);

        /// <summary>
        /// Create Multiple Wireless Points
        /// </summary>
        /// <remarks>
        /// Creates multiple wireless points in corporate map. The maximum number of wireless points per request is 10 000; limitation for account is 70 000.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createMultipleWirelessPointsRequest"></param>
        /// <returns>ApiResponse of CreateMultipleWirelessPointsResponse</returns>
        ApiResponse<CreateMultipleWirelessPointsResponse> CreateMultipleWirelessPointsWithHttpInfo (string accountId, CreateMultipleWirelessPointsRequest createMultipleWirelessPointsRequest);
        /// <summary>
        /// Create Network
        /// </summary>
        /// <remarks>
        /// Creates a new network in corporate ethernet map for assignment of emergency addresses to network access points.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createNetworkRequest"></param>
        /// <returns>NetworkInfo</returns>
        NetworkInfo CreateNetwork (string accountId, CreateNetworkRequest createNetworkRequest);

        /// <summary>
        /// Create Network
        /// </summary>
        /// <remarks>
        /// Creates a new network in corporate ethernet map for assignment of emergency addresses to network access points.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createNetworkRequest"></param>
        /// <returns>ApiResponse of NetworkInfo</returns>
        ApiResponse<NetworkInfo> CreateNetworkWithHttpInfo (string accountId, CreateNetworkRequest createNetworkRequest);
        /// <summary>
        /// Create Switch
        /// </summary>
        /// <remarks>
        /// Creates a new switch in corporate map based on chassis ID and used for Automatic Locations Update feature.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createSwitchInfo"></param>
        /// <returns>SwitchInfo</returns>
        SwitchInfo CreateSwitch (string accountId, CreateSwitchInfo createSwitchInfo);

        /// <summary>
        /// Create Switch
        /// </summary>
        /// <remarks>
        /// Creates a new switch in corporate map based on chassis ID and used for Automatic Locations Update feature.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createSwitchInfo"></param>
        /// <returns>ApiResponse of SwitchInfo</returns>
        ApiResponse<SwitchInfo> CreateSwitchWithHttpInfo (string accountId, CreateSwitchInfo createSwitchInfo);
        /// <summary>
        /// Create Wireless Point
        /// </summary>
        /// <remarks>
        /// Creates a new wireless point in network configuration with the emergency address assigned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createWirelessPoint"></param>
        /// <returns>WirelessPointInfo</returns>
        WirelessPointInfo CreateWirelessPoint (string accountId, CreateWirelessPoint createWirelessPoint);

        /// <summary>
        /// Create Wireless Point
        /// </summary>
        /// <remarks>
        /// Creates a new wireless point in network configuration with the emergency address assigned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createWirelessPoint"></param>
        /// <returns>ApiResponse of WirelessPointInfo</returns>
        ApiResponse<WirelessPointInfo> CreateWirelessPointWithHttpInfo (string accountId, CreateWirelessPoint createWirelessPoint);
        /// <summary>
        /// Delete Emergency Location
        /// </summary>
        /// <remarks>
        /// Deletes the specified emergency response location.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of emergency location</param>
        /// <param name="newLocationId">Internal identifier of a location that should be used instead of a deleted one (optional)</param>
        /// <param name="validateOnly">Flag indicating that validation of emergency location(s) is required before deletion (optional)</param>
        /// <returns></returns>
        void DeleteEmergencyLocation (string accountId, string locationId, string newLocationId = default(string), bool? validateOnly = default(bool?));

        /// <summary>
        /// Delete Emergency Location
        /// </summary>
        /// <remarks>
        /// Deletes the specified emergency response location.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of emergency location</param>
        /// <param name="newLocationId">Internal identifier of a location that should be used instead of a deleted one (optional)</param>
        /// <param name="validateOnly">Flag indicating that validation of emergency location(s) is required before deletion (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteEmergencyLocationWithHttpInfo (string accountId, string locationId, string newLocationId = default(string), bool? validateOnly = default(bool?));
        /// <summary>
        /// Delete User Emergency Location
        /// </summary>
        /// <remarks>
        /// Deletes a personal emergency response location by ID by the current user or admin. Multiple personal emergency response locations can be deleted by one API call
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of an emergency response location to be deleted</param>
        /// <param name="validateOnly">Flag indicating that only validation of Emergency Response Locations to be deleted is required. (optional)</param>
        /// <returns></returns>
        void DeleteExtensionEmergencyLocation (string accountId, string extensionId, string locationId, bool? validateOnly = default(bool?));

        /// <summary>
        /// Delete User Emergency Location
        /// </summary>
        /// <remarks>
        /// Deletes a personal emergency response location by ID by the current user or admin. Multiple personal emergency response locations can be deleted by one API call
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of an emergency response location to be deleted</param>
        /// <param name="validateOnly">Flag indicating that only validation of Emergency Response Locations to be deleted is required. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteExtensionEmergencyLocationWithHttpInfo (string accountId, string extensionId, string locationId, bool? validateOnly = default(bool?));
        /// <summary>
        /// Delete Network
        /// </summary>
        /// <remarks>
        /// Deletes network(s) in corporate ethernet map for Automatic Location Updates feature.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="networkId"></param>
        /// <returns></returns>
        void DeleteNetwork (string accountId, List<string> networkId);

        /// <summary>
        /// Delete Network
        /// </summary>
        /// <remarks>
        /// Deletes network(s) in corporate ethernet map for Automatic Location Updates feature.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="networkId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteNetworkWithHttpInfo (string accountId, List<string> networkId);
        /// <summary>
        /// Delete Switch
        /// </summary>
        /// <remarks>
        /// Deletes wireless switch(es) in network configuration for Automatic Location Updates feature.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="switchId"></param>
        /// <returns></returns>
        void DeleteSwitch (string accountId, List<string> switchId);

        /// <summary>
        /// Delete Switch
        /// </summary>
        /// <remarks>
        /// Deletes wireless switch(es) in network configuration for Automatic Location Updates feature.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="switchId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSwitchWithHttpInfo (string accountId, List<string> switchId);
        /// <summary>
        /// Delete Wireless Point
        /// </summary>
        /// <remarks>
        /// Deletes wireless point(s) of a corporate map by ID(s).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="pointId"></param>
        /// <returns></returns>
        void DeleteWirelessPoint (string accountId, List<string> pointId);

        /// <summary>
        /// Delete Wireless Point
        /// </summary>
        /// <remarks>
        /// Deletes wireless point(s) of a corporate map by ID(s).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="pointId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWirelessPointWithHttpInfo (string accountId, List<string> pointId);
        /// <summary>
        /// Get User Emergency Location
        /// </summary>
        /// <remarks>
        /// Returns personal emergency response location for the current user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of emergency location</param>
        /// <returns>EmergencyLocationInfo</returns>
        EmergencyLocationInfo GetExtensionEmergencyLocation (string accountId, string extensionId, string locationId);

        /// <summary>
        /// Get User Emergency Location
        /// </summary>
        /// <remarks>
        /// Returns personal emergency response location for the current user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of emergency location</param>
        /// <returns>ApiResponse of EmergencyLocationInfo</returns>
        ApiResponse<EmergencyLocationInfo> GetExtensionEmergencyLocationWithHttpInfo (string accountId, string extensionId, string locationId);
        /// <summary>
        /// Get User Emergency Location List
        /// </summary>
        /// <remarks>
        /// Returns a list of emergency response locations available for the current user extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="siteId">Internal identifier of a site. To filter Main Site (Company) main-site must be specified. Supported only If multi-site feature is enabled for the account (optional)</param>
        /// <param name="searchString">Filters entries by the specified substring (search by chassis ID, switch name or address) The characters range is 0-64 (if empty the filter is ignored) (optional)</param>
        /// <param name="domesticCountryId"> (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by plus sign &#39;+&#39; (ascending order) or minus sign &#39;-&#39; (descending order). The default value is &#x60;+visibility&#x60;, which means public ERLs will be returned first in the list, then - private ones (optional, default to +visibility)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <param name="visibility">Specifies whether to return only private or only public (company) ERLs (Emergency Response Locations) (optional)</param>
        /// <param name="ifNoneMatch">Flag that provides matching the client &#39;etag&#39; value with the server one (optional)</param>
        /// <returns>EmergencyLocationsResource</returns>
        EmergencyLocationsResource GetExtensionEmergencyLocations (string accountId, string extensionId, List<string> siteId = default(List<string>), string searchString = default(string), string domesticCountryId = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?), string visibility = default(string), string ifNoneMatch = default(string));

        /// <summary>
        /// Get User Emergency Location List
        /// </summary>
        /// <remarks>
        /// Returns a list of emergency response locations available for the current user extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="siteId">Internal identifier of a site. To filter Main Site (Company) main-site must be specified. Supported only If multi-site feature is enabled for the account (optional)</param>
        /// <param name="searchString">Filters entries by the specified substring (search by chassis ID, switch name or address) The characters range is 0-64 (if empty the filter is ignored) (optional)</param>
        /// <param name="domesticCountryId"> (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by plus sign &#39;+&#39; (ascending order) or minus sign &#39;-&#39; (descending order). The default value is &#x60;+visibility&#x60;, which means public ERLs will be returned first in the list, then - private ones (optional, default to +visibility)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <param name="visibility">Specifies whether to return only private or only public (company) ERLs (Emergency Response Locations) (optional)</param>
        /// <param name="ifNoneMatch">Flag that provides matching the client &#39;etag&#39; value with the server one (optional)</param>
        /// <returns>ApiResponse of EmergencyLocationsResource</returns>
        ApiResponse<EmergencyLocationsResource> GetExtensionEmergencyLocationsWithHttpInfo (string accountId, string extensionId, List<string> siteId = default(List<string>), string searchString = default(string), string domesticCountryId = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?), string visibility = default(string), string ifNoneMatch = default(string));
        /// <summary>
        /// Get Account Switch List
        /// </summary>
        /// <remarks>
        /// Returns corporate map of configured network switches with the assigned emergency addresses for the logged-in account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="siteId">Internal identifier of a site. To filter Main Site (Company) main-site must be specified. Supported only If multi-site feature is enabled for the account (optional)</param>
        /// <param name="searchString">Filters entries by the specified substring (search by chassis ID, switch name or address) The characters range is 0-64 (if empty the filter is ignored) (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by &#39;+&#39; sign (ascending order) or &#39;-&#39; sign (descending order). The default sorting is by &#x60;name&#x60; (optional)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <returns>SwitchesList</returns>
        SwitchesList ListAccountSwitches (string accountId, string siteId = default(string), string searchString = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?));

        /// <summary>
        /// Get Account Switch List
        /// </summary>
        /// <remarks>
        /// Returns corporate map of configured network switches with the assigned emergency addresses for the logged-in account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="siteId">Internal identifier of a site. To filter Main Site (Company) main-site must be specified. Supported only If multi-site feature is enabled for the account (optional)</param>
        /// <param name="searchString">Filters entries by the specified substring (search by chassis ID, switch name or address) The characters range is 0-64 (if empty the filter is ignored) (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by &#39;+&#39; sign (ascending order) or &#39;-&#39; sign (descending order). The default sorting is by &#x60;name&#x60; (optional)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <returns>ApiResponse of SwitchesList</returns>
        ApiResponse<SwitchesList> ListAccountSwitchesWithHttpInfo (string accountId, string siteId = default(string), string searchString = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?));
        /// <summary>
        /// Get User List
        /// </summary>
        /// <remarks>
        /// Returns the list of users with their status of Automatic Location Updates feature.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="type">Extension type. Multiple values are supported (optional)</param>
        /// <param name="searchString">Filters entries containing the specified substring in user name, extension or department. The characters range is 0-64; not case-sensitive. If empty then the filter is ignored (optional)</param>
        /// <param name="department">Department name to filter the users. The value range is 0-64; not case-sensitive. If not specified then the parameter is ignored. Multiple values are supported (optional)</param>
        /// <param name="siteId">Internal identifier of a site. To filter users of Main Site (Company) &#x60;main-site&#x60; must be specified. Supported only If Multi-Site feature is enabled for the account. Multiple values are supported (optional)</param>
        /// <param name="featureEnabled">Filters entries by their status of Automatic Location Updates feature (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by plus sign &#39;+&#39; (ascending order) or minus sign &#39;-&#39; (descending order). Supported values: &#39;name&#39;, &#39;modelName&#39;, &#39;siteName&#39;, &#39;featureEnabled&#39; (optional, default to &quot;name&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <returns>AutomaticLocationUpdatesUserList</returns>
        AutomaticLocationUpdatesUserList ListAutomaticLocationUpdatesUsers (string accountId, string type = default(string), string searchString = default(string), string department = default(string), string siteId = default(string), bool? featureEnabled = default(bool?), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?));

        /// <summary>
        /// Get User List
        /// </summary>
        /// <remarks>
        /// Returns the list of users with their status of Automatic Location Updates feature.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="type">Extension type. Multiple values are supported (optional)</param>
        /// <param name="searchString">Filters entries containing the specified substring in user name, extension or department. The characters range is 0-64; not case-sensitive. If empty then the filter is ignored (optional)</param>
        /// <param name="department">Department name to filter the users. The value range is 0-64; not case-sensitive. If not specified then the parameter is ignored. Multiple values are supported (optional)</param>
        /// <param name="siteId">Internal identifier of a site. To filter users of Main Site (Company) &#x60;main-site&#x60; must be specified. Supported only If Multi-Site feature is enabled for the account. Multiple values are supported (optional)</param>
        /// <param name="featureEnabled">Filters entries by their status of Automatic Location Updates feature (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by plus sign &#39;+&#39; (ascending order) or minus sign &#39;-&#39; (descending order). Supported values: &#39;name&#39;, &#39;modelName&#39;, &#39;siteName&#39;, &#39;featureEnabled&#39; (optional, default to &quot;name&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <returns>ApiResponse of AutomaticLocationUpdatesUserList</returns>
        ApiResponse<AutomaticLocationUpdatesUserList> ListAutomaticLocationUpdatesUsersWithHttpInfo (string accountId, string type = default(string), string searchString = default(string), string department = default(string), string siteId = default(string), bool? featureEnabled = default(bool?), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?));
        /// <summary>
        /// Get Device List
        /// </summary>
        /// <remarks>
        /// Returns the list of common devices with their status of Automatic Location Updates feature.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="siteId">Internal identifier of a site. To filter devices of Main Site (Company) &#x60;main-site&#x60; must be specified. Supported only If Multi-Site feature is enabled for the account (optional)</param>
        /// <param name="featureEnabled">Filters entries by their status of Automatic Location Updates feature (optional)</param>
        /// <param name="model">Internal identifier of a device model for filtering. Multiple values are supported (optional)</param>
        /// <param name="compatibleOnly">Filters devices which support HELD protocol (optional)</param>
        /// <param name="searchString">Filters entries which have device name or model name containing the mentioned substring. The value should be split by spaces; the range is 0 - 64 characters, not case-sensitive. If empty the filter is ignored (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by plus sign &#39;+&#39; (ascending order) or minus sign &#39;-&#39; (descending order). Supported values: &#39;name&#39;, &#39;modelName&#39;, &#39;siteName&#39;, &#39;featureEnabled&#39; (optional, default to &quot;name&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <returns>ListDevicesAutomaticLocationUpdates</returns>
        ListDevicesAutomaticLocationUpdates ListDevicesAutomaticLocationUpdates (string accountId, string siteId = default(string), bool? featureEnabled = default(bool?), string model = default(string), bool? compatibleOnly = default(bool?), string searchString = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?));

        /// <summary>
        /// Get Device List
        /// </summary>
        /// <remarks>
        /// Returns the list of common devices with their status of Automatic Location Updates feature.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="siteId">Internal identifier of a site. To filter devices of Main Site (Company) &#x60;main-site&#x60; must be specified. Supported only If Multi-Site feature is enabled for the account (optional)</param>
        /// <param name="featureEnabled">Filters entries by their status of Automatic Location Updates feature (optional)</param>
        /// <param name="model">Internal identifier of a device model for filtering. Multiple values are supported (optional)</param>
        /// <param name="compatibleOnly">Filters devices which support HELD protocol (optional)</param>
        /// <param name="searchString">Filters entries which have device name or model name containing the mentioned substring. The value should be split by spaces; the range is 0 - 64 characters, not case-sensitive. If empty the filter is ignored (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by plus sign &#39;+&#39; (ascending order) or minus sign &#39;-&#39; (descending order). Supported values: &#39;name&#39;, &#39;modelName&#39;, &#39;siteName&#39;, &#39;featureEnabled&#39; (optional, default to &quot;name&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <returns>ApiResponse of ListDevicesAutomaticLocationUpdates</returns>
        ApiResponse<ListDevicesAutomaticLocationUpdates> ListDevicesAutomaticLocationUpdatesWithHttpInfo (string accountId, string siteId = default(string), bool? featureEnabled = default(bool?), string model = default(string), bool? compatibleOnly = default(bool?), string searchString = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?));
        /// <summary>
        /// Get Emergency Location List
        /// </summary>
        /// <remarks>
        /// Returns emergency response locations of the current account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="searchString">Filters entries containing the specified substring in address and name fields. The characters range is 0-64; not case-sensitive. If empty then the filter is ignored (optional)</param>
        /// <param name="siteId">Internal identifier of a site for filtering. To filter by Main Site (Company) &#x60;main-site&#x60; value should be specified (optional)</param>
        /// <param name="addressStatus"> (optional)</param>
        /// <param name="usageStatus"> (optional)</param>
        /// <param name="domesticCountryId"> (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by plus sign &#39;+&#39; (ascending order) or minus sign &#39;-&#39; (descending order). Possible field entries are: - &#x60;name&#x60;; - &#x60;siteName&#x60;; - &#x60;address&#x60;; - &#x60;addressStatus&#x60;; - &#x60;usageStatus&#x60;.  (optional, default to &quot;+address&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <returns>EmergencyLocationList</returns>
        EmergencyLocationList ListEmergencyLocations (string accountId, string searchString = default(string), string siteId = default(string), string addressStatus = default(string), string usageStatus = default(string), string domesticCountryId = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?));

        /// <summary>
        /// Get Emergency Location List
        /// </summary>
        /// <remarks>
        /// Returns emergency response locations of the current account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="searchString">Filters entries containing the specified substring in address and name fields. The characters range is 0-64; not case-sensitive. If empty then the filter is ignored (optional)</param>
        /// <param name="siteId">Internal identifier of a site for filtering. To filter by Main Site (Company) &#x60;main-site&#x60; value should be specified (optional)</param>
        /// <param name="addressStatus"> (optional)</param>
        /// <param name="usageStatus"> (optional)</param>
        /// <param name="domesticCountryId"> (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by plus sign &#39;+&#39; (ascending order) or minus sign &#39;-&#39; (descending order). Possible field entries are: - &#x60;name&#x60;; - &#x60;siteName&#x60;; - &#x60;address&#x60;; - &#x60;addressStatus&#x60;; - &#x60;usageStatus&#x60;.  (optional, default to &quot;+address&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <returns>ApiResponse of EmergencyLocationList</returns>
        ApiResponse<EmergencyLocationList> ListEmergencyLocationsWithHttpInfo (string accountId, string searchString = default(string), string siteId = default(string), string addressStatus = default(string), string usageStatus = default(string), string domesticCountryId = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?));
        /// <summary>
        /// Get Network Map
        /// </summary>
        /// <remarks>
        /// Returns corporate networks map with emergency addresses assigned to the current account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>NetworksList</returns>
        NetworksList ListNetworks (string accountId);

        /// <summary>
        /// Get Network Map
        /// </summary>
        /// <remarks>
        /// Returns corporate networks map with emergency addresses assigned to the current account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of NetworksList</returns>
        ApiResponse<NetworksList> ListNetworksWithHttpInfo (string accountId);
        /// <summary>
        /// Get Wireless Point List
        /// </summary>
        /// <remarks>
        /// Returns account wireless points configured and used for Automatic Location Updates feature.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="siteId">Internal identifier of a site. To filter Main Site (Company) &#39;main-site&#39; must be specified. Supported only If multi-site feature is enabled for the account (optional)</param>
        /// <param name="searchString">Filters entries by the specified substring (search by chassis ID, switch name or address) The characters range is 0-64 (if empty the filter is ignored) (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by &#39;+&#39; sign (ascending order) or &#39;-&#39; sign (descending order). The default sorting is by &#x60;name&#x60; (optional)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <returns>WirelessPointsList</returns>
        WirelessPointsList ListWirelessPoints (string accountId, string siteId = default(string), string searchString = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?));

        /// <summary>
        /// Get Wireless Point List
        /// </summary>
        /// <remarks>
        /// Returns account wireless points configured and used for Automatic Location Updates feature.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="siteId">Internal identifier of a site. To filter Main Site (Company) &#39;main-site&#39; must be specified. Supported only If multi-site feature is enabled for the account (optional)</param>
        /// <param name="searchString">Filters entries by the specified substring (search by chassis ID, switch name or address) The characters range is 0-64 (if empty the filter is ignored) (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by &#39;+&#39; sign (ascending order) or &#39;-&#39; sign (descending order). The default sorting is by &#x60;name&#x60; (optional)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <returns>ApiResponse of WirelessPointsList</returns>
        ApiResponse<WirelessPointsList> ListWirelessPointsWithHttpInfo (string accountId, string siteId = default(string), string searchString = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?));
        /// <summary>
        /// Get Emergency Map Configuration Task
        /// </summary>
        /// <remarks>
        /// Returns results of the task created within the frame of Automatic Location Updates feature. Currently four task types are supported: 'Wireless Points Bulk Create', 'Wireless Points Bulk Update', 'Switches Bulk Create', 'Switches Bulk Update'.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId"></param>
        /// <returns>AutomaticLocationUpdatesTaskInfo</returns>
        AutomaticLocationUpdatesTaskInfo ReadAutomaticLocationUpdatesTask (string accountId, string taskId);

        /// <summary>
        /// Get Emergency Map Configuration Task
        /// </summary>
        /// <remarks>
        /// Returns results of the task created within the frame of Automatic Location Updates feature. Currently four task types are supported: 'Wireless Points Bulk Create', 'Wireless Points Bulk Update', 'Switches Bulk Create', 'Switches Bulk Update'.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId"></param>
        /// <returns>ApiResponse of AutomaticLocationUpdatesTaskInfo</returns>
        ApiResponse<AutomaticLocationUpdatesTaskInfo> ReadAutomaticLocationUpdatesTaskWithHttpInfo (string accountId, string taskId);
        /// <summary>
        /// Get Emergency Location
        /// </summary>
        /// <remarks>
        /// Returns emergency response location by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of the emergency location</param>
        /// <returns>EmergencyLocationInfo</returns>
        EmergencyLocationInfo ReadEmergencyLocation (string accountId, string locationId);

        /// <summary>
        /// Get Emergency Location
        /// </summary>
        /// <remarks>
        /// Returns emergency response location by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of the emergency location</param>
        /// <returns>ApiResponse of EmergencyLocationInfo</returns>
        ApiResponse<EmergencyLocationInfo> ReadEmergencyLocationWithHttpInfo (string accountId, string locationId);
        /// <summary>
        /// Get Network
        /// </summary>
        /// <remarks>
        /// Returns the specified network with emergency addresses assigned to the current account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="networkId"></param>
        /// <returns>NetworkInfo</returns>
        NetworkInfo ReadNetwork (string accountId, string networkId);

        /// <summary>
        /// Get Network
        /// </summary>
        /// <remarks>
        /// Returns the specified network with emergency addresses assigned to the current account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="networkId"></param>
        /// <returns>ApiResponse of NetworkInfo</returns>
        ApiResponse<NetworkInfo> ReadNetworkWithHttpInfo (string accountId, string networkId);
        /// <summary>
        /// Get Switch
        /// </summary>
        /// <remarks>
        /// Returns the specified switch with the assigned emergency address.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="switchId"></param>
        /// <returns>SwitchInfo</returns>
        SwitchInfo ReadSwitch (string accountId, string switchId);

        /// <summary>
        /// Get Switch
        /// </summary>
        /// <remarks>
        /// Returns the specified switch with the assigned emergency address.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="switchId"></param>
        /// <returns>ApiResponse of SwitchInfo</returns>
        ApiResponse<SwitchInfo> ReadSwitchWithHttpInfo (string accountId, string switchId);
        /// <summary>
        /// Get Wireless Point
        /// </summary>
        /// <remarks>
        /// Returns the specified wireless access point of a corporate map with the emergency address assigned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="pointId"></param>
        /// <returns>WirelessPointInfo</returns>
        WirelessPointInfo ReadWirelessPoint (string accountId, string pointId);

        /// <summary>
        /// Get Wireless Point
        /// </summary>
        /// <remarks>
        /// Returns the specified wireless access point of a corporate map with the emergency address assigned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="pointId"></param>
        /// <returns>ApiResponse of WirelessPointInfo</returns>
        ApiResponse<WirelessPointInfo> ReadWirelessPointWithHttpInfo (string accountId, string pointId);
        /// <summary>
        /// Update Emergency Location
        /// </summary>
        /// <remarks>
        /// Updates the specified emergency response location.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of the emergency location</param>
        /// <param name="emergencyLocationInfoRequest">JSON body</param>
        /// <returns>EmergencyLocationInfo</returns>
        EmergencyLocationInfo UpdateEmergencyLocation (string accountId, string locationId, EmergencyLocationInfoRequest emergencyLocationInfoRequest);

        /// <summary>
        /// Update Emergency Location
        /// </summary>
        /// <remarks>
        /// Updates the specified emergency response location.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of the emergency location</param>
        /// <param name="emergencyLocationInfoRequest">JSON body</param>
        /// <returns>ApiResponse of EmergencyLocationInfo</returns>
        ApiResponse<EmergencyLocationInfo> UpdateEmergencyLocationWithHttpInfo (string accountId, string locationId, EmergencyLocationInfoRequest emergencyLocationInfoRequest);
        /// <summary>
        /// Update User Emergency Location
        /// </summary>
        /// <remarks>
        /// Updates a personal emergency response location by the current user or admin.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of an emergency response location to be deleted</param>
        /// <param name="emergencyLocationInfo"></param>
        /// <returns>EmergencyLocationInfo</returns>
        EmergencyLocationInfo UpdateExtensionEmergencyLocation (string accountId, string extensionId, string locationId, EmergencyLocationInfo emergencyLocationInfo);

        /// <summary>
        /// Update User Emergency Location
        /// </summary>
        /// <remarks>
        /// Updates a personal emergency response location by the current user or admin.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of an emergency response location to be deleted</param>
        /// <param name="emergencyLocationInfo"></param>
        /// <returns>ApiResponse of EmergencyLocationInfo</returns>
        ApiResponse<EmergencyLocationInfo> UpdateExtensionEmergencyLocationWithHttpInfo (string accountId, string extensionId, string locationId, EmergencyLocationInfo emergencyLocationInfo);
        /// <summary>
        /// Update Multiple Switches
        /// </summary>
        /// <remarks>
        /// Updates multiple switches in corporate map. The maximum number of switches per request is 10 000; limitation for account is 10 000.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="updateMultipleSwitchesRequest"></param>
        /// <returns>UpdateMultipleSwitchesResponse</returns>
        UpdateMultipleSwitchesResponse UpdateMultipleSwitches (string accountId, UpdateMultipleSwitchesRequest updateMultipleSwitchesRequest);

        /// <summary>
        /// Update Multiple Switches
        /// </summary>
        /// <remarks>
        /// Updates multiple switches in corporate map. The maximum number of switches per request is 10 000; limitation for account is 10 000.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="updateMultipleSwitchesRequest"></param>
        /// <returns>ApiResponse of UpdateMultipleSwitchesResponse</returns>
        ApiResponse<UpdateMultipleSwitchesResponse> UpdateMultipleSwitchesWithHttpInfo (string accountId, UpdateMultipleSwitchesRequest updateMultipleSwitchesRequest);
        /// <summary>
        /// Update Multiple Wireless Points
        /// </summary>
        /// <remarks>
        /// Updates wireless points in corporate map. The maximum number of wireless points per request is 10 000; limitation for account is 70 000.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="updateMultipleWirelessPointsRequest"></param>
        /// <returns>UpdateMultipleWirelessPointsResponse</returns>
        UpdateMultipleWirelessPointsResponse UpdateMultipleWirelessPoints (string accountId, UpdateMultipleWirelessPointsRequest updateMultipleWirelessPointsRequest);

        /// <summary>
        /// Update Multiple Wireless Points
        /// </summary>
        /// <remarks>
        /// Updates wireless points in corporate map. The maximum number of wireless points per request is 10 000; limitation for account is 70 000.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="updateMultipleWirelessPointsRequest"></param>
        /// <returns>ApiResponse of UpdateMultipleWirelessPointsResponse</returns>
        ApiResponse<UpdateMultipleWirelessPointsResponse> UpdateMultipleWirelessPointsWithHttpInfo (string accountId, UpdateMultipleWirelessPointsRequest updateMultipleWirelessPointsRequest);
        /// <summary>
        /// Update Network
        /// </summary>
        /// <remarks>
        /// Updates network in corporate ethernet map for assignment of emergency addresses to network access points.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="networkId"></param>
        /// <param name="updateNetworkRequest"></param>
        /// <returns></returns>
        void UpdateNetwork (string accountId, string networkId, UpdateNetworkRequest updateNetworkRequest);

        /// <summary>
        /// Update Network
        /// </summary>
        /// <remarks>
        /// Updates network in corporate ethernet map for assignment of emergency addresses to network access points.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="networkId"></param>
        /// <param name="updateNetworkRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateNetworkWithHttpInfo (string accountId, string networkId, UpdateNetworkRequest updateNetworkRequest);
        /// <summary>
        /// Update Switch
        /// </summary>
        /// <remarks>
        /// Updates switch. Partial update is not supported, all switch parameters should be specified. If null value is received or parameter is missing, its value is removed.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="switchId"></param>
        /// <param name="updateSwitchInfo"></param>
        /// <returns>SwitchInfo</returns>
        SwitchInfo UpdateSwitch (string accountId, string switchId, UpdateSwitchInfo updateSwitchInfo);

        /// <summary>
        /// Update Switch
        /// </summary>
        /// <remarks>
        /// Updates switch. Partial update is not supported, all switch parameters should be specified. If null value is received or parameter is missing, its value is removed.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="switchId"></param>
        /// <param name="updateSwitchInfo"></param>
        /// <returns>ApiResponse of SwitchInfo</returns>
        ApiResponse<SwitchInfo> UpdateSwitchWithHttpInfo (string accountId, string switchId, UpdateSwitchInfo updateSwitchInfo);
        /// <summary>
        /// Update Wireless Point
        /// </summary>
        /// <remarks>
        /// Updates the specified wireless access point of a corporate map by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="pointId"></param>
        /// <param name="updateWirelessPoint"></param>
        /// <returns>WirelessPointInfo</returns>
        WirelessPointInfo UpdateWirelessPoint (string accountId, string pointId, UpdateWirelessPoint updateWirelessPoint);

        /// <summary>
        /// Update Wireless Point
        /// </summary>
        /// <remarks>
        /// Updates the specified wireless access point of a corporate map by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="pointId"></param>
        /// <param name="updateWirelessPoint"></param>
        /// <returns>ApiResponse of WirelessPointInfo</returns>
        ApiResponse<WirelessPointInfo> UpdateWirelessPointWithHttpInfo (string accountId, string pointId, UpdateWirelessPoint updateWirelessPoint);
        /// <summary>
        /// Validate Multiple Switches
        /// </summary>
        /// <remarks>
        /// Validates switches before creation or update. The maximum number of switches per request is 10 000.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="validateMultipleSwitchesRequest"></param>
        /// <returns>ValidateMultipleSwitchesResponse</returns>
        ValidateMultipleSwitchesResponse ValidateMultipleSwitches (string accountId, ValidateMultipleSwitchesRequest validateMultipleSwitchesRequest);

        /// <summary>
        /// Validate Multiple Switches
        /// </summary>
        /// <remarks>
        /// Validates switches before creation or update. The maximum number of switches per request is 10 000.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="validateMultipleSwitchesRequest"></param>
        /// <returns>ApiResponse of ValidateMultipleSwitchesResponse</returns>
        ApiResponse<ValidateMultipleSwitchesResponse> ValidateMultipleSwitchesWithHttpInfo (string accountId, ValidateMultipleSwitchesRequest validateMultipleSwitchesRequest);
        /// <summary>
        /// Validate Multiple Wireless Points
        /// </summary>
        /// <remarks>
        /// Validates wireless points before creation or update. The maximum number of wireless points per request is 10 000.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="validateMultipleWirelessPointsRequest"></param>
        /// <returns>ValidateMultipleWirelessPointsResponse</returns>
        ValidateMultipleWirelessPointsResponse ValidateMultipleWirelessPoints (string accountId, ValidateMultipleWirelessPointsRequest validateMultipleWirelessPointsRequest);

        /// <summary>
        /// Validate Multiple Wireless Points
        /// </summary>
        /// <remarks>
        /// Validates wireless points before creation or update. The maximum number of wireless points per request is 10 000.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="validateMultipleWirelessPointsRequest"></param>
        /// <returns>ApiResponse of ValidateMultipleWirelessPointsResponse</returns>
        ApiResponse<ValidateMultipleWirelessPointsResponse> ValidateMultipleWirelessPointsWithHttpInfo (string accountId, ValidateMultipleWirelessPointsRequest validateMultipleWirelessPointsRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Enable Automatic Location Updates for Users
        /// </summary>
        /// <remarks>
        /// Enables or disables Automatic Location Updates feature for multiple account users.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="bulkAssignAutomaticLocationUpdatesUsers"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssignMultipleAutomaticLocationUpdatesUsersAsync (string accountId, BulkAssignAutomaticLocationUpdatesUsers bulkAssignAutomaticLocationUpdatesUsers = default(BulkAssignAutomaticLocationUpdatesUsers), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Enable Automatic Location Updates for Users
        /// </summary>
        /// <remarks>
        /// Enables or disables Automatic Location Updates feature for multiple account users.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="bulkAssignAutomaticLocationUpdatesUsers"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssignMultipleAutomaticLocationUpdatesUsersWithHttpInfoAsync (string accountId, BulkAssignAutomaticLocationUpdatesUsers bulkAssignAutomaticLocationUpdatesUsers = default(BulkAssignAutomaticLocationUpdatesUsers), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Enable Automatic Location Updates for Devices
        /// </summary>
        /// <remarks>
        /// Enables or disables Automatic Location Updates feature for the specified common phones.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="assignMultipleDevicesAutomaticLocationUpdates"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssignMultipleDevicesAutomaticLocationUpdatesAsync (string accountId, AssignMultipleDevicesAutomaticLocationUpdates assignMultipleDevicesAutomaticLocationUpdates = default(AssignMultipleDevicesAutomaticLocationUpdates), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Enable Automatic Location Updates for Devices
        /// </summary>
        /// <remarks>
        /// Enables or disables Automatic Location Updates feature for the specified common phones.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="assignMultipleDevicesAutomaticLocationUpdates"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssignMultipleDevicesAutomaticLocationUpdatesWithHttpInfoAsync (string accountId, AssignMultipleDevicesAutomaticLocationUpdates assignMultipleDevicesAutomaticLocationUpdates = default(AssignMultipleDevicesAutomaticLocationUpdates), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Add Emergency Location
        /// </summary>
        /// <remarks>
        /// Creates a new emergency response location for the company.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="emergencyLocationInfoRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateEmergencyLocationAsync (string accountId, EmergencyLocationInfoRequest emergencyLocationInfoRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add Emergency Location
        /// </summary>
        /// <remarks>
        /// Creates a new emergency response location for the company.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="emergencyLocationInfoRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateEmergencyLocationWithHttpInfoAsync (string accountId, EmergencyLocationInfoRequest emergencyLocationInfoRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create User Emergency Location
        /// </summary>
        /// <remarks>
        /// Creates a personal emergency response location for the current user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="createUserEmergencyLocationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EmergencyLocationInfo</returns>
        System.Threading.Tasks.Task<EmergencyLocationInfo> CreateExtensionEmergencyLocationAsync (string accountId, string extensionId, CreateUserEmergencyLocationRequest createUserEmergencyLocationRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create User Emergency Location
        /// </summary>
        /// <remarks>
        /// Creates a personal emergency response location for the current user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="createUserEmergencyLocationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EmergencyLocationInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmergencyLocationInfo>> CreateExtensionEmergencyLocationWithHttpInfoAsync (string accountId, string extensionId, CreateUserEmergencyLocationRequest createUserEmergencyLocationRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create Multiple Switches
        /// </summary>
        /// <remarks>
        /// Creates multiple switches in corporate map. The maximum number of switches per request is 10 000; limitation for account is 10 000.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createMultipleSwitchesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreateMultipleSwitchesResponse</returns>
        System.Threading.Tasks.Task<CreateMultipleSwitchesResponse> CreateMultipleSwitchesAsync (string accountId, CreateMultipleSwitchesRequest createMultipleSwitchesRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Multiple Switches
        /// </summary>
        /// <remarks>
        /// Creates multiple switches in corporate map. The maximum number of switches per request is 10 000; limitation for account is 10 000.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createMultipleSwitchesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreateMultipleSwitchesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateMultipleSwitchesResponse>> CreateMultipleSwitchesWithHttpInfoAsync (string accountId, CreateMultipleSwitchesRequest createMultipleSwitchesRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create Multiple Wireless Points
        /// </summary>
        /// <remarks>
        /// Creates multiple wireless points in corporate map. The maximum number of wireless points per request is 10 000; limitation for account is 70 000.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createMultipleWirelessPointsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreateMultipleWirelessPointsResponse</returns>
        System.Threading.Tasks.Task<CreateMultipleWirelessPointsResponse> CreateMultipleWirelessPointsAsync (string accountId, CreateMultipleWirelessPointsRequest createMultipleWirelessPointsRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Multiple Wireless Points
        /// </summary>
        /// <remarks>
        /// Creates multiple wireless points in corporate map. The maximum number of wireless points per request is 10 000; limitation for account is 70 000.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createMultipleWirelessPointsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreateMultipleWirelessPointsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateMultipleWirelessPointsResponse>> CreateMultipleWirelessPointsWithHttpInfoAsync (string accountId, CreateMultipleWirelessPointsRequest createMultipleWirelessPointsRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create Network
        /// </summary>
        /// <remarks>
        /// Creates a new network in corporate ethernet map for assignment of emergency addresses to network access points.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createNetworkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of NetworkInfo</returns>
        System.Threading.Tasks.Task<NetworkInfo> CreateNetworkAsync (string accountId, CreateNetworkRequest createNetworkRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Network
        /// </summary>
        /// <remarks>
        /// Creates a new network in corporate ethernet map for assignment of emergency addresses to network access points.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createNetworkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (NetworkInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<NetworkInfo>> CreateNetworkWithHttpInfoAsync (string accountId, CreateNetworkRequest createNetworkRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create Switch
        /// </summary>
        /// <remarks>
        /// Creates a new switch in corporate map based on chassis ID and used for Automatic Locations Update feature.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createSwitchInfo"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SwitchInfo</returns>
        System.Threading.Tasks.Task<SwitchInfo> CreateSwitchAsync (string accountId, CreateSwitchInfo createSwitchInfo, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Switch
        /// </summary>
        /// <remarks>
        /// Creates a new switch in corporate map based on chassis ID and used for Automatic Locations Update feature.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createSwitchInfo"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SwitchInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<SwitchInfo>> CreateSwitchWithHttpInfoAsync (string accountId, CreateSwitchInfo createSwitchInfo, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create Wireless Point
        /// </summary>
        /// <remarks>
        /// Creates a new wireless point in network configuration with the emergency address assigned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createWirelessPoint"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WirelessPointInfo</returns>
        System.Threading.Tasks.Task<WirelessPointInfo> CreateWirelessPointAsync (string accountId, CreateWirelessPoint createWirelessPoint, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Wireless Point
        /// </summary>
        /// <remarks>
        /// Creates a new wireless point in network configuration with the emergency address assigned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createWirelessPoint"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WirelessPointInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<WirelessPointInfo>> CreateWirelessPointWithHttpInfoAsync (string accountId, CreateWirelessPoint createWirelessPoint, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete Emergency Location
        /// </summary>
        /// <remarks>
        /// Deletes the specified emergency response location.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of emergency location</param>
        /// <param name="newLocationId">Internal identifier of a location that should be used instead of a deleted one (optional)</param>
        /// <param name="validateOnly">Flag indicating that validation of emergency location(s) is required before deletion (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteEmergencyLocationAsync (string accountId, string locationId, string newLocationId = default(string), bool? validateOnly = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Emergency Location
        /// </summary>
        /// <remarks>
        /// Deletes the specified emergency response location.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of emergency location</param>
        /// <param name="newLocationId">Internal identifier of a location that should be used instead of a deleted one (optional)</param>
        /// <param name="validateOnly">Flag indicating that validation of emergency location(s) is required before deletion (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEmergencyLocationWithHttpInfoAsync (string accountId, string locationId, string newLocationId = default(string), bool? validateOnly = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete User Emergency Location
        /// </summary>
        /// <remarks>
        /// Deletes a personal emergency response location by ID by the current user or admin. Multiple personal emergency response locations can be deleted by one API call
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of an emergency response location to be deleted</param>
        /// <param name="validateOnly">Flag indicating that only validation of Emergency Response Locations to be deleted is required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteExtensionEmergencyLocationAsync (string accountId, string extensionId, string locationId, bool? validateOnly = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete User Emergency Location
        /// </summary>
        /// <remarks>
        /// Deletes a personal emergency response location by ID by the current user or admin. Multiple personal emergency response locations can be deleted by one API call
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of an emergency response location to be deleted</param>
        /// <param name="validateOnly">Flag indicating that only validation of Emergency Response Locations to be deleted is required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteExtensionEmergencyLocationWithHttpInfoAsync (string accountId, string extensionId, string locationId, bool? validateOnly = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete Network
        /// </summary>
        /// <remarks>
        /// Deletes network(s) in corporate ethernet map for Automatic Location Updates feature.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="networkId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteNetworkAsync (string accountId, List<string> networkId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Network
        /// </summary>
        /// <remarks>
        /// Deletes network(s) in corporate ethernet map for Automatic Location Updates feature.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="networkId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNetworkWithHttpInfoAsync (string accountId, List<string> networkId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete Switch
        /// </summary>
        /// <remarks>
        /// Deletes wireless switch(es) in network configuration for Automatic Location Updates feature.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="switchId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSwitchAsync (string accountId, List<string> switchId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Switch
        /// </summary>
        /// <remarks>
        /// Deletes wireless switch(es) in network configuration for Automatic Location Updates feature.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="switchId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSwitchWithHttpInfoAsync (string accountId, List<string> switchId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete Wireless Point
        /// </summary>
        /// <remarks>
        /// Deletes wireless point(s) of a corporate map by ID(s).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="pointId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWirelessPointAsync (string accountId, List<string> pointId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Wireless Point
        /// </summary>
        /// <remarks>
        /// Deletes wireless point(s) of a corporate map by ID(s).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="pointId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWirelessPointWithHttpInfoAsync (string accountId, List<string> pointId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get User Emergency Location
        /// </summary>
        /// <remarks>
        /// Returns personal emergency response location for the current user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of emergency location</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EmergencyLocationInfo</returns>
        System.Threading.Tasks.Task<EmergencyLocationInfo> GetExtensionEmergencyLocationAsync (string accountId, string extensionId, string locationId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get User Emergency Location
        /// </summary>
        /// <remarks>
        /// Returns personal emergency response location for the current user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of emergency location</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EmergencyLocationInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmergencyLocationInfo>> GetExtensionEmergencyLocationWithHttpInfoAsync (string accountId, string extensionId, string locationId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get User Emergency Location List
        /// </summary>
        /// <remarks>
        /// Returns a list of emergency response locations available for the current user extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="siteId">Internal identifier of a site. To filter Main Site (Company) main-site must be specified. Supported only If multi-site feature is enabled for the account (optional)</param>
        /// <param name="searchString">Filters entries by the specified substring (search by chassis ID, switch name or address) The characters range is 0-64 (if empty the filter is ignored) (optional)</param>
        /// <param name="domesticCountryId"> (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by plus sign &#39;+&#39; (ascending order) or minus sign &#39;-&#39; (descending order). The default value is &#x60;+visibility&#x60;, which means public ERLs will be returned first in the list, then - private ones (optional, default to +visibility)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <param name="visibility">Specifies whether to return only private or only public (company) ERLs (Emergency Response Locations) (optional)</param>
        /// <param name="ifNoneMatch">Flag that provides matching the client &#39;etag&#39; value with the server one (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EmergencyLocationsResource</returns>
        System.Threading.Tasks.Task<EmergencyLocationsResource> GetExtensionEmergencyLocationsAsync (string accountId, string extensionId, List<string> siteId = default(List<string>), string searchString = default(string), string domesticCountryId = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?), string visibility = default(string), string ifNoneMatch = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get User Emergency Location List
        /// </summary>
        /// <remarks>
        /// Returns a list of emergency response locations available for the current user extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="siteId">Internal identifier of a site. To filter Main Site (Company) main-site must be specified. Supported only If multi-site feature is enabled for the account (optional)</param>
        /// <param name="searchString">Filters entries by the specified substring (search by chassis ID, switch name or address) The characters range is 0-64 (if empty the filter is ignored) (optional)</param>
        /// <param name="domesticCountryId"> (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by plus sign &#39;+&#39; (ascending order) or minus sign &#39;-&#39; (descending order). The default value is &#x60;+visibility&#x60;, which means public ERLs will be returned first in the list, then - private ones (optional, default to +visibility)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <param name="visibility">Specifies whether to return only private or only public (company) ERLs (Emergency Response Locations) (optional)</param>
        /// <param name="ifNoneMatch">Flag that provides matching the client &#39;etag&#39; value with the server one (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EmergencyLocationsResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmergencyLocationsResource>> GetExtensionEmergencyLocationsWithHttpInfoAsync (string accountId, string extensionId, List<string> siteId = default(List<string>), string searchString = default(string), string domesticCountryId = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?), string visibility = default(string), string ifNoneMatch = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Account Switch List
        /// </summary>
        /// <remarks>
        /// Returns corporate map of configured network switches with the assigned emergency addresses for the logged-in account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="siteId">Internal identifier of a site. To filter Main Site (Company) main-site must be specified. Supported only If multi-site feature is enabled for the account (optional)</param>
        /// <param name="searchString">Filters entries by the specified substring (search by chassis ID, switch name or address) The characters range is 0-64 (if empty the filter is ignored) (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by &#39;+&#39; sign (ascending order) or &#39;-&#39; sign (descending order). The default sorting is by &#x60;name&#x60; (optional)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SwitchesList</returns>
        System.Threading.Tasks.Task<SwitchesList> ListAccountSwitchesAsync (string accountId, string siteId = default(string), string searchString = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Account Switch List
        /// </summary>
        /// <remarks>
        /// Returns corporate map of configured network switches with the assigned emergency addresses for the logged-in account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="siteId">Internal identifier of a site. To filter Main Site (Company) main-site must be specified. Supported only If multi-site feature is enabled for the account (optional)</param>
        /// <param name="searchString">Filters entries by the specified substring (search by chassis ID, switch name or address) The characters range is 0-64 (if empty the filter is ignored) (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by &#39;+&#39; sign (ascending order) or &#39;-&#39; sign (descending order). The default sorting is by &#x60;name&#x60; (optional)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SwitchesList)</returns>
        System.Threading.Tasks.Task<ApiResponse<SwitchesList>> ListAccountSwitchesWithHttpInfoAsync (string accountId, string siteId = default(string), string searchString = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get User List
        /// </summary>
        /// <remarks>
        /// Returns the list of users with their status of Automatic Location Updates feature.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="type">Extension type. Multiple values are supported (optional)</param>
        /// <param name="searchString">Filters entries containing the specified substring in user name, extension or department. The characters range is 0-64; not case-sensitive. If empty then the filter is ignored (optional)</param>
        /// <param name="department">Department name to filter the users. The value range is 0-64; not case-sensitive. If not specified then the parameter is ignored. Multiple values are supported (optional)</param>
        /// <param name="siteId">Internal identifier of a site. To filter users of Main Site (Company) &#x60;main-site&#x60; must be specified. Supported only If Multi-Site feature is enabled for the account. Multiple values are supported (optional)</param>
        /// <param name="featureEnabled">Filters entries by their status of Automatic Location Updates feature (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by plus sign &#39;+&#39; (ascending order) or minus sign &#39;-&#39; (descending order). Supported values: &#39;name&#39;, &#39;modelName&#39;, &#39;siteName&#39;, &#39;featureEnabled&#39; (optional, default to &quot;name&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AutomaticLocationUpdatesUserList</returns>
        System.Threading.Tasks.Task<AutomaticLocationUpdatesUserList> ListAutomaticLocationUpdatesUsersAsync (string accountId, string type = default(string), string searchString = default(string), string department = default(string), string siteId = default(string), bool? featureEnabled = default(bool?), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get User List
        /// </summary>
        /// <remarks>
        /// Returns the list of users with their status of Automatic Location Updates feature.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="type">Extension type. Multiple values are supported (optional)</param>
        /// <param name="searchString">Filters entries containing the specified substring in user name, extension or department. The characters range is 0-64; not case-sensitive. If empty then the filter is ignored (optional)</param>
        /// <param name="department">Department name to filter the users. The value range is 0-64; not case-sensitive. If not specified then the parameter is ignored. Multiple values are supported (optional)</param>
        /// <param name="siteId">Internal identifier of a site. To filter users of Main Site (Company) &#x60;main-site&#x60; must be specified. Supported only If Multi-Site feature is enabled for the account. Multiple values are supported (optional)</param>
        /// <param name="featureEnabled">Filters entries by their status of Automatic Location Updates feature (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by plus sign &#39;+&#39; (ascending order) or minus sign &#39;-&#39; (descending order). Supported values: &#39;name&#39;, &#39;modelName&#39;, &#39;siteName&#39;, &#39;featureEnabled&#39; (optional, default to &quot;name&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AutomaticLocationUpdatesUserList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutomaticLocationUpdatesUserList>> ListAutomaticLocationUpdatesUsersWithHttpInfoAsync (string accountId, string type = default(string), string searchString = default(string), string department = default(string), string siteId = default(string), bool? featureEnabled = default(bool?), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Device List
        /// </summary>
        /// <remarks>
        /// Returns the list of common devices with their status of Automatic Location Updates feature.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="siteId">Internal identifier of a site. To filter devices of Main Site (Company) &#x60;main-site&#x60; must be specified. Supported only If Multi-Site feature is enabled for the account (optional)</param>
        /// <param name="featureEnabled">Filters entries by their status of Automatic Location Updates feature (optional)</param>
        /// <param name="model">Internal identifier of a device model for filtering. Multiple values are supported (optional)</param>
        /// <param name="compatibleOnly">Filters devices which support HELD protocol (optional)</param>
        /// <param name="searchString">Filters entries which have device name or model name containing the mentioned substring. The value should be split by spaces; the range is 0 - 64 characters, not case-sensitive. If empty the filter is ignored (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by plus sign &#39;+&#39; (ascending order) or minus sign &#39;-&#39; (descending order). Supported values: &#39;name&#39;, &#39;modelName&#39;, &#39;siteName&#39;, &#39;featureEnabled&#39; (optional, default to &quot;name&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListDevicesAutomaticLocationUpdates</returns>
        System.Threading.Tasks.Task<ListDevicesAutomaticLocationUpdates> ListDevicesAutomaticLocationUpdatesAsync (string accountId, string siteId = default(string), bool? featureEnabled = default(bool?), string model = default(string), bool? compatibleOnly = default(bool?), string searchString = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Device List
        /// </summary>
        /// <remarks>
        /// Returns the list of common devices with their status of Automatic Location Updates feature.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="siteId">Internal identifier of a site. To filter devices of Main Site (Company) &#x60;main-site&#x60; must be specified. Supported only If Multi-Site feature is enabled for the account (optional)</param>
        /// <param name="featureEnabled">Filters entries by their status of Automatic Location Updates feature (optional)</param>
        /// <param name="model">Internal identifier of a device model for filtering. Multiple values are supported (optional)</param>
        /// <param name="compatibleOnly">Filters devices which support HELD protocol (optional)</param>
        /// <param name="searchString">Filters entries which have device name or model name containing the mentioned substring. The value should be split by spaces; the range is 0 - 64 characters, not case-sensitive. If empty the filter is ignored (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by plus sign &#39;+&#39; (ascending order) or minus sign &#39;-&#39; (descending order). Supported values: &#39;name&#39;, &#39;modelName&#39;, &#39;siteName&#39;, &#39;featureEnabled&#39; (optional, default to &quot;name&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListDevicesAutomaticLocationUpdates)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListDevicesAutomaticLocationUpdates>> ListDevicesAutomaticLocationUpdatesWithHttpInfoAsync (string accountId, string siteId = default(string), bool? featureEnabled = default(bool?), string model = default(string), bool? compatibleOnly = default(bool?), string searchString = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Emergency Location List
        /// </summary>
        /// <remarks>
        /// Returns emergency response locations of the current account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="searchString">Filters entries containing the specified substring in address and name fields. The characters range is 0-64; not case-sensitive. If empty then the filter is ignored (optional)</param>
        /// <param name="siteId">Internal identifier of a site for filtering. To filter by Main Site (Company) &#x60;main-site&#x60; value should be specified (optional)</param>
        /// <param name="addressStatus"> (optional)</param>
        /// <param name="usageStatus"> (optional)</param>
        /// <param name="domesticCountryId"> (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by plus sign &#39;+&#39; (ascending order) or minus sign &#39;-&#39; (descending order). Possible field entries are: - &#x60;name&#x60;; - &#x60;siteName&#x60;; - &#x60;address&#x60;; - &#x60;addressStatus&#x60;; - &#x60;usageStatus&#x60;.  (optional, default to &quot;+address&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EmergencyLocationList</returns>
        System.Threading.Tasks.Task<EmergencyLocationList> ListEmergencyLocationsAsync (string accountId, string searchString = default(string), string siteId = default(string), string addressStatus = default(string), string usageStatus = default(string), string domesticCountryId = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Emergency Location List
        /// </summary>
        /// <remarks>
        /// Returns emergency response locations of the current account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="searchString">Filters entries containing the specified substring in address and name fields. The characters range is 0-64; not case-sensitive. If empty then the filter is ignored (optional)</param>
        /// <param name="siteId">Internal identifier of a site for filtering. To filter by Main Site (Company) &#x60;main-site&#x60; value should be specified (optional)</param>
        /// <param name="addressStatus"> (optional)</param>
        /// <param name="usageStatus"> (optional)</param>
        /// <param name="domesticCountryId"> (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by plus sign &#39;+&#39; (ascending order) or minus sign &#39;-&#39; (descending order). Possible field entries are: - &#x60;name&#x60;; - &#x60;siteName&#x60;; - &#x60;address&#x60;; - &#x60;addressStatus&#x60;; - &#x60;usageStatus&#x60;.  (optional, default to &quot;+address&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EmergencyLocationList)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmergencyLocationList>> ListEmergencyLocationsWithHttpInfoAsync (string accountId, string searchString = default(string), string siteId = default(string), string addressStatus = default(string), string usageStatus = default(string), string domesticCountryId = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Network Map
        /// </summary>
        /// <remarks>
        /// Returns corporate networks map with emergency addresses assigned to the current account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of NetworksList</returns>
        System.Threading.Tasks.Task<NetworksList> ListNetworksAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Network Map
        /// </summary>
        /// <remarks>
        /// Returns corporate networks map with emergency addresses assigned to the current account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (NetworksList)</returns>
        System.Threading.Tasks.Task<ApiResponse<NetworksList>> ListNetworksWithHttpInfoAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Wireless Point List
        /// </summary>
        /// <remarks>
        /// Returns account wireless points configured and used for Automatic Location Updates feature.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="siteId">Internal identifier of a site. To filter Main Site (Company) &#39;main-site&#39; must be specified. Supported only If multi-site feature is enabled for the account (optional)</param>
        /// <param name="searchString">Filters entries by the specified substring (search by chassis ID, switch name or address) The characters range is 0-64 (if empty the filter is ignored) (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by &#39;+&#39; sign (ascending order) or &#39;-&#39; sign (descending order). The default sorting is by &#x60;name&#x60; (optional)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WirelessPointsList</returns>
        System.Threading.Tasks.Task<WirelessPointsList> ListWirelessPointsAsync (string accountId, string siteId = default(string), string searchString = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Wireless Point List
        /// </summary>
        /// <remarks>
        /// Returns account wireless points configured and used for Automatic Location Updates feature.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="siteId">Internal identifier of a site. To filter Main Site (Company) &#39;main-site&#39; must be specified. Supported only If multi-site feature is enabled for the account (optional)</param>
        /// <param name="searchString">Filters entries by the specified substring (search by chassis ID, switch name or address) The characters range is 0-64 (if empty the filter is ignored) (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by &#39;+&#39; sign (ascending order) or &#39;-&#39; sign (descending order). The default sorting is by &#x60;name&#x60; (optional)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WirelessPointsList)</returns>
        System.Threading.Tasks.Task<ApiResponse<WirelessPointsList>> ListWirelessPointsWithHttpInfoAsync (string accountId, string siteId = default(string), string searchString = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Emergency Map Configuration Task
        /// </summary>
        /// <remarks>
        /// Returns results of the task created within the frame of Automatic Location Updates feature. Currently four task types are supported: 'Wireless Points Bulk Create', 'Wireless Points Bulk Update', 'Switches Bulk Create', 'Switches Bulk Update'.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AutomaticLocationUpdatesTaskInfo</returns>
        System.Threading.Tasks.Task<AutomaticLocationUpdatesTaskInfo> ReadAutomaticLocationUpdatesTaskAsync (string accountId, string taskId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Emergency Map Configuration Task
        /// </summary>
        /// <remarks>
        /// Returns results of the task created within the frame of Automatic Location Updates feature. Currently four task types are supported: 'Wireless Points Bulk Create', 'Wireless Points Bulk Update', 'Switches Bulk Create', 'Switches Bulk Update'.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AutomaticLocationUpdatesTaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutomaticLocationUpdatesTaskInfo>> ReadAutomaticLocationUpdatesTaskWithHttpInfoAsync (string accountId, string taskId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Emergency Location
        /// </summary>
        /// <remarks>
        /// Returns emergency response location by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of the emergency location</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EmergencyLocationInfo</returns>
        System.Threading.Tasks.Task<EmergencyLocationInfo> ReadEmergencyLocationAsync (string accountId, string locationId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Emergency Location
        /// </summary>
        /// <remarks>
        /// Returns emergency response location by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of the emergency location</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EmergencyLocationInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmergencyLocationInfo>> ReadEmergencyLocationWithHttpInfoAsync (string accountId, string locationId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Network
        /// </summary>
        /// <remarks>
        /// Returns the specified network with emergency addresses assigned to the current account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="networkId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of NetworkInfo</returns>
        System.Threading.Tasks.Task<NetworkInfo> ReadNetworkAsync (string accountId, string networkId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Network
        /// </summary>
        /// <remarks>
        /// Returns the specified network with emergency addresses assigned to the current account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="networkId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (NetworkInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<NetworkInfo>> ReadNetworkWithHttpInfoAsync (string accountId, string networkId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Switch
        /// </summary>
        /// <remarks>
        /// Returns the specified switch with the assigned emergency address.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="switchId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SwitchInfo</returns>
        System.Threading.Tasks.Task<SwitchInfo> ReadSwitchAsync (string accountId, string switchId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Switch
        /// </summary>
        /// <remarks>
        /// Returns the specified switch with the assigned emergency address.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="switchId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SwitchInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<SwitchInfo>> ReadSwitchWithHttpInfoAsync (string accountId, string switchId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Wireless Point
        /// </summary>
        /// <remarks>
        /// Returns the specified wireless access point of a corporate map with the emergency address assigned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="pointId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WirelessPointInfo</returns>
        System.Threading.Tasks.Task<WirelessPointInfo> ReadWirelessPointAsync (string accountId, string pointId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Wireless Point
        /// </summary>
        /// <remarks>
        /// Returns the specified wireless access point of a corporate map with the emergency address assigned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="pointId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WirelessPointInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<WirelessPointInfo>> ReadWirelessPointWithHttpInfoAsync (string accountId, string pointId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Emergency Location
        /// </summary>
        /// <remarks>
        /// Updates the specified emergency response location.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of the emergency location</param>
        /// <param name="emergencyLocationInfoRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EmergencyLocationInfo</returns>
        System.Threading.Tasks.Task<EmergencyLocationInfo> UpdateEmergencyLocationAsync (string accountId, string locationId, EmergencyLocationInfoRequest emergencyLocationInfoRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Emergency Location
        /// </summary>
        /// <remarks>
        /// Updates the specified emergency response location.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of the emergency location</param>
        /// <param name="emergencyLocationInfoRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EmergencyLocationInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmergencyLocationInfo>> UpdateEmergencyLocationWithHttpInfoAsync (string accountId, string locationId, EmergencyLocationInfoRequest emergencyLocationInfoRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update User Emergency Location
        /// </summary>
        /// <remarks>
        /// Updates a personal emergency response location by the current user or admin.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of an emergency response location to be deleted</param>
        /// <param name="emergencyLocationInfo"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EmergencyLocationInfo</returns>
        System.Threading.Tasks.Task<EmergencyLocationInfo> UpdateExtensionEmergencyLocationAsync (string accountId, string extensionId, string locationId, EmergencyLocationInfo emergencyLocationInfo, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update User Emergency Location
        /// </summary>
        /// <remarks>
        /// Updates a personal emergency response location by the current user or admin.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of an emergency response location to be deleted</param>
        /// <param name="emergencyLocationInfo"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EmergencyLocationInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmergencyLocationInfo>> UpdateExtensionEmergencyLocationWithHttpInfoAsync (string accountId, string extensionId, string locationId, EmergencyLocationInfo emergencyLocationInfo, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Multiple Switches
        /// </summary>
        /// <remarks>
        /// Updates multiple switches in corporate map. The maximum number of switches per request is 10 000; limitation for account is 10 000.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="updateMultipleSwitchesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateMultipleSwitchesResponse</returns>
        System.Threading.Tasks.Task<UpdateMultipleSwitchesResponse> UpdateMultipleSwitchesAsync (string accountId, UpdateMultipleSwitchesRequest updateMultipleSwitchesRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Multiple Switches
        /// </summary>
        /// <remarks>
        /// Updates multiple switches in corporate map. The maximum number of switches per request is 10 000; limitation for account is 10 000.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="updateMultipleSwitchesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateMultipleSwitchesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateMultipleSwitchesResponse>> UpdateMultipleSwitchesWithHttpInfoAsync (string accountId, UpdateMultipleSwitchesRequest updateMultipleSwitchesRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Multiple Wireless Points
        /// </summary>
        /// <remarks>
        /// Updates wireless points in corporate map. The maximum number of wireless points per request is 10 000; limitation for account is 70 000.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="updateMultipleWirelessPointsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateMultipleWirelessPointsResponse</returns>
        System.Threading.Tasks.Task<UpdateMultipleWirelessPointsResponse> UpdateMultipleWirelessPointsAsync (string accountId, UpdateMultipleWirelessPointsRequest updateMultipleWirelessPointsRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Multiple Wireless Points
        /// </summary>
        /// <remarks>
        /// Updates wireless points in corporate map. The maximum number of wireless points per request is 10 000; limitation for account is 70 000.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="updateMultipleWirelessPointsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateMultipleWirelessPointsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateMultipleWirelessPointsResponse>> UpdateMultipleWirelessPointsWithHttpInfoAsync (string accountId, UpdateMultipleWirelessPointsRequest updateMultipleWirelessPointsRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Network
        /// </summary>
        /// <remarks>
        /// Updates network in corporate ethernet map for assignment of emergency addresses to network access points.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="networkId"></param>
        /// <param name="updateNetworkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateNetworkAsync (string accountId, string networkId, UpdateNetworkRequest updateNetworkRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Network
        /// </summary>
        /// <remarks>
        /// Updates network in corporate ethernet map for assignment of emergency addresses to network access points.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="networkId"></param>
        /// <param name="updateNetworkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateNetworkWithHttpInfoAsync (string accountId, string networkId, UpdateNetworkRequest updateNetworkRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Switch
        /// </summary>
        /// <remarks>
        /// Updates switch. Partial update is not supported, all switch parameters should be specified. If null value is received or parameter is missing, its value is removed.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="switchId"></param>
        /// <param name="updateSwitchInfo"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SwitchInfo</returns>
        System.Threading.Tasks.Task<SwitchInfo> UpdateSwitchAsync (string accountId, string switchId, UpdateSwitchInfo updateSwitchInfo, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Switch
        /// </summary>
        /// <remarks>
        /// Updates switch. Partial update is not supported, all switch parameters should be specified. If null value is received or parameter is missing, its value is removed.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="switchId"></param>
        /// <param name="updateSwitchInfo"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SwitchInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<SwitchInfo>> UpdateSwitchWithHttpInfoAsync (string accountId, string switchId, UpdateSwitchInfo updateSwitchInfo, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Wireless Point
        /// </summary>
        /// <remarks>
        /// Updates the specified wireless access point of a corporate map by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="pointId"></param>
        /// <param name="updateWirelessPoint"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WirelessPointInfo</returns>
        System.Threading.Tasks.Task<WirelessPointInfo> UpdateWirelessPointAsync (string accountId, string pointId, UpdateWirelessPoint updateWirelessPoint, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Wireless Point
        /// </summary>
        /// <remarks>
        /// Updates the specified wireless access point of a corporate map by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="pointId"></param>
        /// <param name="updateWirelessPoint"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WirelessPointInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<WirelessPointInfo>> UpdateWirelessPointWithHttpInfoAsync (string accountId, string pointId, UpdateWirelessPoint updateWirelessPoint, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Validate Multiple Switches
        /// </summary>
        /// <remarks>
        /// Validates switches before creation or update. The maximum number of switches per request is 10 000.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="validateMultipleSwitchesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ValidateMultipleSwitchesResponse</returns>
        System.Threading.Tasks.Task<ValidateMultipleSwitchesResponse> ValidateMultipleSwitchesAsync (string accountId, ValidateMultipleSwitchesRequest validateMultipleSwitchesRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Validate Multiple Switches
        /// </summary>
        /// <remarks>
        /// Validates switches before creation or update. The maximum number of switches per request is 10 000.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="validateMultipleSwitchesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ValidateMultipleSwitchesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidateMultipleSwitchesResponse>> ValidateMultipleSwitchesWithHttpInfoAsync (string accountId, ValidateMultipleSwitchesRequest validateMultipleSwitchesRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Validate Multiple Wireless Points
        /// </summary>
        /// <remarks>
        /// Validates wireless points before creation or update. The maximum number of wireless points per request is 10 000.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="validateMultipleWirelessPointsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ValidateMultipleWirelessPointsResponse</returns>
        System.Threading.Tasks.Task<ValidateMultipleWirelessPointsResponse> ValidateMultipleWirelessPointsAsync (string accountId, ValidateMultipleWirelessPointsRequest validateMultipleWirelessPointsRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Validate Multiple Wireless Points
        /// </summary>
        /// <remarks>
        /// Validates wireless points before creation or update. The maximum number of wireless points per request is 10 000.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="validateMultipleWirelessPointsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ValidateMultipleWirelessPointsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidateMultipleWirelessPointsResponse>> ValidateMultipleWirelessPointsWithHttpInfoAsync (string accountId, ValidateMultipleWirelessPointsRequest validateMultipleWirelessPointsRequest, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AutomaticLocationUpdatesApi : IAutomaticLocationUpdatesApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AutomaticLocationUpdatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AutomaticLocationUpdatesApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutomaticLocationUpdatesApi"/> class
        /// </summary>
        /// <returns></returns>
        public AutomaticLocationUpdatesApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutomaticLocationUpdatesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AutomaticLocationUpdatesApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Enable Automatic Location Updates for Users Enables or disables Automatic Location Updates feature for multiple account users.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="bulkAssignAutomaticLocationUpdatesUsers"> (optional)</param>
        /// <returns></returns>
        public void AssignMultipleAutomaticLocationUpdatesUsers (string accountId, BulkAssignAutomaticLocationUpdatesUsers bulkAssignAutomaticLocationUpdatesUsers = default(BulkAssignAutomaticLocationUpdatesUsers))
        {
             AssignMultipleAutomaticLocationUpdatesUsersWithHttpInfo(accountId, bulkAssignAutomaticLocationUpdatesUsers);
        }

        /// <summary>
        /// Enable Automatic Location Updates for Users Enables or disables Automatic Location Updates feature for multiple account users.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="bulkAssignAutomaticLocationUpdatesUsers"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AssignMultipleAutomaticLocationUpdatesUsersWithHttpInfo (string accountId, BulkAssignAutomaticLocationUpdatesUsers bulkAssignAutomaticLocationUpdatesUsers = default(BulkAssignAutomaticLocationUpdatesUsers))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->AssignMultipleAutomaticLocationUpdatesUsers");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/users/bulk-assign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (bulkAssignAutomaticLocationUpdatesUsers != null && bulkAssignAutomaticLocationUpdatesUsers.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bulkAssignAutomaticLocationUpdatesUsers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bulkAssignAutomaticLocationUpdatesUsers; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignMultipleAutomaticLocationUpdatesUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Enable Automatic Location Updates for Users Enables or disables Automatic Location Updates feature for multiple account users.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="bulkAssignAutomaticLocationUpdatesUsers"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssignMultipleAutomaticLocationUpdatesUsersAsync (string accountId, BulkAssignAutomaticLocationUpdatesUsers bulkAssignAutomaticLocationUpdatesUsers = default(BulkAssignAutomaticLocationUpdatesUsers), CancellationToken cancellationToken = default(CancellationToken))
        {
             await AssignMultipleAutomaticLocationUpdatesUsersWithHttpInfoAsync(accountId, bulkAssignAutomaticLocationUpdatesUsers, cancellationToken);

        }

        /// <summary>
        /// Enable Automatic Location Updates for Users Enables or disables Automatic Location Updates feature for multiple account users.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="bulkAssignAutomaticLocationUpdatesUsers"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssignMultipleAutomaticLocationUpdatesUsersWithHttpInfoAsync (string accountId, BulkAssignAutomaticLocationUpdatesUsers bulkAssignAutomaticLocationUpdatesUsers = default(BulkAssignAutomaticLocationUpdatesUsers), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->AssignMultipleAutomaticLocationUpdatesUsers");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/users/bulk-assign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (bulkAssignAutomaticLocationUpdatesUsers != null && bulkAssignAutomaticLocationUpdatesUsers.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bulkAssignAutomaticLocationUpdatesUsers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bulkAssignAutomaticLocationUpdatesUsers; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignMultipleAutomaticLocationUpdatesUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Enable Automatic Location Updates for Devices Enables or disables Automatic Location Updates feature for the specified common phones.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="assignMultipleDevicesAutomaticLocationUpdates"> (optional)</param>
        /// <returns></returns>
        public void AssignMultipleDevicesAutomaticLocationUpdates (string accountId, AssignMultipleDevicesAutomaticLocationUpdates assignMultipleDevicesAutomaticLocationUpdates = default(AssignMultipleDevicesAutomaticLocationUpdates))
        {
             AssignMultipleDevicesAutomaticLocationUpdatesWithHttpInfo(accountId, assignMultipleDevicesAutomaticLocationUpdates);
        }

        /// <summary>
        /// Enable Automatic Location Updates for Devices Enables or disables Automatic Location Updates feature for the specified common phones.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="assignMultipleDevicesAutomaticLocationUpdates"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AssignMultipleDevicesAutomaticLocationUpdatesWithHttpInfo (string accountId, AssignMultipleDevicesAutomaticLocationUpdates assignMultipleDevicesAutomaticLocationUpdates = default(AssignMultipleDevicesAutomaticLocationUpdates))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->AssignMultipleDevicesAutomaticLocationUpdates");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/devices/bulk-assign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (assignMultipleDevicesAutomaticLocationUpdates != null && assignMultipleDevicesAutomaticLocationUpdates.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assignMultipleDevicesAutomaticLocationUpdates); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assignMultipleDevicesAutomaticLocationUpdates; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignMultipleDevicesAutomaticLocationUpdates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Enable Automatic Location Updates for Devices Enables or disables Automatic Location Updates feature for the specified common phones.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="assignMultipleDevicesAutomaticLocationUpdates"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssignMultipleDevicesAutomaticLocationUpdatesAsync (string accountId, AssignMultipleDevicesAutomaticLocationUpdates assignMultipleDevicesAutomaticLocationUpdates = default(AssignMultipleDevicesAutomaticLocationUpdates), CancellationToken cancellationToken = default(CancellationToken))
        {
             await AssignMultipleDevicesAutomaticLocationUpdatesWithHttpInfoAsync(accountId, assignMultipleDevicesAutomaticLocationUpdates, cancellationToken);

        }

        /// <summary>
        /// Enable Automatic Location Updates for Devices Enables or disables Automatic Location Updates feature for the specified common phones.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="assignMultipleDevicesAutomaticLocationUpdates"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssignMultipleDevicesAutomaticLocationUpdatesWithHttpInfoAsync (string accountId, AssignMultipleDevicesAutomaticLocationUpdates assignMultipleDevicesAutomaticLocationUpdates = default(AssignMultipleDevicesAutomaticLocationUpdates), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->AssignMultipleDevicesAutomaticLocationUpdates");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/devices/bulk-assign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (assignMultipleDevicesAutomaticLocationUpdates != null && assignMultipleDevicesAutomaticLocationUpdates.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assignMultipleDevicesAutomaticLocationUpdates); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assignMultipleDevicesAutomaticLocationUpdates; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignMultipleDevicesAutomaticLocationUpdates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add Emergency Location Creates a new emergency response location for the company.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="emergencyLocationInfoRequest">JSON body</param>
        /// <returns></returns>
        public void CreateEmergencyLocation (string accountId, EmergencyLocationInfoRequest emergencyLocationInfoRequest)
        {
             CreateEmergencyLocationWithHttpInfo(accountId, emergencyLocationInfoRequest);
        }

        /// <summary>
        /// Add Emergency Location Creates a new emergency response location for the company.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="emergencyLocationInfoRequest">JSON body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateEmergencyLocationWithHttpInfo (string accountId, EmergencyLocationInfoRequest emergencyLocationInfoRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->CreateEmergencyLocation");
            // verify the required parameter 'emergencyLocationInfoRequest' is set
            if (emergencyLocationInfoRequest == null)
                throw new ApiException(400, "Missing required parameter 'emergencyLocationInfoRequest' when calling AutomaticLocationUpdatesApi->CreateEmergencyLocation");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-locations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (emergencyLocationInfoRequest != null && emergencyLocationInfoRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emergencyLocationInfoRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emergencyLocationInfoRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEmergencyLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add Emergency Location Creates a new emergency response location for the company.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="emergencyLocationInfoRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateEmergencyLocationAsync (string accountId, EmergencyLocationInfoRequest emergencyLocationInfoRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             await CreateEmergencyLocationWithHttpInfoAsync(accountId, emergencyLocationInfoRequest, cancellationToken);

        }

        /// <summary>
        /// Add Emergency Location Creates a new emergency response location for the company.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="emergencyLocationInfoRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateEmergencyLocationWithHttpInfoAsync (string accountId, EmergencyLocationInfoRequest emergencyLocationInfoRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->CreateEmergencyLocation");
            // verify the required parameter 'emergencyLocationInfoRequest' is set
            if (emergencyLocationInfoRequest == null)
                throw new ApiException(400, "Missing required parameter 'emergencyLocationInfoRequest' when calling AutomaticLocationUpdatesApi->CreateEmergencyLocation");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-locations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (emergencyLocationInfoRequest != null && emergencyLocationInfoRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emergencyLocationInfoRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emergencyLocationInfoRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEmergencyLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create User Emergency Location Creates a personal emergency response location for the current user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="createUserEmergencyLocationRequest"></param>
        /// <returns>EmergencyLocationInfo</returns>
        public EmergencyLocationInfo CreateExtensionEmergencyLocation (string accountId, string extensionId, CreateUserEmergencyLocationRequest createUserEmergencyLocationRequest)
        {
             ApiResponse<EmergencyLocationInfo> localVarResponse = CreateExtensionEmergencyLocationWithHttpInfo(accountId, extensionId, createUserEmergencyLocationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create User Emergency Location Creates a personal emergency response location for the current user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="createUserEmergencyLocationRequest"></param>
        /// <returns>ApiResponse of EmergencyLocationInfo</returns>
        public ApiResponse<EmergencyLocationInfo> CreateExtensionEmergencyLocationWithHttpInfo (string accountId, string extensionId, CreateUserEmergencyLocationRequest createUserEmergencyLocationRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->CreateExtensionEmergencyLocation");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling AutomaticLocationUpdatesApi->CreateExtensionEmergencyLocation");
            // verify the required parameter 'createUserEmergencyLocationRequest' is set
            if (createUserEmergencyLocationRequest == null)
                throw new ApiException(400, "Missing required parameter 'createUserEmergencyLocationRequest' when calling AutomaticLocationUpdatesApi->CreateExtensionEmergencyLocation");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/emergency-locations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (createUserEmergencyLocationRequest != null && createUserEmergencyLocationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createUserEmergencyLocationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createUserEmergencyLocationRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateExtensionEmergencyLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmergencyLocationInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmergencyLocationInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmergencyLocationInfo)));
        }

        /// <summary>
        /// Create User Emergency Location Creates a personal emergency response location for the current user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="createUserEmergencyLocationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EmergencyLocationInfo</returns>
        public async System.Threading.Tasks.Task<EmergencyLocationInfo> CreateExtensionEmergencyLocationAsync (string accountId, string extensionId, CreateUserEmergencyLocationRequest createUserEmergencyLocationRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EmergencyLocationInfo> localVarResponse = await CreateExtensionEmergencyLocationWithHttpInfoAsync(accountId, extensionId, createUserEmergencyLocationRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create User Emergency Location Creates a personal emergency response location for the current user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="createUserEmergencyLocationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EmergencyLocationInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmergencyLocationInfo>> CreateExtensionEmergencyLocationWithHttpInfoAsync (string accountId, string extensionId, CreateUserEmergencyLocationRequest createUserEmergencyLocationRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->CreateExtensionEmergencyLocation");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling AutomaticLocationUpdatesApi->CreateExtensionEmergencyLocation");
            // verify the required parameter 'createUserEmergencyLocationRequest' is set
            if (createUserEmergencyLocationRequest == null)
                throw new ApiException(400, "Missing required parameter 'createUserEmergencyLocationRequest' when calling AutomaticLocationUpdatesApi->CreateExtensionEmergencyLocation");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/emergency-locations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (createUserEmergencyLocationRequest != null && createUserEmergencyLocationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createUserEmergencyLocationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createUserEmergencyLocationRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateExtensionEmergencyLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmergencyLocationInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmergencyLocationInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmergencyLocationInfo)));
        }

        /// <summary>
        /// Create Multiple Switches Creates multiple switches in corporate map. The maximum number of switches per request is 10 000; limitation for account is 10 000.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createMultipleSwitchesRequest"></param>
        /// <returns>CreateMultipleSwitchesResponse</returns>
        public CreateMultipleSwitchesResponse CreateMultipleSwitches (string accountId, CreateMultipleSwitchesRequest createMultipleSwitchesRequest)
        {
             ApiResponse<CreateMultipleSwitchesResponse> localVarResponse = CreateMultipleSwitchesWithHttpInfo(accountId, createMultipleSwitchesRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Multiple Switches Creates multiple switches in corporate map. The maximum number of switches per request is 10 000; limitation for account is 10 000.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createMultipleSwitchesRequest"></param>
        /// <returns>ApiResponse of CreateMultipleSwitchesResponse</returns>
        public ApiResponse<CreateMultipleSwitchesResponse> CreateMultipleSwitchesWithHttpInfo (string accountId, CreateMultipleSwitchesRequest createMultipleSwitchesRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->CreateMultipleSwitches");
            // verify the required parameter 'createMultipleSwitchesRequest' is set
            if (createMultipleSwitchesRequest == null)
                throw new ApiException(400, "Missing required parameter 'createMultipleSwitchesRequest' when calling AutomaticLocationUpdatesApi->CreateMultipleSwitches");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/switches-bulk-create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (createMultipleSwitchesRequest != null && createMultipleSwitchesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createMultipleSwitchesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createMultipleSwitchesRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMultipleSwitches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateMultipleSwitchesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateMultipleSwitchesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateMultipleSwitchesResponse)));
        }

        /// <summary>
        /// Create Multiple Switches Creates multiple switches in corporate map. The maximum number of switches per request is 10 000; limitation for account is 10 000.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createMultipleSwitchesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreateMultipleSwitchesResponse</returns>
        public async System.Threading.Tasks.Task<CreateMultipleSwitchesResponse> CreateMultipleSwitchesAsync (string accountId, CreateMultipleSwitchesRequest createMultipleSwitchesRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CreateMultipleSwitchesResponse> localVarResponse = await CreateMultipleSwitchesWithHttpInfoAsync(accountId, createMultipleSwitchesRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Multiple Switches Creates multiple switches in corporate map. The maximum number of switches per request is 10 000; limitation for account is 10 000.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createMultipleSwitchesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreateMultipleSwitchesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateMultipleSwitchesResponse>> CreateMultipleSwitchesWithHttpInfoAsync (string accountId, CreateMultipleSwitchesRequest createMultipleSwitchesRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->CreateMultipleSwitches");
            // verify the required parameter 'createMultipleSwitchesRequest' is set
            if (createMultipleSwitchesRequest == null)
                throw new ApiException(400, "Missing required parameter 'createMultipleSwitchesRequest' when calling AutomaticLocationUpdatesApi->CreateMultipleSwitches");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/switches-bulk-create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (createMultipleSwitchesRequest != null && createMultipleSwitchesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createMultipleSwitchesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createMultipleSwitchesRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMultipleSwitches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateMultipleSwitchesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateMultipleSwitchesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateMultipleSwitchesResponse)));
        }

        /// <summary>
        /// Create Multiple Wireless Points Creates multiple wireless points in corporate map. The maximum number of wireless points per request is 10 000; limitation for account is 70 000.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createMultipleWirelessPointsRequest"></param>
        /// <returns>CreateMultipleWirelessPointsResponse</returns>
        public CreateMultipleWirelessPointsResponse CreateMultipleWirelessPoints (string accountId, CreateMultipleWirelessPointsRequest createMultipleWirelessPointsRequest)
        {
             ApiResponse<CreateMultipleWirelessPointsResponse> localVarResponse = CreateMultipleWirelessPointsWithHttpInfo(accountId, createMultipleWirelessPointsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Multiple Wireless Points Creates multiple wireless points in corporate map. The maximum number of wireless points per request is 10 000; limitation for account is 70 000.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createMultipleWirelessPointsRequest"></param>
        /// <returns>ApiResponse of CreateMultipleWirelessPointsResponse</returns>
        public ApiResponse<CreateMultipleWirelessPointsResponse> CreateMultipleWirelessPointsWithHttpInfo (string accountId, CreateMultipleWirelessPointsRequest createMultipleWirelessPointsRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->CreateMultipleWirelessPoints");
            // verify the required parameter 'createMultipleWirelessPointsRequest' is set
            if (createMultipleWirelessPointsRequest == null)
                throw new ApiException(400, "Missing required parameter 'createMultipleWirelessPointsRequest' when calling AutomaticLocationUpdatesApi->CreateMultipleWirelessPoints");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/wireless-points-bulk-create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (createMultipleWirelessPointsRequest != null && createMultipleWirelessPointsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createMultipleWirelessPointsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createMultipleWirelessPointsRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMultipleWirelessPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateMultipleWirelessPointsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateMultipleWirelessPointsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateMultipleWirelessPointsResponse)));
        }

        /// <summary>
        /// Create Multiple Wireless Points Creates multiple wireless points in corporate map. The maximum number of wireless points per request is 10 000; limitation for account is 70 000.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createMultipleWirelessPointsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreateMultipleWirelessPointsResponse</returns>
        public async System.Threading.Tasks.Task<CreateMultipleWirelessPointsResponse> CreateMultipleWirelessPointsAsync (string accountId, CreateMultipleWirelessPointsRequest createMultipleWirelessPointsRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CreateMultipleWirelessPointsResponse> localVarResponse = await CreateMultipleWirelessPointsWithHttpInfoAsync(accountId, createMultipleWirelessPointsRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Multiple Wireless Points Creates multiple wireless points in corporate map. The maximum number of wireless points per request is 10 000; limitation for account is 70 000.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createMultipleWirelessPointsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreateMultipleWirelessPointsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateMultipleWirelessPointsResponse>> CreateMultipleWirelessPointsWithHttpInfoAsync (string accountId, CreateMultipleWirelessPointsRequest createMultipleWirelessPointsRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->CreateMultipleWirelessPoints");
            // verify the required parameter 'createMultipleWirelessPointsRequest' is set
            if (createMultipleWirelessPointsRequest == null)
                throw new ApiException(400, "Missing required parameter 'createMultipleWirelessPointsRequest' when calling AutomaticLocationUpdatesApi->CreateMultipleWirelessPoints");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/wireless-points-bulk-create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (createMultipleWirelessPointsRequest != null && createMultipleWirelessPointsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createMultipleWirelessPointsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createMultipleWirelessPointsRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMultipleWirelessPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateMultipleWirelessPointsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateMultipleWirelessPointsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateMultipleWirelessPointsResponse)));
        }

        /// <summary>
        /// Create Network Creates a new network in corporate ethernet map for assignment of emergency addresses to network access points.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createNetworkRequest"></param>
        /// <returns>NetworkInfo</returns>
        public NetworkInfo CreateNetwork (string accountId, CreateNetworkRequest createNetworkRequest)
        {
             ApiResponse<NetworkInfo> localVarResponse = CreateNetworkWithHttpInfo(accountId, createNetworkRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Network Creates a new network in corporate ethernet map for assignment of emergency addresses to network access points.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createNetworkRequest"></param>
        /// <returns>ApiResponse of NetworkInfo</returns>
        public ApiResponse<NetworkInfo> CreateNetworkWithHttpInfo (string accountId, CreateNetworkRequest createNetworkRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->CreateNetwork");
            // verify the required parameter 'createNetworkRequest' is set
            if (createNetworkRequest == null)
                throw new ApiException(400, "Missing required parameter 'createNetworkRequest' when calling AutomaticLocationUpdatesApi->CreateNetwork");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/networks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (createNetworkRequest != null && createNetworkRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createNetworkRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createNetworkRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNetwork", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NetworkInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NetworkInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NetworkInfo)));
        }

        /// <summary>
        /// Create Network Creates a new network in corporate ethernet map for assignment of emergency addresses to network access points.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createNetworkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of NetworkInfo</returns>
        public async System.Threading.Tasks.Task<NetworkInfo> CreateNetworkAsync (string accountId, CreateNetworkRequest createNetworkRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<NetworkInfo> localVarResponse = await CreateNetworkWithHttpInfoAsync(accountId, createNetworkRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Network Creates a new network in corporate ethernet map for assignment of emergency addresses to network access points.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createNetworkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (NetworkInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NetworkInfo>> CreateNetworkWithHttpInfoAsync (string accountId, CreateNetworkRequest createNetworkRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->CreateNetwork");
            // verify the required parameter 'createNetworkRequest' is set
            if (createNetworkRequest == null)
                throw new ApiException(400, "Missing required parameter 'createNetworkRequest' when calling AutomaticLocationUpdatesApi->CreateNetwork");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/networks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (createNetworkRequest != null && createNetworkRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createNetworkRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createNetworkRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNetwork", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NetworkInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NetworkInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NetworkInfo)));
        }

        /// <summary>
        /// Create Switch Creates a new switch in corporate map based on chassis ID and used for Automatic Locations Update feature.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createSwitchInfo"></param>
        /// <returns>SwitchInfo</returns>
        public SwitchInfo CreateSwitch (string accountId, CreateSwitchInfo createSwitchInfo)
        {
             ApiResponse<SwitchInfo> localVarResponse = CreateSwitchWithHttpInfo(accountId, createSwitchInfo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Switch Creates a new switch in corporate map based on chassis ID and used for Automatic Locations Update feature.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createSwitchInfo"></param>
        /// <returns>ApiResponse of SwitchInfo</returns>
        public ApiResponse<SwitchInfo> CreateSwitchWithHttpInfo (string accountId, CreateSwitchInfo createSwitchInfo)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->CreateSwitch");
            // verify the required parameter 'createSwitchInfo' is set
            if (createSwitchInfo == null)
                throw new ApiException(400, "Missing required parameter 'createSwitchInfo' when calling AutomaticLocationUpdatesApi->CreateSwitch");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/switches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (createSwitchInfo != null && createSwitchInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createSwitchInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createSwitchInfo; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSwitch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SwitchInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SwitchInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SwitchInfo)));
        }

        /// <summary>
        /// Create Switch Creates a new switch in corporate map based on chassis ID and used for Automatic Locations Update feature.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createSwitchInfo"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SwitchInfo</returns>
        public async System.Threading.Tasks.Task<SwitchInfo> CreateSwitchAsync (string accountId, CreateSwitchInfo createSwitchInfo, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SwitchInfo> localVarResponse = await CreateSwitchWithHttpInfoAsync(accountId, createSwitchInfo, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Switch Creates a new switch in corporate map based on chassis ID and used for Automatic Locations Update feature.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createSwitchInfo"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SwitchInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SwitchInfo>> CreateSwitchWithHttpInfoAsync (string accountId, CreateSwitchInfo createSwitchInfo, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->CreateSwitch");
            // verify the required parameter 'createSwitchInfo' is set
            if (createSwitchInfo == null)
                throw new ApiException(400, "Missing required parameter 'createSwitchInfo' when calling AutomaticLocationUpdatesApi->CreateSwitch");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/switches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (createSwitchInfo != null && createSwitchInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createSwitchInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createSwitchInfo; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSwitch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SwitchInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SwitchInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SwitchInfo)));
        }

        /// <summary>
        /// Create Wireless Point Creates a new wireless point in network configuration with the emergency address assigned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createWirelessPoint"></param>
        /// <returns>WirelessPointInfo</returns>
        public WirelessPointInfo CreateWirelessPoint (string accountId, CreateWirelessPoint createWirelessPoint)
        {
             ApiResponse<WirelessPointInfo> localVarResponse = CreateWirelessPointWithHttpInfo(accountId, createWirelessPoint);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Wireless Point Creates a new wireless point in network configuration with the emergency address assigned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createWirelessPoint"></param>
        /// <returns>ApiResponse of WirelessPointInfo</returns>
        public ApiResponse<WirelessPointInfo> CreateWirelessPointWithHttpInfo (string accountId, CreateWirelessPoint createWirelessPoint)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->CreateWirelessPoint");
            // verify the required parameter 'createWirelessPoint' is set
            if (createWirelessPoint == null)
                throw new ApiException(400, "Missing required parameter 'createWirelessPoint' when calling AutomaticLocationUpdatesApi->CreateWirelessPoint");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/wireless-points";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (createWirelessPoint != null && createWirelessPoint.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createWirelessPoint); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createWirelessPoint; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWirelessPoint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WirelessPointInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WirelessPointInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WirelessPointInfo)));
        }

        /// <summary>
        /// Create Wireless Point Creates a new wireless point in network configuration with the emergency address assigned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createWirelessPoint"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WirelessPointInfo</returns>
        public async System.Threading.Tasks.Task<WirelessPointInfo> CreateWirelessPointAsync (string accountId, CreateWirelessPoint createWirelessPoint, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<WirelessPointInfo> localVarResponse = await CreateWirelessPointWithHttpInfoAsync(accountId, createWirelessPoint, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Wireless Point Creates a new wireless point in network configuration with the emergency address assigned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="createWirelessPoint"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WirelessPointInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WirelessPointInfo>> CreateWirelessPointWithHttpInfoAsync (string accountId, CreateWirelessPoint createWirelessPoint, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->CreateWirelessPoint");
            // verify the required parameter 'createWirelessPoint' is set
            if (createWirelessPoint == null)
                throw new ApiException(400, "Missing required parameter 'createWirelessPoint' when calling AutomaticLocationUpdatesApi->CreateWirelessPoint");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/wireless-points";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (createWirelessPoint != null && createWirelessPoint.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createWirelessPoint); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createWirelessPoint; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWirelessPoint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WirelessPointInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WirelessPointInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WirelessPointInfo)));
        }

        /// <summary>
        /// Delete Emergency Location Deletes the specified emergency response location.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of emergency location</param>
        /// <param name="newLocationId">Internal identifier of a location that should be used instead of a deleted one (optional)</param>
        /// <param name="validateOnly">Flag indicating that validation of emergency location(s) is required before deletion (optional)</param>
        /// <returns></returns>
        public void DeleteEmergencyLocation (string accountId, string locationId, string newLocationId = default(string), bool? validateOnly = default(bool?))
        {
             DeleteEmergencyLocationWithHttpInfo(accountId, locationId, newLocationId, validateOnly);
        }

        /// <summary>
        /// Delete Emergency Location Deletes the specified emergency response location.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of emergency location</param>
        /// <param name="newLocationId">Internal identifier of a location that should be used instead of a deleted one (optional)</param>
        /// <param name="validateOnly">Flag indicating that validation of emergency location(s) is required before deletion (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteEmergencyLocationWithHttpInfo (string accountId, string locationId, string newLocationId = default(string), bool? validateOnly = default(bool?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->DeleteEmergencyLocation");
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling AutomaticLocationUpdatesApi->DeleteEmergencyLocation");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-locations/{locationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (newLocationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "newLocationId", newLocationId)); // query parameter
            if (validateOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "validateOnly", validateOnly)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmergencyLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Emergency Location Deletes the specified emergency response location.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of emergency location</param>
        /// <param name="newLocationId">Internal identifier of a location that should be used instead of a deleted one (optional)</param>
        /// <param name="validateOnly">Flag indicating that validation of emergency location(s) is required before deletion (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteEmergencyLocationAsync (string accountId, string locationId, string newLocationId = default(string), bool? validateOnly = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteEmergencyLocationWithHttpInfoAsync(accountId, locationId, newLocationId, validateOnly, cancellationToken);

        }

        /// <summary>
        /// Delete Emergency Location Deletes the specified emergency response location.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of emergency location</param>
        /// <param name="newLocationId">Internal identifier of a location that should be used instead of a deleted one (optional)</param>
        /// <param name="validateOnly">Flag indicating that validation of emergency location(s) is required before deletion (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEmergencyLocationWithHttpInfoAsync (string accountId, string locationId, string newLocationId = default(string), bool? validateOnly = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->DeleteEmergencyLocation");
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling AutomaticLocationUpdatesApi->DeleteEmergencyLocation");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-locations/{locationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (newLocationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "newLocationId", newLocationId)); // query parameter
            if (validateOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "validateOnly", validateOnly)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmergencyLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete User Emergency Location Deletes a personal emergency response location by ID by the current user or admin. Multiple personal emergency response locations can be deleted by one API call
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of an emergency response location to be deleted</param>
        /// <param name="validateOnly">Flag indicating that only validation of Emergency Response Locations to be deleted is required. (optional)</param>
        /// <returns></returns>
        public void DeleteExtensionEmergencyLocation (string accountId, string extensionId, string locationId, bool? validateOnly = default(bool?))
        {
             DeleteExtensionEmergencyLocationWithHttpInfo(accountId, extensionId, locationId, validateOnly);
        }

        /// <summary>
        /// Delete User Emergency Location Deletes a personal emergency response location by ID by the current user or admin. Multiple personal emergency response locations can be deleted by one API call
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of an emergency response location to be deleted</param>
        /// <param name="validateOnly">Flag indicating that only validation of Emergency Response Locations to be deleted is required. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteExtensionEmergencyLocationWithHttpInfo (string accountId, string extensionId, string locationId, bool? validateOnly = default(bool?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->DeleteExtensionEmergencyLocation");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling AutomaticLocationUpdatesApi->DeleteExtensionEmergencyLocation");
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling AutomaticLocationUpdatesApi->DeleteExtensionEmergencyLocation");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/emergency-locations/{locationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (validateOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "validateOnly", validateOnly)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteExtensionEmergencyLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete User Emergency Location Deletes a personal emergency response location by ID by the current user or admin. Multiple personal emergency response locations can be deleted by one API call
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of an emergency response location to be deleted</param>
        /// <param name="validateOnly">Flag indicating that only validation of Emergency Response Locations to be deleted is required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteExtensionEmergencyLocationAsync (string accountId, string extensionId, string locationId, bool? validateOnly = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteExtensionEmergencyLocationWithHttpInfoAsync(accountId, extensionId, locationId, validateOnly, cancellationToken);

        }

        /// <summary>
        /// Delete User Emergency Location Deletes a personal emergency response location by ID by the current user or admin. Multiple personal emergency response locations can be deleted by one API call
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of an emergency response location to be deleted</param>
        /// <param name="validateOnly">Flag indicating that only validation of Emergency Response Locations to be deleted is required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteExtensionEmergencyLocationWithHttpInfoAsync (string accountId, string extensionId, string locationId, bool? validateOnly = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->DeleteExtensionEmergencyLocation");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling AutomaticLocationUpdatesApi->DeleteExtensionEmergencyLocation");
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling AutomaticLocationUpdatesApi->DeleteExtensionEmergencyLocation");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/emergency-locations/{locationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (validateOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "validateOnly", validateOnly)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteExtensionEmergencyLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Network Deletes network(s) in corporate ethernet map for Automatic Location Updates feature.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="networkId"></param>
        /// <returns></returns>
        public void DeleteNetwork (string accountId, List<string> networkId)
        {
             DeleteNetworkWithHttpInfo(accountId, networkId);
        }

        /// <summary>
        /// Delete Network Deletes network(s) in corporate ethernet map for Automatic Location Updates feature.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="networkId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteNetworkWithHttpInfo (string accountId, List<string> networkId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->DeleteNetwork");
            // verify the required parameter 'networkId' is set
            if (networkId == null)
                throw new ApiException(400, "Missing required parameter 'networkId' when calling AutomaticLocationUpdatesApi->DeleteNetwork");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/networks/{networkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (networkId != null) localVarPathParams.Add("networkId", this.Configuration.ApiClient.ParameterToString(networkId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNetwork", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Network Deletes network(s) in corporate ethernet map for Automatic Location Updates feature.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="networkId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteNetworkAsync (string accountId, List<string> networkId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteNetworkWithHttpInfoAsync(accountId, networkId, cancellationToken);

        }

        /// <summary>
        /// Delete Network Deletes network(s) in corporate ethernet map for Automatic Location Updates feature.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="networkId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNetworkWithHttpInfoAsync (string accountId, List<string> networkId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->DeleteNetwork");
            // verify the required parameter 'networkId' is set
            if (networkId == null)
                throw new ApiException(400, "Missing required parameter 'networkId' when calling AutomaticLocationUpdatesApi->DeleteNetwork");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/networks/{networkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (networkId != null) localVarPathParams.Add("networkId", this.Configuration.ApiClient.ParameterToString(networkId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNetwork", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Switch Deletes wireless switch(es) in network configuration for Automatic Location Updates feature.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="switchId"></param>
        /// <returns></returns>
        public void DeleteSwitch (string accountId, List<string> switchId)
        {
             DeleteSwitchWithHttpInfo(accountId, switchId);
        }

        /// <summary>
        /// Delete Switch Deletes wireless switch(es) in network configuration for Automatic Location Updates feature.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="switchId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSwitchWithHttpInfo (string accountId, List<string> switchId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->DeleteSwitch");
            // verify the required parameter 'switchId' is set
            if (switchId == null)
                throw new ApiException(400, "Missing required parameter 'switchId' when calling AutomaticLocationUpdatesApi->DeleteSwitch");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/switches/{switchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (switchId != null) localVarPathParams.Add("switchId", this.Configuration.ApiClient.ParameterToString(switchId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSwitch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Switch Deletes wireless switch(es) in network configuration for Automatic Location Updates feature.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="switchId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSwitchAsync (string accountId, List<string> switchId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteSwitchWithHttpInfoAsync(accountId, switchId, cancellationToken);

        }

        /// <summary>
        /// Delete Switch Deletes wireless switch(es) in network configuration for Automatic Location Updates feature.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="switchId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSwitchWithHttpInfoAsync (string accountId, List<string> switchId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->DeleteSwitch");
            // verify the required parameter 'switchId' is set
            if (switchId == null)
                throw new ApiException(400, "Missing required parameter 'switchId' when calling AutomaticLocationUpdatesApi->DeleteSwitch");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/switches/{switchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (switchId != null) localVarPathParams.Add("switchId", this.Configuration.ApiClient.ParameterToString(switchId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSwitch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Wireless Point Deletes wireless point(s) of a corporate map by ID(s).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="pointId"></param>
        /// <returns></returns>
        public void DeleteWirelessPoint (string accountId, List<string> pointId)
        {
             DeleteWirelessPointWithHttpInfo(accountId, pointId);
        }

        /// <summary>
        /// Delete Wireless Point Deletes wireless point(s) of a corporate map by ID(s).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="pointId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWirelessPointWithHttpInfo (string accountId, List<string> pointId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->DeleteWirelessPoint");
            // verify the required parameter 'pointId' is set
            if (pointId == null)
                throw new ApiException(400, "Missing required parameter 'pointId' when calling AutomaticLocationUpdatesApi->DeleteWirelessPoint");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/wireless-points/{pointId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (pointId != null) localVarPathParams.Add("pointId", this.Configuration.ApiClient.ParameterToString(pointId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWirelessPoint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Wireless Point Deletes wireless point(s) of a corporate map by ID(s).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="pointId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWirelessPointAsync (string accountId, List<string> pointId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteWirelessPointWithHttpInfoAsync(accountId, pointId, cancellationToken);

        }

        /// <summary>
        /// Delete Wireless Point Deletes wireless point(s) of a corporate map by ID(s).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="pointId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWirelessPointWithHttpInfoAsync (string accountId, List<string> pointId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->DeleteWirelessPoint");
            // verify the required parameter 'pointId' is set
            if (pointId == null)
                throw new ApiException(400, "Missing required parameter 'pointId' when calling AutomaticLocationUpdatesApi->DeleteWirelessPoint");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/wireless-points/{pointId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (pointId != null) localVarPathParams.Add("pointId", this.Configuration.ApiClient.ParameterToString(pointId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWirelessPoint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get User Emergency Location Returns personal emergency response location for the current user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of emergency location</param>
        /// <returns>EmergencyLocationInfo</returns>
        public EmergencyLocationInfo GetExtensionEmergencyLocation (string accountId, string extensionId, string locationId)
        {
             ApiResponse<EmergencyLocationInfo> localVarResponse = GetExtensionEmergencyLocationWithHttpInfo(accountId, extensionId, locationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Emergency Location Returns personal emergency response location for the current user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of emergency location</param>
        /// <returns>ApiResponse of EmergencyLocationInfo</returns>
        public ApiResponse<EmergencyLocationInfo> GetExtensionEmergencyLocationWithHttpInfo (string accountId, string extensionId, string locationId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->GetExtensionEmergencyLocation");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling AutomaticLocationUpdatesApi->GetExtensionEmergencyLocation");
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling AutomaticLocationUpdatesApi->GetExtensionEmergencyLocation");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/emergency-locations/{locationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExtensionEmergencyLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmergencyLocationInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmergencyLocationInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmergencyLocationInfo)));
        }

        /// <summary>
        /// Get User Emergency Location Returns personal emergency response location for the current user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of emergency location</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EmergencyLocationInfo</returns>
        public async System.Threading.Tasks.Task<EmergencyLocationInfo> GetExtensionEmergencyLocationAsync (string accountId, string extensionId, string locationId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EmergencyLocationInfo> localVarResponse = await GetExtensionEmergencyLocationWithHttpInfoAsync(accountId, extensionId, locationId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get User Emergency Location Returns personal emergency response location for the current user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of emergency location</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EmergencyLocationInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmergencyLocationInfo>> GetExtensionEmergencyLocationWithHttpInfoAsync (string accountId, string extensionId, string locationId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->GetExtensionEmergencyLocation");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling AutomaticLocationUpdatesApi->GetExtensionEmergencyLocation");
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling AutomaticLocationUpdatesApi->GetExtensionEmergencyLocation");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/emergency-locations/{locationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExtensionEmergencyLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmergencyLocationInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmergencyLocationInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmergencyLocationInfo)));
        }

        /// <summary>
        /// Get User Emergency Location List Returns a list of emergency response locations available for the current user extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="siteId">Internal identifier of a site. To filter Main Site (Company) main-site must be specified. Supported only If multi-site feature is enabled for the account (optional)</param>
        /// <param name="searchString">Filters entries by the specified substring (search by chassis ID, switch name or address) The characters range is 0-64 (if empty the filter is ignored) (optional)</param>
        /// <param name="domesticCountryId"> (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by plus sign &#39;+&#39; (ascending order) or minus sign &#39;-&#39; (descending order). The default value is &#x60;+visibility&#x60;, which means public ERLs will be returned first in the list, then - private ones (optional, default to +visibility)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <param name="visibility">Specifies whether to return only private or only public (company) ERLs (Emergency Response Locations) (optional)</param>
        /// <param name="ifNoneMatch">Flag that provides matching the client &#39;etag&#39; value with the server one (optional)</param>
        /// <returns>EmergencyLocationsResource</returns>
        public EmergencyLocationsResource GetExtensionEmergencyLocations (string accountId, string extensionId, List<string> siteId = default(List<string>), string searchString = default(string), string domesticCountryId = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?), string visibility = default(string), string ifNoneMatch = default(string))
        {
             ApiResponse<EmergencyLocationsResource> localVarResponse = GetExtensionEmergencyLocationsWithHttpInfo(accountId, extensionId, siteId, searchString, domesticCountryId, orderBy, perPage, page, visibility, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Emergency Location List Returns a list of emergency response locations available for the current user extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="siteId">Internal identifier of a site. To filter Main Site (Company) main-site must be specified. Supported only If multi-site feature is enabled for the account (optional)</param>
        /// <param name="searchString">Filters entries by the specified substring (search by chassis ID, switch name or address) The characters range is 0-64 (if empty the filter is ignored) (optional)</param>
        /// <param name="domesticCountryId"> (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by plus sign &#39;+&#39; (ascending order) or minus sign &#39;-&#39; (descending order). The default value is &#x60;+visibility&#x60;, which means public ERLs will be returned first in the list, then - private ones (optional, default to +visibility)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <param name="visibility">Specifies whether to return only private or only public (company) ERLs (Emergency Response Locations) (optional)</param>
        /// <param name="ifNoneMatch">Flag that provides matching the client &#39;etag&#39; value with the server one (optional)</param>
        /// <returns>ApiResponse of EmergencyLocationsResource</returns>
        public ApiResponse<EmergencyLocationsResource> GetExtensionEmergencyLocationsWithHttpInfo (string accountId, string extensionId, List<string> siteId = default(List<string>), string searchString = default(string), string domesticCountryId = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?), string visibility = default(string), string ifNoneMatch = default(string))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->GetExtensionEmergencyLocations");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling AutomaticLocationUpdatesApi->GetExtensionEmergencyLocations");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/emergency-locations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (siteId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "siteId", siteId)); // query parameter
            if (searchString != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchString", searchString)); // query parameter
            if (domesticCountryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "domesticCountryId", domesticCountryId)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (visibility != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "visibility", visibility)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExtensionEmergencyLocations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmergencyLocationsResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmergencyLocationsResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmergencyLocationsResource)));
        }

        /// <summary>
        /// Get User Emergency Location List Returns a list of emergency response locations available for the current user extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="siteId">Internal identifier of a site. To filter Main Site (Company) main-site must be specified. Supported only If multi-site feature is enabled for the account (optional)</param>
        /// <param name="searchString">Filters entries by the specified substring (search by chassis ID, switch name or address) The characters range is 0-64 (if empty the filter is ignored) (optional)</param>
        /// <param name="domesticCountryId"> (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by plus sign &#39;+&#39; (ascending order) or minus sign &#39;-&#39; (descending order). The default value is &#x60;+visibility&#x60;, which means public ERLs will be returned first in the list, then - private ones (optional, default to +visibility)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <param name="visibility">Specifies whether to return only private or only public (company) ERLs (Emergency Response Locations) (optional)</param>
        /// <param name="ifNoneMatch">Flag that provides matching the client &#39;etag&#39; value with the server one (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EmergencyLocationsResource</returns>
        public async System.Threading.Tasks.Task<EmergencyLocationsResource> GetExtensionEmergencyLocationsAsync (string accountId, string extensionId, List<string> siteId = default(List<string>), string searchString = default(string), string domesticCountryId = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?), string visibility = default(string), string ifNoneMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EmergencyLocationsResource> localVarResponse = await GetExtensionEmergencyLocationsWithHttpInfoAsync(accountId, extensionId, siteId, searchString, domesticCountryId, orderBy, perPage, page, visibility, ifNoneMatch, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get User Emergency Location List Returns a list of emergency response locations available for the current user extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="siteId">Internal identifier of a site. To filter Main Site (Company) main-site must be specified. Supported only If multi-site feature is enabled for the account (optional)</param>
        /// <param name="searchString">Filters entries by the specified substring (search by chassis ID, switch name or address) The characters range is 0-64 (if empty the filter is ignored) (optional)</param>
        /// <param name="domesticCountryId"> (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by plus sign &#39;+&#39; (ascending order) or minus sign &#39;-&#39; (descending order). The default value is &#x60;+visibility&#x60;, which means public ERLs will be returned first in the list, then - private ones (optional, default to +visibility)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <param name="visibility">Specifies whether to return only private or only public (company) ERLs (Emergency Response Locations) (optional)</param>
        /// <param name="ifNoneMatch">Flag that provides matching the client &#39;etag&#39; value with the server one (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EmergencyLocationsResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmergencyLocationsResource>> GetExtensionEmergencyLocationsWithHttpInfoAsync (string accountId, string extensionId, List<string> siteId = default(List<string>), string searchString = default(string), string domesticCountryId = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?), string visibility = default(string), string ifNoneMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->GetExtensionEmergencyLocations");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling AutomaticLocationUpdatesApi->GetExtensionEmergencyLocations");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/emergency-locations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (siteId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "siteId", siteId)); // query parameter
            if (searchString != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchString", searchString)); // query parameter
            if (domesticCountryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "domesticCountryId", domesticCountryId)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (visibility != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "visibility", visibility)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExtensionEmergencyLocations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmergencyLocationsResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmergencyLocationsResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmergencyLocationsResource)));
        }

        /// <summary>
        /// Get Account Switch List Returns corporate map of configured network switches with the assigned emergency addresses for the logged-in account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="siteId">Internal identifier of a site. To filter Main Site (Company) main-site must be specified. Supported only If multi-site feature is enabled for the account (optional)</param>
        /// <param name="searchString">Filters entries by the specified substring (search by chassis ID, switch name or address) The characters range is 0-64 (if empty the filter is ignored) (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by &#39;+&#39; sign (ascending order) or &#39;-&#39; sign (descending order). The default sorting is by &#x60;name&#x60; (optional)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <returns>SwitchesList</returns>
        public SwitchesList ListAccountSwitches (string accountId, string siteId = default(string), string searchString = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?))
        {
             ApiResponse<SwitchesList> localVarResponse = ListAccountSwitchesWithHttpInfo(accountId, siteId, searchString, orderBy, perPage, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account Switch List Returns corporate map of configured network switches with the assigned emergency addresses for the logged-in account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="siteId">Internal identifier of a site. To filter Main Site (Company) main-site must be specified. Supported only If multi-site feature is enabled for the account (optional)</param>
        /// <param name="searchString">Filters entries by the specified substring (search by chassis ID, switch name or address) The characters range is 0-64 (if empty the filter is ignored) (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by &#39;+&#39; sign (ascending order) or &#39;-&#39; sign (descending order). The default sorting is by &#x60;name&#x60; (optional)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <returns>ApiResponse of SwitchesList</returns>
        public ApiResponse<SwitchesList> ListAccountSwitchesWithHttpInfo (string accountId, string siteId = default(string), string searchString = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->ListAccountSwitches");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/switches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (siteId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "siteId", siteId)); // query parameter
            if (searchString != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchString", searchString)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAccountSwitches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SwitchesList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SwitchesList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SwitchesList)));
        }

        /// <summary>
        /// Get Account Switch List Returns corporate map of configured network switches with the assigned emergency addresses for the logged-in account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="siteId">Internal identifier of a site. To filter Main Site (Company) main-site must be specified. Supported only If multi-site feature is enabled for the account (optional)</param>
        /// <param name="searchString">Filters entries by the specified substring (search by chassis ID, switch name or address) The characters range is 0-64 (if empty the filter is ignored) (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by &#39;+&#39; sign (ascending order) or &#39;-&#39; sign (descending order). The default sorting is by &#x60;name&#x60; (optional)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SwitchesList</returns>
        public async System.Threading.Tasks.Task<SwitchesList> ListAccountSwitchesAsync (string accountId, string siteId = default(string), string searchString = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SwitchesList> localVarResponse = await ListAccountSwitchesWithHttpInfoAsync(accountId, siteId, searchString, orderBy, perPage, page, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Account Switch List Returns corporate map of configured network switches with the assigned emergency addresses for the logged-in account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="siteId">Internal identifier of a site. To filter Main Site (Company) main-site must be specified. Supported only If multi-site feature is enabled for the account (optional)</param>
        /// <param name="searchString">Filters entries by the specified substring (search by chassis ID, switch name or address) The characters range is 0-64 (if empty the filter is ignored) (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by &#39;+&#39; sign (ascending order) or &#39;-&#39; sign (descending order). The default sorting is by &#x60;name&#x60; (optional)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SwitchesList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SwitchesList>> ListAccountSwitchesWithHttpInfoAsync (string accountId, string siteId = default(string), string searchString = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->ListAccountSwitches");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/switches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (siteId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "siteId", siteId)); // query parameter
            if (searchString != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchString", searchString)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAccountSwitches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SwitchesList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SwitchesList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SwitchesList)));
        }

        /// <summary>
        /// Get User List Returns the list of users with their status of Automatic Location Updates feature.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="type">Extension type. Multiple values are supported (optional)</param>
        /// <param name="searchString">Filters entries containing the specified substring in user name, extension or department. The characters range is 0-64; not case-sensitive. If empty then the filter is ignored (optional)</param>
        /// <param name="department">Department name to filter the users. The value range is 0-64; not case-sensitive. If not specified then the parameter is ignored. Multiple values are supported (optional)</param>
        /// <param name="siteId">Internal identifier of a site. To filter users of Main Site (Company) &#x60;main-site&#x60; must be specified. Supported only If Multi-Site feature is enabled for the account. Multiple values are supported (optional)</param>
        /// <param name="featureEnabled">Filters entries by their status of Automatic Location Updates feature (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by plus sign &#39;+&#39; (ascending order) or minus sign &#39;-&#39; (descending order). Supported values: &#39;name&#39;, &#39;modelName&#39;, &#39;siteName&#39;, &#39;featureEnabled&#39; (optional, default to &quot;name&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <returns>AutomaticLocationUpdatesUserList</returns>
        public AutomaticLocationUpdatesUserList ListAutomaticLocationUpdatesUsers (string accountId, string type = default(string), string searchString = default(string), string department = default(string), string siteId = default(string), bool? featureEnabled = default(bool?), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?))
        {
             ApiResponse<AutomaticLocationUpdatesUserList> localVarResponse = ListAutomaticLocationUpdatesUsersWithHttpInfo(accountId, type, searchString, department, siteId, featureEnabled, orderBy, perPage, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get User List Returns the list of users with their status of Automatic Location Updates feature.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="type">Extension type. Multiple values are supported (optional)</param>
        /// <param name="searchString">Filters entries containing the specified substring in user name, extension or department. The characters range is 0-64; not case-sensitive. If empty then the filter is ignored (optional)</param>
        /// <param name="department">Department name to filter the users. The value range is 0-64; not case-sensitive. If not specified then the parameter is ignored. Multiple values are supported (optional)</param>
        /// <param name="siteId">Internal identifier of a site. To filter users of Main Site (Company) &#x60;main-site&#x60; must be specified. Supported only If Multi-Site feature is enabled for the account. Multiple values are supported (optional)</param>
        /// <param name="featureEnabled">Filters entries by their status of Automatic Location Updates feature (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by plus sign &#39;+&#39; (ascending order) or minus sign &#39;-&#39; (descending order). Supported values: &#39;name&#39;, &#39;modelName&#39;, &#39;siteName&#39;, &#39;featureEnabled&#39; (optional, default to &quot;name&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <returns>ApiResponse of AutomaticLocationUpdatesUserList</returns>
        public ApiResponse<AutomaticLocationUpdatesUserList> ListAutomaticLocationUpdatesUsersWithHttpInfo (string accountId, string type = default(string), string searchString = default(string), string department = default(string), string siteId = default(string), bool? featureEnabled = default(bool?), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->ListAutomaticLocationUpdatesUsers");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (searchString != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchString", searchString)); // query parameter
            if (department != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "department", department)); // query parameter
            if (siteId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "siteId", siteId)); // query parameter
            if (featureEnabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "featureEnabled", featureEnabled)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAutomaticLocationUpdatesUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutomaticLocationUpdatesUserList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutomaticLocationUpdatesUserList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutomaticLocationUpdatesUserList)));
        }

        /// <summary>
        /// Get User List Returns the list of users with their status of Automatic Location Updates feature.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="type">Extension type. Multiple values are supported (optional)</param>
        /// <param name="searchString">Filters entries containing the specified substring in user name, extension or department. The characters range is 0-64; not case-sensitive. If empty then the filter is ignored (optional)</param>
        /// <param name="department">Department name to filter the users. The value range is 0-64; not case-sensitive. If not specified then the parameter is ignored. Multiple values are supported (optional)</param>
        /// <param name="siteId">Internal identifier of a site. To filter users of Main Site (Company) &#x60;main-site&#x60; must be specified. Supported only If Multi-Site feature is enabled for the account. Multiple values are supported (optional)</param>
        /// <param name="featureEnabled">Filters entries by their status of Automatic Location Updates feature (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by plus sign &#39;+&#39; (ascending order) or minus sign &#39;-&#39; (descending order). Supported values: &#39;name&#39;, &#39;modelName&#39;, &#39;siteName&#39;, &#39;featureEnabled&#39; (optional, default to &quot;name&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AutomaticLocationUpdatesUserList</returns>
        public async System.Threading.Tasks.Task<AutomaticLocationUpdatesUserList> ListAutomaticLocationUpdatesUsersAsync (string accountId, string type = default(string), string searchString = default(string), string department = default(string), string siteId = default(string), bool? featureEnabled = default(bool?), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AutomaticLocationUpdatesUserList> localVarResponse = await ListAutomaticLocationUpdatesUsersWithHttpInfoAsync(accountId, type, searchString, department, siteId, featureEnabled, orderBy, perPage, page, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get User List Returns the list of users with their status of Automatic Location Updates feature.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="type">Extension type. Multiple values are supported (optional)</param>
        /// <param name="searchString">Filters entries containing the specified substring in user name, extension or department. The characters range is 0-64; not case-sensitive. If empty then the filter is ignored (optional)</param>
        /// <param name="department">Department name to filter the users. The value range is 0-64; not case-sensitive. If not specified then the parameter is ignored. Multiple values are supported (optional)</param>
        /// <param name="siteId">Internal identifier of a site. To filter users of Main Site (Company) &#x60;main-site&#x60; must be specified. Supported only If Multi-Site feature is enabled for the account. Multiple values are supported (optional)</param>
        /// <param name="featureEnabled">Filters entries by their status of Automatic Location Updates feature (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by plus sign &#39;+&#39; (ascending order) or minus sign &#39;-&#39; (descending order). Supported values: &#39;name&#39;, &#39;modelName&#39;, &#39;siteName&#39;, &#39;featureEnabled&#39; (optional, default to &quot;name&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AutomaticLocationUpdatesUserList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AutomaticLocationUpdatesUserList>> ListAutomaticLocationUpdatesUsersWithHttpInfoAsync (string accountId, string type = default(string), string searchString = default(string), string department = default(string), string siteId = default(string), bool? featureEnabled = default(bool?), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->ListAutomaticLocationUpdatesUsers");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (searchString != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchString", searchString)); // query parameter
            if (department != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "department", department)); // query parameter
            if (siteId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "siteId", siteId)); // query parameter
            if (featureEnabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "featureEnabled", featureEnabled)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAutomaticLocationUpdatesUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutomaticLocationUpdatesUserList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutomaticLocationUpdatesUserList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutomaticLocationUpdatesUserList)));
        }

        /// <summary>
        /// Get Device List Returns the list of common devices with their status of Automatic Location Updates feature.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="siteId">Internal identifier of a site. To filter devices of Main Site (Company) &#x60;main-site&#x60; must be specified. Supported only If Multi-Site feature is enabled for the account (optional)</param>
        /// <param name="featureEnabled">Filters entries by their status of Automatic Location Updates feature (optional)</param>
        /// <param name="model">Internal identifier of a device model for filtering. Multiple values are supported (optional)</param>
        /// <param name="compatibleOnly">Filters devices which support HELD protocol (optional)</param>
        /// <param name="searchString">Filters entries which have device name or model name containing the mentioned substring. The value should be split by spaces; the range is 0 - 64 characters, not case-sensitive. If empty the filter is ignored (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by plus sign &#39;+&#39; (ascending order) or minus sign &#39;-&#39; (descending order). Supported values: &#39;name&#39;, &#39;modelName&#39;, &#39;siteName&#39;, &#39;featureEnabled&#39; (optional, default to &quot;name&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <returns>ListDevicesAutomaticLocationUpdates</returns>
        public ListDevicesAutomaticLocationUpdates ListDevicesAutomaticLocationUpdates (string accountId, string siteId = default(string), bool? featureEnabled = default(bool?), string model = default(string), bool? compatibleOnly = default(bool?), string searchString = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?))
        {
             ApiResponse<ListDevicesAutomaticLocationUpdates> localVarResponse = ListDevicesAutomaticLocationUpdatesWithHttpInfo(accountId, siteId, featureEnabled, model, compatibleOnly, searchString, orderBy, perPage, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Device List Returns the list of common devices with their status of Automatic Location Updates feature.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="siteId">Internal identifier of a site. To filter devices of Main Site (Company) &#x60;main-site&#x60; must be specified. Supported only If Multi-Site feature is enabled for the account (optional)</param>
        /// <param name="featureEnabled">Filters entries by their status of Automatic Location Updates feature (optional)</param>
        /// <param name="model">Internal identifier of a device model for filtering. Multiple values are supported (optional)</param>
        /// <param name="compatibleOnly">Filters devices which support HELD protocol (optional)</param>
        /// <param name="searchString">Filters entries which have device name or model name containing the mentioned substring. The value should be split by spaces; the range is 0 - 64 characters, not case-sensitive. If empty the filter is ignored (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by plus sign &#39;+&#39; (ascending order) or minus sign &#39;-&#39; (descending order). Supported values: &#39;name&#39;, &#39;modelName&#39;, &#39;siteName&#39;, &#39;featureEnabled&#39; (optional, default to &quot;name&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <returns>ApiResponse of ListDevicesAutomaticLocationUpdates</returns>
        public ApiResponse<ListDevicesAutomaticLocationUpdates> ListDevicesAutomaticLocationUpdatesWithHttpInfo (string accountId, string siteId = default(string), bool? featureEnabled = default(bool?), string model = default(string), bool? compatibleOnly = default(bool?), string searchString = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->ListDevicesAutomaticLocationUpdates");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/devices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (siteId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "siteId", siteId)); // query parameter
            if (featureEnabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "featureEnabled", featureEnabled)); // query parameter
            if (model != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "model", model)); // query parameter
            if (compatibleOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "compatibleOnly", compatibleOnly)); // query parameter
            if (searchString != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchString", searchString)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDevicesAutomaticLocationUpdates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListDevicesAutomaticLocationUpdates>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListDevicesAutomaticLocationUpdates) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListDevicesAutomaticLocationUpdates)));
        }

        /// <summary>
        /// Get Device List Returns the list of common devices with their status of Automatic Location Updates feature.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="siteId">Internal identifier of a site. To filter devices of Main Site (Company) &#x60;main-site&#x60; must be specified. Supported only If Multi-Site feature is enabled for the account (optional)</param>
        /// <param name="featureEnabled">Filters entries by their status of Automatic Location Updates feature (optional)</param>
        /// <param name="model">Internal identifier of a device model for filtering. Multiple values are supported (optional)</param>
        /// <param name="compatibleOnly">Filters devices which support HELD protocol (optional)</param>
        /// <param name="searchString">Filters entries which have device name or model name containing the mentioned substring. The value should be split by spaces; the range is 0 - 64 characters, not case-sensitive. If empty the filter is ignored (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by plus sign &#39;+&#39; (ascending order) or minus sign &#39;-&#39; (descending order). Supported values: &#39;name&#39;, &#39;modelName&#39;, &#39;siteName&#39;, &#39;featureEnabled&#39; (optional, default to &quot;name&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListDevicesAutomaticLocationUpdates</returns>
        public async System.Threading.Tasks.Task<ListDevicesAutomaticLocationUpdates> ListDevicesAutomaticLocationUpdatesAsync (string accountId, string siteId = default(string), bool? featureEnabled = default(bool?), string model = default(string), bool? compatibleOnly = default(bool?), string searchString = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ListDevicesAutomaticLocationUpdates> localVarResponse = await ListDevicesAutomaticLocationUpdatesWithHttpInfoAsync(accountId, siteId, featureEnabled, model, compatibleOnly, searchString, orderBy, perPage, page, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Device List Returns the list of common devices with their status of Automatic Location Updates feature.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="siteId">Internal identifier of a site. To filter devices of Main Site (Company) &#x60;main-site&#x60; must be specified. Supported only If Multi-Site feature is enabled for the account (optional)</param>
        /// <param name="featureEnabled">Filters entries by their status of Automatic Location Updates feature (optional)</param>
        /// <param name="model">Internal identifier of a device model for filtering. Multiple values are supported (optional)</param>
        /// <param name="compatibleOnly">Filters devices which support HELD protocol (optional)</param>
        /// <param name="searchString">Filters entries which have device name or model name containing the mentioned substring. The value should be split by spaces; the range is 0 - 64 characters, not case-sensitive. If empty the filter is ignored (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by plus sign &#39;+&#39; (ascending order) or minus sign &#39;-&#39; (descending order). Supported values: &#39;name&#39;, &#39;modelName&#39;, &#39;siteName&#39;, &#39;featureEnabled&#39; (optional, default to &quot;name&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListDevicesAutomaticLocationUpdates)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListDevicesAutomaticLocationUpdates>> ListDevicesAutomaticLocationUpdatesWithHttpInfoAsync (string accountId, string siteId = default(string), bool? featureEnabled = default(bool?), string model = default(string), bool? compatibleOnly = default(bool?), string searchString = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->ListDevicesAutomaticLocationUpdates");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/devices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (siteId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "siteId", siteId)); // query parameter
            if (featureEnabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "featureEnabled", featureEnabled)); // query parameter
            if (model != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "model", model)); // query parameter
            if (compatibleOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "compatibleOnly", compatibleOnly)); // query parameter
            if (searchString != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchString", searchString)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDevicesAutomaticLocationUpdates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListDevicesAutomaticLocationUpdates>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListDevicesAutomaticLocationUpdates) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListDevicesAutomaticLocationUpdates)));
        }

        /// <summary>
        /// Get Emergency Location List Returns emergency response locations of the current account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="searchString">Filters entries containing the specified substring in address and name fields. The characters range is 0-64; not case-sensitive. If empty then the filter is ignored (optional)</param>
        /// <param name="siteId">Internal identifier of a site for filtering. To filter by Main Site (Company) &#x60;main-site&#x60; value should be specified (optional)</param>
        /// <param name="addressStatus"> (optional)</param>
        /// <param name="usageStatus"> (optional)</param>
        /// <param name="domesticCountryId"> (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by plus sign &#39;+&#39; (ascending order) or minus sign &#39;-&#39; (descending order). Possible field entries are: - &#x60;name&#x60;; - &#x60;siteName&#x60;; - &#x60;address&#x60;; - &#x60;addressStatus&#x60;; - &#x60;usageStatus&#x60;.  (optional, default to &quot;+address&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <returns>EmergencyLocationList</returns>
        public EmergencyLocationList ListEmergencyLocations (string accountId, string searchString = default(string), string siteId = default(string), string addressStatus = default(string), string usageStatus = default(string), string domesticCountryId = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?))
        {
             ApiResponse<EmergencyLocationList> localVarResponse = ListEmergencyLocationsWithHttpInfo(accountId, searchString, siteId, addressStatus, usageStatus, domesticCountryId, orderBy, perPage, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Emergency Location List Returns emergency response locations of the current account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="searchString">Filters entries containing the specified substring in address and name fields. The characters range is 0-64; not case-sensitive. If empty then the filter is ignored (optional)</param>
        /// <param name="siteId">Internal identifier of a site for filtering. To filter by Main Site (Company) &#x60;main-site&#x60; value should be specified (optional)</param>
        /// <param name="addressStatus"> (optional)</param>
        /// <param name="usageStatus"> (optional)</param>
        /// <param name="domesticCountryId"> (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by plus sign &#39;+&#39; (ascending order) or minus sign &#39;-&#39; (descending order). Possible field entries are: - &#x60;name&#x60;; - &#x60;siteName&#x60;; - &#x60;address&#x60;; - &#x60;addressStatus&#x60;; - &#x60;usageStatus&#x60;.  (optional, default to &quot;+address&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <returns>ApiResponse of EmergencyLocationList</returns>
        public ApiResponse<EmergencyLocationList> ListEmergencyLocationsWithHttpInfo (string accountId, string searchString = default(string), string siteId = default(string), string addressStatus = default(string), string usageStatus = default(string), string domesticCountryId = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->ListEmergencyLocations");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-locations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (searchString != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchString", searchString)); // query parameter
            if (siteId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "siteId", siteId)); // query parameter
            if (addressStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addressStatus", addressStatus)); // query parameter
            if (usageStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "usageStatus", usageStatus)); // query parameter
            if (domesticCountryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "domesticCountryId", domesticCountryId)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListEmergencyLocations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmergencyLocationList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmergencyLocationList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmergencyLocationList)));
        }

        /// <summary>
        /// Get Emergency Location List Returns emergency response locations of the current account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="searchString">Filters entries containing the specified substring in address and name fields. The characters range is 0-64; not case-sensitive. If empty then the filter is ignored (optional)</param>
        /// <param name="siteId">Internal identifier of a site for filtering. To filter by Main Site (Company) &#x60;main-site&#x60; value should be specified (optional)</param>
        /// <param name="addressStatus"> (optional)</param>
        /// <param name="usageStatus"> (optional)</param>
        /// <param name="domesticCountryId"> (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by plus sign &#39;+&#39; (ascending order) or minus sign &#39;-&#39; (descending order). Possible field entries are: - &#x60;name&#x60;; - &#x60;siteName&#x60;; - &#x60;address&#x60;; - &#x60;addressStatus&#x60;; - &#x60;usageStatus&#x60;.  (optional, default to &quot;+address&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EmergencyLocationList</returns>
        public async System.Threading.Tasks.Task<EmergencyLocationList> ListEmergencyLocationsAsync (string accountId, string searchString = default(string), string siteId = default(string), string addressStatus = default(string), string usageStatus = default(string), string domesticCountryId = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EmergencyLocationList> localVarResponse = await ListEmergencyLocationsWithHttpInfoAsync(accountId, searchString, siteId, addressStatus, usageStatus, domesticCountryId, orderBy, perPage, page, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Emergency Location List Returns emergency response locations of the current account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="searchString">Filters entries containing the specified substring in address and name fields. The characters range is 0-64; not case-sensitive. If empty then the filter is ignored (optional)</param>
        /// <param name="siteId">Internal identifier of a site for filtering. To filter by Main Site (Company) &#x60;main-site&#x60; value should be specified (optional)</param>
        /// <param name="addressStatus"> (optional)</param>
        /// <param name="usageStatus"> (optional)</param>
        /// <param name="domesticCountryId"> (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by plus sign &#39;+&#39; (ascending order) or minus sign &#39;-&#39; (descending order). Possible field entries are: - &#x60;name&#x60;; - &#x60;siteName&#x60;; - &#x60;address&#x60;; - &#x60;addressStatus&#x60;; - &#x60;usageStatus&#x60;.  (optional, default to &quot;+address&quot;)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EmergencyLocationList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmergencyLocationList>> ListEmergencyLocationsWithHttpInfoAsync (string accountId, string searchString = default(string), string siteId = default(string), string addressStatus = default(string), string usageStatus = default(string), string domesticCountryId = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->ListEmergencyLocations");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-locations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (searchString != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchString", searchString)); // query parameter
            if (siteId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "siteId", siteId)); // query parameter
            if (addressStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addressStatus", addressStatus)); // query parameter
            if (usageStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "usageStatus", usageStatus)); // query parameter
            if (domesticCountryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "domesticCountryId", domesticCountryId)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListEmergencyLocations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmergencyLocationList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmergencyLocationList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmergencyLocationList)));
        }

        /// <summary>
        /// Get Network Map Returns corporate networks map with emergency addresses assigned to the current account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>NetworksList</returns>
        public NetworksList ListNetworks (string accountId)
        {
             ApiResponse<NetworksList> localVarResponse = ListNetworksWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Network Map Returns corporate networks map with emergency addresses assigned to the current account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of NetworksList</returns>
        public ApiResponse<NetworksList> ListNetworksWithHttpInfo (string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->ListNetworks");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/networks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListNetworks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NetworksList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NetworksList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NetworksList)));
        }

        /// <summary>
        /// Get Network Map Returns corporate networks map with emergency addresses assigned to the current account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of NetworksList</returns>
        public async System.Threading.Tasks.Task<NetworksList> ListNetworksAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<NetworksList> localVarResponse = await ListNetworksWithHttpInfoAsync(accountId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Network Map Returns corporate networks map with emergency addresses assigned to the current account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (NetworksList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NetworksList>> ListNetworksWithHttpInfoAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->ListNetworks");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/networks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListNetworks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NetworksList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NetworksList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NetworksList)));
        }

        /// <summary>
        /// Get Wireless Point List Returns account wireless points configured and used for Automatic Location Updates feature.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="siteId">Internal identifier of a site. To filter Main Site (Company) &#39;main-site&#39; must be specified. Supported only If multi-site feature is enabled for the account (optional)</param>
        /// <param name="searchString">Filters entries by the specified substring (search by chassis ID, switch name or address) The characters range is 0-64 (if empty the filter is ignored) (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by &#39;+&#39; sign (ascending order) or &#39;-&#39; sign (descending order). The default sorting is by &#x60;name&#x60; (optional)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <returns>WirelessPointsList</returns>
        public WirelessPointsList ListWirelessPoints (string accountId, string siteId = default(string), string searchString = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?))
        {
             ApiResponse<WirelessPointsList> localVarResponse = ListWirelessPointsWithHttpInfo(accountId, siteId, searchString, orderBy, perPage, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Wireless Point List Returns account wireless points configured and used for Automatic Location Updates feature.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="siteId">Internal identifier of a site. To filter Main Site (Company) &#39;main-site&#39; must be specified. Supported only If multi-site feature is enabled for the account (optional)</param>
        /// <param name="searchString">Filters entries by the specified substring (search by chassis ID, switch name or address) The characters range is 0-64 (if empty the filter is ignored) (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by &#39;+&#39; sign (ascending order) or &#39;-&#39; sign (descending order). The default sorting is by &#x60;name&#x60; (optional)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <returns>ApiResponse of WirelessPointsList</returns>
        public ApiResponse<WirelessPointsList> ListWirelessPointsWithHttpInfo (string accountId, string siteId = default(string), string searchString = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->ListWirelessPoints");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/wireless-points";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (siteId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "siteId", siteId)); // query parameter
            if (searchString != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchString", searchString)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListWirelessPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WirelessPointsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WirelessPointsList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WirelessPointsList)));
        }

        /// <summary>
        /// Get Wireless Point List Returns account wireless points configured and used for Automatic Location Updates feature.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="siteId">Internal identifier of a site. To filter Main Site (Company) &#39;main-site&#39; must be specified. Supported only If multi-site feature is enabled for the account (optional)</param>
        /// <param name="searchString">Filters entries by the specified substring (search by chassis ID, switch name or address) The characters range is 0-64 (if empty the filter is ignored) (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by &#39;+&#39; sign (ascending order) or &#39;-&#39; sign (descending order). The default sorting is by &#x60;name&#x60; (optional)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WirelessPointsList</returns>
        public async System.Threading.Tasks.Task<WirelessPointsList> ListWirelessPointsAsync (string accountId, string siteId = default(string), string searchString = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<WirelessPointsList> localVarResponse = await ListWirelessPointsWithHttpInfoAsync(accountId, siteId, searchString, orderBy, perPage, page, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Wireless Point List Returns account wireless points configured and used for Automatic Location Updates feature.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="siteId">Internal identifier of a site. To filter Main Site (Company) &#39;main-site&#39; must be specified. Supported only If multi-site feature is enabled for the account (optional)</param>
        /// <param name="searchString">Filters entries by the specified substring (search by chassis ID, switch name or address) The characters range is 0-64 (if empty the filter is ignored) (optional)</param>
        /// <param name="orderBy">Comma-separated list of fields to order results prefixed by &#39;+&#39; sign (ascending order) or &#39;-&#39; sign (descending order). The default sorting is by &#x60;name&#x60; (optional)</param>
        /// <param name="perPage">Indicates the page size (number of items). The values supported: &#x60;Max&#x60; or numeric value. If not specified, 100 records are returned per one page (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are supported (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WirelessPointsList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WirelessPointsList>> ListWirelessPointsWithHttpInfoAsync (string accountId, string siteId = default(string), string searchString = default(string), string orderBy = default(string), int? perPage = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->ListWirelessPoints");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/wireless-points";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (siteId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "siteId", siteId)); // query parameter
            if (searchString != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchString", searchString)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListWirelessPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WirelessPointsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WirelessPointsList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WirelessPointsList)));
        }

        /// <summary>
        /// Get Emergency Map Configuration Task Returns results of the task created within the frame of Automatic Location Updates feature. Currently four task types are supported: 'Wireless Points Bulk Create', 'Wireless Points Bulk Update', 'Switches Bulk Create', 'Switches Bulk Update'.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId"></param>
        /// <returns>AutomaticLocationUpdatesTaskInfo</returns>
        public AutomaticLocationUpdatesTaskInfo ReadAutomaticLocationUpdatesTask (string accountId, string taskId)
        {
             ApiResponse<AutomaticLocationUpdatesTaskInfo> localVarResponse = ReadAutomaticLocationUpdatesTaskWithHttpInfo(accountId, taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Emergency Map Configuration Task Returns results of the task created within the frame of Automatic Location Updates feature. Currently four task types are supported: 'Wireless Points Bulk Create', 'Wireless Points Bulk Update', 'Switches Bulk Create', 'Switches Bulk Update'.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId"></param>
        /// <returns>ApiResponse of AutomaticLocationUpdatesTaskInfo</returns>
        public ApiResponse<AutomaticLocationUpdatesTaskInfo> ReadAutomaticLocationUpdatesTaskWithHttpInfo (string accountId, string taskId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->ReadAutomaticLocationUpdatesTask");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling AutomaticLocationUpdatesApi->ReadAutomaticLocationUpdatesTask");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/tasks/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadAutomaticLocationUpdatesTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutomaticLocationUpdatesTaskInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutomaticLocationUpdatesTaskInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutomaticLocationUpdatesTaskInfo)));
        }

        /// <summary>
        /// Get Emergency Map Configuration Task Returns results of the task created within the frame of Automatic Location Updates feature. Currently four task types are supported: 'Wireless Points Bulk Create', 'Wireless Points Bulk Update', 'Switches Bulk Create', 'Switches Bulk Update'.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AutomaticLocationUpdatesTaskInfo</returns>
        public async System.Threading.Tasks.Task<AutomaticLocationUpdatesTaskInfo> ReadAutomaticLocationUpdatesTaskAsync (string accountId, string taskId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AutomaticLocationUpdatesTaskInfo> localVarResponse = await ReadAutomaticLocationUpdatesTaskWithHttpInfoAsync(accountId, taskId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Emergency Map Configuration Task Returns results of the task created within the frame of Automatic Location Updates feature. Currently four task types are supported: 'Wireless Points Bulk Create', 'Wireless Points Bulk Update', 'Switches Bulk Create', 'Switches Bulk Update'.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AutomaticLocationUpdatesTaskInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AutomaticLocationUpdatesTaskInfo>> ReadAutomaticLocationUpdatesTaskWithHttpInfoAsync (string accountId, string taskId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->ReadAutomaticLocationUpdatesTask");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling AutomaticLocationUpdatesApi->ReadAutomaticLocationUpdatesTask");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/tasks/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadAutomaticLocationUpdatesTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutomaticLocationUpdatesTaskInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutomaticLocationUpdatesTaskInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutomaticLocationUpdatesTaskInfo)));
        }

        /// <summary>
        /// Get Emergency Location Returns emergency response location by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of the emergency location</param>
        /// <returns>EmergencyLocationInfo</returns>
        public EmergencyLocationInfo ReadEmergencyLocation (string accountId, string locationId)
        {
             ApiResponse<EmergencyLocationInfo> localVarResponse = ReadEmergencyLocationWithHttpInfo(accountId, locationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Emergency Location Returns emergency response location by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of the emergency location</param>
        /// <returns>ApiResponse of EmergencyLocationInfo</returns>
        public ApiResponse<EmergencyLocationInfo> ReadEmergencyLocationWithHttpInfo (string accountId, string locationId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->ReadEmergencyLocation");
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling AutomaticLocationUpdatesApi->ReadEmergencyLocation");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-locations/{locationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadEmergencyLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmergencyLocationInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmergencyLocationInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmergencyLocationInfo)));
        }

        /// <summary>
        /// Get Emergency Location Returns emergency response location by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of the emergency location</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EmergencyLocationInfo</returns>
        public async System.Threading.Tasks.Task<EmergencyLocationInfo> ReadEmergencyLocationAsync (string accountId, string locationId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EmergencyLocationInfo> localVarResponse = await ReadEmergencyLocationWithHttpInfoAsync(accountId, locationId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Emergency Location Returns emergency response location by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of the emergency location</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EmergencyLocationInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmergencyLocationInfo>> ReadEmergencyLocationWithHttpInfoAsync (string accountId, string locationId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->ReadEmergencyLocation");
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling AutomaticLocationUpdatesApi->ReadEmergencyLocation");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-locations/{locationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadEmergencyLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmergencyLocationInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmergencyLocationInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmergencyLocationInfo)));
        }

        /// <summary>
        /// Get Network Returns the specified network with emergency addresses assigned to the current account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="networkId"></param>
        /// <returns>NetworkInfo</returns>
        public NetworkInfo ReadNetwork (string accountId, string networkId)
        {
             ApiResponse<NetworkInfo> localVarResponse = ReadNetworkWithHttpInfo(accountId, networkId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Network Returns the specified network with emergency addresses assigned to the current account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="networkId"></param>
        /// <returns>ApiResponse of NetworkInfo</returns>
        public ApiResponse<NetworkInfo> ReadNetworkWithHttpInfo (string accountId, string networkId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->ReadNetwork");
            // verify the required parameter 'networkId' is set
            if (networkId == null)
                throw new ApiException(400, "Missing required parameter 'networkId' when calling AutomaticLocationUpdatesApi->ReadNetwork");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/networks/{networkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (networkId != null) localVarPathParams.Add("networkId", this.Configuration.ApiClient.ParameterToString(networkId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNetwork", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NetworkInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NetworkInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NetworkInfo)));
        }

        /// <summary>
        /// Get Network Returns the specified network with emergency addresses assigned to the current account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="networkId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of NetworkInfo</returns>
        public async System.Threading.Tasks.Task<NetworkInfo> ReadNetworkAsync (string accountId, string networkId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<NetworkInfo> localVarResponse = await ReadNetworkWithHttpInfoAsync(accountId, networkId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Network Returns the specified network with emergency addresses assigned to the current account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="networkId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (NetworkInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NetworkInfo>> ReadNetworkWithHttpInfoAsync (string accountId, string networkId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->ReadNetwork");
            // verify the required parameter 'networkId' is set
            if (networkId == null)
                throw new ApiException(400, "Missing required parameter 'networkId' when calling AutomaticLocationUpdatesApi->ReadNetwork");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/networks/{networkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (networkId != null) localVarPathParams.Add("networkId", this.Configuration.ApiClient.ParameterToString(networkId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNetwork", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NetworkInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NetworkInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NetworkInfo)));
        }

        /// <summary>
        /// Get Switch Returns the specified switch with the assigned emergency address.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="switchId"></param>
        /// <returns>SwitchInfo</returns>
        public SwitchInfo ReadSwitch (string accountId, string switchId)
        {
             ApiResponse<SwitchInfo> localVarResponse = ReadSwitchWithHttpInfo(accountId, switchId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Switch Returns the specified switch with the assigned emergency address.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="switchId"></param>
        /// <returns>ApiResponse of SwitchInfo</returns>
        public ApiResponse<SwitchInfo> ReadSwitchWithHttpInfo (string accountId, string switchId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->ReadSwitch");
            // verify the required parameter 'switchId' is set
            if (switchId == null)
                throw new ApiException(400, "Missing required parameter 'switchId' when calling AutomaticLocationUpdatesApi->ReadSwitch");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/switches/{switchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (switchId != null) localVarPathParams.Add("switchId", this.Configuration.ApiClient.ParameterToString(switchId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadSwitch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SwitchInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SwitchInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SwitchInfo)));
        }

        /// <summary>
        /// Get Switch Returns the specified switch with the assigned emergency address.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="switchId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SwitchInfo</returns>
        public async System.Threading.Tasks.Task<SwitchInfo> ReadSwitchAsync (string accountId, string switchId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SwitchInfo> localVarResponse = await ReadSwitchWithHttpInfoAsync(accountId, switchId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Switch Returns the specified switch with the assigned emergency address.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="switchId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SwitchInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SwitchInfo>> ReadSwitchWithHttpInfoAsync (string accountId, string switchId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->ReadSwitch");
            // verify the required parameter 'switchId' is set
            if (switchId == null)
                throw new ApiException(400, "Missing required parameter 'switchId' when calling AutomaticLocationUpdatesApi->ReadSwitch");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/switches/{switchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (switchId != null) localVarPathParams.Add("switchId", this.Configuration.ApiClient.ParameterToString(switchId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadSwitch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SwitchInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SwitchInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SwitchInfo)));
        }

        /// <summary>
        /// Get Wireless Point Returns the specified wireless access point of a corporate map with the emergency address assigned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="pointId"></param>
        /// <returns>WirelessPointInfo</returns>
        public WirelessPointInfo ReadWirelessPoint (string accountId, string pointId)
        {
             ApiResponse<WirelessPointInfo> localVarResponse = ReadWirelessPointWithHttpInfo(accountId, pointId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Wireless Point Returns the specified wireless access point of a corporate map with the emergency address assigned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="pointId"></param>
        /// <returns>ApiResponse of WirelessPointInfo</returns>
        public ApiResponse<WirelessPointInfo> ReadWirelessPointWithHttpInfo (string accountId, string pointId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->ReadWirelessPoint");
            // verify the required parameter 'pointId' is set
            if (pointId == null)
                throw new ApiException(400, "Missing required parameter 'pointId' when calling AutomaticLocationUpdatesApi->ReadWirelessPoint");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/wireless-points/{pointId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (pointId != null) localVarPathParams.Add("pointId", this.Configuration.ApiClient.ParameterToString(pointId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadWirelessPoint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WirelessPointInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WirelessPointInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WirelessPointInfo)));
        }

        /// <summary>
        /// Get Wireless Point Returns the specified wireless access point of a corporate map with the emergency address assigned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="pointId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WirelessPointInfo</returns>
        public async System.Threading.Tasks.Task<WirelessPointInfo> ReadWirelessPointAsync (string accountId, string pointId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<WirelessPointInfo> localVarResponse = await ReadWirelessPointWithHttpInfoAsync(accountId, pointId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Wireless Point Returns the specified wireless access point of a corporate map with the emergency address assigned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="pointId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WirelessPointInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WirelessPointInfo>> ReadWirelessPointWithHttpInfoAsync (string accountId, string pointId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->ReadWirelessPoint");
            // verify the required parameter 'pointId' is set
            if (pointId == null)
                throw new ApiException(400, "Missing required parameter 'pointId' when calling AutomaticLocationUpdatesApi->ReadWirelessPoint");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/wireless-points/{pointId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (pointId != null) localVarPathParams.Add("pointId", this.Configuration.ApiClient.ParameterToString(pointId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadWirelessPoint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WirelessPointInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WirelessPointInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WirelessPointInfo)));
        }

        /// <summary>
        /// Update Emergency Location Updates the specified emergency response location.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of the emergency location</param>
        /// <param name="emergencyLocationInfoRequest">JSON body</param>
        /// <returns>EmergencyLocationInfo</returns>
        public EmergencyLocationInfo UpdateEmergencyLocation (string accountId, string locationId, EmergencyLocationInfoRequest emergencyLocationInfoRequest)
        {
             ApiResponse<EmergencyLocationInfo> localVarResponse = UpdateEmergencyLocationWithHttpInfo(accountId, locationId, emergencyLocationInfoRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Emergency Location Updates the specified emergency response location.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of the emergency location</param>
        /// <param name="emergencyLocationInfoRequest">JSON body</param>
        /// <returns>ApiResponse of EmergencyLocationInfo</returns>
        public ApiResponse<EmergencyLocationInfo> UpdateEmergencyLocationWithHttpInfo (string accountId, string locationId, EmergencyLocationInfoRequest emergencyLocationInfoRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->UpdateEmergencyLocation");
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling AutomaticLocationUpdatesApi->UpdateEmergencyLocation");
            // verify the required parameter 'emergencyLocationInfoRequest' is set
            if (emergencyLocationInfoRequest == null)
                throw new ApiException(400, "Missing required parameter 'emergencyLocationInfoRequest' when calling AutomaticLocationUpdatesApi->UpdateEmergencyLocation");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-locations/{locationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (emergencyLocationInfoRequest != null && emergencyLocationInfoRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emergencyLocationInfoRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emergencyLocationInfoRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmergencyLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmergencyLocationInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmergencyLocationInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmergencyLocationInfo)));
        }

        /// <summary>
        /// Update Emergency Location Updates the specified emergency response location.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of the emergency location</param>
        /// <param name="emergencyLocationInfoRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EmergencyLocationInfo</returns>
        public async System.Threading.Tasks.Task<EmergencyLocationInfo> UpdateEmergencyLocationAsync (string accountId, string locationId, EmergencyLocationInfoRequest emergencyLocationInfoRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EmergencyLocationInfo> localVarResponse = await UpdateEmergencyLocationWithHttpInfoAsync(accountId, locationId, emergencyLocationInfoRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Emergency Location Updates the specified emergency response location.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of the emergency location</param>
        /// <param name="emergencyLocationInfoRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EmergencyLocationInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmergencyLocationInfo>> UpdateEmergencyLocationWithHttpInfoAsync (string accountId, string locationId, EmergencyLocationInfoRequest emergencyLocationInfoRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->UpdateEmergencyLocation");
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling AutomaticLocationUpdatesApi->UpdateEmergencyLocation");
            // verify the required parameter 'emergencyLocationInfoRequest' is set
            if (emergencyLocationInfoRequest == null)
                throw new ApiException(400, "Missing required parameter 'emergencyLocationInfoRequest' when calling AutomaticLocationUpdatesApi->UpdateEmergencyLocation");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-locations/{locationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (emergencyLocationInfoRequest != null && emergencyLocationInfoRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emergencyLocationInfoRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emergencyLocationInfoRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmergencyLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmergencyLocationInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmergencyLocationInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmergencyLocationInfo)));
        }

        /// <summary>
        /// Update User Emergency Location Updates a personal emergency response location by the current user or admin.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of an emergency response location to be deleted</param>
        /// <param name="emergencyLocationInfo"></param>
        /// <returns>EmergencyLocationInfo</returns>
        public EmergencyLocationInfo UpdateExtensionEmergencyLocation (string accountId, string extensionId, string locationId, EmergencyLocationInfo emergencyLocationInfo)
        {
             ApiResponse<EmergencyLocationInfo> localVarResponse = UpdateExtensionEmergencyLocationWithHttpInfo(accountId, extensionId, locationId, emergencyLocationInfo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update User Emergency Location Updates a personal emergency response location by the current user or admin.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of an emergency response location to be deleted</param>
        /// <param name="emergencyLocationInfo"></param>
        /// <returns>ApiResponse of EmergencyLocationInfo</returns>
        public ApiResponse<EmergencyLocationInfo> UpdateExtensionEmergencyLocationWithHttpInfo (string accountId, string extensionId, string locationId, EmergencyLocationInfo emergencyLocationInfo)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->UpdateExtensionEmergencyLocation");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling AutomaticLocationUpdatesApi->UpdateExtensionEmergencyLocation");
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling AutomaticLocationUpdatesApi->UpdateExtensionEmergencyLocation");
            // verify the required parameter 'emergencyLocationInfo' is set
            if (emergencyLocationInfo == null)
                throw new ApiException(400, "Missing required parameter 'emergencyLocationInfo' when calling AutomaticLocationUpdatesApi->UpdateExtensionEmergencyLocation");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/emergency-locations/{locationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (emergencyLocationInfo != null && emergencyLocationInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emergencyLocationInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emergencyLocationInfo; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateExtensionEmergencyLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmergencyLocationInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmergencyLocationInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmergencyLocationInfo)));
        }

        /// <summary>
        /// Update User Emergency Location Updates a personal emergency response location by the current user or admin.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of an emergency response location to be deleted</param>
        /// <param name="emergencyLocationInfo"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EmergencyLocationInfo</returns>
        public async System.Threading.Tasks.Task<EmergencyLocationInfo> UpdateExtensionEmergencyLocationAsync (string accountId, string extensionId, string locationId, EmergencyLocationInfo emergencyLocationInfo, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EmergencyLocationInfo> localVarResponse = await UpdateExtensionEmergencyLocationWithHttpInfoAsync(accountId, extensionId, locationId, emergencyLocationInfo, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update User Emergency Location Updates a personal emergency response location by the current user or admin.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="locationId">Internal identifier of an emergency response location to be deleted</param>
        /// <param name="emergencyLocationInfo"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EmergencyLocationInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmergencyLocationInfo>> UpdateExtensionEmergencyLocationWithHttpInfoAsync (string accountId, string extensionId, string locationId, EmergencyLocationInfo emergencyLocationInfo, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->UpdateExtensionEmergencyLocation");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling AutomaticLocationUpdatesApi->UpdateExtensionEmergencyLocation");
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling AutomaticLocationUpdatesApi->UpdateExtensionEmergencyLocation");
            // verify the required parameter 'emergencyLocationInfo' is set
            if (emergencyLocationInfo == null)
                throw new ApiException(400, "Missing required parameter 'emergencyLocationInfo' when calling AutomaticLocationUpdatesApi->UpdateExtensionEmergencyLocation");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/emergency-locations/{locationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (emergencyLocationInfo != null && emergencyLocationInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emergencyLocationInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emergencyLocationInfo; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateExtensionEmergencyLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmergencyLocationInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmergencyLocationInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmergencyLocationInfo)));
        }

        /// <summary>
        /// Update Multiple Switches Updates multiple switches in corporate map. The maximum number of switches per request is 10 000; limitation for account is 10 000.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="updateMultipleSwitchesRequest"></param>
        /// <returns>UpdateMultipleSwitchesResponse</returns>
        public UpdateMultipleSwitchesResponse UpdateMultipleSwitches (string accountId, UpdateMultipleSwitchesRequest updateMultipleSwitchesRequest)
        {
             ApiResponse<UpdateMultipleSwitchesResponse> localVarResponse = UpdateMultipleSwitchesWithHttpInfo(accountId, updateMultipleSwitchesRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Multiple Switches Updates multiple switches in corporate map. The maximum number of switches per request is 10 000; limitation for account is 10 000.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="updateMultipleSwitchesRequest"></param>
        /// <returns>ApiResponse of UpdateMultipleSwitchesResponse</returns>
        public ApiResponse<UpdateMultipleSwitchesResponse> UpdateMultipleSwitchesWithHttpInfo (string accountId, UpdateMultipleSwitchesRequest updateMultipleSwitchesRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->UpdateMultipleSwitches");
            // verify the required parameter 'updateMultipleSwitchesRequest' is set
            if (updateMultipleSwitchesRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateMultipleSwitchesRequest' when calling AutomaticLocationUpdatesApi->UpdateMultipleSwitches");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/switches-bulk-update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (updateMultipleSwitchesRequest != null && updateMultipleSwitchesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateMultipleSwitchesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateMultipleSwitchesRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMultipleSwitches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateMultipleSwitchesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateMultipleSwitchesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateMultipleSwitchesResponse)));
        }

        /// <summary>
        /// Update Multiple Switches Updates multiple switches in corporate map. The maximum number of switches per request is 10 000; limitation for account is 10 000.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="updateMultipleSwitchesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateMultipleSwitchesResponse</returns>
        public async System.Threading.Tasks.Task<UpdateMultipleSwitchesResponse> UpdateMultipleSwitchesAsync (string accountId, UpdateMultipleSwitchesRequest updateMultipleSwitchesRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UpdateMultipleSwitchesResponse> localVarResponse = await UpdateMultipleSwitchesWithHttpInfoAsync(accountId, updateMultipleSwitchesRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Multiple Switches Updates multiple switches in corporate map. The maximum number of switches per request is 10 000; limitation for account is 10 000.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="updateMultipleSwitchesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateMultipleSwitchesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateMultipleSwitchesResponse>> UpdateMultipleSwitchesWithHttpInfoAsync (string accountId, UpdateMultipleSwitchesRequest updateMultipleSwitchesRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->UpdateMultipleSwitches");
            // verify the required parameter 'updateMultipleSwitchesRequest' is set
            if (updateMultipleSwitchesRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateMultipleSwitchesRequest' when calling AutomaticLocationUpdatesApi->UpdateMultipleSwitches");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/switches-bulk-update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (updateMultipleSwitchesRequest != null && updateMultipleSwitchesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateMultipleSwitchesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateMultipleSwitchesRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMultipleSwitches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateMultipleSwitchesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateMultipleSwitchesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateMultipleSwitchesResponse)));
        }

        /// <summary>
        /// Update Multiple Wireless Points Updates wireless points in corporate map. The maximum number of wireless points per request is 10 000; limitation for account is 70 000.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="updateMultipleWirelessPointsRequest"></param>
        /// <returns>UpdateMultipleWirelessPointsResponse</returns>
        public UpdateMultipleWirelessPointsResponse UpdateMultipleWirelessPoints (string accountId, UpdateMultipleWirelessPointsRequest updateMultipleWirelessPointsRequest)
        {
             ApiResponse<UpdateMultipleWirelessPointsResponse> localVarResponse = UpdateMultipleWirelessPointsWithHttpInfo(accountId, updateMultipleWirelessPointsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Multiple Wireless Points Updates wireless points in corporate map. The maximum number of wireless points per request is 10 000; limitation for account is 70 000.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="updateMultipleWirelessPointsRequest"></param>
        /// <returns>ApiResponse of UpdateMultipleWirelessPointsResponse</returns>
        public ApiResponse<UpdateMultipleWirelessPointsResponse> UpdateMultipleWirelessPointsWithHttpInfo (string accountId, UpdateMultipleWirelessPointsRequest updateMultipleWirelessPointsRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->UpdateMultipleWirelessPoints");
            // verify the required parameter 'updateMultipleWirelessPointsRequest' is set
            if (updateMultipleWirelessPointsRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateMultipleWirelessPointsRequest' when calling AutomaticLocationUpdatesApi->UpdateMultipleWirelessPoints");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/wireless-points-bulk-update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (updateMultipleWirelessPointsRequest != null && updateMultipleWirelessPointsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateMultipleWirelessPointsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateMultipleWirelessPointsRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMultipleWirelessPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateMultipleWirelessPointsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateMultipleWirelessPointsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateMultipleWirelessPointsResponse)));
        }

        /// <summary>
        /// Update Multiple Wireless Points Updates wireless points in corporate map. The maximum number of wireless points per request is 10 000; limitation for account is 70 000.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="updateMultipleWirelessPointsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateMultipleWirelessPointsResponse</returns>
        public async System.Threading.Tasks.Task<UpdateMultipleWirelessPointsResponse> UpdateMultipleWirelessPointsAsync (string accountId, UpdateMultipleWirelessPointsRequest updateMultipleWirelessPointsRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UpdateMultipleWirelessPointsResponse> localVarResponse = await UpdateMultipleWirelessPointsWithHttpInfoAsync(accountId, updateMultipleWirelessPointsRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Multiple Wireless Points Updates wireless points in corporate map. The maximum number of wireless points per request is 10 000; limitation for account is 70 000.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="updateMultipleWirelessPointsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateMultipleWirelessPointsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateMultipleWirelessPointsResponse>> UpdateMultipleWirelessPointsWithHttpInfoAsync (string accountId, UpdateMultipleWirelessPointsRequest updateMultipleWirelessPointsRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->UpdateMultipleWirelessPoints");
            // verify the required parameter 'updateMultipleWirelessPointsRequest' is set
            if (updateMultipleWirelessPointsRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateMultipleWirelessPointsRequest' when calling AutomaticLocationUpdatesApi->UpdateMultipleWirelessPoints");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/wireless-points-bulk-update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (updateMultipleWirelessPointsRequest != null && updateMultipleWirelessPointsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateMultipleWirelessPointsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateMultipleWirelessPointsRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMultipleWirelessPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateMultipleWirelessPointsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateMultipleWirelessPointsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateMultipleWirelessPointsResponse)));
        }

        /// <summary>
        /// Update Network Updates network in corporate ethernet map for assignment of emergency addresses to network access points.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="networkId"></param>
        /// <param name="updateNetworkRequest"></param>
        /// <returns></returns>
        public void UpdateNetwork (string accountId, string networkId, UpdateNetworkRequest updateNetworkRequest)
        {
             UpdateNetworkWithHttpInfo(accountId, networkId, updateNetworkRequest);
        }

        /// <summary>
        /// Update Network Updates network in corporate ethernet map for assignment of emergency addresses to network access points.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="networkId"></param>
        /// <param name="updateNetworkRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateNetworkWithHttpInfo (string accountId, string networkId, UpdateNetworkRequest updateNetworkRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->UpdateNetwork");
            // verify the required parameter 'networkId' is set
            if (networkId == null)
                throw new ApiException(400, "Missing required parameter 'networkId' when calling AutomaticLocationUpdatesApi->UpdateNetwork");
            // verify the required parameter 'updateNetworkRequest' is set
            if (updateNetworkRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateNetworkRequest' when calling AutomaticLocationUpdatesApi->UpdateNetwork");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/networks/{networkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (networkId != null) localVarPathParams.Add("networkId", this.Configuration.ApiClient.ParameterToString(networkId)); // path parameter
            if (updateNetworkRequest != null && updateNetworkRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateNetworkRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateNetworkRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateNetwork", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update Network Updates network in corporate ethernet map for assignment of emergency addresses to network access points.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="networkId"></param>
        /// <param name="updateNetworkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateNetworkAsync (string accountId, string networkId, UpdateNetworkRequest updateNetworkRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             await UpdateNetworkWithHttpInfoAsync(accountId, networkId, updateNetworkRequest, cancellationToken);

        }

        /// <summary>
        /// Update Network Updates network in corporate ethernet map for assignment of emergency addresses to network access points.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="networkId"></param>
        /// <param name="updateNetworkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateNetworkWithHttpInfoAsync (string accountId, string networkId, UpdateNetworkRequest updateNetworkRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->UpdateNetwork");
            // verify the required parameter 'networkId' is set
            if (networkId == null)
                throw new ApiException(400, "Missing required parameter 'networkId' when calling AutomaticLocationUpdatesApi->UpdateNetwork");
            // verify the required parameter 'updateNetworkRequest' is set
            if (updateNetworkRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateNetworkRequest' when calling AutomaticLocationUpdatesApi->UpdateNetwork");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/networks/{networkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (networkId != null) localVarPathParams.Add("networkId", this.Configuration.ApiClient.ParameterToString(networkId)); // path parameter
            if (updateNetworkRequest != null && updateNetworkRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateNetworkRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateNetworkRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateNetwork", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update Switch Updates switch. Partial update is not supported, all switch parameters should be specified. If null value is received or parameter is missing, its value is removed.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="switchId"></param>
        /// <param name="updateSwitchInfo"></param>
        /// <returns>SwitchInfo</returns>
        public SwitchInfo UpdateSwitch (string accountId, string switchId, UpdateSwitchInfo updateSwitchInfo)
        {
             ApiResponse<SwitchInfo> localVarResponse = UpdateSwitchWithHttpInfo(accountId, switchId, updateSwitchInfo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Switch Updates switch. Partial update is not supported, all switch parameters should be specified. If null value is received or parameter is missing, its value is removed.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="switchId"></param>
        /// <param name="updateSwitchInfo"></param>
        /// <returns>ApiResponse of SwitchInfo</returns>
        public ApiResponse<SwitchInfo> UpdateSwitchWithHttpInfo (string accountId, string switchId, UpdateSwitchInfo updateSwitchInfo)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->UpdateSwitch");
            // verify the required parameter 'switchId' is set
            if (switchId == null)
                throw new ApiException(400, "Missing required parameter 'switchId' when calling AutomaticLocationUpdatesApi->UpdateSwitch");
            // verify the required parameter 'updateSwitchInfo' is set
            if (updateSwitchInfo == null)
                throw new ApiException(400, "Missing required parameter 'updateSwitchInfo' when calling AutomaticLocationUpdatesApi->UpdateSwitch");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/switches/{switchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (switchId != null) localVarPathParams.Add("switchId", this.Configuration.ApiClient.ParameterToString(switchId)); // path parameter
            if (updateSwitchInfo != null && updateSwitchInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateSwitchInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateSwitchInfo; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSwitch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SwitchInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SwitchInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SwitchInfo)));
        }

        /// <summary>
        /// Update Switch Updates switch. Partial update is not supported, all switch parameters should be specified. If null value is received or parameter is missing, its value is removed.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="switchId"></param>
        /// <param name="updateSwitchInfo"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SwitchInfo</returns>
        public async System.Threading.Tasks.Task<SwitchInfo> UpdateSwitchAsync (string accountId, string switchId, UpdateSwitchInfo updateSwitchInfo, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SwitchInfo> localVarResponse = await UpdateSwitchWithHttpInfoAsync(accountId, switchId, updateSwitchInfo, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Switch Updates switch. Partial update is not supported, all switch parameters should be specified. If null value is received or parameter is missing, its value is removed.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="switchId"></param>
        /// <param name="updateSwitchInfo"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SwitchInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SwitchInfo>> UpdateSwitchWithHttpInfoAsync (string accountId, string switchId, UpdateSwitchInfo updateSwitchInfo, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->UpdateSwitch");
            // verify the required parameter 'switchId' is set
            if (switchId == null)
                throw new ApiException(400, "Missing required parameter 'switchId' when calling AutomaticLocationUpdatesApi->UpdateSwitch");
            // verify the required parameter 'updateSwitchInfo' is set
            if (updateSwitchInfo == null)
                throw new ApiException(400, "Missing required parameter 'updateSwitchInfo' when calling AutomaticLocationUpdatesApi->UpdateSwitch");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/switches/{switchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (switchId != null) localVarPathParams.Add("switchId", this.Configuration.ApiClient.ParameterToString(switchId)); // path parameter
            if (updateSwitchInfo != null && updateSwitchInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateSwitchInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateSwitchInfo; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSwitch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SwitchInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SwitchInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SwitchInfo)));
        }

        /// <summary>
        /// Update Wireless Point Updates the specified wireless access point of a corporate map by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="pointId"></param>
        /// <param name="updateWirelessPoint"></param>
        /// <returns>WirelessPointInfo</returns>
        public WirelessPointInfo UpdateWirelessPoint (string accountId, string pointId, UpdateWirelessPoint updateWirelessPoint)
        {
             ApiResponse<WirelessPointInfo> localVarResponse = UpdateWirelessPointWithHttpInfo(accountId, pointId, updateWirelessPoint);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Wireless Point Updates the specified wireless access point of a corporate map by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="pointId"></param>
        /// <param name="updateWirelessPoint"></param>
        /// <returns>ApiResponse of WirelessPointInfo</returns>
        public ApiResponse<WirelessPointInfo> UpdateWirelessPointWithHttpInfo (string accountId, string pointId, UpdateWirelessPoint updateWirelessPoint)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->UpdateWirelessPoint");
            // verify the required parameter 'pointId' is set
            if (pointId == null)
                throw new ApiException(400, "Missing required parameter 'pointId' when calling AutomaticLocationUpdatesApi->UpdateWirelessPoint");
            // verify the required parameter 'updateWirelessPoint' is set
            if (updateWirelessPoint == null)
                throw new ApiException(400, "Missing required parameter 'updateWirelessPoint' when calling AutomaticLocationUpdatesApi->UpdateWirelessPoint");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/wireless-points/{pointId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (pointId != null) localVarPathParams.Add("pointId", this.Configuration.ApiClient.ParameterToString(pointId)); // path parameter
            if (updateWirelessPoint != null && updateWirelessPoint.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateWirelessPoint); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateWirelessPoint; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWirelessPoint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WirelessPointInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WirelessPointInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WirelessPointInfo)));
        }

        /// <summary>
        /// Update Wireless Point Updates the specified wireless access point of a corporate map by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="pointId"></param>
        /// <param name="updateWirelessPoint"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WirelessPointInfo</returns>
        public async System.Threading.Tasks.Task<WirelessPointInfo> UpdateWirelessPointAsync (string accountId, string pointId, UpdateWirelessPoint updateWirelessPoint, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<WirelessPointInfo> localVarResponse = await UpdateWirelessPointWithHttpInfoAsync(accountId, pointId, updateWirelessPoint, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Wireless Point Updates the specified wireless access point of a corporate map by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="pointId"></param>
        /// <param name="updateWirelessPoint"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WirelessPointInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WirelessPointInfo>> UpdateWirelessPointWithHttpInfoAsync (string accountId, string pointId, UpdateWirelessPoint updateWirelessPoint, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->UpdateWirelessPoint");
            // verify the required parameter 'pointId' is set
            if (pointId == null)
                throw new ApiException(400, "Missing required parameter 'pointId' when calling AutomaticLocationUpdatesApi->UpdateWirelessPoint");
            // verify the required parameter 'updateWirelessPoint' is set
            if (updateWirelessPoint == null)
                throw new ApiException(400, "Missing required parameter 'updateWirelessPoint' when calling AutomaticLocationUpdatesApi->UpdateWirelessPoint");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/wireless-points/{pointId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (pointId != null) localVarPathParams.Add("pointId", this.Configuration.ApiClient.ParameterToString(pointId)); // path parameter
            if (updateWirelessPoint != null && updateWirelessPoint.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateWirelessPoint); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateWirelessPoint; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWirelessPoint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WirelessPointInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WirelessPointInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WirelessPointInfo)));
        }

        /// <summary>
        /// Validate Multiple Switches Validates switches before creation or update. The maximum number of switches per request is 10 000.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="validateMultipleSwitchesRequest"></param>
        /// <returns>ValidateMultipleSwitchesResponse</returns>
        public ValidateMultipleSwitchesResponse ValidateMultipleSwitches (string accountId, ValidateMultipleSwitchesRequest validateMultipleSwitchesRequest)
        {
             ApiResponse<ValidateMultipleSwitchesResponse> localVarResponse = ValidateMultipleSwitchesWithHttpInfo(accountId, validateMultipleSwitchesRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validate Multiple Switches Validates switches before creation or update. The maximum number of switches per request is 10 000.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="validateMultipleSwitchesRequest"></param>
        /// <returns>ApiResponse of ValidateMultipleSwitchesResponse</returns>
        public ApiResponse<ValidateMultipleSwitchesResponse> ValidateMultipleSwitchesWithHttpInfo (string accountId, ValidateMultipleSwitchesRequest validateMultipleSwitchesRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->ValidateMultipleSwitches");
            // verify the required parameter 'validateMultipleSwitchesRequest' is set
            if (validateMultipleSwitchesRequest == null)
                throw new ApiException(400, "Missing required parameter 'validateMultipleSwitchesRequest' when calling AutomaticLocationUpdatesApi->ValidateMultipleSwitches");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/switches-bulk-validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (validateMultipleSwitchesRequest != null && validateMultipleSwitchesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(validateMultipleSwitchesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = validateMultipleSwitchesRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateMultipleSwitches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidateMultipleSwitchesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ValidateMultipleSwitchesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateMultipleSwitchesResponse)));
        }

        /// <summary>
        /// Validate Multiple Switches Validates switches before creation or update. The maximum number of switches per request is 10 000.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="validateMultipleSwitchesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ValidateMultipleSwitchesResponse</returns>
        public async System.Threading.Tasks.Task<ValidateMultipleSwitchesResponse> ValidateMultipleSwitchesAsync (string accountId, ValidateMultipleSwitchesRequest validateMultipleSwitchesRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ValidateMultipleSwitchesResponse> localVarResponse = await ValidateMultipleSwitchesWithHttpInfoAsync(accountId, validateMultipleSwitchesRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validate Multiple Switches Validates switches before creation or update. The maximum number of switches per request is 10 000.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="validateMultipleSwitchesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ValidateMultipleSwitchesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidateMultipleSwitchesResponse>> ValidateMultipleSwitchesWithHttpInfoAsync (string accountId, ValidateMultipleSwitchesRequest validateMultipleSwitchesRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->ValidateMultipleSwitches");
            // verify the required parameter 'validateMultipleSwitchesRequest' is set
            if (validateMultipleSwitchesRequest == null)
                throw new ApiException(400, "Missing required parameter 'validateMultipleSwitchesRequest' when calling AutomaticLocationUpdatesApi->ValidateMultipleSwitches");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/switches-bulk-validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (validateMultipleSwitchesRequest != null && validateMultipleSwitchesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(validateMultipleSwitchesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = validateMultipleSwitchesRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateMultipleSwitches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidateMultipleSwitchesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ValidateMultipleSwitchesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateMultipleSwitchesResponse)));
        }

        /// <summary>
        /// Validate Multiple Wireless Points Validates wireless points before creation or update. The maximum number of wireless points per request is 10 000.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="validateMultipleWirelessPointsRequest"></param>
        /// <returns>ValidateMultipleWirelessPointsResponse</returns>
        public ValidateMultipleWirelessPointsResponse ValidateMultipleWirelessPoints (string accountId, ValidateMultipleWirelessPointsRequest validateMultipleWirelessPointsRequest)
        {
             ApiResponse<ValidateMultipleWirelessPointsResponse> localVarResponse = ValidateMultipleWirelessPointsWithHttpInfo(accountId, validateMultipleWirelessPointsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validate Multiple Wireless Points Validates wireless points before creation or update. The maximum number of wireless points per request is 10 000.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="validateMultipleWirelessPointsRequest"></param>
        /// <returns>ApiResponse of ValidateMultipleWirelessPointsResponse</returns>
        public ApiResponse<ValidateMultipleWirelessPointsResponse> ValidateMultipleWirelessPointsWithHttpInfo (string accountId, ValidateMultipleWirelessPointsRequest validateMultipleWirelessPointsRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->ValidateMultipleWirelessPoints");
            // verify the required parameter 'validateMultipleWirelessPointsRequest' is set
            if (validateMultipleWirelessPointsRequest == null)
                throw new ApiException(400, "Missing required parameter 'validateMultipleWirelessPointsRequest' when calling AutomaticLocationUpdatesApi->ValidateMultipleWirelessPoints");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/wireless-points-bulk-validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (validateMultipleWirelessPointsRequest != null && validateMultipleWirelessPointsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(validateMultipleWirelessPointsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = validateMultipleWirelessPointsRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateMultipleWirelessPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidateMultipleWirelessPointsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ValidateMultipleWirelessPointsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateMultipleWirelessPointsResponse)));
        }

        /// <summary>
        /// Validate Multiple Wireless Points Validates wireless points before creation or update. The maximum number of wireless points per request is 10 000.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="validateMultipleWirelessPointsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ValidateMultipleWirelessPointsResponse</returns>
        public async System.Threading.Tasks.Task<ValidateMultipleWirelessPointsResponse> ValidateMultipleWirelessPointsAsync (string accountId, ValidateMultipleWirelessPointsRequest validateMultipleWirelessPointsRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ValidateMultipleWirelessPointsResponse> localVarResponse = await ValidateMultipleWirelessPointsWithHttpInfoAsync(accountId, validateMultipleWirelessPointsRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validate Multiple Wireless Points Validates wireless points before creation or update. The maximum number of wireless points per request is 10 000.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="validateMultipleWirelessPointsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ValidateMultipleWirelessPointsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidateMultipleWirelessPointsResponse>> ValidateMultipleWirelessPointsWithHttpInfoAsync (string accountId, ValidateMultipleWirelessPointsRequest validateMultipleWirelessPointsRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AutomaticLocationUpdatesApi->ValidateMultipleWirelessPoints");
            // verify the required parameter 'validateMultipleWirelessPointsRequest' is set
            if (validateMultipleWirelessPointsRequest == null)
                throw new ApiException(400, "Missing required parameter 'validateMultipleWirelessPointsRequest' when calling AutomaticLocationUpdatesApi->ValidateMultipleWirelessPoints");

            var localVarPath = "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/wireless-points-bulk-validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (validateMultipleWirelessPointsRequest != null && validateMultipleWirelessPointsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(validateMultipleWirelessPointsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = validateMultipleWirelessPointsRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateMultipleWirelessPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidateMultipleWirelessPointsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ValidateMultipleWirelessPointsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateMultipleWirelessPointsResponse)));
        }

    }
}
