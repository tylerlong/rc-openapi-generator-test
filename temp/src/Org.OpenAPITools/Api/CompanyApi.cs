/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICompanyApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Domestic Country List
        /// </summary>
        /// <remarks>
        /// Returns the list of domestic countries by contracted country and brand of the account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">Internal identifier of a brand</param>
        /// <param name="contractedCountryId">Internal identifier of a country</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <returns>GetCountryListResponse</returns>
        GetCountryListResponse ListDomesticCountries (string brandId, string contractedCountryId, int? page = default(int?), int? perPage = default(int?));

        /// <summary>
        /// Get Domestic Country List
        /// </summary>
        /// <remarks>
        /// Returns the list of domestic countries by contracted country and brand of the account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">Internal identifier of a brand</param>
        /// <param name="contractedCountryId">Internal identifier of a country</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <returns>ApiResponse of GetCountryListResponse</returns>
        ApiResponse<GetCountryListResponse> ListDomesticCountriesWithHttpInfo (string brandId, string contractedCountryId, int? page = default(int?), int? perPage = default(int?));
        /// <summary>
        /// Get Account Business Address
        /// </summary>
        /// <remarks>
        /// Returns business address of a company.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>AccountBusinessAddressResource</returns>
        AccountBusinessAddressResource ReadAccountBusinessAddress (string accountId);

        /// <summary>
        /// Get Account Business Address
        /// </summary>
        /// <remarks>
        /// Returns business address of a company.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of AccountBusinessAddressResource</returns>
        ApiResponse<AccountBusinessAddressResource> ReadAccountBusinessAddressWithHttpInfo (string accountId);
        /// <summary>
        /// Get Account Info
        /// </summary>
        /// <remarks>
        /// Returns basic information about a particular RingCentral customer account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>GetAccountInfoResponse</returns>
        GetAccountInfoResponse ReadAccountInfo (string accountId);

        /// <summary>
        /// Get Account Info
        /// </summary>
        /// <remarks>
        /// Returns basic information about a particular RingCentral customer account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of GetAccountInfoResponse</returns>
        ApiResponse<GetAccountInfoResponse> ReadAccountInfoWithHttpInfo (string accountId);
        /// <summary>
        /// Get Account Service Info
        /// </summary>
        /// <remarks>
        /// Returns the information about service plan, available features and limitations for a particular RingCentral customer account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>GetServiceInfoResponse</returns>
        GetServiceInfoResponse ReadAccountServiceInfo (string accountId);

        /// <summary>
        /// Get Account Service Info
        /// </summary>
        /// <remarks>
        /// Returns the information about service plan, available features and limitations for a particular RingCentral customer account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of GetServiceInfoResponse</returns>
        ApiResponse<GetServiceInfoResponse> ReadAccountServiceInfoWithHttpInfo (string accountId);
        /// <summary>
        /// Update Company Business Address
        /// </summary>
        /// <remarks>
        /// Updates the business address of a company that account is linked to. Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="modifyAccountBusinessAddressRequest">JSON body</param>
        /// <returns>AccountBusinessAddressResource</returns>
        AccountBusinessAddressResource UpdateAccountBusinessAddress (string accountId, ModifyAccountBusinessAddressRequest modifyAccountBusinessAddressRequest);

        /// <summary>
        /// Update Company Business Address
        /// </summary>
        /// <remarks>
        /// Updates the business address of a company that account is linked to. Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="modifyAccountBusinessAddressRequest">JSON body</param>
        /// <returns>ApiResponse of AccountBusinessAddressResource</returns>
        ApiResponse<AccountBusinessAddressResource> UpdateAccountBusinessAddressWithHttpInfo (string accountId, ModifyAccountBusinessAddressRequest modifyAccountBusinessAddressRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Domestic Country List
        /// </summary>
        /// <remarks>
        /// Returns the list of domestic countries by contracted country and brand of the account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">Internal identifier of a brand</param>
        /// <param name="contractedCountryId">Internal identifier of a country</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetCountryListResponse</returns>
        System.Threading.Tasks.Task<GetCountryListResponse> ListDomesticCountriesAsync (string brandId, string contractedCountryId, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Domestic Country List
        /// </summary>
        /// <remarks>
        /// Returns the list of domestic countries by contracted country and brand of the account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">Internal identifier of a brand</param>
        /// <param name="contractedCountryId">Internal identifier of a country</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetCountryListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCountryListResponse>> ListDomesticCountriesWithHttpInfoAsync (string brandId, string contractedCountryId, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Account Business Address
        /// </summary>
        /// <remarks>
        /// Returns business address of a company.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AccountBusinessAddressResource</returns>
        System.Threading.Tasks.Task<AccountBusinessAddressResource> ReadAccountBusinessAddressAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Account Business Address
        /// </summary>
        /// <remarks>
        /// Returns business address of a company.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AccountBusinessAddressResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountBusinessAddressResource>> ReadAccountBusinessAddressWithHttpInfoAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Account Info
        /// </summary>
        /// <remarks>
        /// Returns basic information about a particular RingCentral customer account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetAccountInfoResponse</returns>
        System.Threading.Tasks.Task<GetAccountInfoResponse> ReadAccountInfoAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Account Info
        /// </summary>
        /// <remarks>
        /// Returns basic information about a particular RingCentral customer account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetAccountInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAccountInfoResponse>> ReadAccountInfoWithHttpInfoAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Account Service Info
        /// </summary>
        /// <remarks>
        /// Returns the information about service plan, available features and limitations for a particular RingCentral customer account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetServiceInfoResponse</returns>
        System.Threading.Tasks.Task<GetServiceInfoResponse> ReadAccountServiceInfoAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Account Service Info
        /// </summary>
        /// <remarks>
        /// Returns the information about service plan, available features and limitations for a particular RingCentral customer account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetServiceInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetServiceInfoResponse>> ReadAccountServiceInfoWithHttpInfoAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Company Business Address
        /// </summary>
        /// <remarks>
        /// Updates the business address of a company that account is linked to. Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="modifyAccountBusinessAddressRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AccountBusinessAddressResource</returns>
        System.Threading.Tasks.Task<AccountBusinessAddressResource> UpdateAccountBusinessAddressAsync (string accountId, ModifyAccountBusinessAddressRequest modifyAccountBusinessAddressRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Company Business Address
        /// </summary>
        /// <remarks>
        /// Updates the business address of a company that account is linked to. Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="modifyAccountBusinessAddressRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AccountBusinessAddressResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountBusinessAddressResource>> UpdateAccountBusinessAddressWithHttpInfoAsync (string accountId, ModifyAccountBusinessAddressRequest modifyAccountBusinessAddressRequest, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CompanyApi : ICompanyApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CompanyApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyApi"/> class
        /// </summary>
        /// <returns></returns>
        public CompanyApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CompanyApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Domestic Country List Returns the list of domestic countries by contracted country and brand of the account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">Internal identifier of a brand</param>
        /// <param name="contractedCountryId">Internal identifier of a country</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <returns>GetCountryListResponse</returns>
        public GetCountryListResponse ListDomesticCountries (string brandId, string contractedCountryId, int? page = default(int?), int? perPage = default(int?))
        {
             ApiResponse<GetCountryListResponse> localVarResponse = ListDomesticCountriesWithHttpInfo(brandId, contractedCountryId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Domestic Country List Returns the list of domestic countries by contracted country and brand of the account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">Internal identifier of a brand</param>
        /// <param name="contractedCountryId">Internal identifier of a country</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <returns>ApiResponse of GetCountryListResponse</returns>
        public ApiResponse<GetCountryListResponse> ListDomesticCountriesWithHttpInfo (string brandId, string contractedCountryId, int? page = default(int?), int? perPage = default(int?))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling CompanyApi->ListDomesticCountries");
            // verify the required parameter 'contractedCountryId' is set
            if (contractedCountryId == null)
                throw new ApiException(400, "Missing required parameter 'contractedCountryId' when calling CompanyApi->ListDomesticCountries");

            var localVarPath = "/restapi/v1.0/dictionary/brand/{brandId}/contracted-country/{contractedCountryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (contractedCountryId != null) localVarPathParams.Add("contractedCountryId", this.Configuration.ApiClient.ParameterToString(contractedCountryId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDomesticCountries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCountryListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetCountryListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCountryListResponse)));
        }

        /// <summary>
        /// Get Domestic Country List Returns the list of domestic countries by contracted country and brand of the account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">Internal identifier of a brand</param>
        /// <param name="contractedCountryId">Internal identifier of a country</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetCountryListResponse</returns>
        public async System.Threading.Tasks.Task<GetCountryListResponse> ListDomesticCountriesAsync (string brandId, string contractedCountryId, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetCountryListResponse> localVarResponse = await ListDomesticCountriesWithHttpInfoAsync(brandId, contractedCountryId, page, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Domestic Country List Returns the list of domestic countries by contracted country and brand of the account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">Internal identifier of a brand</param>
        /// <param name="contractedCountryId">Internal identifier of a country</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetCountryListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCountryListResponse>> ListDomesticCountriesWithHttpInfoAsync (string brandId, string contractedCountryId, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling CompanyApi->ListDomesticCountries");
            // verify the required parameter 'contractedCountryId' is set
            if (contractedCountryId == null)
                throw new ApiException(400, "Missing required parameter 'contractedCountryId' when calling CompanyApi->ListDomesticCountries");

            var localVarPath = "/restapi/v1.0/dictionary/brand/{brandId}/contracted-country/{contractedCountryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (contractedCountryId != null) localVarPathParams.Add("contractedCountryId", this.Configuration.ApiClient.ParameterToString(contractedCountryId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDomesticCountries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCountryListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetCountryListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCountryListResponse)));
        }

        /// <summary>
        /// Get Account Business Address Returns business address of a company.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>AccountBusinessAddressResource</returns>
        public AccountBusinessAddressResource ReadAccountBusinessAddress (string accountId)
        {
             ApiResponse<AccountBusinessAddressResource> localVarResponse = ReadAccountBusinessAddressWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account Business Address Returns business address of a company.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of AccountBusinessAddressResource</returns>
        public ApiResponse<AccountBusinessAddressResource> ReadAccountBusinessAddressWithHttpInfo (string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CompanyApi->ReadAccountBusinessAddress");

            var localVarPath = "/restapi/v1.0/account/{accountId}/business-address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadAccountBusinessAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountBusinessAddressResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccountBusinessAddressResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountBusinessAddressResource)));
        }

        /// <summary>
        /// Get Account Business Address Returns business address of a company.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AccountBusinessAddressResource</returns>
        public async System.Threading.Tasks.Task<AccountBusinessAddressResource> ReadAccountBusinessAddressAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AccountBusinessAddressResource> localVarResponse = await ReadAccountBusinessAddressWithHttpInfoAsync(accountId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Account Business Address Returns business address of a company.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AccountBusinessAddressResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountBusinessAddressResource>> ReadAccountBusinessAddressWithHttpInfoAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CompanyApi->ReadAccountBusinessAddress");

            var localVarPath = "/restapi/v1.0/account/{accountId}/business-address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadAccountBusinessAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountBusinessAddressResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccountBusinessAddressResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountBusinessAddressResource)));
        }

        /// <summary>
        /// Get Account Info Returns basic information about a particular RingCentral customer account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>GetAccountInfoResponse</returns>
        public GetAccountInfoResponse ReadAccountInfo (string accountId)
        {
             ApiResponse<GetAccountInfoResponse> localVarResponse = ReadAccountInfoWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account Info Returns basic information about a particular RingCentral customer account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of GetAccountInfoResponse</returns>
        public ApiResponse<GetAccountInfoResponse> ReadAccountInfoWithHttpInfo (string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CompanyApi->ReadAccountInfo");

            var localVarPath = "/restapi/v1.0/account/{accountId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadAccountInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAccountInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetAccountInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAccountInfoResponse)));
        }

        /// <summary>
        /// Get Account Info Returns basic information about a particular RingCentral customer account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetAccountInfoResponse</returns>
        public async System.Threading.Tasks.Task<GetAccountInfoResponse> ReadAccountInfoAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetAccountInfoResponse> localVarResponse = await ReadAccountInfoWithHttpInfoAsync(accountId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Account Info Returns basic information about a particular RingCentral customer account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetAccountInfoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAccountInfoResponse>> ReadAccountInfoWithHttpInfoAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CompanyApi->ReadAccountInfo");

            var localVarPath = "/restapi/v1.0/account/{accountId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadAccountInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAccountInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetAccountInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAccountInfoResponse)));
        }

        /// <summary>
        /// Get Account Service Info Returns the information about service plan, available features and limitations for a particular RingCentral customer account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>GetServiceInfoResponse</returns>
        public GetServiceInfoResponse ReadAccountServiceInfo (string accountId)
        {
             ApiResponse<GetServiceInfoResponse> localVarResponse = ReadAccountServiceInfoWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account Service Info Returns the information about service plan, available features and limitations for a particular RingCentral customer account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of GetServiceInfoResponse</returns>
        public ApiResponse<GetServiceInfoResponse> ReadAccountServiceInfoWithHttpInfo (string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CompanyApi->ReadAccountServiceInfo");

            var localVarPath = "/restapi/v1.0/account/{accountId}/service-info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadAccountServiceInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetServiceInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetServiceInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetServiceInfoResponse)));
        }

        /// <summary>
        /// Get Account Service Info Returns the information about service plan, available features and limitations for a particular RingCentral customer account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetServiceInfoResponse</returns>
        public async System.Threading.Tasks.Task<GetServiceInfoResponse> ReadAccountServiceInfoAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetServiceInfoResponse> localVarResponse = await ReadAccountServiceInfoWithHttpInfoAsync(accountId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Account Service Info Returns the information about service plan, available features and limitations for a particular RingCentral customer account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetServiceInfoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetServiceInfoResponse>> ReadAccountServiceInfoWithHttpInfoAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CompanyApi->ReadAccountServiceInfo");

            var localVarPath = "/restapi/v1.0/account/{accountId}/service-info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadAccountServiceInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetServiceInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetServiceInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetServiceInfoResponse)));
        }

        /// <summary>
        /// Update Company Business Address Updates the business address of a company that account is linked to. Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="modifyAccountBusinessAddressRequest">JSON body</param>
        /// <returns>AccountBusinessAddressResource</returns>
        public AccountBusinessAddressResource UpdateAccountBusinessAddress (string accountId, ModifyAccountBusinessAddressRequest modifyAccountBusinessAddressRequest)
        {
             ApiResponse<AccountBusinessAddressResource> localVarResponse = UpdateAccountBusinessAddressWithHttpInfo(accountId, modifyAccountBusinessAddressRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Company Business Address Updates the business address of a company that account is linked to. Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="modifyAccountBusinessAddressRequest">JSON body</param>
        /// <returns>ApiResponse of AccountBusinessAddressResource</returns>
        public ApiResponse<AccountBusinessAddressResource> UpdateAccountBusinessAddressWithHttpInfo (string accountId, ModifyAccountBusinessAddressRequest modifyAccountBusinessAddressRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CompanyApi->UpdateAccountBusinessAddress");
            // verify the required parameter 'modifyAccountBusinessAddressRequest' is set
            if (modifyAccountBusinessAddressRequest == null)
                throw new ApiException(400, "Missing required parameter 'modifyAccountBusinessAddressRequest' when calling CompanyApi->UpdateAccountBusinessAddress");

            var localVarPath = "/restapi/v1.0/account/{accountId}/business-address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (modifyAccountBusinessAddressRequest != null && modifyAccountBusinessAddressRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(modifyAccountBusinessAddressRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modifyAccountBusinessAddressRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountBusinessAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountBusinessAddressResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccountBusinessAddressResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountBusinessAddressResource)));
        }

        /// <summary>
        /// Update Company Business Address Updates the business address of a company that account is linked to. Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="modifyAccountBusinessAddressRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AccountBusinessAddressResource</returns>
        public async System.Threading.Tasks.Task<AccountBusinessAddressResource> UpdateAccountBusinessAddressAsync (string accountId, ModifyAccountBusinessAddressRequest modifyAccountBusinessAddressRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AccountBusinessAddressResource> localVarResponse = await UpdateAccountBusinessAddressWithHttpInfoAsync(accountId, modifyAccountBusinessAddressRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Company Business Address Updates the business address of a company that account is linked to. Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="modifyAccountBusinessAddressRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AccountBusinessAddressResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountBusinessAddressResource>> UpdateAccountBusinessAddressWithHttpInfoAsync (string accountId, ModifyAccountBusinessAddressRequest modifyAccountBusinessAddressRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CompanyApi->UpdateAccountBusinessAddress");
            // verify the required parameter 'modifyAccountBusinessAddressRequest' is set
            if (modifyAccountBusinessAddressRequest == null)
                throw new ApiException(400, "Missing required parameter 'modifyAccountBusinessAddressRequest' when calling CompanyApi->UpdateAccountBusinessAddress");

            var localVarPath = "/restapi/v1.0/account/{accountId}/business-address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (modifyAccountBusinessAddressRequest != null && modifyAccountBusinessAddressRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(modifyAccountBusinessAddressRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modifyAccountBusinessAddressRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountBusinessAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountBusinessAddressResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccountBusinessAddressResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountBusinessAddressResource)));
        }

    }
}
