/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGreetingsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Company Greeting
        /// </summary>
        /// <remarks>
        /// Creates a custom company greeting.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="type">Type of a greeting, specifying the case when the greeting is played.</param>
        /// <param name="binary">Media file to upload</param>
        /// <param name="answeringRuleId">Internal identifier of an answering rule (optional)</param>
        /// <param name="languageId">Internal identifier of a language. See Get Language List (optional)</param>
        /// <returns>CustomCompanyGreetingInfo</returns>
        CustomCompanyGreetingInfo CreateCompanyGreeting (string accountId, string type, System.IO.Stream binary, string answeringRuleId = default(string), string languageId = default(string));

        /// <summary>
        /// Create Company Greeting
        /// </summary>
        /// <remarks>
        /// Creates a custom company greeting.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="type">Type of a greeting, specifying the case when the greeting is played.</param>
        /// <param name="binary">Media file to upload</param>
        /// <param name="answeringRuleId">Internal identifier of an answering rule (optional)</param>
        /// <param name="languageId">Internal identifier of a language. See Get Language List (optional)</param>
        /// <returns>ApiResponse of CustomCompanyGreetingInfo</returns>
        ApiResponse<CustomCompanyGreetingInfo> CreateCompanyGreetingWithHttpInfo (string accountId, string type, System.IO.Stream binary, string answeringRuleId = default(string), string languageId = default(string));
        /// <summary>
        /// Create Custom User Greeting
        /// </summary>
        /// <remarks>
        /// Creates custom greeting for an extension user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="type">Type of a greeting, specifying the case when the greeting is played.</param>
        /// <param name="binary">Media file to upload</param>
        /// <param name="apply">Specifies whether to apply an answering rule or not. If set to true then &#x60;answeringRule&#x60; parameter is mandatory. If set to false, then the answering rule is not applied even if specified (optional, default to true)</param>
        /// <param name="answeringRuleId">Internal identifier of an answering rule (optional)</param>
        /// <returns>CustomUserGreetingInfo</returns>
        CustomUserGreetingInfo CreateCustomUserGreeting (string accountId, string extensionId, string type, System.IO.Stream binary, bool? apply = default(bool?), string answeringRuleId = default(string));

        /// <summary>
        /// Create Custom User Greeting
        /// </summary>
        /// <remarks>
        /// Creates custom greeting for an extension user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="type">Type of a greeting, specifying the case when the greeting is played.</param>
        /// <param name="binary">Media file to upload</param>
        /// <param name="apply">Specifies whether to apply an answering rule or not. If set to true then &#x60;answeringRule&#x60; parameter is mandatory. If set to false, then the answering rule is not applied even if specified (optional, default to true)</param>
        /// <param name="answeringRuleId">Internal identifier of an answering rule (optional)</param>
        /// <returns>ApiResponse of CustomUserGreetingInfo</returns>
        ApiResponse<CustomUserGreetingInfo> CreateCustomUserGreetingWithHttpInfo (string accountId, string extensionId, string type, System.IO.Stream binary, bool? apply = default(bool?), string answeringRuleId = default(string));
        /// <summary>
        /// Get Standard Greeting List
        /// </summary>
        /// <remarks>
        /// Returns the list of predefined standard greetings. Custom greetings recorded by user are not returned in response to this request. See Get Extension Custom Greetings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted. (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items). (optional, default to 100)</param>
        /// <param name="type">Type of a greeting, specifying the case when the greeting is played (optional)</param>
        /// <param name="usageType">Usage type of a greeting, specifying if the greeting is applied for user extension or department (call queue) extension (optional)</param>
        /// <returns>DictionaryGreetingList</returns>
        DictionaryGreetingList ListStandardGreetings (int? page = default(int?), int? perPage = default(int?), string type = default(string), string usageType = default(string));

        /// <summary>
        /// Get Standard Greeting List
        /// </summary>
        /// <remarks>
        /// Returns the list of predefined standard greetings. Custom greetings recorded by user are not returned in response to this request. See Get Extension Custom Greetings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted. (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items). (optional, default to 100)</param>
        /// <param name="type">Type of a greeting, specifying the case when the greeting is played (optional)</param>
        /// <param name="usageType">Usage type of a greeting, specifying if the greeting is applied for user extension or department (call queue) extension (optional)</param>
        /// <returns>ApiResponse of DictionaryGreetingList</returns>
        ApiResponse<DictionaryGreetingList> ListStandardGreetingsWithHttpInfo (int? page = default(int?), int? perPage = default(int?), string type = default(string), string usageType = default(string));
        /// <summary>
        /// Get Custom Greeting
        /// </summary>
        /// <remarks>
        /// Returns a custom user greeting by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="greetingId">Internal identifier of a greeting</param>
        /// <returns>CustomUserGreetingInfo</returns>
        CustomUserGreetingInfo ReadCustomGreeting (string accountId, string extensionId, long greetingId);

        /// <summary>
        /// Get Custom Greeting
        /// </summary>
        /// <remarks>
        /// Returns a custom user greeting by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="greetingId">Internal identifier of a greeting</param>
        /// <returns>ApiResponse of CustomUserGreetingInfo</returns>
        ApiResponse<CustomUserGreetingInfo> ReadCustomGreetingWithHttpInfo (string accountId, string extensionId, long greetingId);
        /// <summary>
        /// Get Standard Greeting
        /// </summary>
        /// <remarks>
        /// Returns a standard greeting by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="greetingId"></param>
        /// <returns>DictionaryGreetingInfo</returns>
        DictionaryGreetingInfo ReadStandardGreeting (string greetingId);

        /// <summary>
        /// Get Standard Greeting
        /// </summary>
        /// <remarks>
        /// Returns a standard greeting by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="greetingId"></param>
        /// <returns>ApiResponse of DictionaryGreetingInfo</returns>
        ApiResponse<DictionaryGreetingInfo> ReadStandardGreetingWithHttpInfo (string greetingId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create Company Greeting
        /// </summary>
        /// <remarks>
        /// Creates a custom company greeting.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="type">Type of a greeting, specifying the case when the greeting is played.</param>
        /// <param name="binary">Media file to upload</param>
        /// <param name="answeringRuleId">Internal identifier of an answering rule (optional)</param>
        /// <param name="languageId">Internal identifier of a language. See Get Language List (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomCompanyGreetingInfo</returns>
        System.Threading.Tasks.Task<CustomCompanyGreetingInfo> CreateCompanyGreetingAsync (string accountId, string type, System.IO.Stream binary, string answeringRuleId = default(string), string languageId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Company Greeting
        /// </summary>
        /// <remarks>
        /// Creates a custom company greeting.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="type">Type of a greeting, specifying the case when the greeting is played.</param>
        /// <param name="binary">Media file to upload</param>
        /// <param name="answeringRuleId">Internal identifier of an answering rule (optional)</param>
        /// <param name="languageId">Internal identifier of a language. See Get Language List (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomCompanyGreetingInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomCompanyGreetingInfo>> CreateCompanyGreetingWithHttpInfoAsync (string accountId, string type, System.IO.Stream binary, string answeringRuleId = default(string), string languageId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create Custom User Greeting
        /// </summary>
        /// <remarks>
        /// Creates custom greeting for an extension user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="type">Type of a greeting, specifying the case when the greeting is played.</param>
        /// <param name="binary">Media file to upload</param>
        /// <param name="apply">Specifies whether to apply an answering rule or not. If set to true then &#x60;answeringRule&#x60; parameter is mandatory. If set to false, then the answering rule is not applied even if specified (optional, default to true)</param>
        /// <param name="answeringRuleId">Internal identifier of an answering rule (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomUserGreetingInfo</returns>
        System.Threading.Tasks.Task<CustomUserGreetingInfo> CreateCustomUserGreetingAsync (string accountId, string extensionId, string type, System.IO.Stream binary, bool? apply = default(bool?), string answeringRuleId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Custom User Greeting
        /// </summary>
        /// <remarks>
        /// Creates custom greeting for an extension user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="type">Type of a greeting, specifying the case when the greeting is played.</param>
        /// <param name="binary">Media file to upload</param>
        /// <param name="apply">Specifies whether to apply an answering rule or not. If set to true then &#x60;answeringRule&#x60; parameter is mandatory. If set to false, then the answering rule is not applied even if specified (optional, default to true)</param>
        /// <param name="answeringRuleId">Internal identifier of an answering rule (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomUserGreetingInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomUserGreetingInfo>> CreateCustomUserGreetingWithHttpInfoAsync (string accountId, string extensionId, string type, System.IO.Stream binary, bool? apply = default(bool?), string answeringRuleId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Standard Greeting List
        /// </summary>
        /// <remarks>
        /// Returns the list of predefined standard greetings. Custom greetings recorded by user are not returned in response to this request. See Get Extension Custom Greetings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted. (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items). (optional, default to 100)</param>
        /// <param name="type">Type of a greeting, specifying the case when the greeting is played (optional)</param>
        /// <param name="usageType">Usage type of a greeting, specifying if the greeting is applied for user extension or department (call queue) extension (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DictionaryGreetingList</returns>
        System.Threading.Tasks.Task<DictionaryGreetingList> ListStandardGreetingsAsync (int? page = default(int?), int? perPage = default(int?), string type = default(string), string usageType = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Standard Greeting List
        /// </summary>
        /// <remarks>
        /// Returns the list of predefined standard greetings. Custom greetings recorded by user are not returned in response to this request. See Get Extension Custom Greetings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted. (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items). (optional, default to 100)</param>
        /// <param name="type">Type of a greeting, specifying the case when the greeting is played (optional)</param>
        /// <param name="usageType">Usage type of a greeting, specifying if the greeting is applied for user extension or department (call queue) extension (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DictionaryGreetingList)</returns>
        System.Threading.Tasks.Task<ApiResponse<DictionaryGreetingList>> ListStandardGreetingsWithHttpInfoAsync (int? page = default(int?), int? perPage = default(int?), string type = default(string), string usageType = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Custom Greeting
        /// </summary>
        /// <remarks>
        /// Returns a custom user greeting by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="greetingId">Internal identifier of a greeting</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomUserGreetingInfo</returns>
        System.Threading.Tasks.Task<CustomUserGreetingInfo> ReadCustomGreetingAsync (string accountId, string extensionId, long greetingId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Custom Greeting
        /// </summary>
        /// <remarks>
        /// Returns a custom user greeting by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="greetingId">Internal identifier of a greeting</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomUserGreetingInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomUserGreetingInfo>> ReadCustomGreetingWithHttpInfoAsync (string accountId, string extensionId, long greetingId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Standard Greeting
        /// </summary>
        /// <remarks>
        /// Returns a standard greeting by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="greetingId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DictionaryGreetingInfo</returns>
        System.Threading.Tasks.Task<DictionaryGreetingInfo> ReadStandardGreetingAsync (string greetingId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Standard Greeting
        /// </summary>
        /// <remarks>
        /// Returns a standard greeting by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="greetingId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DictionaryGreetingInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<DictionaryGreetingInfo>> ReadStandardGreetingWithHttpInfoAsync (string greetingId, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GreetingsApi : IGreetingsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GreetingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GreetingsApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GreetingsApi"/> class
        /// </summary>
        /// <returns></returns>
        public GreetingsApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GreetingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GreetingsApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create Company Greeting Creates a custom company greeting.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="type">Type of a greeting, specifying the case when the greeting is played.</param>
        /// <param name="binary">Media file to upload</param>
        /// <param name="answeringRuleId">Internal identifier of an answering rule (optional)</param>
        /// <param name="languageId">Internal identifier of a language. See Get Language List (optional)</param>
        /// <returns>CustomCompanyGreetingInfo</returns>
        public CustomCompanyGreetingInfo CreateCompanyGreeting (string accountId, string type, System.IO.Stream binary, string answeringRuleId = default(string), string languageId = default(string))
        {
             ApiResponse<CustomCompanyGreetingInfo> localVarResponse = CreateCompanyGreetingWithHttpInfo(accountId, type, binary, answeringRuleId, languageId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Company Greeting Creates a custom company greeting.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="type">Type of a greeting, specifying the case when the greeting is played.</param>
        /// <param name="binary">Media file to upload</param>
        /// <param name="answeringRuleId">Internal identifier of an answering rule (optional)</param>
        /// <param name="languageId">Internal identifier of a language. See Get Language List (optional)</param>
        /// <returns>ApiResponse of CustomCompanyGreetingInfo</returns>
        public ApiResponse<CustomCompanyGreetingInfo> CreateCompanyGreetingWithHttpInfo (string accountId, string type, System.IO.Stream binary, string answeringRuleId = default(string), string languageId = default(string))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling GreetingsApi->CreateCompanyGreeting");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling GreetingsApi->CreateCompanyGreeting");
            // verify the required parameter 'binary' is set
            if (binary == null)
                throw new ApiException(400, "Missing required parameter 'binary' when calling GreetingsApi->CreateCompanyGreeting");

            var localVarPath = "/restapi/v1.0/account/{accountId}/greeting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/mixed", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (type != null) localVarFormParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (answeringRuleId != null) localVarFormParams.Add("answeringRuleId", this.Configuration.ApiClient.ParameterToString(answeringRuleId)); // form parameter
            if (languageId != null) localVarFormParams.Add("languageId", this.Configuration.ApiClient.ParameterToString(languageId)); // form parameter
            if (binary != null) localVarFileParams.Add("binary", this.Configuration.ApiClient.ParameterToFile("binary", binary));

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCompanyGreeting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomCompanyGreetingInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomCompanyGreetingInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomCompanyGreetingInfo)));
        }

        /// <summary>
        /// Create Company Greeting Creates a custom company greeting.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="type">Type of a greeting, specifying the case when the greeting is played.</param>
        /// <param name="binary">Media file to upload</param>
        /// <param name="answeringRuleId">Internal identifier of an answering rule (optional)</param>
        /// <param name="languageId">Internal identifier of a language. See Get Language List (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomCompanyGreetingInfo</returns>
        public async System.Threading.Tasks.Task<CustomCompanyGreetingInfo> CreateCompanyGreetingAsync (string accountId, string type, System.IO.Stream binary, string answeringRuleId = default(string), string languageId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CustomCompanyGreetingInfo> localVarResponse = await CreateCompanyGreetingWithHttpInfoAsync(accountId, type, binary, answeringRuleId, languageId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Company Greeting Creates a custom company greeting.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="type">Type of a greeting, specifying the case when the greeting is played.</param>
        /// <param name="binary">Media file to upload</param>
        /// <param name="answeringRuleId">Internal identifier of an answering rule (optional)</param>
        /// <param name="languageId">Internal identifier of a language. See Get Language List (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomCompanyGreetingInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomCompanyGreetingInfo>> CreateCompanyGreetingWithHttpInfoAsync (string accountId, string type, System.IO.Stream binary, string answeringRuleId = default(string), string languageId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling GreetingsApi->CreateCompanyGreeting");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling GreetingsApi->CreateCompanyGreeting");
            // verify the required parameter 'binary' is set
            if (binary == null)
                throw new ApiException(400, "Missing required parameter 'binary' when calling GreetingsApi->CreateCompanyGreeting");

            var localVarPath = "/restapi/v1.0/account/{accountId}/greeting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/mixed", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (type != null) localVarFormParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (answeringRuleId != null) localVarFormParams.Add("answeringRuleId", this.Configuration.ApiClient.ParameterToString(answeringRuleId)); // form parameter
            if (languageId != null) localVarFormParams.Add("languageId", this.Configuration.ApiClient.ParameterToString(languageId)); // form parameter
            if (binary != null) localVarFileParams.Add("binary", this.Configuration.ApiClient.ParameterToFile("binary", binary));

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCompanyGreeting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomCompanyGreetingInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomCompanyGreetingInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomCompanyGreetingInfo)));
        }

        /// <summary>
        /// Create Custom User Greeting Creates custom greeting for an extension user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="type">Type of a greeting, specifying the case when the greeting is played.</param>
        /// <param name="binary">Media file to upload</param>
        /// <param name="apply">Specifies whether to apply an answering rule or not. If set to true then &#x60;answeringRule&#x60; parameter is mandatory. If set to false, then the answering rule is not applied even if specified (optional, default to true)</param>
        /// <param name="answeringRuleId">Internal identifier of an answering rule (optional)</param>
        /// <returns>CustomUserGreetingInfo</returns>
        public CustomUserGreetingInfo CreateCustomUserGreeting (string accountId, string extensionId, string type, System.IO.Stream binary, bool? apply = default(bool?), string answeringRuleId = default(string))
        {
             ApiResponse<CustomUserGreetingInfo> localVarResponse = CreateCustomUserGreetingWithHttpInfo(accountId, extensionId, type, binary, apply, answeringRuleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Custom User Greeting Creates custom greeting for an extension user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="type">Type of a greeting, specifying the case when the greeting is played.</param>
        /// <param name="binary">Media file to upload</param>
        /// <param name="apply">Specifies whether to apply an answering rule or not. If set to true then &#x60;answeringRule&#x60; parameter is mandatory. If set to false, then the answering rule is not applied even if specified (optional, default to true)</param>
        /// <param name="answeringRuleId">Internal identifier of an answering rule (optional)</param>
        /// <returns>ApiResponse of CustomUserGreetingInfo</returns>
        public ApiResponse<CustomUserGreetingInfo> CreateCustomUserGreetingWithHttpInfo (string accountId, string extensionId, string type, System.IO.Stream binary, bool? apply = default(bool?), string answeringRuleId = default(string))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling GreetingsApi->CreateCustomUserGreeting");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling GreetingsApi->CreateCustomUserGreeting");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling GreetingsApi->CreateCustomUserGreeting");
            // verify the required parameter 'binary' is set
            if (binary == null)
                throw new ApiException(400, "Missing required parameter 'binary' when calling GreetingsApi->CreateCustomUserGreeting");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/greeting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/mixed", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (apply != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apply", apply)); // query parameter
            if (type != null) localVarFormParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (answeringRuleId != null) localVarFormParams.Add("answeringRuleId", this.Configuration.ApiClient.ParameterToString(answeringRuleId)); // form parameter
            if (binary != null) localVarFileParams.Add("binary", this.Configuration.ApiClient.ParameterToFile("binary", binary));

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomUserGreeting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomUserGreetingInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomUserGreetingInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomUserGreetingInfo)));
        }

        /// <summary>
        /// Create Custom User Greeting Creates custom greeting for an extension user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="type">Type of a greeting, specifying the case when the greeting is played.</param>
        /// <param name="binary">Media file to upload</param>
        /// <param name="apply">Specifies whether to apply an answering rule or not. If set to true then &#x60;answeringRule&#x60; parameter is mandatory. If set to false, then the answering rule is not applied even if specified (optional, default to true)</param>
        /// <param name="answeringRuleId">Internal identifier of an answering rule (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomUserGreetingInfo</returns>
        public async System.Threading.Tasks.Task<CustomUserGreetingInfo> CreateCustomUserGreetingAsync (string accountId, string extensionId, string type, System.IO.Stream binary, bool? apply = default(bool?), string answeringRuleId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CustomUserGreetingInfo> localVarResponse = await CreateCustomUserGreetingWithHttpInfoAsync(accountId, extensionId, type, binary, apply, answeringRuleId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Custom User Greeting Creates custom greeting for an extension user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="type">Type of a greeting, specifying the case when the greeting is played.</param>
        /// <param name="binary">Media file to upload</param>
        /// <param name="apply">Specifies whether to apply an answering rule or not. If set to true then &#x60;answeringRule&#x60; parameter is mandatory. If set to false, then the answering rule is not applied even if specified (optional, default to true)</param>
        /// <param name="answeringRuleId">Internal identifier of an answering rule (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomUserGreetingInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomUserGreetingInfo>> CreateCustomUserGreetingWithHttpInfoAsync (string accountId, string extensionId, string type, System.IO.Stream binary, bool? apply = default(bool?), string answeringRuleId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling GreetingsApi->CreateCustomUserGreeting");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling GreetingsApi->CreateCustomUserGreeting");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling GreetingsApi->CreateCustomUserGreeting");
            // verify the required parameter 'binary' is set
            if (binary == null)
                throw new ApiException(400, "Missing required parameter 'binary' when calling GreetingsApi->CreateCustomUserGreeting");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/greeting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/mixed", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (apply != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apply", apply)); // query parameter
            if (type != null) localVarFormParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (answeringRuleId != null) localVarFormParams.Add("answeringRuleId", this.Configuration.ApiClient.ParameterToString(answeringRuleId)); // form parameter
            if (binary != null) localVarFileParams.Add("binary", this.Configuration.ApiClient.ParameterToFile("binary", binary));

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomUserGreeting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomUserGreetingInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomUserGreetingInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomUserGreetingInfo)));
        }

        /// <summary>
        /// Get Standard Greeting List Returns the list of predefined standard greetings. Custom greetings recorded by user are not returned in response to this request. See Get Extension Custom Greetings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted. (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items). (optional, default to 100)</param>
        /// <param name="type">Type of a greeting, specifying the case when the greeting is played (optional)</param>
        /// <param name="usageType">Usage type of a greeting, specifying if the greeting is applied for user extension or department (call queue) extension (optional)</param>
        /// <returns>DictionaryGreetingList</returns>
        public DictionaryGreetingList ListStandardGreetings (int? page = default(int?), int? perPage = default(int?), string type = default(string), string usageType = default(string))
        {
             ApiResponse<DictionaryGreetingList> localVarResponse = ListStandardGreetingsWithHttpInfo(page, perPage, type, usageType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Standard Greeting List Returns the list of predefined standard greetings. Custom greetings recorded by user are not returned in response to this request. See Get Extension Custom Greetings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted. (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items). (optional, default to 100)</param>
        /// <param name="type">Type of a greeting, specifying the case when the greeting is played (optional)</param>
        /// <param name="usageType">Usage type of a greeting, specifying if the greeting is applied for user extension or department (call queue) extension (optional)</param>
        /// <returns>ApiResponse of DictionaryGreetingList</returns>
        public ApiResponse<DictionaryGreetingList> ListStandardGreetingsWithHttpInfo (int? page = default(int?), int? perPage = default(int?), string type = default(string), string usageType = default(string))
        {

            var localVarPath = "/restapi/v1.0/dictionary/greeting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (usageType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "usageType", usageType)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListStandardGreetings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DictionaryGreetingList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DictionaryGreetingList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DictionaryGreetingList)));
        }

        /// <summary>
        /// Get Standard Greeting List Returns the list of predefined standard greetings. Custom greetings recorded by user are not returned in response to this request. See Get Extension Custom Greetings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted. (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items). (optional, default to 100)</param>
        /// <param name="type">Type of a greeting, specifying the case when the greeting is played (optional)</param>
        /// <param name="usageType">Usage type of a greeting, specifying if the greeting is applied for user extension or department (call queue) extension (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DictionaryGreetingList</returns>
        public async System.Threading.Tasks.Task<DictionaryGreetingList> ListStandardGreetingsAsync (int? page = default(int?), int? perPage = default(int?), string type = default(string), string usageType = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DictionaryGreetingList> localVarResponse = await ListStandardGreetingsWithHttpInfoAsync(page, perPage, type, usageType, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Standard Greeting List Returns the list of predefined standard greetings. Custom greetings recorded by user are not returned in response to this request. See Get Extension Custom Greetings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted. (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items). (optional, default to 100)</param>
        /// <param name="type">Type of a greeting, specifying the case when the greeting is played (optional)</param>
        /// <param name="usageType">Usage type of a greeting, specifying if the greeting is applied for user extension or department (call queue) extension (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DictionaryGreetingList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DictionaryGreetingList>> ListStandardGreetingsWithHttpInfoAsync (int? page = default(int?), int? perPage = default(int?), string type = default(string), string usageType = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/restapi/v1.0/dictionary/greeting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (usageType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "usageType", usageType)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListStandardGreetings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DictionaryGreetingList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DictionaryGreetingList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DictionaryGreetingList)));
        }

        /// <summary>
        /// Get Custom Greeting Returns a custom user greeting by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="greetingId">Internal identifier of a greeting</param>
        /// <returns>CustomUserGreetingInfo</returns>
        public CustomUserGreetingInfo ReadCustomGreeting (string accountId, string extensionId, long greetingId)
        {
             ApiResponse<CustomUserGreetingInfo> localVarResponse = ReadCustomGreetingWithHttpInfo(accountId, extensionId, greetingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Custom Greeting Returns a custom user greeting by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="greetingId">Internal identifier of a greeting</param>
        /// <returns>ApiResponse of CustomUserGreetingInfo</returns>
        public ApiResponse<CustomUserGreetingInfo> ReadCustomGreetingWithHttpInfo (string accountId, string extensionId, long greetingId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling GreetingsApi->ReadCustomGreeting");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling GreetingsApi->ReadCustomGreeting");
            // verify the required parameter 'greetingId' is set
            if (greetingId == null)
                throw new ApiException(400, "Missing required parameter 'greetingId' when calling GreetingsApi->ReadCustomGreeting");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/greeting/{greetingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (greetingId != null) localVarPathParams.Add("greetingId", this.Configuration.ApiClient.ParameterToString(greetingId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadCustomGreeting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomUserGreetingInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomUserGreetingInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomUserGreetingInfo)));
        }

        /// <summary>
        /// Get Custom Greeting Returns a custom user greeting by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="greetingId">Internal identifier of a greeting</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomUserGreetingInfo</returns>
        public async System.Threading.Tasks.Task<CustomUserGreetingInfo> ReadCustomGreetingAsync (string accountId, string extensionId, long greetingId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CustomUserGreetingInfo> localVarResponse = await ReadCustomGreetingWithHttpInfoAsync(accountId, extensionId, greetingId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Custom Greeting Returns a custom user greeting by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="greetingId">Internal identifier of a greeting</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomUserGreetingInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomUserGreetingInfo>> ReadCustomGreetingWithHttpInfoAsync (string accountId, string extensionId, long greetingId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling GreetingsApi->ReadCustomGreeting");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling GreetingsApi->ReadCustomGreeting");
            // verify the required parameter 'greetingId' is set
            if (greetingId == null)
                throw new ApiException(400, "Missing required parameter 'greetingId' when calling GreetingsApi->ReadCustomGreeting");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/greeting/{greetingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (greetingId != null) localVarPathParams.Add("greetingId", this.Configuration.ApiClient.ParameterToString(greetingId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadCustomGreeting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomUserGreetingInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomUserGreetingInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomUserGreetingInfo)));
        }

        /// <summary>
        /// Get Standard Greeting Returns a standard greeting by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="greetingId"></param>
        /// <returns>DictionaryGreetingInfo</returns>
        public DictionaryGreetingInfo ReadStandardGreeting (string greetingId)
        {
             ApiResponse<DictionaryGreetingInfo> localVarResponse = ReadStandardGreetingWithHttpInfo(greetingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Standard Greeting Returns a standard greeting by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="greetingId"></param>
        /// <returns>ApiResponse of DictionaryGreetingInfo</returns>
        public ApiResponse<DictionaryGreetingInfo> ReadStandardGreetingWithHttpInfo (string greetingId)
        {
            // verify the required parameter 'greetingId' is set
            if (greetingId == null)
                throw new ApiException(400, "Missing required parameter 'greetingId' when calling GreetingsApi->ReadStandardGreeting");

            var localVarPath = "/restapi/v1.0/dictionary/greeting/{greetingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (greetingId != null) localVarPathParams.Add("greetingId", this.Configuration.ApiClient.ParameterToString(greetingId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadStandardGreeting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DictionaryGreetingInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DictionaryGreetingInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DictionaryGreetingInfo)));
        }

        /// <summary>
        /// Get Standard Greeting Returns a standard greeting by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="greetingId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DictionaryGreetingInfo</returns>
        public async System.Threading.Tasks.Task<DictionaryGreetingInfo> ReadStandardGreetingAsync (string greetingId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DictionaryGreetingInfo> localVarResponse = await ReadStandardGreetingWithHttpInfoAsync(greetingId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Standard Greeting Returns a standard greeting by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="greetingId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DictionaryGreetingInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DictionaryGreetingInfo>> ReadStandardGreetingWithHttpInfoAsync (string greetingId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'greetingId' is set
            if (greetingId == null)
                throw new ApiException(400, "Missing required parameter 'greetingId' when calling GreetingsApi->ReadStandardGreeting");

            var localVarPath = "/restapi/v1.0/dictionary/greeting/{greetingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (greetingId != null) localVarPathParams.Add("greetingId", this.Configuration.ApiClient.ParameterToString(greetingId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadStandardGreeting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DictionaryGreetingInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DictionaryGreetingInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DictionaryGreetingInfo)));
        }

    }
}
