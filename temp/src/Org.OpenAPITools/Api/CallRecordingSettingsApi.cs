/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICallRecordingSettingsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Call Recording Custom Greeting
        /// </summary>
        /// <remarks>
        /// Deletes call recording custom greeting(s).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="greetingId"></param>
        /// <returns></returns>
        void DeleteCallRecordingCustomGreeting (string accountId, string greetingId);

        /// <summary>
        /// Delete Call Recording Custom Greeting
        /// </summary>
        /// <remarks>
        /// Deletes call recording custom greeting(s).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="greetingId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCallRecordingCustomGreetingWithHttpInfo (string accountId, string greetingId);
        /// <summary>
        /// Delete Call Recording Custom Greeting List
        /// </summary>
        /// <remarks>
        /// Deletes call recording custom greetings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns></returns>
        void DeleteCallRecordingCustomGreetingList (string accountId);

        /// <summary>
        /// Delete Call Recording Custom Greeting List
        /// </summary>
        /// <remarks>
        /// Deletes call recording custom greetings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCallRecordingCustomGreetingListWithHttpInfo (string accountId);
        /// <summary>
        /// Get Call Recording Custom Greeting List
        /// </summary>
        /// <remarks>
        /// Returns call recording custom greetings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="type"> (optional)</param>
        /// <returns>CallRecordingCustomGreetings</returns>
        CallRecordingCustomGreetings ListCallRecordingCustomGreetings (string accountId, string type = default(string));

        /// <summary>
        /// Get Call Recording Custom Greeting List
        /// </summary>
        /// <remarks>
        /// Returns call recording custom greetings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="type"> (optional)</param>
        /// <returns>ApiResponse of CallRecordingCustomGreetings</returns>
        ApiResponse<CallRecordingCustomGreetings> ListCallRecordingCustomGreetingsWithHttpInfo (string accountId, string type = default(string));
        /// <summary>
        /// Get Call Recording Extension List
        /// </summary>
        /// <remarks>
        /// Returns the list of extensions to be recorded.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>CallRecordingExtensions</returns>
        CallRecordingExtensions ListCallRecordingExtensions (string accountId);

        /// <summary>
        /// Get Call Recording Extension List
        /// </summary>
        /// <remarks>
        /// Returns the list of extensions to be recorded.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of CallRecordingExtensions</returns>
        ApiResponse<CallRecordingExtensions> ListCallRecordingExtensionsWithHttpInfo (string accountId);
        /// <summary>
        /// Get Call Recording Settings
        /// </summary>
        /// <remarks>
        /// Returns call recording settings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <returns>CallRecordingSettingsResource</returns>
        CallRecordingSettingsResource ReadCallRecordingSettings (string accountId);

        /// <summary>
        /// Get Call Recording Settings
        /// </summary>
        /// <remarks>
        /// Returns call recording settings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <returns>ApiResponse of CallRecordingSettingsResource</returns>
        ApiResponse<CallRecordingSettingsResource> ReadCallRecordingSettingsWithHttpInfo (string accountId);
        /// <summary>
        /// Update Call Recording Extension List
        /// </summary>
        /// <remarks>
        /// Creates or updates the list of extensions to be recorded.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="bulkAccountCallRecordingsResource"></param>
        /// <returns></returns>
        void UpdateCallRecordingExtensionList (string accountId, BulkAccountCallRecordingsResource bulkAccountCallRecordingsResource);

        /// <summary>
        /// Update Call Recording Extension List
        /// </summary>
        /// <remarks>
        /// Creates or updates the list of extensions to be recorded.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="bulkAccountCallRecordingsResource"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateCallRecordingExtensionListWithHttpInfo (string accountId, BulkAccountCallRecordingsResource bulkAccountCallRecordingsResource);
        /// <summary>
        /// Update Call Recording Settings
        /// </summary>
        /// <remarks>
        /// Updates current call recording settings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="callRecordingSettingsResource"> (optional)</param>
        /// <returns>CallRecordingSettingsResource</returns>
        CallRecordingSettingsResource UpdateCallRecordingSettings (string accountId, CallRecordingSettingsResource callRecordingSettingsResource = default(CallRecordingSettingsResource));

        /// <summary>
        /// Update Call Recording Settings
        /// </summary>
        /// <remarks>
        /// Updates current call recording settings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="callRecordingSettingsResource"> (optional)</param>
        /// <returns>ApiResponse of CallRecordingSettingsResource</returns>
        ApiResponse<CallRecordingSettingsResource> UpdateCallRecordingSettingsWithHttpInfo (string accountId, CallRecordingSettingsResource callRecordingSettingsResource = default(CallRecordingSettingsResource));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete Call Recording Custom Greeting
        /// </summary>
        /// <remarks>
        /// Deletes call recording custom greeting(s).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="greetingId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCallRecordingCustomGreetingAsync (string accountId, string greetingId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Call Recording Custom Greeting
        /// </summary>
        /// <remarks>
        /// Deletes call recording custom greeting(s).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="greetingId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCallRecordingCustomGreetingWithHttpInfoAsync (string accountId, string greetingId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete Call Recording Custom Greeting List
        /// </summary>
        /// <remarks>
        /// Deletes call recording custom greetings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCallRecordingCustomGreetingListAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Call Recording Custom Greeting List
        /// </summary>
        /// <remarks>
        /// Deletes call recording custom greetings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCallRecordingCustomGreetingListWithHttpInfoAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Call Recording Custom Greeting List
        /// </summary>
        /// <remarks>
        /// Returns call recording custom greetings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="type"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallRecordingCustomGreetings</returns>
        System.Threading.Tasks.Task<CallRecordingCustomGreetings> ListCallRecordingCustomGreetingsAsync (string accountId, string type = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Call Recording Custom Greeting List
        /// </summary>
        /// <remarks>
        /// Returns call recording custom greetings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="type"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallRecordingCustomGreetings)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallRecordingCustomGreetings>> ListCallRecordingCustomGreetingsWithHttpInfoAsync (string accountId, string type = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Call Recording Extension List
        /// </summary>
        /// <remarks>
        /// Returns the list of extensions to be recorded.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallRecordingExtensions</returns>
        System.Threading.Tasks.Task<CallRecordingExtensions> ListCallRecordingExtensionsAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Call Recording Extension List
        /// </summary>
        /// <remarks>
        /// Returns the list of extensions to be recorded.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallRecordingExtensions)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallRecordingExtensions>> ListCallRecordingExtensionsWithHttpInfoAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Call Recording Settings
        /// </summary>
        /// <remarks>
        /// Returns call recording settings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallRecordingSettingsResource</returns>
        System.Threading.Tasks.Task<CallRecordingSettingsResource> ReadCallRecordingSettingsAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Call Recording Settings
        /// </summary>
        /// <remarks>
        /// Returns call recording settings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallRecordingSettingsResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallRecordingSettingsResource>> ReadCallRecordingSettingsWithHttpInfoAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Call Recording Extension List
        /// </summary>
        /// <remarks>
        /// Creates or updates the list of extensions to be recorded.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="bulkAccountCallRecordingsResource"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateCallRecordingExtensionListAsync (string accountId, BulkAccountCallRecordingsResource bulkAccountCallRecordingsResource, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Call Recording Extension List
        /// </summary>
        /// <remarks>
        /// Creates or updates the list of extensions to be recorded.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="bulkAccountCallRecordingsResource"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCallRecordingExtensionListWithHttpInfoAsync (string accountId, BulkAccountCallRecordingsResource bulkAccountCallRecordingsResource, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Call Recording Settings
        /// </summary>
        /// <remarks>
        /// Updates current call recording settings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="callRecordingSettingsResource"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallRecordingSettingsResource</returns>
        System.Threading.Tasks.Task<CallRecordingSettingsResource> UpdateCallRecordingSettingsAsync (string accountId, CallRecordingSettingsResource callRecordingSettingsResource = default(CallRecordingSettingsResource), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Call Recording Settings
        /// </summary>
        /// <remarks>
        /// Updates current call recording settings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="callRecordingSettingsResource"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallRecordingSettingsResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallRecordingSettingsResource>> UpdateCallRecordingSettingsWithHttpInfoAsync (string accountId, CallRecordingSettingsResource callRecordingSettingsResource = default(CallRecordingSettingsResource), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CallRecordingSettingsApi : ICallRecordingSettingsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CallRecordingSettingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CallRecordingSettingsApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallRecordingSettingsApi"/> class
        /// </summary>
        /// <returns></returns>
        public CallRecordingSettingsApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallRecordingSettingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CallRecordingSettingsApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete Call Recording Custom Greeting Deletes call recording custom greeting(s).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="greetingId"></param>
        /// <returns></returns>
        public void DeleteCallRecordingCustomGreeting (string accountId, string greetingId)
        {
             DeleteCallRecordingCustomGreetingWithHttpInfo(accountId, greetingId);
        }

        /// <summary>
        /// Delete Call Recording Custom Greeting Deletes call recording custom greeting(s).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="greetingId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCallRecordingCustomGreetingWithHttpInfo (string accountId, string greetingId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallRecordingSettingsApi->DeleteCallRecordingCustomGreeting");
            // verify the required parameter 'greetingId' is set
            if (greetingId == null)
                throw new ApiException(400, "Missing required parameter 'greetingId' when calling CallRecordingSettingsApi->DeleteCallRecordingCustomGreeting");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-recording/custom-greetings/{greetingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (greetingId != null) localVarPathParams.Add("greetingId", this.Configuration.ApiClient.ParameterToString(greetingId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCallRecordingCustomGreeting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Call Recording Custom Greeting Deletes call recording custom greeting(s).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="greetingId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCallRecordingCustomGreetingAsync (string accountId, string greetingId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteCallRecordingCustomGreetingWithHttpInfoAsync(accountId, greetingId, cancellationToken);

        }

        /// <summary>
        /// Delete Call Recording Custom Greeting Deletes call recording custom greeting(s).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="greetingId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCallRecordingCustomGreetingWithHttpInfoAsync (string accountId, string greetingId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallRecordingSettingsApi->DeleteCallRecordingCustomGreeting");
            // verify the required parameter 'greetingId' is set
            if (greetingId == null)
                throw new ApiException(400, "Missing required parameter 'greetingId' when calling CallRecordingSettingsApi->DeleteCallRecordingCustomGreeting");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-recording/custom-greetings/{greetingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (greetingId != null) localVarPathParams.Add("greetingId", this.Configuration.ApiClient.ParameterToString(greetingId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCallRecordingCustomGreeting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Call Recording Custom Greeting List Deletes call recording custom greetings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns></returns>
        public void DeleteCallRecordingCustomGreetingList (string accountId)
        {
             DeleteCallRecordingCustomGreetingListWithHttpInfo(accountId);
        }

        /// <summary>
        /// Delete Call Recording Custom Greeting List Deletes call recording custom greetings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCallRecordingCustomGreetingListWithHttpInfo (string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallRecordingSettingsApi->DeleteCallRecordingCustomGreetingList");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-recording/custom-greetings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCallRecordingCustomGreetingList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Call Recording Custom Greeting List Deletes call recording custom greetings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCallRecordingCustomGreetingListAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteCallRecordingCustomGreetingListWithHttpInfoAsync(accountId, cancellationToken);

        }

        /// <summary>
        /// Delete Call Recording Custom Greeting List Deletes call recording custom greetings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCallRecordingCustomGreetingListWithHttpInfoAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallRecordingSettingsApi->DeleteCallRecordingCustomGreetingList");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-recording/custom-greetings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCallRecordingCustomGreetingList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get Call Recording Custom Greeting List Returns call recording custom greetings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="type"> (optional)</param>
        /// <returns>CallRecordingCustomGreetings</returns>
        public CallRecordingCustomGreetings ListCallRecordingCustomGreetings (string accountId, string type = default(string))
        {
             ApiResponse<CallRecordingCustomGreetings> localVarResponse = ListCallRecordingCustomGreetingsWithHttpInfo(accountId, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Recording Custom Greeting List Returns call recording custom greetings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="type"> (optional)</param>
        /// <returns>ApiResponse of CallRecordingCustomGreetings</returns>
        public ApiResponse<CallRecordingCustomGreetings> ListCallRecordingCustomGreetingsWithHttpInfo (string accountId, string type = default(string))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallRecordingSettingsApi->ListCallRecordingCustomGreetings");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-recording/custom-greetings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCallRecordingCustomGreetings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallRecordingCustomGreetings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallRecordingCustomGreetings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallRecordingCustomGreetings)));
        }

        /// <summary>
        /// Get Call Recording Custom Greeting List Returns call recording custom greetings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="type"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallRecordingCustomGreetings</returns>
        public async System.Threading.Tasks.Task<CallRecordingCustomGreetings> ListCallRecordingCustomGreetingsAsync (string accountId, string type = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CallRecordingCustomGreetings> localVarResponse = await ListCallRecordingCustomGreetingsWithHttpInfoAsync(accountId, type, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Call Recording Custom Greeting List Returns call recording custom greetings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="type"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallRecordingCustomGreetings)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallRecordingCustomGreetings>> ListCallRecordingCustomGreetingsWithHttpInfoAsync (string accountId, string type = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallRecordingSettingsApi->ListCallRecordingCustomGreetings");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-recording/custom-greetings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCallRecordingCustomGreetings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallRecordingCustomGreetings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallRecordingCustomGreetings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallRecordingCustomGreetings)));
        }

        /// <summary>
        /// Get Call Recording Extension List Returns the list of extensions to be recorded.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>CallRecordingExtensions</returns>
        public CallRecordingExtensions ListCallRecordingExtensions (string accountId)
        {
             ApiResponse<CallRecordingExtensions> localVarResponse = ListCallRecordingExtensionsWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Recording Extension List Returns the list of extensions to be recorded.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of CallRecordingExtensions</returns>
        public ApiResponse<CallRecordingExtensions> ListCallRecordingExtensionsWithHttpInfo (string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallRecordingSettingsApi->ListCallRecordingExtensions");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-recording/extensions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCallRecordingExtensions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallRecordingExtensions>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallRecordingExtensions) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallRecordingExtensions)));
        }

        /// <summary>
        /// Get Call Recording Extension List Returns the list of extensions to be recorded.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallRecordingExtensions</returns>
        public async System.Threading.Tasks.Task<CallRecordingExtensions> ListCallRecordingExtensionsAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CallRecordingExtensions> localVarResponse = await ListCallRecordingExtensionsWithHttpInfoAsync(accountId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Call Recording Extension List Returns the list of extensions to be recorded.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallRecordingExtensions)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallRecordingExtensions>> ListCallRecordingExtensionsWithHttpInfoAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallRecordingSettingsApi->ListCallRecordingExtensions");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-recording/extensions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCallRecordingExtensions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallRecordingExtensions>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallRecordingExtensions) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallRecordingExtensions)));
        }

        /// <summary>
        /// Get Call Recording Settings Returns call recording settings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <returns>CallRecordingSettingsResource</returns>
        public CallRecordingSettingsResource ReadCallRecordingSettings (string accountId)
        {
             ApiResponse<CallRecordingSettingsResource> localVarResponse = ReadCallRecordingSettingsWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Recording Settings Returns call recording settings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <returns>ApiResponse of CallRecordingSettingsResource</returns>
        public ApiResponse<CallRecordingSettingsResource> ReadCallRecordingSettingsWithHttpInfo (string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallRecordingSettingsApi->ReadCallRecordingSettings");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-recording";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadCallRecordingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallRecordingSettingsResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallRecordingSettingsResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallRecordingSettingsResource)));
        }

        /// <summary>
        /// Get Call Recording Settings Returns call recording settings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallRecordingSettingsResource</returns>
        public async System.Threading.Tasks.Task<CallRecordingSettingsResource> ReadCallRecordingSettingsAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CallRecordingSettingsResource> localVarResponse = await ReadCallRecordingSettingsWithHttpInfoAsync(accountId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Call Recording Settings Returns call recording settings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallRecordingSettingsResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallRecordingSettingsResource>> ReadCallRecordingSettingsWithHttpInfoAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallRecordingSettingsApi->ReadCallRecordingSettings");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-recording";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadCallRecordingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallRecordingSettingsResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallRecordingSettingsResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallRecordingSettingsResource)));
        }

        /// <summary>
        /// Update Call Recording Extension List Creates or updates the list of extensions to be recorded.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="bulkAccountCallRecordingsResource"></param>
        /// <returns></returns>
        public void UpdateCallRecordingExtensionList (string accountId, BulkAccountCallRecordingsResource bulkAccountCallRecordingsResource)
        {
             UpdateCallRecordingExtensionListWithHttpInfo(accountId, bulkAccountCallRecordingsResource);
        }

        /// <summary>
        /// Update Call Recording Extension List Creates or updates the list of extensions to be recorded.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="bulkAccountCallRecordingsResource"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateCallRecordingExtensionListWithHttpInfo (string accountId, BulkAccountCallRecordingsResource bulkAccountCallRecordingsResource)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallRecordingSettingsApi->UpdateCallRecordingExtensionList");
            // verify the required parameter 'bulkAccountCallRecordingsResource' is set
            if (bulkAccountCallRecordingsResource == null)
                throw new ApiException(400, "Missing required parameter 'bulkAccountCallRecordingsResource' when calling CallRecordingSettingsApi->UpdateCallRecordingExtensionList");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-recording/bulk-assign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (bulkAccountCallRecordingsResource != null && bulkAccountCallRecordingsResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bulkAccountCallRecordingsResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bulkAccountCallRecordingsResource; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCallRecordingExtensionList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update Call Recording Extension List Creates or updates the list of extensions to be recorded.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="bulkAccountCallRecordingsResource"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateCallRecordingExtensionListAsync (string accountId, BulkAccountCallRecordingsResource bulkAccountCallRecordingsResource, CancellationToken cancellationToken = default(CancellationToken))
        {
             await UpdateCallRecordingExtensionListWithHttpInfoAsync(accountId, bulkAccountCallRecordingsResource, cancellationToken);

        }

        /// <summary>
        /// Update Call Recording Extension List Creates or updates the list of extensions to be recorded.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="bulkAccountCallRecordingsResource"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCallRecordingExtensionListWithHttpInfoAsync (string accountId, BulkAccountCallRecordingsResource bulkAccountCallRecordingsResource, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallRecordingSettingsApi->UpdateCallRecordingExtensionList");
            // verify the required parameter 'bulkAccountCallRecordingsResource' is set
            if (bulkAccountCallRecordingsResource == null)
                throw new ApiException(400, "Missing required parameter 'bulkAccountCallRecordingsResource' when calling CallRecordingSettingsApi->UpdateCallRecordingExtensionList");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-recording/bulk-assign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (bulkAccountCallRecordingsResource != null && bulkAccountCallRecordingsResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bulkAccountCallRecordingsResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bulkAccountCallRecordingsResource; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCallRecordingExtensionList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update Call Recording Settings Updates current call recording settings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="callRecordingSettingsResource"> (optional)</param>
        /// <returns>CallRecordingSettingsResource</returns>
        public CallRecordingSettingsResource UpdateCallRecordingSettings (string accountId, CallRecordingSettingsResource callRecordingSettingsResource = default(CallRecordingSettingsResource))
        {
             ApiResponse<CallRecordingSettingsResource> localVarResponse = UpdateCallRecordingSettingsWithHttpInfo(accountId, callRecordingSettingsResource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Call Recording Settings Updates current call recording settings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="callRecordingSettingsResource"> (optional)</param>
        /// <returns>ApiResponse of CallRecordingSettingsResource</returns>
        public ApiResponse<CallRecordingSettingsResource> UpdateCallRecordingSettingsWithHttpInfo (string accountId, CallRecordingSettingsResource callRecordingSettingsResource = default(CallRecordingSettingsResource))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallRecordingSettingsApi->UpdateCallRecordingSettings");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-recording";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (callRecordingSettingsResource != null && callRecordingSettingsResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(callRecordingSettingsResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = callRecordingSettingsResource; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCallRecordingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallRecordingSettingsResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallRecordingSettingsResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallRecordingSettingsResource)));
        }

        /// <summary>
        /// Update Call Recording Settings Updates current call recording settings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="callRecordingSettingsResource"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallRecordingSettingsResource</returns>
        public async System.Threading.Tasks.Task<CallRecordingSettingsResource> UpdateCallRecordingSettingsAsync (string accountId, CallRecordingSettingsResource callRecordingSettingsResource = default(CallRecordingSettingsResource), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CallRecordingSettingsResource> localVarResponse = await UpdateCallRecordingSettingsWithHttpInfoAsync(accountId, callRecordingSettingsResource, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Call Recording Settings Updates current call recording settings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="callRecordingSettingsResource"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallRecordingSettingsResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallRecordingSettingsResource>> UpdateCallRecordingSettingsWithHttpInfoAsync (string accountId, CallRecordingSettingsResource callRecordingSettingsResource = default(CallRecordingSettingsResource), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallRecordingSettingsApi->UpdateCallRecordingSettings");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-recording";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (callRecordingSettingsResource != null && callRecordingSettingsResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(callRecordingSettingsResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = callRecordingSettingsResource; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCallRecordingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallRecordingSettingsResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallRecordingSettingsResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallRecordingSettingsResource)));
        }

    }
}
