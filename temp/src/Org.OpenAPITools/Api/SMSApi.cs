/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISMSApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Send MMS
        /// </summary>
        /// <remarks>
        /// Creates and sends media messages. Sending MMS messages simultaneously to different recipients is limited up to 50 requests per minute; relevant for all client applications.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="from"></param>
        /// <param name="to">Message receiver(s) information. The &#x60;phoneNumber&#x60; value is required</param>
        /// <param name="attachments">Media file(s) to upload</param>
        /// <param name="text">Text of a message. Max length is 1000 symbols (2-byte UTF-16 encoded). If a character is encoded in 4 bytes in UTF-16 it is treated as 2 characters, thus restricting the maximum message length to 500 symbols (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <returns>GetSMSMessageInfoResponse</returns>
        GetSMSMessageInfoResponse CreateMMS (string accountId, string extensionId, MessageStoreCallerInfoRequest from, List<MessageStoreCallerInfoRequest> to, List<System.IO.Stream> attachments, string text = default(string), MessageCountryInfo country = default(MessageCountryInfo));

        /// <summary>
        /// Send MMS
        /// </summary>
        /// <remarks>
        /// Creates and sends media messages. Sending MMS messages simultaneously to different recipients is limited up to 50 requests per minute; relevant for all client applications.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="from"></param>
        /// <param name="to">Message receiver(s) information. The &#x60;phoneNumber&#x60; value is required</param>
        /// <param name="attachments">Media file(s) to upload</param>
        /// <param name="text">Text of a message. Max length is 1000 symbols (2-byte UTF-16 encoded). If a character is encoded in 4 bytes in UTF-16 it is treated as 2 characters, thus restricting the maximum message length to 500 symbols (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <returns>ApiResponse of GetSMSMessageInfoResponse</returns>
        ApiResponse<GetSMSMessageInfoResponse> CreateMMSWithHttpInfo (string accountId, string extensionId, MessageStoreCallerInfoRequest from, List<MessageStoreCallerInfoRequest> to, List<System.IO.Stream> attachments, string text = default(string), MessageCountryInfo country = default(MessageCountryInfo));
        /// <summary>
        /// Send SMS
        /// </summary>
        /// <remarks>
        /// Creates and sends a new text message. You can send SMS messages simultaneously to different recipients up to 40 requests per minute; this limitation is relevant for all client applications. Sending and receiving SMS is available for Toll-Free Numbers within the USA. You can send up to 10 attachments in one MMS message; the size of all attachments linked is limited to 1500000 bytes.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="createSMSMessage">JSON body</param>
        /// <returns>GetSMSMessageInfoResponse</returns>
        GetSMSMessageInfoResponse CreateSMSMessage (string accountId, string extensionId, CreateSMSMessage createSMSMessage);

        /// <summary>
        /// Send SMS
        /// </summary>
        /// <remarks>
        /// Creates and sends a new text message. You can send SMS messages simultaneously to different recipients up to 40 requests per minute; this limitation is relevant for all client applications. Sending and receiving SMS is available for Toll-Free Numbers within the USA. You can send up to 10 attachments in one MMS message; the size of all attachments linked is limited to 1500000 bytes.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="createSMSMessage">JSON body</param>
        /// <returns>ApiResponse of GetSMSMessageInfoResponse</returns>
        ApiResponse<GetSMSMessageInfoResponse> CreateSMSMessageWithHttpInfo (string accountId, string extensionId, CreateSMSMessage createSMSMessage);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Send MMS
        /// </summary>
        /// <remarks>
        /// Creates and sends media messages. Sending MMS messages simultaneously to different recipients is limited up to 50 requests per minute; relevant for all client applications.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="from"></param>
        /// <param name="to">Message receiver(s) information. The &#x60;phoneNumber&#x60; value is required</param>
        /// <param name="attachments">Media file(s) to upload</param>
        /// <param name="text">Text of a message. Max length is 1000 symbols (2-byte UTF-16 encoded). If a character is encoded in 4 bytes in UTF-16 it is treated as 2 characters, thus restricting the maximum message length to 500 symbols (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetSMSMessageInfoResponse</returns>
        System.Threading.Tasks.Task<GetSMSMessageInfoResponse> CreateMMSAsync (string accountId, string extensionId, MessageStoreCallerInfoRequest from, List<MessageStoreCallerInfoRequest> to, List<System.IO.Stream> attachments, string text = default(string), MessageCountryInfo country = default(MessageCountryInfo), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send MMS
        /// </summary>
        /// <remarks>
        /// Creates and sends media messages. Sending MMS messages simultaneously to different recipients is limited up to 50 requests per minute; relevant for all client applications.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="from"></param>
        /// <param name="to">Message receiver(s) information. The &#x60;phoneNumber&#x60; value is required</param>
        /// <param name="attachments">Media file(s) to upload</param>
        /// <param name="text">Text of a message. Max length is 1000 symbols (2-byte UTF-16 encoded). If a character is encoded in 4 bytes in UTF-16 it is treated as 2 characters, thus restricting the maximum message length to 500 symbols (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetSMSMessageInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSMSMessageInfoResponse>> CreateMMSWithHttpInfoAsync (string accountId, string extensionId, MessageStoreCallerInfoRequest from, List<MessageStoreCallerInfoRequest> to, List<System.IO.Stream> attachments, string text = default(string), MessageCountryInfo country = default(MessageCountryInfo), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send SMS
        /// </summary>
        /// <remarks>
        /// Creates and sends a new text message. You can send SMS messages simultaneously to different recipients up to 40 requests per minute; this limitation is relevant for all client applications. Sending and receiving SMS is available for Toll-Free Numbers within the USA. You can send up to 10 attachments in one MMS message; the size of all attachments linked is limited to 1500000 bytes.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="createSMSMessage">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetSMSMessageInfoResponse</returns>
        System.Threading.Tasks.Task<GetSMSMessageInfoResponse> CreateSMSMessageAsync (string accountId, string extensionId, CreateSMSMessage createSMSMessage, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send SMS
        /// </summary>
        /// <remarks>
        /// Creates and sends a new text message. You can send SMS messages simultaneously to different recipients up to 40 requests per minute; this limitation is relevant for all client applications. Sending and receiving SMS is available for Toll-Free Numbers within the USA. You can send up to 10 attachments in one MMS message; the size of all attachments linked is limited to 1500000 bytes.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="createSMSMessage">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetSMSMessageInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSMSMessageInfoResponse>> CreateSMSMessageWithHttpInfoAsync (string accountId, string extensionId, CreateSMSMessage createSMSMessage, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SMSApi : ISMSApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SMSApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SMSApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SMSApi"/> class
        /// </summary>
        /// <returns></returns>
        public SMSApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SMSApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SMSApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Send MMS Creates and sends media messages. Sending MMS messages simultaneously to different recipients is limited up to 50 requests per minute; relevant for all client applications.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="from"></param>
        /// <param name="to">Message receiver(s) information. The &#x60;phoneNumber&#x60; value is required</param>
        /// <param name="attachments">Media file(s) to upload</param>
        /// <param name="text">Text of a message. Max length is 1000 symbols (2-byte UTF-16 encoded). If a character is encoded in 4 bytes in UTF-16 it is treated as 2 characters, thus restricting the maximum message length to 500 symbols (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <returns>GetSMSMessageInfoResponse</returns>
        public GetSMSMessageInfoResponse CreateMMS (string accountId, string extensionId, MessageStoreCallerInfoRequest from, List<MessageStoreCallerInfoRequest> to, List<System.IO.Stream> attachments, string text = default(string), MessageCountryInfo country = default(MessageCountryInfo))
        {
             ApiResponse<GetSMSMessageInfoResponse> localVarResponse = CreateMMSWithHttpInfo(accountId, extensionId, from, to, attachments, text, country);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send MMS Creates and sends media messages. Sending MMS messages simultaneously to different recipients is limited up to 50 requests per minute; relevant for all client applications.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="from"></param>
        /// <param name="to">Message receiver(s) information. The &#x60;phoneNumber&#x60; value is required</param>
        /// <param name="attachments">Media file(s) to upload</param>
        /// <param name="text">Text of a message. Max length is 1000 symbols (2-byte UTF-16 encoded). If a character is encoded in 4 bytes in UTF-16 it is treated as 2 characters, thus restricting the maximum message length to 500 symbols (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <returns>ApiResponse of GetSMSMessageInfoResponse</returns>
        public ApiResponse<GetSMSMessageInfoResponse> CreateMMSWithHttpInfo (string accountId, string extensionId, MessageStoreCallerInfoRequest from, List<MessageStoreCallerInfoRequest> to, List<System.IO.Stream> attachments, string text = default(string), MessageCountryInfo country = default(MessageCountryInfo))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SMSApi->CreateMMS");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling SMSApi->CreateMMS");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling SMSApi->CreateMMS");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling SMSApi->CreateMMS");
            // verify the required parameter 'attachments' is set
            if (attachments == null)
                throw new ApiException(400, "Missing required parameter 'attachments' when calling SMSApi->CreateMMS");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/mms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/mixed", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (from != null) localVarFormParams.Add("from", this.Configuration.ApiClient.Serialize(from)); // form parameter
            if (to != null) localVarFormParams.Add("to", this.Configuration.ApiClient.Serialize(to)); // form parameter
            if (text != null) localVarFormParams.Add("text", this.Configuration.ApiClient.ParameterToString(text)); // form parameter
            if (country != null) localVarFormParams.Add("country", this.Configuration.ApiClient.Serialize(country)); // form parameter
            if (attachments != null) localVarFileParams.Add("attachments", this.Configuration.ApiClient.ParameterToFile("attachments", attachments));

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMMS", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSMSMessageInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetSMSMessageInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSMSMessageInfoResponse)));
        }

        /// <summary>
        /// Send MMS Creates and sends media messages. Sending MMS messages simultaneously to different recipients is limited up to 50 requests per minute; relevant for all client applications.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="from"></param>
        /// <param name="to">Message receiver(s) information. The &#x60;phoneNumber&#x60; value is required</param>
        /// <param name="attachments">Media file(s) to upload</param>
        /// <param name="text">Text of a message. Max length is 1000 symbols (2-byte UTF-16 encoded). If a character is encoded in 4 bytes in UTF-16 it is treated as 2 characters, thus restricting the maximum message length to 500 symbols (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetSMSMessageInfoResponse</returns>
        public async System.Threading.Tasks.Task<GetSMSMessageInfoResponse> CreateMMSAsync (string accountId, string extensionId, MessageStoreCallerInfoRequest from, List<MessageStoreCallerInfoRequest> to, List<System.IO.Stream> attachments, string text = default(string), MessageCountryInfo country = default(MessageCountryInfo), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetSMSMessageInfoResponse> localVarResponse = await CreateMMSWithHttpInfoAsync(accountId, extensionId, from, to, attachments, text, country, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send MMS Creates and sends media messages. Sending MMS messages simultaneously to different recipients is limited up to 50 requests per minute; relevant for all client applications.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="from"></param>
        /// <param name="to">Message receiver(s) information. The &#x60;phoneNumber&#x60; value is required</param>
        /// <param name="attachments">Media file(s) to upload</param>
        /// <param name="text">Text of a message. Max length is 1000 symbols (2-byte UTF-16 encoded). If a character is encoded in 4 bytes in UTF-16 it is treated as 2 characters, thus restricting the maximum message length to 500 symbols (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetSMSMessageInfoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSMSMessageInfoResponse>> CreateMMSWithHttpInfoAsync (string accountId, string extensionId, MessageStoreCallerInfoRequest from, List<MessageStoreCallerInfoRequest> to, List<System.IO.Stream> attachments, string text = default(string), MessageCountryInfo country = default(MessageCountryInfo), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SMSApi->CreateMMS");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling SMSApi->CreateMMS");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling SMSApi->CreateMMS");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling SMSApi->CreateMMS");
            // verify the required parameter 'attachments' is set
            if (attachments == null)
                throw new ApiException(400, "Missing required parameter 'attachments' when calling SMSApi->CreateMMS");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/mms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/mixed", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (from != null) localVarFormParams.Add("from", this.Configuration.ApiClient.Serialize(from)); // form parameter
            if (to != null) localVarFormParams.Add("to", this.Configuration.ApiClient.Serialize(to)); // form parameter
            if (text != null) localVarFormParams.Add("text", this.Configuration.ApiClient.ParameterToString(text)); // form parameter
            if (country != null) localVarFormParams.Add("country", this.Configuration.ApiClient.Serialize(country)); // form parameter
            if (attachments != null) localVarFileParams.Add("attachments", this.Configuration.ApiClient.ParameterToFile("attachments", attachments));

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMMS", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSMSMessageInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetSMSMessageInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSMSMessageInfoResponse)));
        }

        /// <summary>
        /// Send SMS Creates and sends a new text message. You can send SMS messages simultaneously to different recipients up to 40 requests per minute; this limitation is relevant for all client applications. Sending and receiving SMS is available for Toll-Free Numbers within the USA. You can send up to 10 attachments in one MMS message; the size of all attachments linked is limited to 1500000 bytes.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="createSMSMessage">JSON body</param>
        /// <returns>GetSMSMessageInfoResponse</returns>
        public GetSMSMessageInfoResponse CreateSMSMessage (string accountId, string extensionId, CreateSMSMessage createSMSMessage)
        {
             ApiResponse<GetSMSMessageInfoResponse> localVarResponse = CreateSMSMessageWithHttpInfo(accountId, extensionId, createSMSMessage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send SMS Creates and sends a new text message. You can send SMS messages simultaneously to different recipients up to 40 requests per minute; this limitation is relevant for all client applications. Sending and receiving SMS is available for Toll-Free Numbers within the USA. You can send up to 10 attachments in one MMS message; the size of all attachments linked is limited to 1500000 bytes.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="createSMSMessage">JSON body</param>
        /// <returns>ApiResponse of GetSMSMessageInfoResponse</returns>
        public ApiResponse<GetSMSMessageInfoResponse> CreateSMSMessageWithHttpInfo (string accountId, string extensionId, CreateSMSMessage createSMSMessage)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SMSApi->CreateSMSMessage");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling SMSApi->CreateSMSMessage");
            // verify the required parameter 'createSMSMessage' is set
            if (createSMSMessage == null)
                throw new ApiException(400, "Missing required parameter 'createSMSMessage' when calling SMSApi->CreateSMSMessage");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/sms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "multipart/mixed", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (createSMSMessage != null && createSMSMessage.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createSMSMessage); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createSMSMessage; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSMSMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSMSMessageInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetSMSMessageInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSMSMessageInfoResponse)));
        }

        /// <summary>
        /// Send SMS Creates and sends a new text message. You can send SMS messages simultaneously to different recipients up to 40 requests per minute; this limitation is relevant for all client applications. Sending and receiving SMS is available for Toll-Free Numbers within the USA. You can send up to 10 attachments in one MMS message; the size of all attachments linked is limited to 1500000 bytes.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="createSMSMessage">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetSMSMessageInfoResponse</returns>
        public async System.Threading.Tasks.Task<GetSMSMessageInfoResponse> CreateSMSMessageAsync (string accountId, string extensionId, CreateSMSMessage createSMSMessage, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetSMSMessageInfoResponse> localVarResponse = await CreateSMSMessageWithHttpInfoAsync(accountId, extensionId, createSMSMessage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send SMS Creates and sends a new text message. You can send SMS messages simultaneously to different recipients up to 40 requests per minute; this limitation is relevant for all client applications. Sending and receiving SMS is available for Toll-Free Numbers within the USA. You can send up to 10 attachments in one MMS message; the size of all attachments linked is limited to 1500000 bytes.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="createSMSMessage">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetSMSMessageInfoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSMSMessageInfoResponse>> CreateSMSMessageWithHttpInfoAsync (string accountId, string extensionId, CreateSMSMessage createSMSMessage, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SMSApi->CreateSMSMessage");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling SMSApi->CreateSMSMessage");
            // verify the required parameter 'createSMSMessage' is set
            if (createSMSMessage == null)
                throw new ApiException(400, "Missing required parameter 'createSMSMessage' when calling SMSApi->CreateSMSMessage");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/sms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "multipart/mixed", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (createSMSMessage != null && createSMSMessage.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createSMSMessage); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createSMSMessage; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSMSMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSMSMessageInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetSMSMessageInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSMSMessageInfoResponse)));
        }

    }
}
