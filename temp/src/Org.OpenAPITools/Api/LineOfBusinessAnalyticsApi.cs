/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILineOfBusinessAnalyticsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Aggregate Call Performance Data
        /// </summary>
        /// <remarks>
        /// Returns call performance aggregations filtered by parameters specified. This API is deprecated, and it will be disabled after September 8th. Please use [new version](https://developers.ringcentral.com/api-reference/Line-Of-Business-Analytics/analyticsCallsAggregationFetch) instead.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="analyticsLegacyPerformanceCallsAggregatesRequest"></param>
        /// <param name="page">The current page number (optional)</param>
        /// <param name="perPage">Number of records displayed on a page (optional)</param>
        /// <returns>AnalyticsLegacyPerformanceCallsAggregatesResponse</returns>
        [Obsolete]
        AnalyticsLegacyPerformanceCallsAggregatesResponse AggregatePerformanceReportCalls (string accountId, AnalyticsLegacyPerformanceCallsAggregatesRequest analyticsLegacyPerformanceCallsAggregatesRequest, int? page = default(int?), int? perPage = default(int?));

        /// <summary>
        /// Aggregate Call Performance Data
        /// </summary>
        /// <remarks>
        /// Returns call performance aggregations filtered by parameters specified. This API is deprecated, and it will be disabled after September 8th. Please use [new version](https://developers.ringcentral.com/api-reference/Line-Of-Business-Analytics/analyticsCallsAggregationFetch) instead.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="analyticsLegacyPerformanceCallsAggregatesRequest"></param>
        /// <param name="page">The current page number (optional)</param>
        /// <param name="perPage">Number of records displayed on a page (optional)</param>
        /// <returns>ApiResponse of AnalyticsLegacyPerformanceCallsAggregatesResponse</returns>
        [Obsolete]
        ApiResponse<AnalyticsLegacyPerformanceCallsAggregatesResponse> AggregatePerformanceReportCallsWithHttpInfo (string accountId, AnalyticsLegacyPerformanceCallsAggregatesRequest analyticsLegacyPerformanceCallsAggregatesRequest, int? page = default(int?), int? perPage = default(int?));
        /// <summary>
        /// Calls Aggregation Data
        /// </summary>
        /// <remarks>
        /// Returns call aggregations filtered by parameters specified
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="aggregationRequest"></param>
        /// <param name="page">The current page number (positive numbers only) (optional)</param>
        /// <param name="perPage">Number of records displayed on a page (positive numbers only, max value of 200) (optional)</param>
        /// <returns>AggregationResponse</returns>
        AggregationResponse AnalyticsCallsAggregationFetch (string accountId, AggregationRequest aggregationRequest, int? page = default(int?), int? perPage = default(int?));

        /// <summary>
        /// Calls Aggregation Data
        /// </summary>
        /// <remarks>
        /// Returns call aggregations filtered by parameters specified
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="aggregationRequest"></param>
        /// <param name="page">The current page number (positive numbers only) (optional)</param>
        /// <param name="perPage">Number of records displayed on a page (positive numbers only, max value of 200) (optional)</param>
        /// <returns>ApiResponse of AggregationResponse</returns>
        ApiResponse<AggregationResponse> AnalyticsCallsAggregationFetchWithHttpInfo (string accountId, AggregationRequest aggregationRequest, int? page = default(int?), int? perPage = default(int?));
        /// <summary>
        /// Calls Timeline Data
        /// </summary>
        /// <remarks>
        /// Returns time-value data aggregations filtered by parameters specified
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="interval">Aggregation interval</param>
        /// <param name="timelineRequest"></param>
        /// <param name="page">The current page number (positive numbers only) (optional)</param>
        /// <param name="perPage">Number of records displayed on a page (positive numbers only, max value of 20) (optional)</param>
        /// <returns>TimelineResponse</returns>
        TimelineResponse AnalyticsCallsTimelineFetch (string accountId, Interval interval, TimelineRequest timelineRequest, int? page = default(int?), int? perPage = default(int?));

        /// <summary>
        /// Calls Timeline Data
        /// </summary>
        /// <remarks>
        /// Returns time-value data aggregations filtered by parameters specified
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="interval">Aggregation interval</param>
        /// <param name="timelineRequest"></param>
        /// <param name="page">The current page number (positive numbers only) (optional)</param>
        /// <param name="perPage">Number of records displayed on a page (positive numbers only, max value of 20) (optional)</param>
        /// <returns>ApiResponse of TimelineResponse</returns>
        ApiResponse<TimelineResponse> AnalyticsCallsTimelineFetchWithHttpInfo (string accountId, Interval interval, TimelineRequest timelineRequest, int? page = default(int?), int? perPage = default(int?));
        /// <summary>
        /// Timeline Call Performance Data
        /// </summary>
        /// <remarks>
        /// Returns time-value data aggregations filtered by parameters specified. This API is deprecated, and it will be disabled after September 8th. Please use [new version](https://developers.ringcentral.com/api-reference/Line-Of-Business-Analytics/analyticsCallsTimelineFetch) instead.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="interval">Aggregation interval</param>
        /// <param name="analyticsLegacyPerformanceCallsTimelineRequest"></param>
        /// <returns>AnalyticsLegacyPerformanceCallsTimelineResponse</returns>
        [Obsolete]
        AnalyticsLegacyPerformanceCallsTimelineResponse PerformanceReportCallsTimeline (string accountId, AnalyticsLegacyInterval interval, AnalyticsLegacyPerformanceCallsTimelineRequest analyticsLegacyPerformanceCallsTimelineRequest);

        /// <summary>
        /// Timeline Call Performance Data
        /// </summary>
        /// <remarks>
        /// Returns time-value data aggregations filtered by parameters specified. This API is deprecated, and it will be disabled after September 8th. Please use [new version](https://developers.ringcentral.com/api-reference/Line-Of-Business-Analytics/analyticsCallsTimelineFetch) instead.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="interval">Aggregation interval</param>
        /// <param name="analyticsLegacyPerformanceCallsTimelineRequest"></param>
        /// <returns>ApiResponse of AnalyticsLegacyPerformanceCallsTimelineResponse</returns>
        [Obsolete]
        ApiResponse<AnalyticsLegacyPerformanceCallsTimelineResponse> PerformanceReportCallsTimelineWithHttpInfo (string accountId, AnalyticsLegacyInterval interval, AnalyticsLegacyPerformanceCallsTimelineRequest analyticsLegacyPerformanceCallsTimelineRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Aggregate Call Performance Data
        /// </summary>
        /// <remarks>
        /// Returns call performance aggregations filtered by parameters specified. This API is deprecated, and it will be disabled after September 8th. Please use [new version](https://developers.ringcentral.com/api-reference/Line-Of-Business-Analytics/analyticsCallsAggregationFetch) instead.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="analyticsLegacyPerformanceCallsAggregatesRequest"></param>
        /// <param name="page">The current page number (optional)</param>
        /// <param name="perPage">Number of records displayed on a page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AnalyticsLegacyPerformanceCallsAggregatesResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<AnalyticsLegacyPerformanceCallsAggregatesResponse> AggregatePerformanceReportCallsAsync (string accountId, AnalyticsLegacyPerformanceCallsAggregatesRequest analyticsLegacyPerformanceCallsAggregatesRequest, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Aggregate Call Performance Data
        /// </summary>
        /// <remarks>
        /// Returns call performance aggregations filtered by parameters specified. This API is deprecated, and it will be disabled after September 8th. Please use [new version](https://developers.ringcentral.com/api-reference/Line-Of-Business-Analytics/analyticsCallsAggregationFetch) instead.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="analyticsLegacyPerformanceCallsAggregatesRequest"></param>
        /// <param name="page">The current page number (optional)</param>
        /// <param name="perPage">Number of records displayed on a page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AnalyticsLegacyPerformanceCallsAggregatesResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<AnalyticsLegacyPerformanceCallsAggregatesResponse>> AggregatePerformanceReportCallsWithHttpInfoAsync (string accountId, AnalyticsLegacyPerformanceCallsAggregatesRequest analyticsLegacyPerformanceCallsAggregatesRequest, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Calls Aggregation Data
        /// </summary>
        /// <remarks>
        /// Returns call aggregations filtered by parameters specified
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="aggregationRequest"></param>
        /// <param name="page">The current page number (positive numbers only) (optional)</param>
        /// <param name="perPage">Number of records displayed on a page (positive numbers only, max value of 200) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AggregationResponse</returns>
        System.Threading.Tasks.Task<AggregationResponse> AnalyticsCallsAggregationFetchAsync (string accountId, AggregationRequest aggregationRequest, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Calls Aggregation Data
        /// </summary>
        /// <remarks>
        /// Returns call aggregations filtered by parameters specified
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="aggregationRequest"></param>
        /// <param name="page">The current page number (positive numbers only) (optional)</param>
        /// <param name="perPage">Number of records displayed on a page (positive numbers only, max value of 200) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AggregationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AggregationResponse>> AnalyticsCallsAggregationFetchWithHttpInfoAsync (string accountId, AggregationRequest aggregationRequest, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Calls Timeline Data
        /// </summary>
        /// <remarks>
        /// Returns time-value data aggregations filtered by parameters specified
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="interval">Aggregation interval</param>
        /// <param name="timelineRequest"></param>
        /// <param name="page">The current page number (positive numbers only) (optional)</param>
        /// <param name="perPage">Number of records displayed on a page (positive numbers only, max value of 20) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TimelineResponse</returns>
        System.Threading.Tasks.Task<TimelineResponse> AnalyticsCallsTimelineFetchAsync (string accountId, Interval interval, TimelineRequest timelineRequest, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Calls Timeline Data
        /// </summary>
        /// <remarks>
        /// Returns time-value data aggregations filtered by parameters specified
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="interval">Aggregation interval</param>
        /// <param name="timelineRequest"></param>
        /// <param name="page">The current page number (positive numbers only) (optional)</param>
        /// <param name="perPage">Number of records displayed on a page (positive numbers only, max value of 20) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TimelineResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimelineResponse>> AnalyticsCallsTimelineFetchWithHttpInfoAsync (string accountId, Interval interval, TimelineRequest timelineRequest, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Timeline Call Performance Data
        /// </summary>
        /// <remarks>
        /// Returns time-value data aggregations filtered by parameters specified. This API is deprecated, and it will be disabled after September 8th. Please use [new version](https://developers.ringcentral.com/api-reference/Line-Of-Business-Analytics/analyticsCallsTimelineFetch) instead.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="interval">Aggregation interval</param>
        /// <param name="analyticsLegacyPerformanceCallsTimelineRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AnalyticsLegacyPerformanceCallsTimelineResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<AnalyticsLegacyPerformanceCallsTimelineResponse> PerformanceReportCallsTimelineAsync (string accountId, AnalyticsLegacyInterval interval, AnalyticsLegacyPerformanceCallsTimelineRequest analyticsLegacyPerformanceCallsTimelineRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Timeline Call Performance Data
        /// </summary>
        /// <remarks>
        /// Returns time-value data aggregations filtered by parameters specified. This API is deprecated, and it will be disabled after September 8th. Please use [new version](https://developers.ringcentral.com/api-reference/Line-Of-Business-Analytics/analyticsCallsTimelineFetch) instead.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="interval">Aggregation interval</param>
        /// <param name="analyticsLegacyPerformanceCallsTimelineRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AnalyticsLegacyPerformanceCallsTimelineResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<AnalyticsLegacyPerformanceCallsTimelineResponse>> PerformanceReportCallsTimelineWithHttpInfoAsync (string accountId, AnalyticsLegacyInterval interval, AnalyticsLegacyPerformanceCallsTimelineRequest analyticsLegacyPerformanceCallsTimelineRequest, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LineOfBusinessAnalyticsApi : ILineOfBusinessAnalyticsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LineOfBusinessAnalyticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LineOfBusinessAnalyticsApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LineOfBusinessAnalyticsApi"/> class
        /// </summary>
        /// <returns></returns>
        public LineOfBusinessAnalyticsApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LineOfBusinessAnalyticsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LineOfBusinessAnalyticsApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Aggregate Call Performance Data Returns call performance aggregations filtered by parameters specified. This API is deprecated, and it will be disabled after September 8th. Please use [new version](https://developers.ringcentral.com/api-reference/Line-Of-Business-Analytics/analyticsCallsAggregationFetch) instead.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="analyticsLegacyPerformanceCallsAggregatesRequest"></param>
        /// <param name="page">The current page number (optional)</param>
        /// <param name="perPage">Number of records displayed on a page (optional)</param>
        /// <returns>AnalyticsLegacyPerformanceCallsAggregatesResponse</returns>
        [Obsolete]
        public AnalyticsLegacyPerformanceCallsAggregatesResponse AggregatePerformanceReportCalls (string accountId, AnalyticsLegacyPerformanceCallsAggregatesRequest analyticsLegacyPerformanceCallsAggregatesRequest, int? page = default(int?), int? perPage = default(int?))
        {
             ApiResponse<AnalyticsLegacyPerformanceCallsAggregatesResponse> localVarResponse = AggregatePerformanceReportCallsWithHttpInfo(accountId, analyticsLegacyPerformanceCallsAggregatesRequest, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Aggregate Call Performance Data Returns call performance aggregations filtered by parameters specified. This API is deprecated, and it will be disabled after September 8th. Please use [new version](https://developers.ringcentral.com/api-reference/Line-Of-Business-Analytics/analyticsCallsAggregationFetch) instead.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="analyticsLegacyPerformanceCallsAggregatesRequest"></param>
        /// <param name="page">The current page number (optional)</param>
        /// <param name="perPage">Number of records displayed on a page (optional)</param>
        /// <returns>ApiResponse of AnalyticsLegacyPerformanceCallsAggregatesResponse</returns>
        [Obsolete]
        public ApiResponse<AnalyticsLegacyPerformanceCallsAggregatesResponse> AggregatePerformanceReportCallsWithHttpInfo (string accountId, AnalyticsLegacyPerformanceCallsAggregatesRequest analyticsLegacyPerformanceCallsAggregatesRequest, int? page = default(int?), int? perPage = default(int?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling LineOfBusinessAnalyticsApi->AggregatePerformanceReportCalls");
            // verify the required parameter 'analyticsLegacyPerformanceCallsAggregatesRequest' is set
            if (analyticsLegacyPerformanceCallsAggregatesRequest == null)
                throw new ApiException(400, "Missing required parameter 'analyticsLegacyPerformanceCallsAggregatesRequest' when calling LineOfBusinessAnalyticsApi->AggregatePerformanceReportCalls");

            var localVarPath = "/analytics/phone/performance/v1/accounts/{accountId}/calls/aggregate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (analyticsLegacyPerformanceCallsAggregatesRequest != null && analyticsLegacyPerformanceCallsAggregatesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(analyticsLegacyPerformanceCallsAggregatesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = analyticsLegacyPerformanceCallsAggregatesRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AggregatePerformanceReportCalls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnalyticsLegacyPerformanceCallsAggregatesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AnalyticsLegacyPerformanceCallsAggregatesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnalyticsLegacyPerformanceCallsAggregatesResponse)));
        }

        /// <summary>
        /// Aggregate Call Performance Data Returns call performance aggregations filtered by parameters specified. This API is deprecated, and it will be disabled after September 8th. Please use [new version](https://developers.ringcentral.com/api-reference/Line-Of-Business-Analytics/analyticsCallsAggregationFetch) instead.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="analyticsLegacyPerformanceCallsAggregatesRequest"></param>
        /// <param name="page">The current page number (optional)</param>
        /// <param name="perPage">Number of records displayed on a page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AnalyticsLegacyPerformanceCallsAggregatesResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<AnalyticsLegacyPerformanceCallsAggregatesResponse> AggregatePerformanceReportCallsAsync (string accountId, AnalyticsLegacyPerformanceCallsAggregatesRequest analyticsLegacyPerformanceCallsAggregatesRequest, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AnalyticsLegacyPerformanceCallsAggregatesResponse> localVarResponse = await AggregatePerformanceReportCallsWithHttpInfoAsync(accountId, analyticsLegacyPerformanceCallsAggregatesRequest, page, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Aggregate Call Performance Data Returns call performance aggregations filtered by parameters specified. This API is deprecated, and it will be disabled after September 8th. Please use [new version](https://developers.ringcentral.com/api-reference/Line-Of-Business-Analytics/analyticsCallsAggregationFetch) instead.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="analyticsLegacyPerformanceCallsAggregatesRequest"></param>
        /// <param name="page">The current page number (optional)</param>
        /// <param name="perPage">Number of records displayed on a page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AnalyticsLegacyPerformanceCallsAggregatesResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<AnalyticsLegacyPerformanceCallsAggregatesResponse>> AggregatePerformanceReportCallsWithHttpInfoAsync (string accountId, AnalyticsLegacyPerformanceCallsAggregatesRequest analyticsLegacyPerformanceCallsAggregatesRequest, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling LineOfBusinessAnalyticsApi->AggregatePerformanceReportCalls");
            // verify the required parameter 'analyticsLegacyPerformanceCallsAggregatesRequest' is set
            if (analyticsLegacyPerformanceCallsAggregatesRequest == null)
                throw new ApiException(400, "Missing required parameter 'analyticsLegacyPerformanceCallsAggregatesRequest' when calling LineOfBusinessAnalyticsApi->AggregatePerformanceReportCalls");

            var localVarPath = "/analytics/phone/performance/v1/accounts/{accountId}/calls/aggregate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (analyticsLegacyPerformanceCallsAggregatesRequest != null && analyticsLegacyPerformanceCallsAggregatesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(analyticsLegacyPerformanceCallsAggregatesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = analyticsLegacyPerformanceCallsAggregatesRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AggregatePerformanceReportCalls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnalyticsLegacyPerformanceCallsAggregatesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AnalyticsLegacyPerformanceCallsAggregatesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnalyticsLegacyPerformanceCallsAggregatesResponse)));
        }

        /// <summary>
        /// Calls Aggregation Data Returns call aggregations filtered by parameters specified
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="aggregationRequest"></param>
        /// <param name="page">The current page number (positive numbers only) (optional)</param>
        /// <param name="perPage">Number of records displayed on a page (positive numbers only, max value of 200) (optional)</param>
        /// <returns>AggregationResponse</returns>
        public AggregationResponse AnalyticsCallsAggregationFetch (string accountId, AggregationRequest aggregationRequest, int? page = default(int?), int? perPage = default(int?))
        {
             ApiResponse<AggregationResponse> localVarResponse = AnalyticsCallsAggregationFetchWithHttpInfo(accountId, aggregationRequest, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Calls Aggregation Data Returns call aggregations filtered by parameters specified
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="aggregationRequest"></param>
        /// <param name="page">The current page number (positive numbers only) (optional)</param>
        /// <param name="perPage">Number of records displayed on a page (positive numbers only, max value of 200) (optional)</param>
        /// <returns>ApiResponse of AggregationResponse</returns>
        public ApiResponse<AggregationResponse> AnalyticsCallsAggregationFetchWithHttpInfo (string accountId, AggregationRequest aggregationRequest, int? page = default(int?), int? perPage = default(int?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling LineOfBusinessAnalyticsApi->AnalyticsCallsAggregationFetch");
            // verify the required parameter 'aggregationRequest' is set
            if (aggregationRequest == null)
                throw new ApiException(400, "Missing required parameter 'aggregationRequest' when calling LineOfBusinessAnalyticsApi->AnalyticsCallsAggregationFetch");

            var localVarPath = "/analytics/calls/v1/accounts/{accountId}/aggregation/fetch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (aggregationRequest != null && aggregationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aggregationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aggregationRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsCallsAggregationFetch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AggregationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationResponse)));
        }

        /// <summary>
        /// Calls Aggregation Data Returns call aggregations filtered by parameters specified
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="aggregationRequest"></param>
        /// <param name="page">The current page number (positive numbers only) (optional)</param>
        /// <param name="perPage">Number of records displayed on a page (positive numbers only, max value of 200) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AggregationResponse</returns>
        public async System.Threading.Tasks.Task<AggregationResponse> AnalyticsCallsAggregationFetchAsync (string accountId, AggregationRequest aggregationRequest, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AggregationResponse> localVarResponse = await AnalyticsCallsAggregationFetchWithHttpInfoAsync(accountId, aggregationRequest, page, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Calls Aggregation Data Returns call aggregations filtered by parameters specified
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="aggregationRequest"></param>
        /// <param name="page">The current page number (positive numbers only) (optional)</param>
        /// <param name="perPage">Number of records displayed on a page (positive numbers only, max value of 200) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AggregationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AggregationResponse>> AnalyticsCallsAggregationFetchWithHttpInfoAsync (string accountId, AggregationRequest aggregationRequest, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling LineOfBusinessAnalyticsApi->AnalyticsCallsAggregationFetch");
            // verify the required parameter 'aggregationRequest' is set
            if (aggregationRequest == null)
                throw new ApiException(400, "Missing required parameter 'aggregationRequest' when calling LineOfBusinessAnalyticsApi->AnalyticsCallsAggregationFetch");

            var localVarPath = "/analytics/calls/v1/accounts/{accountId}/aggregation/fetch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (aggregationRequest != null && aggregationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aggregationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aggregationRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsCallsAggregationFetch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AggregationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationResponse)));
        }

        /// <summary>
        /// Calls Timeline Data Returns time-value data aggregations filtered by parameters specified
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="interval">Aggregation interval</param>
        /// <param name="timelineRequest"></param>
        /// <param name="page">The current page number (positive numbers only) (optional)</param>
        /// <param name="perPage">Number of records displayed on a page (positive numbers only, max value of 20) (optional)</param>
        /// <returns>TimelineResponse</returns>
        public TimelineResponse AnalyticsCallsTimelineFetch (string accountId, Interval interval, TimelineRequest timelineRequest, int? page = default(int?), int? perPage = default(int?))
        {
             ApiResponse<TimelineResponse> localVarResponse = AnalyticsCallsTimelineFetchWithHttpInfo(accountId, interval, timelineRequest, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Calls Timeline Data Returns time-value data aggregations filtered by parameters specified
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="interval">Aggregation interval</param>
        /// <param name="timelineRequest"></param>
        /// <param name="page">The current page number (positive numbers only) (optional)</param>
        /// <param name="perPage">Number of records displayed on a page (positive numbers only, max value of 20) (optional)</param>
        /// <returns>ApiResponse of TimelineResponse</returns>
        public ApiResponse<TimelineResponse> AnalyticsCallsTimelineFetchWithHttpInfo (string accountId, Interval interval, TimelineRequest timelineRequest, int? page = default(int?), int? perPage = default(int?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling LineOfBusinessAnalyticsApi->AnalyticsCallsTimelineFetch");
            // verify the required parameter 'interval' is set
            if (interval == null)
                throw new ApiException(400, "Missing required parameter 'interval' when calling LineOfBusinessAnalyticsApi->AnalyticsCallsTimelineFetch");
            // verify the required parameter 'timelineRequest' is set
            if (timelineRequest == null)
                throw new ApiException(400, "Missing required parameter 'timelineRequest' when calling LineOfBusinessAnalyticsApi->AnalyticsCallsTimelineFetch");

            var localVarPath = "/analytics/calls/v1/accounts/{accountId}/timeline/fetch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (timelineRequest != null && timelineRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(timelineRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = timelineRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsCallsTimelineFetch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TimelineResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TimelineResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TimelineResponse)));
        }

        /// <summary>
        /// Calls Timeline Data Returns time-value data aggregations filtered by parameters specified
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="interval">Aggregation interval</param>
        /// <param name="timelineRequest"></param>
        /// <param name="page">The current page number (positive numbers only) (optional)</param>
        /// <param name="perPage">Number of records displayed on a page (positive numbers only, max value of 20) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TimelineResponse</returns>
        public async System.Threading.Tasks.Task<TimelineResponse> AnalyticsCallsTimelineFetchAsync (string accountId, Interval interval, TimelineRequest timelineRequest, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TimelineResponse> localVarResponse = await AnalyticsCallsTimelineFetchWithHttpInfoAsync(accountId, interval, timelineRequest, page, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Calls Timeline Data Returns time-value data aggregations filtered by parameters specified
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="interval">Aggregation interval</param>
        /// <param name="timelineRequest"></param>
        /// <param name="page">The current page number (positive numbers only) (optional)</param>
        /// <param name="perPage">Number of records displayed on a page (positive numbers only, max value of 20) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TimelineResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TimelineResponse>> AnalyticsCallsTimelineFetchWithHttpInfoAsync (string accountId, Interval interval, TimelineRequest timelineRequest, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling LineOfBusinessAnalyticsApi->AnalyticsCallsTimelineFetch");
            // verify the required parameter 'interval' is set
            if (interval == null)
                throw new ApiException(400, "Missing required parameter 'interval' when calling LineOfBusinessAnalyticsApi->AnalyticsCallsTimelineFetch");
            // verify the required parameter 'timelineRequest' is set
            if (timelineRequest == null)
                throw new ApiException(400, "Missing required parameter 'timelineRequest' when calling LineOfBusinessAnalyticsApi->AnalyticsCallsTimelineFetch");

            var localVarPath = "/analytics/calls/v1/accounts/{accountId}/timeline/fetch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (timelineRequest != null && timelineRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(timelineRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = timelineRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsCallsTimelineFetch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TimelineResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TimelineResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TimelineResponse)));
        }

        /// <summary>
        /// Timeline Call Performance Data Returns time-value data aggregations filtered by parameters specified. This API is deprecated, and it will be disabled after September 8th. Please use [new version](https://developers.ringcentral.com/api-reference/Line-Of-Business-Analytics/analyticsCallsTimelineFetch) instead.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="interval">Aggregation interval</param>
        /// <param name="analyticsLegacyPerformanceCallsTimelineRequest"></param>
        /// <returns>AnalyticsLegacyPerformanceCallsTimelineResponse</returns>
        [Obsolete]
        public AnalyticsLegacyPerformanceCallsTimelineResponse PerformanceReportCallsTimeline (string accountId, AnalyticsLegacyInterval interval, AnalyticsLegacyPerformanceCallsTimelineRequest analyticsLegacyPerformanceCallsTimelineRequest)
        {
             ApiResponse<AnalyticsLegacyPerformanceCallsTimelineResponse> localVarResponse = PerformanceReportCallsTimelineWithHttpInfo(accountId, interval, analyticsLegacyPerformanceCallsTimelineRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Timeline Call Performance Data Returns time-value data aggregations filtered by parameters specified. This API is deprecated, and it will be disabled after September 8th. Please use [new version](https://developers.ringcentral.com/api-reference/Line-Of-Business-Analytics/analyticsCallsTimelineFetch) instead.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="interval">Aggregation interval</param>
        /// <param name="analyticsLegacyPerformanceCallsTimelineRequest"></param>
        /// <returns>ApiResponse of AnalyticsLegacyPerformanceCallsTimelineResponse</returns>
        [Obsolete]
        public ApiResponse<AnalyticsLegacyPerformanceCallsTimelineResponse> PerformanceReportCallsTimelineWithHttpInfo (string accountId, AnalyticsLegacyInterval interval, AnalyticsLegacyPerformanceCallsTimelineRequest analyticsLegacyPerformanceCallsTimelineRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling LineOfBusinessAnalyticsApi->PerformanceReportCallsTimeline");
            // verify the required parameter 'interval' is set
            if (interval == null)
                throw new ApiException(400, "Missing required parameter 'interval' when calling LineOfBusinessAnalyticsApi->PerformanceReportCallsTimeline");
            // verify the required parameter 'analyticsLegacyPerformanceCallsTimelineRequest' is set
            if (analyticsLegacyPerformanceCallsTimelineRequest == null)
                throw new ApiException(400, "Missing required parameter 'analyticsLegacyPerformanceCallsTimelineRequest' when calling LineOfBusinessAnalyticsApi->PerformanceReportCallsTimeline");

            var localVarPath = "/analytics/phone/performance/v1/accounts/{accountId}/calls/timeline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (analyticsLegacyPerformanceCallsTimelineRequest != null && analyticsLegacyPerformanceCallsTimelineRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(analyticsLegacyPerformanceCallsTimelineRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = analyticsLegacyPerformanceCallsTimelineRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceReportCallsTimeline", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnalyticsLegacyPerformanceCallsTimelineResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AnalyticsLegacyPerformanceCallsTimelineResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnalyticsLegacyPerformanceCallsTimelineResponse)));
        }

        /// <summary>
        /// Timeline Call Performance Data Returns time-value data aggregations filtered by parameters specified. This API is deprecated, and it will be disabled after September 8th. Please use [new version](https://developers.ringcentral.com/api-reference/Line-Of-Business-Analytics/analyticsCallsTimelineFetch) instead.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="interval">Aggregation interval</param>
        /// <param name="analyticsLegacyPerformanceCallsTimelineRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AnalyticsLegacyPerformanceCallsTimelineResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<AnalyticsLegacyPerformanceCallsTimelineResponse> PerformanceReportCallsTimelineAsync (string accountId, AnalyticsLegacyInterval interval, AnalyticsLegacyPerformanceCallsTimelineRequest analyticsLegacyPerformanceCallsTimelineRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AnalyticsLegacyPerformanceCallsTimelineResponse> localVarResponse = await PerformanceReportCallsTimelineWithHttpInfoAsync(accountId, interval, analyticsLegacyPerformanceCallsTimelineRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Timeline Call Performance Data Returns time-value data aggregations filtered by parameters specified. This API is deprecated, and it will be disabled after September 8th. Please use [new version](https://developers.ringcentral.com/api-reference/Line-Of-Business-Analytics/analyticsCallsTimelineFetch) instead.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="interval">Aggregation interval</param>
        /// <param name="analyticsLegacyPerformanceCallsTimelineRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AnalyticsLegacyPerformanceCallsTimelineResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<AnalyticsLegacyPerformanceCallsTimelineResponse>> PerformanceReportCallsTimelineWithHttpInfoAsync (string accountId, AnalyticsLegacyInterval interval, AnalyticsLegacyPerformanceCallsTimelineRequest analyticsLegacyPerformanceCallsTimelineRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling LineOfBusinessAnalyticsApi->PerformanceReportCallsTimeline");
            // verify the required parameter 'interval' is set
            if (interval == null)
                throw new ApiException(400, "Missing required parameter 'interval' when calling LineOfBusinessAnalyticsApi->PerformanceReportCallsTimeline");
            // verify the required parameter 'analyticsLegacyPerformanceCallsTimelineRequest' is set
            if (analyticsLegacyPerformanceCallsTimelineRequest == null)
                throw new ApiException(400, "Missing required parameter 'analyticsLegacyPerformanceCallsTimelineRequest' when calling LineOfBusinessAnalyticsApi->PerformanceReportCallsTimeline");

            var localVarPath = "/analytics/phone/performance/v1/accounts/{accountId}/calls/timeline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (analyticsLegacyPerformanceCallsTimelineRequest != null && analyticsLegacyPerformanceCallsTimelineRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(analyticsLegacyPerformanceCallsTimelineRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = analyticsLegacyPerformanceCallsTimelineRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformanceReportCallsTimeline", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnalyticsLegacyPerformanceCallsTimelineResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AnalyticsLegacyPerformanceCallsTimelineResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnalyticsLegacyPerformanceCallsTimelineResponse)));
        }

    }
}
