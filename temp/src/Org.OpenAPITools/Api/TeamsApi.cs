/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITeamsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Team Members
        /// </summary>
        /// <remarks>
        /// Adds members to the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to add members to.</param>
        /// <param name="glipPostMembersListBody">JSON body</param>
        /// <returns></returns>
        void AddGlipTeamMembers (string chatId, GlipPostMembersListBody glipPostMembersListBody);

        /// <summary>
        /// Add Team Members
        /// </summary>
        /// <remarks>
        /// Adds members to the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to add members to.</param>
        /// <param name="glipPostMembersListBody">JSON body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddGlipTeamMembersWithHttpInfo (string chatId, GlipPostMembersListBody glipPostMembersListBody);
        /// <summary>
        /// Archive Team
        /// </summary>
        /// <remarks>
        /// Changes the status of the specified team to 'Archived'. A team is a chat between 2 and more participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be archived.</param>
        /// <returns></returns>
        void ArchiveGlipTeam (string chatId);

        /// <summary>
        /// Archive Team
        /// </summary>
        /// <remarks>
        /// Changes the status of the specified team to 'Archived'. A team is a chat between 2 and more participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be archived.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ArchiveGlipTeamWithHttpInfo (string chatId);
        /// <summary>
        /// Create Team
        /// </summary>
        /// <remarks>
        /// Creates a team, and adds a list of people to the team.  A team is a chat between 2 and more (unlimited number) participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipPostTeamBody">JSON body</param>
        /// <returns>GlipTeamInfo</returns>
        GlipTeamInfo CreateGlipTeam (GlipPostTeamBody glipPostTeamBody);

        /// <summary>
        /// Create Team
        /// </summary>
        /// <remarks>
        /// Creates a team, and adds a list of people to the team.  A team is a chat between 2 and more (unlimited number) participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipPostTeamBody">JSON body</param>
        /// <returns>ApiResponse of GlipTeamInfo</returns>
        ApiResponse<GlipTeamInfo> CreateGlipTeamWithHttpInfo (GlipPostTeamBody glipPostTeamBody);
        /// <summary>
        /// Delete Team
        /// </summary>
        /// <remarks>
        /// Deletes the specified team. A team is a chat between 2 and more (unlimited number) participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team.</param>
        /// <returns></returns>
        void DeleteGlipTeam (string chatId);

        /// <summary>
        /// Delete Team
        /// </summary>
        /// <remarks>
        /// Deletes the specified team. A team is a chat between 2 and more (unlimited number) participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGlipTeamWithHttpInfo (string chatId);
        /// <summary>
        /// Join Team
        /// </summary>
        /// <remarks>
        /// Adds the current user to the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be joined.</param>
        /// <returns></returns>
        void JoinGlipTeam (string chatId);

        /// <summary>
        /// Join Team
        /// </summary>
        /// <remarks>
        /// Adds the current user to the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be joined.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> JoinGlipTeamWithHttpInfo (string chatId);
        /// <summary>
        /// Leave Team
        /// </summary>
        /// <remarks>
        /// Removes the current user from the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be left.</param>
        /// <returns></returns>
        void LeaveGlipTeam (string chatId);

        /// <summary>
        /// Leave Team
        /// </summary>
        /// <remarks>
        /// Removes the current user from the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be left.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LeaveGlipTeamWithHttpInfo (string chatId);
        /// <summary>
        /// Get Teams
        /// </summary>
        /// <remarks>
        /// Returns the list of teams where the user is a member (both archived and active) combined with a list of public teams that can be joined by the current user. All records in response are sorted by creation time of a chat in ascending order. A team is a chat between 2 and more (unlimited number) participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordCount">Number of teams to be fetched by one request. The maximum value is 250, by default - 30 (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <returns>GlipTeamsList</returns>
        GlipTeamsList ListGlipTeams (int? recordCount = default(int?), string pageToken = default(string));

        /// <summary>
        /// Get Teams
        /// </summary>
        /// <remarks>
        /// Returns the list of teams where the user is a member (both archived and active) combined with a list of public teams that can be joined by the current user. All records in response are sorted by creation time of a chat in ascending order. A team is a chat between 2 and more (unlimited number) participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordCount">Number of teams to be fetched by one request. The maximum value is 250, by default - 30 (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <returns>ApiResponse of GlipTeamsList</returns>
        ApiResponse<GlipTeamsList> ListGlipTeamsWithHttpInfo (int? recordCount = default(int?), string pageToken = default(string));
        /// <summary>
        /// Update Everyone Ð¡hat
        /// </summary>
        /// <remarks>
        /// Updates Everyone chat information. Everyone chat is a company level chat including all employees; assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateGlipEveryoneRequest">JSON body (optional)</param>
        /// <returns>GlipEveryoneInfo</returns>
        GlipEveryoneInfo PatchGlipEveryone (UpdateGlipEveryoneRequest updateGlipEveryoneRequest = default(UpdateGlipEveryoneRequest));

        /// <summary>
        /// Update Everyone Ð¡hat
        /// </summary>
        /// <remarks>
        /// Updates Everyone chat information. Everyone chat is a company level chat including all employees; assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateGlipEveryoneRequest">JSON body (optional)</param>
        /// <returns>ApiResponse of GlipEveryoneInfo</returns>
        ApiResponse<GlipEveryoneInfo> PatchGlipEveryoneWithHttpInfo (UpdateGlipEveryoneRequest updateGlipEveryoneRequest = default(UpdateGlipEveryoneRequest));
        /// <summary>
        /// Update Team
        /// </summary>
        /// <remarks>
        /// Updates the name and description of the specified team. A team is a chat between 2 and more (unlimited number) participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be updated.</param>
        /// <param name="glipPatchTeamBody">JSON body</param>
        /// <returns>GlipTeamInfo</returns>
        GlipTeamInfo PatchGlipTeam (string chatId, GlipPatchTeamBody glipPatchTeamBody);

        /// <summary>
        /// Update Team
        /// </summary>
        /// <remarks>
        /// Updates the name and description of the specified team. A team is a chat between 2 and more (unlimited number) participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be updated.</param>
        /// <param name="glipPatchTeamBody">JSON body</param>
        /// <returns>ApiResponse of GlipTeamInfo</returns>
        ApiResponse<GlipTeamInfo> PatchGlipTeamWithHttpInfo (string chatId, GlipPatchTeamBody glipPatchTeamBody);
        /// <summary>
        /// Get Everyone Chat
        /// </summary>
        /// <remarks>
        /// Returns information about Everyone chat, which is a company level chat including all employees; assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GlipEveryoneInfo</returns>
        GlipEveryoneInfo ReadGlipEveryone ();

        /// <summary>
        /// Get Everyone Chat
        /// </summary>
        /// <remarks>
        /// Returns information about Everyone chat, which is a company level chat including all employees; assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GlipEveryoneInfo</returns>
        ApiResponse<GlipEveryoneInfo> ReadGlipEveryoneWithHttpInfo ();
        /// <summary>
        /// Get Team
        /// </summary>
        /// <remarks>
        /// Returns information about the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be returned.</param>
        /// <returns>GlipTeamInfo</returns>
        GlipTeamInfo ReadGlipTeam (string chatId);

        /// <summary>
        /// Get Team
        /// </summary>
        /// <remarks>
        /// Returns information about the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be returned.</param>
        /// <returns>ApiResponse of GlipTeamInfo</returns>
        ApiResponse<GlipTeamInfo> ReadGlipTeamWithHttpInfo (string chatId);
        /// <summary>
        /// Remove Team Members
        /// </summary>
        /// <remarks>
        /// Removes members from the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to remove members from.</param>
        /// <param name="glipPostMembersIdsListBody">JSON body</param>
        /// <returns></returns>
        void RemoveGlipTeamMembers (string chatId, GlipPostMembersIdsListBody glipPostMembersIdsListBody);

        /// <summary>
        /// Remove Team Members
        /// </summary>
        /// <remarks>
        /// Removes members from the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to remove members from.</param>
        /// <param name="glipPostMembersIdsListBody">JSON body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveGlipTeamMembersWithHttpInfo (string chatId, GlipPostMembersIdsListBody glipPostMembersIdsListBody);
        /// <summary>
        /// Unarchive Team
        /// </summary>
        /// <remarks>
        /// Changes the status of the specified team to 'Active'. A team is a chat between 2 and more participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be made active.</param>
        /// <returns></returns>
        void UnarchiveGlipTeam (string chatId);

        /// <summary>
        /// Unarchive Team
        /// </summary>
        /// <remarks>
        /// Changes the status of the specified team to 'Active'. A team is a chat between 2 and more participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be made active.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnarchiveGlipTeamWithHttpInfo (string chatId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add Team Members
        /// </summary>
        /// <remarks>
        /// Adds members to the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to add members to.</param>
        /// <param name="glipPostMembersListBody">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddGlipTeamMembersAsync (string chatId, GlipPostMembersListBody glipPostMembersListBody, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add Team Members
        /// </summary>
        /// <remarks>
        /// Adds members to the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to add members to.</param>
        /// <param name="glipPostMembersListBody">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddGlipTeamMembersWithHttpInfoAsync (string chatId, GlipPostMembersListBody glipPostMembersListBody, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Archive Team
        /// </summary>
        /// <remarks>
        /// Changes the status of the specified team to 'Archived'. A team is a chat between 2 and more participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be archived.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ArchiveGlipTeamAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Archive Team
        /// </summary>
        /// <remarks>
        /// Changes the status of the specified team to 'Archived'. A team is a chat between 2 and more participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be archived.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ArchiveGlipTeamWithHttpInfoAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create Team
        /// </summary>
        /// <remarks>
        /// Creates a team, and adds a list of people to the team.  A team is a chat between 2 and more (unlimited number) participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipPostTeamBody">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipTeamInfo</returns>
        System.Threading.Tasks.Task<GlipTeamInfo> CreateGlipTeamAsync (GlipPostTeamBody glipPostTeamBody, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Team
        /// </summary>
        /// <remarks>
        /// Creates a team, and adds a list of people to the team.  A team is a chat between 2 and more (unlimited number) participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipPostTeamBody">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipTeamInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlipTeamInfo>> CreateGlipTeamWithHttpInfoAsync (GlipPostTeamBody glipPostTeamBody, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete Team
        /// </summary>
        /// <remarks>
        /// Deletes the specified team. A team is a chat between 2 and more (unlimited number) participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteGlipTeamAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Team
        /// </summary>
        /// <remarks>
        /// Deletes the specified team. A team is a chat between 2 and more (unlimited number) participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGlipTeamWithHttpInfoAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Join Team
        /// </summary>
        /// <remarks>
        /// Adds the current user to the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be joined.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task JoinGlipTeamAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Join Team
        /// </summary>
        /// <remarks>
        /// Adds the current user to the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be joined.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> JoinGlipTeamWithHttpInfoAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Leave Team
        /// </summary>
        /// <remarks>
        /// Removes the current user from the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be left.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LeaveGlipTeamAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Leave Team
        /// </summary>
        /// <remarks>
        /// Removes the current user from the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be left.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LeaveGlipTeamWithHttpInfoAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Teams
        /// </summary>
        /// <remarks>
        /// Returns the list of teams where the user is a member (both archived and active) combined with a list of public teams that can be joined by the current user. All records in response are sorted by creation time of a chat in ascending order. A team is a chat between 2 and more (unlimited number) participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordCount">Number of teams to be fetched by one request. The maximum value is 250, by default - 30 (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipTeamsList</returns>
        System.Threading.Tasks.Task<GlipTeamsList> ListGlipTeamsAsync (int? recordCount = default(int?), string pageToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Teams
        /// </summary>
        /// <remarks>
        /// Returns the list of teams where the user is a member (both archived and active) combined with a list of public teams that can be joined by the current user. All records in response are sorted by creation time of a chat in ascending order. A team is a chat between 2 and more (unlimited number) participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordCount">Number of teams to be fetched by one request. The maximum value is 250, by default - 30 (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipTeamsList)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlipTeamsList>> ListGlipTeamsWithHttpInfoAsync (int? recordCount = default(int?), string pageToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Everyone Ð¡hat
        /// </summary>
        /// <remarks>
        /// Updates Everyone chat information. Everyone chat is a company level chat including all employees; assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateGlipEveryoneRequest">JSON body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipEveryoneInfo</returns>
        System.Threading.Tasks.Task<GlipEveryoneInfo> PatchGlipEveryoneAsync (UpdateGlipEveryoneRequest updateGlipEveryoneRequest = default(UpdateGlipEveryoneRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Everyone Ð¡hat
        /// </summary>
        /// <remarks>
        /// Updates Everyone chat information. Everyone chat is a company level chat including all employees; assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateGlipEveryoneRequest">JSON body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipEveryoneInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlipEveryoneInfo>> PatchGlipEveryoneWithHttpInfoAsync (UpdateGlipEveryoneRequest updateGlipEveryoneRequest = default(UpdateGlipEveryoneRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Team
        /// </summary>
        /// <remarks>
        /// Updates the name and description of the specified team. A team is a chat between 2 and more (unlimited number) participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be updated.</param>
        /// <param name="glipPatchTeamBody">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipTeamInfo</returns>
        System.Threading.Tasks.Task<GlipTeamInfo> PatchGlipTeamAsync (string chatId, GlipPatchTeamBody glipPatchTeamBody, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Team
        /// </summary>
        /// <remarks>
        /// Updates the name and description of the specified team. A team is a chat between 2 and more (unlimited number) participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be updated.</param>
        /// <param name="glipPatchTeamBody">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipTeamInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlipTeamInfo>> PatchGlipTeamWithHttpInfoAsync (string chatId, GlipPatchTeamBody glipPatchTeamBody, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Everyone Chat
        /// </summary>
        /// <remarks>
        /// Returns information about Everyone chat, which is a company level chat including all employees; assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipEveryoneInfo</returns>
        System.Threading.Tasks.Task<GlipEveryoneInfo> ReadGlipEveryoneAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Everyone Chat
        /// </summary>
        /// <remarks>
        /// Returns information about Everyone chat, which is a company level chat including all employees; assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipEveryoneInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlipEveryoneInfo>> ReadGlipEveryoneWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Team
        /// </summary>
        /// <remarks>
        /// Returns information about the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be returned.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipTeamInfo</returns>
        System.Threading.Tasks.Task<GlipTeamInfo> ReadGlipTeamAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Team
        /// </summary>
        /// <remarks>
        /// Returns information about the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be returned.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipTeamInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlipTeamInfo>> ReadGlipTeamWithHttpInfoAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove Team Members
        /// </summary>
        /// <remarks>
        /// Removes members from the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to remove members from.</param>
        /// <param name="glipPostMembersIdsListBody">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveGlipTeamMembersAsync (string chatId, GlipPostMembersIdsListBody glipPostMembersIdsListBody, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Remove Team Members
        /// </summary>
        /// <remarks>
        /// Removes members from the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to remove members from.</param>
        /// <param name="glipPostMembersIdsListBody">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveGlipTeamMembersWithHttpInfoAsync (string chatId, GlipPostMembersIdsListBody glipPostMembersIdsListBody, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Unarchive Team
        /// </summary>
        /// <remarks>
        /// Changes the status of the specified team to 'Active'. A team is a chat between 2 and more participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be made active.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnarchiveGlipTeamAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Unarchive Team
        /// </summary>
        /// <remarks>
        /// Changes the status of the specified team to 'Active'. A team is a chat between 2 and more participants assigned with specific name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be made active.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnarchiveGlipTeamWithHttpInfoAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TeamsApi : ITeamsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TeamsApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamsApi"/> class
        /// </summary>
        /// <returns></returns>
        public TeamsApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TeamsApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add Team Members Adds members to the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to add members to.</param>
        /// <param name="glipPostMembersListBody">JSON body</param>
        /// <returns></returns>
        public void AddGlipTeamMembers (string chatId, GlipPostMembersListBody glipPostMembersListBody)
        {
             AddGlipTeamMembersWithHttpInfo(chatId, glipPostMembersListBody);
        }

        /// <summary>
        /// Add Team Members Adds members to the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to add members to.</param>
        /// <param name="glipPostMembersListBody">JSON body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddGlipTeamMembersWithHttpInfo (string chatId, GlipPostMembersListBody glipPostMembersListBody)
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling TeamsApi->AddGlipTeamMembers");
            // verify the required parameter 'glipPostMembersListBody' is set
            if (glipPostMembersListBody == null)
                throw new ApiException(400, "Missing required parameter 'glipPostMembersListBody' when calling TeamsApi->AddGlipTeamMembers");

            var localVarPath = "/restapi/v1.0/glip/teams/{chatId}/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter
            if (glipPostMembersListBody != null && glipPostMembersListBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipPostMembersListBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipPostMembersListBody; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddGlipTeamMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add Team Members Adds members to the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to add members to.</param>
        /// <param name="glipPostMembersListBody">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddGlipTeamMembersAsync (string chatId, GlipPostMembersListBody glipPostMembersListBody, CancellationToken cancellationToken = default(CancellationToken))
        {
             await AddGlipTeamMembersWithHttpInfoAsync(chatId, glipPostMembersListBody, cancellationToken);

        }

        /// <summary>
        /// Add Team Members Adds members to the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to add members to.</param>
        /// <param name="glipPostMembersListBody">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddGlipTeamMembersWithHttpInfoAsync (string chatId, GlipPostMembersListBody glipPostMembersListBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling TeamsApi->AddGlipTeamMembers");
            // verify the required parameter 'glipPostMembersListBody' is set
            if (glipPostMembersListBody == null)
                throw new ApiException(400, "Missing required parameter 'glipPostMembersListBody' when calling TeamsApi->AddGlipTeamMembers");

            var localVarPath = "/restapi/v1.0/glip/teams/{chatId}/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter
            if (glipPostMembersListBody != null && glipPostMembersListBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipPostMembersListBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipPostMembersListBody; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddGlipTeamMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Archive Team Changes the status of the specified team to 'Archived'. A team is a chat between 2 and more participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be archived.</param>
        /// <returns></returns>
        public void ArchiveGlipTeam (string chatId)
        {
             ArchiveGlipTeamWithHttpInfo(chatId);
        }

        /// <summary>
        /// Archive Team Changes the status of the specified team to 'Archived'. A team is a chat between 2 and more participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be archived.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ArchiveGlipTeamWithHttpInfo (string chatId)
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling TeamsApi->ArchiveGlipTeam");

            var localVarPath = "/restapi/v1.0/glip/teams/{chatId}/archive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArchiveGlipTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Archive Team Changes the status of the specified team to 'Archived'. A team is a chat between 2 and more participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be archived.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ArchiveGlipTeamAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await ArchiveGlipTeamWithHttpInfoAsync(chatId, cancellationToken);

        }

        /// <summary>
        /// Archive Team Changes the status of the specified team to 'Archived'. A team is a chat between 2 and more participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be archived.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ArchiveGlipTeamWithHttpInfoAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling TeamsApi->ArchiveGlipTeam");

            var localVarPath = "/restapi/v1.0/glip/teams/{chatId}/archive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArchiveGlipTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create Team Creates a team, and adds a list of people to the team.  A team is a chat between 2 and more (unlimited number) participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipPostTeamBody">JSON body</param>
        /// <returns>GlipTeamInfo</returns>
        public GlipTeamInfo CreateGlipTeam (GlipPostTeamBody glipPostTeamBody)
        {
             ApiResponse<GlipTeamInfo> localVarResponse = CreateGlipTeamWithHttpInfo(glipPostTeamBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Team Creates a team, and adds a list of people to the team.  A team is a chat between 2 and more (unlimited number) participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipPostTeamBody">JSON body</param>
        /// <returns>ApiResponse of GlipTeamInfo</returns>
        public ApiResponse<GlipTeamInfo> CreateGlipTeamWithHttpInfo (GlipPostTeamBody glipPostTeamBody)
        {
            // verify the required parameter 'glipPostTeamBody' is set
            if (glipPostTeamBody == null)
                throw new ApiException(400, "Missing required parameter 'glipPostTeamBody' when calling TeamsApi->CreateGlipTeam");

            var localVarPath = "/restapi/v1.0/glip/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (glipPostTeamBody != null && glipPostTeamBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipPostTeamBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipPostTeamBody; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGlipTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipTeamInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipTeamInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipTeamInfo)));
        }

        /// <summary>
        /// Create Team Creates a team, and adds a list of people to the team.  A team is a chat between 2 and more (unlimited number) participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipPostTeamBody">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipTeamInfo</returns>
        public async System.Threading.Tasks.Task<GlipTeamInfo> CreateGlipTeamAsync (GlipPostTeamBody glipPostTeamBody, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipTeamInfo> localVarResponse = await CreateGlipTeamWithHttpInfoAsync(glipPostTeamBody, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Team Creates a team, and adds a list of people to the team.  A team is a chat between 2 and more (unlimited number) participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipPostTeamBody">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipTeamInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlipTeamInfo>> CreateGlipTeamWithHttpInfoAsync (GlipPostTeamBody glipPostTeamBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'glipPostTeamBody' is set
            if (glipPostTeamBody == null)
                throw new ApiException(400, "Missing required parameter 'glipPostTeamBody' when calling TeamsApi->CreateGlipTeam");

            var localVarPath = "/restapi/v1.0/glip/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (glipPostTeamBody != null && glipPostTeamBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipPostTeamBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipPostTeamBody; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGlipTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipTeamInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipTeamInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipTeamInfo)));
        }

        /// <summary>
        /// Delete Team Deletes the specified team. A team is a chat between 2 and more (unlimited number) participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team.</param>
        /// <returns></returns>
        public void DeleteGlipTeam (string chatId)
        {
             DeleteGlipTeamWithHttpInfo(chatId);
        }

        /// <summary>
        /// Delete Team Deletes the specified team. A team is a chat between 2 and more (unlimited number) participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteGlipTeamWithHttpInfo (string chatId)
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling TeamsApi->DeleteGlipTeam");

            var localVarPath = "/restapi/v1.0/glip/teams/{chatId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGlipTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Team Deletes the specified team. A team is a chat between 2 and more (unlimited number) participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteGlipTeamAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteGlipTeamWithHttpInfoAsync(chatId, cancellationToken);

        }

        /// <summary>
        /// Delete Team Deletes the specified team. A team is a chat between 2 and more (unlimited number) participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGlipTeamWithHttpInfoAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling TeamsApi->DeleteGlipTeam");

            var localVarPath = "/restapi/v1.0/glip/teams/{chatId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGlipTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Join Team Adds the current user to the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be joined.</param>
        /// <returns></returns>
        public void JoinGlipTeam (string chatId)
        {
             JoinGlipTeamWithHttpInfo(chatId);
        }

        /// <summary>
        /// Join Team Adds the current user to the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be joined.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> JoinGlipTeamWithHttpInfo (string chatId)
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling TeamsApi->JoinGlipTeam");

            var localVarPath = "/restapi/v1.0/glip/teams/{chatId}/join";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JoinGlipTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Join Team Adds the current user to the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be joined.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task JoinGlipTeamAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await JoinGlipTeamWithHttpInfoAsync(chatId, cancellationToken);

        }

        /// <summary>
        /// Join Team Adds the current user to the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be joined.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> JoinGlipTeamWithHttpInfoAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling TeamsApi->JoinGlipTeam");

            var localVarPath = "/restapi/v1.0/glip/teams/{chatId}/join";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JoinGlipTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Leave Team Removes the current user from the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be left.</param>
        /// <returns></returns>
        public void LeaveGlipTeam (string chatId)
        {
             LeaveGlipTeamWithHttpInfo(chatId);
        }

        /// <summary>
        /// Leave Team Removes the current user from the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be left.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LeaveGlipTeamWithHttpInfo (string chatId)
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling TeamsApi->LeaveGlipTeam");

            var localVarPath = "/restapi/v1.0/glip/teams/{chatId}/leave";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeaveGlipTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Leave Team Removes the current user from the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be left.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LeaveGlipTeamAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await LeaveGlipTeamWithHttpInfoAsync(chatId, cancellationToken);

        }

        /// <summary>
        /// Leave Team Removes the current user from the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be left.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LeaveGlipTeamWithHttpInfoAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling TeamsApi->LeaveGlipTeam");

            var localVarPath = "/restapi/v1.0/glip/teams/{chatId}/leave";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeaveGlipTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get Teams Returns the list of teams where the user is a member (both archived and active) combined with a list of public teams that can be joined by the current user. All records in response are sorted by creation time of a chat in ascending order. A team is a chat between 2 and more (unlimited number) participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordCount">Number of teams to be fetched by one request. The maximum value is 250, by default - 30 (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <returns>GlipTeamsList</returns>
        public GlipTeamsList ListGlipTeams (int? recordCount = default(int?), string pageToken = default(string))
        {
             ApiResponse<GlipTeamsList> localVarResponse = ListGlipTeamsWithHttpInfo(recordCount, pageToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Teams Returns the list of teams where the user is a member (both archived and active) combined with a list of public teams that can be joined by the current user. All records in response are sorted by creation time of a chat in ascending order. A team is a chat between 2 and more (unlimited number) participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordCount">Number of teams to be fetched by one request. The maximum value is 250, by default - 30 (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <returns>ApiResponse of GlipTeamsList</returns>
        public ApiResponse<GlipTeamsList> ListGlipTeamsWithHttpInfo (int? recordCount = default(int?), string pageToken = default(string))
        {

            var localVarPath = "/restapi/v1.0/glip/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordCount", recordCount)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListGlipTeams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipTeamsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipTeamsList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipTeamsList)));
        }

        /// <summary>
        /// Get Teams Returns the list of teams where the user is a member (both archived and active) combined with a list of public teams that can be joined by the current user. All records in response are sorted by creation time of a chat in ascending order. A team is a chat between 2 and more (unlimited number) participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordCount">Number of teams to be fetched by one request. The maximum value is 250, by default - 30 (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipTeamsList</returns>
        public async System.Threading.Tasks.Task<GlipTeamsList> ListGlipTeamsAsync (int? recordCount = default(int?), string pageToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipTeamsList> localVarResponse = await ListGlipTeamsWithHttpInfoAsync(recordCount, pageToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Teams Returns the list of teams where the user is a member (both archived and active) combined with a list of public teams that can be joined by the current user. All records in response are sorted by creation time of a chat in ascending order. A team is a chat between 2 and more (unlimited number) participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordCount">Number of teams to be fetched by one request. The maximum value is 250, by default - 30 (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipTeamsList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlipTeamsList>> ListGlipTeamsWithHttpInfoAsync (int? recordCount = default(int?), string pageToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/restapi/v1.0/glip/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordCount", recordCount)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListGlipTeams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipTeamsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipTeamsList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipTeamsList)));
        }

        /// <summary>
        /// Update Everyone Ð¡hat Updates Everyone chat information. Everyone chat is a company level chat including all employees; assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateGlipEveryoneRequest">JSON body (optional)</param>
        /// <returns>GlipEveryoneInfo</returns>
        public GlipEveryoneInfo PatchGlipEveryone (UpdateGlipEveryoneRequest updateGlipEveryoneRequest = default(UpdateGlipEveryoneRequest))
        {
             ApiResponse<GlipEveryoneInfo> localVarResponse = PatchGlipEveryoneWithHttpInfo(updateGlipEveryoneRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Everyone Ð¡hat Updates Everyone chat information. Everyone chat is a company level chat including all employees; assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateGlipEveryoneRequest">JSON body (optional)</param>
        /// <returns>ApiResponse of GlipEveryoneInfo</returns>
        public ApiResponse<GlipEveryoneInfo> PatchGlipEveryoneWithHttpInfo (UpdateGlipEveryoneRequest updateGlipEveryoneRequest = default(UpdateGlipEveryoneRequest))
        {

            var localVarPath = "/restapi/v1.0/glip/everyone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateGlipEveryoneRequest != null && updateGlipEveryoneRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateGlipEveryoneRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateGlipEveryoneRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchGlipEveryone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipEveryoneInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipEveryoneInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipEveryoneInfo)));
        }

        /// <summary>
        /// Update Everyone Ð¡hat Updates Everyone chat information. Everyone chat is a company level chat including all employees; assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateGlipEveryoneRequest">JSON body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipEveryoneInfo</returns>
        public async System.Threading.Tasks.Task<GlipEveryoneInfo> PatchGlipEveryoneAsync (UpdateGlipEveryoneRequest updateGlipEveryoneRequest = default(UpdateGlipEveryoneRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipEveryoneInfo> localVarResponse = await PatchGlipEveryoneWithHttpInfoAsync(updateGlipEveryoneRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Everyone Ð¡hat Updates Everyone chat information. Everyone chat is a company level chat including all employees; assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateGlipEveryoneRequest">JSON body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipEveryoneInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlipEveryoneInfo>> PatchGlipEveryoneWithHttpInfoAsync (UpdateGlipEveryoneRequest updateGlipEveryoneRequest = default(UpdateGlipEveryoneRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/restapi/v1.0/glip/everyone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateGlipEveryoneRequest != null && updateGlipEveryoneRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateGlipEveryoneRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateGlipEveryoneRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchGlipEveryone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipEveryoneInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipEveryoneInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipEveryoneInfo)));
        }

        /// <summary>
        /// Update Team Updates the name and description of the specified team. A team is a chat between 2 and more (unlimited number) participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be updated.</param>
        /// <param name="glipPatchTeamBody">JSON body</param>
        /// <returns>GlipTeamInfo</returns>
        public GlipTeamInfo PatchGlipTeam (string chatId, GlipPatchTeamBody glipPatchTeamBody)
        {
             ApiResponse<GlipTeamInfo> localVarResponse = PatchGlipTeamWithHttpInfo(chatId, glipPatchTeamBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Team Updates the name and description of the specified team. A team is a chat between 2 and more (unlimited number) participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be updated.</param>
        /// <param name="glipPatchTeamBody">JSON body</param>
        /// <returns>ApiResponse of GlipTeamInfo</returns>
        public ApiResponse<GlipTeamInfo> PatchGlipTeamWithHttpInfo (string chatId, GlipPatchTeamBody glipPatchTeamBody)
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling TeamsApi->PatchGlipTeam");
            // verify the required parameter 'glipPatchTeamBody' is set
            if (glipPatchTeamBody == null)
                throw new ApiException(400, "Missing required parameter 'glipPatchTeamBody' when calling TeamsApi->PatchGlipTeam");

            var localVarPath = "/restapi/v1.0/glip/teams/{chatId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter
            if (glipPatchTeamBody != null && glipPatchTeamBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipPatchTeamBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipPatchTeamBody; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchGlipTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipTeamInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipTeamInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipTeamInfo)));
        }

        /// <summary>
        /// Update Team Updates the name and description of the specified team. A team is a chat between 2 and more (unlimited number) participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be updated.</param>
        /// <param name="glipPatchTeamBody">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipTeamInfo</returns>
        public async System.Threading.Tasks.Task<GlipTeamInfo> PatchGlipTeamAsync (string chatId, GlipPatchTeamBody glipPatchTeamBody, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipTeamInfo> localVarResponse = await PatchGlipTeamWithHttpInfoAsync(chatId, glipPatchTeamBody, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Team Updates the name and description of the specified team. A team is a chat between 2 and more (unlimited number) participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be updated.</param>
        /// <param name="glipPatchTeamBody">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipTeamInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlipTeamInfo>> PatchGlipTeamWithHttpInfoAsync (string chatId, GlipPatchTeamBody glipPatchTeamBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling TeamsApi->PatchGlipTeam");
            // verify the required parameter 'glipPatchTeamBody' is set
            if (glipPatchTeamBody == null)
                throw new ApiException(400, "Missing required parameter 'glipPatchTeamBody' when calling TeamsApi->PatchGlipTeam");

            var localVarPath = "/restapi/v1.0/glip/teams/{chatId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter
            if (glipPatchTeamBody != null && glipPatchTeamBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipPatchTeamBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipPatchTeamBody; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchGlipTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipTeamInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipTeamInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipTeamInfo)));
        }

        /// <summary>
        /// Get Everyone Chat Returns information about Everyone chat, which is a company level chat including all employees; assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GlipEveryoneInfo</returns>
        public GlipEveryoneInfo ReadGlipEveryone ()
        {
             ApiResponse<GlipEveryoneInfo> localVarResponse = ReadGlipEveryoneWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Everyone Chat Returns information about Everyone chat, which is a company level chat including all employees; assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GlipEveryoneInfo</returns>
        public ApiResponse<GlipEveryoneInfo> ReadGlipEveryoneWithHttpInfo ()
        {

            var localVarPath = "/restapi/v1.0/glip/everyone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadGlipEveryone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipEveryoneInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipEveryoneInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipEveryoneInfo)));
        }

        /// <summary>
        /// Get Everyone Chat Returns information about Everyone chat, which is a company level chat including all employees; assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipEveryoneInfo</returns>
        public async System.Threading.Tasks.Task<GlipEveryoneInfo> ReadGlipEveryoneAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipEveryoneInfo> localVarResponse = await ReadGlipEveryoneWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Everyone Chat Returns information about Everyone chat, which is a company level chat including all employees; assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipEveryoneInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlipEveryoneInfo>> ReadGlipEveryoneWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/restapi/v1.0/glip/everyone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadGlipEveryone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipEveryoneInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipEveryoneInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipEveryoneInfo)));
        }

        /// <summary>
        /// Get Team Returns information about the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be returned.</param>
        /// <returns>GlipTeamInfo</returns>
        public GlipTeamInfo ReadGlipTeam (string chatId)
        {
             ApiResponse<GlipTeamInfo> localVarResponse = ReadGlipTeamWithHttpInfo(chatId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Team Returns information about the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be returned.</param>
        /// <returns>ApiResponse of GlipTeamInfo</returns>
        public ApiResponse<GlipTeamInfo> ReadGlipTeamWithHttpInfo (string chatId)
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling TeamsApi->ReadGlipTeam");

            var localVarPath = "/restapi/v1.0/glip/teams/{chatId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadGlipTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipTeamInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipTeamInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipTeamInfo)));
        }

        /// <summary>
        /// Get Team Returns information about the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be returned.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipTeamInfo</returns>
        public async System.Threading.Tasks.Task<GlipTeamInfo> ReadGlipTeamAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipTeamInfo> localVarResponse = await ReadGlipTeamWithHttpInfoAsync(chatId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Team Returns information about the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be returned.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipTeamInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlipTeamInfo>> ReadGlipTeamWithHttpInfoAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling TeamsApi->ReadGlipTeam");

            var localVarPath = "/restapi/v1.0/glip/teams/{chatId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadGlipTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipTeamInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipTeamInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipTeamInfo)));
        }

        /// <summary>
        /// Remove Team Members Removes members from the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to remove members from.</param>
        /// <param name="glipPostMembersIdsListBody">JSON body</param>
        /// <returns></returns>
        public void RemoveGlipTeamMembers (string chatId, GlipPostMembersIdsListBody glipPostMembersIdsListBody)
        {
             RemoveGlipTeamMembersWithHttpInfo(chatId, glipPostMembersIdsListBody);
        }

        /// <summary>
        /// Remove Team Members Removes members from the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to remove members from.</param>
        /// <param name="glipPostMembersIdsListBody">JSON body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveGlipTeamMembersWithHttpInfo (string chatId, GlipPostMembersIdsListBody glipPostMembersIdsListBody)
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling TeamsApi->RemoveGlipTeamMembers");
            // verify the required parameter 'glipPostMembersIdsListBody' is set
            if (glipPostMembersIdsListBody == null)
                throw new ApiException(400, "Missing required parameter 'glipPostMembersIdsListBody' when calling TeamsApi->RemoveGlipTeamMembers");

            var localVarPath = "/restapi/v1.0/glip/teams/{chatId}/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter
            if (glipPostMembersIdsListBody != null && glipPostMembersIdsListBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipPostMembersIdsListBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipPostMembersIdsListBody; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveGlipTeamMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove Team Members Removes members from the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to remove members from.</param>
        /// <param name="glipPostMembersIdsListBody">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveGlipTeamMembersAsync (string chatId, GlipPostMembersIdsListBody glipPostMembersIdsListBody, CancellationToken cancellationToken = default(CancellationToken))
        {
             await RemoveGlipTeamMembersWithHttpInfoAsync(chatId, glipPostMembersIdsListBody, cancellationToken);

        }

        /// <summary>
        /// Remove Team Members Removes members from the specified team. A team is a chat between 2 and more participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to remove members from.</param>
        /// <param name="glipPostMembersIdsListBody">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveGlipTeamMembersWithHttpInfoAsync (string chatId, GlipPostMembersIdsListBody glipPostMembersIdsListBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling TeamsApi->RemoveGlipTeamMembers");
            // verify the required parameter 'glipPostMembersIdsListBody' is set
            if (glipPostMembersIdsListBody == null)
                throw new ApiException(400, "Missing required parameter 'glipPostMembersIdsListBody' when calling TeamsApi->RemoveGlipTeamMembers");

            var localVarPath = "/restapi/v1.0/glip/teams/{chatId}/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter
            if (glipPostMembersIdsListBody != null && glipPostMembersIdsListBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipPostMembersIdsListBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipPostMembersIdsListBody; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveGlipTeamMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Unarchive Team Changes the status of the specified team to 'Active'. A team is a chat between 2 and more participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be made active.</param>
        /// <returns></returns>
        public void UnarchiveGlipTeam (string chatId)
        {
             UnarchiveGlipTeamWithHttpInfo(chatId);
        }

        /// <summary>
        /// Unarchive Team Changes the status of the specified team to 'Active'. A team is a chat between 2 and more participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be made active.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UnarchiveGlipTeamWithHttpInfo (string chatId)
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling TeamsApi->UnarchiveGlipTeam");

            var localVarPath = "/restapi/v1.0/glip/teams/{chatId}/unarchive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnarchiveGlipTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Unarchive Team Changes the status of the specified team to 'Active'. A team is a chat between 2 and more participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be made active.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnarchiveGlipTeamAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await UnarchiveGlipTeamWithHttpInfoAsync(chatId, cancellationToken);

        }

        /// <summary>
        /// Unarchive Team Changes the status of the specified team to 'Active'. A team is a chat between 2 and more participants assigned with specific name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a team to be made active.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UnarchiveGlipTeamWithHttpInfoAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling TeamsApi->UnarchiveGlipTeam");

            var localVarPath = "/restapi/v1.0/glip/teams/{chatId}/unarchive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnarchiveGlipTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
