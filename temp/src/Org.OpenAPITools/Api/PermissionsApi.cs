/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPermissionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Permission Category List
        /// </summary>
        /// <remarks>
        /// Returns the list of permission categories.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <param name="servicePlanId"> (optional)</param>
        /// <returns>PermissionCategoryCollectionResource</returns>
        PermissionCategoryCollectionResource ListPermissionCategories (string page = default(string), string perPage = default(string), string servicePlanId = default(string));

        /// <summary>
        /// Get Permission Category List
        /// </summary>
        /// <remarks>
        /// Returns the list of permission categories.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <param name="servicePlanId"> (optional)</param>
        /// <returns>ApiResponse of PermissionCategoryCollectionResource</returns>
        ApiResponse<PermissionCategoryCollectionResource> ListPermissionCategoriesWithHttpInfo (string page = default(string), string perPage = default(string), string servicePlanId = default(string));
        /// <summary>
        /// Get Permission List
        /// </summary>
        /// <remarks>
        /// Returns a list of extension user permissions.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <param name="assignable"> (optional)</param>
        /// <param name="servicePlanId"> (optional)</param>
        /// <returns>PermissionCollectionResource</returns>
        PermissionCollectionResource ListPermissions (string page = default(string), string perPage = default(string), bool? assignable = default(bool?), string servicePlanId = default(string));

        /// <summary>
        /// Get Permission List
        /// </summary>
        /// <remarks>
        /// Returns a list of extension user permissions.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <param name="assignable"> (optional)</param>
        /// <param name="servicePlanId"> (optional)</param>
        /// <returns>ApiResponse of PermissionCollectionResource</returns>
        ApiResponse<PermissionCollectionResource> ListPermissionsWithHttpInfo (string page = default(string), string perPage = default(string), bool? assignable = default(bool?), string servicePlanId = default(string));
        /// <summary>
        /// Get Permission
        /// </summary>
        /// <remarks>
        /// Returns user permission by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="permissionId"></param>
        /// <returns>PermissionResource</returns>
        PermissionResource ReadPermission (string permissionId);

        /// <summary>
        /// Get Permission
        /// </summary>
        /// <remarks>
        /// Returns user permission by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="permissionId"></param>
        /// <returns>ApiResponse of PermissionResource</returns>
        ApiResponse<PermissionResource> ReadPermissionWithHttpInfo (string permissionId);
        /// <summary>
        /// Get Permission Category
        /// </summary>
        /// <remarks>
        /// Returns permission category by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="permissionCategoryId"></param>
        /// <returns>PermissionCategoryResource</returns>
        PermissionCategoryResource ReadPermissionCategory (string permissionCategoryId);

        /// <summary>
        /// Get Permission Category
        /// </summary>
        /// <remarks>
        /// Returns permission category by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="permissionCategoryId"></param>
        /// <returns>ApiResponse of PermissionCategoryResource</returns>
        ApiResponse<PermissionCategoryResource> ReadPermissionCategoryWithHttpInfo (string permissionCategoryId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Permission Category List
        /// </summary>
        /// <remarks>
        /// Returns the list of permission categories.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <param name="servicePlanId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PermissionCategoryCollectionResource</returns>
        System.Threading.Tasks.Task<PermissionCategoryCollectionResource> ListPermissionCategoriesAsync (string page = default(string), string perPage = default(string), string servicePlanId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Permission Category List
        /// </summary>
        /// <remarks>
        /// Returns the list of permission categories.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <param name="servicePlanId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PermissionCategoryCollectionResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionCategoryCollectionResource>> ListPermissionCategoriesWithHttpInfoAsync (string page = default(string), string perPage = default(string), string servicePlanId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Permission List
        /// </summary>
        /// <remarks>
        /// Returns a list of extension user permissions.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <param name="assignable"> (optional)</param>
        /// <param name="servicePlanId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PermissionCollectionResource</returns>
        System.Threading.Tasks.Task<PermissionCollectionResource> ListPermissionsAsync (string page = default(string), string perPage = default(string), bool? assignable = default(bool?), string servicePlanId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Permission List
        /// </summary>
        /// <remarks>
        /// Returns a list of extension user permissions.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <param name="assignable"> (optional)</param>
        /// <param name="servicePlanId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PermissionCollectionResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionCollectionResource>> ListPermissionsWithHttpInfoAsync (string page = default(string), string perPage = default(string), bool? assignable = default(bool?), string servicePlanId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Permission
        /// </summary>
        /// <remarks>
        /// Returns user permission by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="permissionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PermissionResource</returns>
        System.Threading.Tasks.Task<PermissionResource> ReadPermissionAsync (string permissionId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Permission
        /// </summary>
        /// <remarks>
        /// Returns user permission by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="permissionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PermissionResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionResource>> ReadPermissionWithHttpInfoAsync (string permissionId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Permission Category
        /// </summary>
        /// <remarks>
        /// Returns permission category by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="permissionCategoryId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PermissionCategoryResource</returns>
        System.Threading.Tasks.Task<PermissionCategoryResource> ReadPermissionCategoryAsync (string permissionCategoryId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Permission Category
        /// </summary>
        /// <remarks>
        /// Returns permission category by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="permissionCategoryId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PermissionCategoryResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionCategoryResource>> ReadPermissionCategoryWithHttpInfoAsync (string permissionCategoryId, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PermissionsApi : IPermissionsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PermissionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PermissionsApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PermissionsApi"/> class
        /// </summary>
        /// <returns></returns>
        public PermissionsApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PermissionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PermissionsApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Permission Category List Returns the list of permission categories.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <param name="servicePlanId"> (optional)</param>
        /// <returns>PermissionCategoryCollectionResource</returns>
        public PermissionCategoryCollectionResource ListPermissionCategories (string page = default(string), string perPage = default(string), string servicePlanId = default(string))
        {
             ApiResponse<PermissionCategoryCollectionResource> localVarResponse = ListPermissionCategoriesWithHttpInfo(page, perPage, servicePlanId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Permission Category List Returns the list of permission categories.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <param name="servicePlanId"> (optional)</param>
        /// <returns>ApiResponse of PermissionCategoryCollectionResource</returns>
        public ApiResponse<PermissionCategoryCollectionResource> ListPermissionCategoriesWithHttpInfo (string page = default(string), string perPage = default(string), string servicePlanId = default(string))
        {

            var localVarPath = "/restapi/v1.0/dictionary/permission-category";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (servicePlanId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "servicePlanId", servicePlanId)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPermissionCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionCategoryCollectionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PermissionCategoryCollectionResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionCategoryCollectionResource)));
        }

        /// <summary>
        /// Get Permission Category List Returns the list of permission categories.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <param name="servicePlanId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PermissionCategoryCollectionResource</returns>
        public async System.Threading.Tasks.Task<PermissionCategoryCollectionResource> ListPermissionCategoriesAsync (string page = default(string), string perPage = default(string), string servicePlanId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PermissionCategoryCollectionResource> localVarResponse = await ListPermissionCategoriesWithHttpInfoAsync(page, perPage, servicePlanId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Permission Category List Returns the list of permission categories.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <param name="servicePlanId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PermissionCategoryCollectionResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PermissionCategoryCollectionResource>> ListPermissionCategoriesWithHttpInfoAsync (string page = default(string), string perPage = default(string), string servicePlanId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/restapi/v1.0/dictionary/permission-category";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (servicePlanId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "servicePlanId", servicePlanId)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPermissionCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionCategoryCollectionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PermissionCategoryCollectionResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionCategoryCollectionResource)));
        }

        /// <summary>
        /// Get Permission List Returns a list of extension user permissions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <param name="assignable"> (optional)</param>
        /// <param name="servicePlanId"> (optional)</param>
        /// <returns>PermissionCollectionResource</returns>
        public PermissionCollectionResource ListPermissions (string page = default(string), string perPage = default(string), bool? assignable = default(bool?), string servicePlanId = default(string))
        {
             ApiResponse<PermissionCollectionResource> localVarResponse = ListPermissionsWithHttpInfo(page, perPage, assignable, servicePlanId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Permission List Returns a list of extension user permissions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <param name="assignable"> (optional)</param>
        /// <param name="servicePlanId"> (optional)</param>
        /// <returns>ApiResponse of PermissionCollectionResource</returns>
        public ApiResponse<PermissionCollectionResource> ListPermissionsWithHttpInfo (string page = default(string), string perPage = default(string), bool? assignable = default(bool?), string servicePlanId = default(string))
        {

            var localVarPath = "/restapi/v1.0/dictionary/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (assignable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assignable", assignable)); // query parameter
            if (servicePlanId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "servicePlanId", servicePlanId)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionCollectionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PermissionCollectionResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionCollectionResource)));
        }

        /// <summary>
        /// Get Permission List Returns a list of extension user permissions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <param name="assignable"> (optional)</param>
        /// <param name="servicePlanId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PermissionCollectionResource</returns>
        public async System.Threading.Tasks.Task<PermissionCollectionResource> ListPermissionsAsync (string page = default(string), string perPage = default(string), bool? assignable = default(bool?), string servicePlanId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PermissionCollectionResource> localVarResponse = await ListPermissionsWithHttpInfoAsync(page, perPage, assignable, servicePlanId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Permission List Returns a list of extension user permissions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <param name="assignable"> (optional)</param>
        /// <param name="servicePlanId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PermissionCollectionResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PermissionCollectionResource>> ListPermissionsWithHttpInfoAsync (string page = default(string), string perPage = default(string), bool? assignable = default(bool?), string servicePlanId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/restapi/v1.0/dictionary/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (assignable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assignable", assignable)); // query parameter
            if (servicePlanId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "servicePlanId", servicePlanId)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionCollectionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PermissionCollectionResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionCollectionResource)));
        }

        /// <summary>
        /// Get Permission Returns user permission by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="permissionId"></param>
        /// <returns>PermissionResource</returns>
        public PermissionResource ReadPermission (string permissionId)
        {
             ApiResponse<PermissionResource> localVarResponse = ReadPermissionWithHttpInfo(permissionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Permission Returns user permission by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="permissionId"></param>
        /// <returns>ApiResponse of PermissionResource</returns>
        public ApiResponse<PermissionResource> ReadPermissionWithHttpInfo (string permissionId)
        {
            // verify the required parameter 'permissionId' is set
            if (permissionId == null)
                throw new ApiException(400, "Missing required parameter 'permissionId' when calling PermissionsApi->ReadPermission");

            var localVarPath = "/restapi/v1.0/dictionary/permission/{permissionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (permissionId != null) localVarPathParams.Add("permissionId", this.Configuration.ApiClient.ParameterToString(permissionId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PermissionResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionResource)));
        }

        /// <summary>
        /// Get Permission Returns user permission by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="permissionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PermissionResource</returns>
        public async System.Threading.Tasks.Task<PermissionResource> ReadPermissionAsync (string permissionId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PermissionResource> localVarResponse = await ReadPermissionWithHttpInfoAsync(permissionId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Permission Returns user permission by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="permissionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PermissionResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PermissionResource>> ReadPermissionWithHttpInfoAsync (string permissionId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'permissionId' is set
            if (permissionId == null)
                throw new ApiException(400, "Missing required parameter 'permissionId' when calling PermissionsApi->ReadPermission");

            var localVarPath = "/restapi/v1.0/dictionary/permission/{permissionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (permissionId != null) localVarPathParams.Add("permissionId", this.Configuration.ApiClient.ParameterToString(permissionId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PermissionResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionResource)));
        }

        /// <summary>
        /// Get Permission Category Returns permission category by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="permissionCategoryId"></param>
        /// <returns>PermissionCategoryResource</returns>
        public PermissionCategoryResource ReadPermissionCategory (string permissionCategoryId)
        {
             ApiResponse<PermissionCategoryResource> localVarResponse = ReadPermissionCategoryWithHttpInfo(permissionCategoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Permission Category Returns permission category by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="permissionCategoryId"></param>
        /// <returns>ApiResponse of PermissionCategoryResource</returns>
        public ApiResponse<PermissionCategoryResource> ReadPermissionCategoryWithHttpInfo (string permissionCategoryId)
        {
            // verify the required parameter 'permissionCategoryId' is set
            if (permissionCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'permissionCategoryId' when calling PermissionsApi->ReadPermissionCategory");

            var localVarPath = "/restapi/v1.0/dictionary/permission-category/{permissionCategoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (permissionCategoryId != null) localVarPathParams.Add("permissionCategoryId", this.Configuration.ApiClient.ParameterToString(permissionCategoryId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadPermissionCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionCategoryResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PermissionCategoryResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionCategoryResource)));
        }

        /// <summary>
        /// Get Permission Category Returns permission category by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="permissionCategoryId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PermissionCategoryResource</returns>
        public async System.Threading.Tasks.Task<PermissionCategoryResource> ReadPermissionCategoryAsync (string permissionCategoryId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PermissionCategoryResource> localVarResponse = await ReadPermissionCategoryWithHttpInfoAsync(permissionCategoryId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Permission Category Returns permission category by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="permissionCategoryId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PermissionCategoryResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PermissionCategoryResource>> ReadPermissionCategoryWithHttpInfoAsync (string permissionCategoryId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'permissionCategoryId' is set
            if (permissionCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'permissionCategoryId' when calling PermissionsApi->ReadPermissionCategory");

            var localVarPath = "/restapi/v1.0/dictionary/permission-category/{permissionCategoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (permissionCategoryId != null) localVarPathParams.Add("permissionCategoryId", this.Configuration.ApiClient.ParameterToString(permissionCategoryId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadPermissionCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionCategoryResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PermissionCategoryResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionCategoryResource)));
        }

    }
}
