/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICallForwardingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Forwarding Number
        /// </summary>
        /// <remarks>
        /// Adds a new forwarding number to the forwarding number list.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="createForwardingNumberRequest">JSON body</param>
        /// <returns>ForwardingNumberInfo</returns>
        ForwardingNumberInfo CreateForwardingNumber (string accountId, string extensionId, CreateForwardingNumberRequest createForwardingNumberRequest);

        /// <summary>
        /// Create Forwarding Number
        /// </summary>
        /// <remarks>
        /// Adds a new forwarding number to the forwarding number list.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="createForwardingNumberRequest">JSON body</param>
        /// <returns>ApiResponse of ForwardingNumberInfo</returns>
        ApiResponse<ForwardingNumberInfo> CreateForwardingNumberWithHttpInfo (string accountId, string extensionId, CreateForwardingNumberRequest createForwardingNumberRequest);
        /// <summary>
        /// Delete Forwarding Number
        /// </summary>
        /// <remarks>
        /// Deletes a forwarding number from the forwarding number list by its ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="forwardingNumberId">Internal identifier of a forwarding number</param>
        /// <returns></returns>
        void DeleteForwardingNumber (string accountId, string extensionId, string forwardingNumberId);

        /// <summary>
        /// Delete Forwarding Number
        /// </summary>
        /// <remarks>
        /// Deletes a forwarding number from the forwarding number list by its ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="forwardingNumberId">Internal identifier of a forwarding number</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteForwardingNumberWithHttpInfo (string accountId, string extensionId, string forwardingNumberId);
        /// <summary>
        /// Delete Forwarding Numbers
        /// </summary>
        /// <remarks>
        /// Deletes multiple forwarding numbers from the forwarding number list by IDs.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="deleteForwardingNumbersRequest">JSON body</param>
        /// <returns></returns>
        void DeleteForwardingNumbers (string accountId, string extensionId, DeleteForwardingNumbersRequest deleteForwardingNumbersRequest);

        /// <summary>
        /// Delete Forwarding Numbers
        /// </summary>
        /// <remarks>
        /// Deletes multiple forwarding numbers from the forwarding number list by IDs.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="deleteForwardingNumbersRequest">JSON body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteForwardingNumbersWithHttpInfo (string accountId, string extensionId, DeleteForwardingNumbersRequest deleteForwardingNumbersRequest);
        /// <summary>
        /// Get Forwarding Number List
        /// </summary>
        /// <remarks>
        /// Returns the list of extension phone numbers used for call forwarding and call flip. The returned list contains all the extension phone numbers used for call forwarding and call flip.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted. (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items). (optional, default to 100)</param>
        /// <returns>GetExtensionForwardingNumberListResponse</returns>
        GetExtensionForwardingNumberListResponse ListForwardingNumbers (string accountId, string extensionId, int? page = default(int?), int? perPage = default(int?));

        /// <summary>
        /// Get Forwarding Number List
        /// </summary>
        /// <remarks>
        /// Returns the list of extension phone numbers used for call forwarding and call flip. The returned list contains all the extension phone numbers used for call forwarding and call flip.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted. (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items). (optional, default to 100)</param>
        /// <returns>ApiResponse of GetExtensionForwardingNumberListResponse</returns>
        ApiResponse<GetExtensionForwardingNumberListResponse> ListForwardingNumbersWithHttpInfo (string accountId, string extensionId, int? page = default(int?), int? perPage = default(int?));
        /// <summary>
        /// Get Forwarding Number
        /// </summary>
        /// <remarks>
        /// Returns a specific forwarding number.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forwardingNumberId"></param>
        /// <param name="extensionId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ForwardingNumberInfo</returns>
        ForwardingNumberInfo ReadForwardingNumber (string forwardingNumberId, string extensionId, string accountId);

        /// <summary>
        /// Get Forwarding Number
        /// </summary>
        /// <remarks>
        /// Returns a specific forwarding number.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forwardingNumberId"></param>
        /// <param name="extensionId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of ForwardingNumberInfo</returns>
        ApiResponse<ForwardingNumberInfo> ReadForwardingNumberWithHttpInfo (string forwardingNumberId, string extensionId, string accountId);
        /// <summary>
        /// Update Forwarding Number
        /// </summary>
        /// <remarks>
        /// Updates the existing forwarding number from the forwarding number list.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="forwardingNumberId">Internal identifier of a forwarding number; returned in response in the &#39;id&#39; field</param>
        /// <param name="updateForwardingNumberRequest">JSON body</param>
        /// <returns>ForwardingNumberInfo</returns>
        ForwardingNumberInfo UpdateForwardingNumber (string accountId, string extensionId, string forwardingNumberId, UpdateForwardingNumberRequest updateForwardingNumberRequest);

        /// <summary>
        /// Update Forwarding Number
        /// </summary>
        /// <remarks>
        /// Updates the existing forwarding number from the forwarding number list.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="forwardingNumberId">Internal identifier of a forwarding number; returned in response in the &#39;id&#39; field</param>
        /// <param name="updateForwardingNumberRequest">JSON body</param>
        /// <returns>ApiResponse of ForwardingNumberInfo</returns>
        ApiResponse<ForwardingNumberInfo> UpdateForwardingNumberWithHttpInfo (string accountId, string extensionId, string forwardingNumberId, UpdateForwardingNumberRequest updateForwardingNumberRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create Forwarding Number
        /// </summary>
        /// <remarks>
        /// Adds a new forwarding number to the forwarding number list.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="createForwardingNumberRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ForwardingNumberInfo</returns>
        System.Threading.Tasks.Task<ForwardingNumberInfo> CreateForwardingNumberAsync (string accountId, string extensionId, CreateForwardingNumberRequest createForwardingNumberRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Forwarding Number
        /// </summary>
        /// <remarks>
        /// Adds a new forwarding number to the forwarding number list.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="createForwardingNumberRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ForwardingNumberInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ForwardingNumberInfo>> CreateForwardingNumberWithHttpInfoAsync (string accountId, string extensionId, CreateForwardingNumberRequest createForwardingNumberRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete Forwarding Number
        /// </summary>
        /// <remarks>
        /// Deletes a forwarding number from the forwarding number list by its ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="forwardingNumberId">Internal identifier of a forwarding number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteForwardingNumberAsync (string accountId, string extensionId, string forwardingNumberId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Forwarding Number
        /// </summary>
        /// <remarks>
        /// Deletes a forwarding number from the forwarding number list by its ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="forwardingNumberId">Internal identifier of a forwarding number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteForwardingNumberWithHttpInfoAsync (string accountId, string extensionId, string forwardingNumberId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete Forwarding Numbers
        /// </summary>
        /// <remarks>
        /// Deletes multiple forwarding numbers from the forwarding number list by IDs.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="deleteForwardingNumbersRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteForwardingNumbersAsync (string accountId, string extensionId, DeleteForwardingNumbersRequest deleteForwardingNumbersRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Forwarding Numbers
        /// </summary>
        /// <remarks>
        /// Deletes multiple forwarding numbers from the forwarding number list by IDs.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="deleteForwardingNumbersRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteForwardingNumbersWithHttpInfoAsync (string accountId, string extensionId, DeleteForwardingNumbersRequest deleteForwardingNumbersRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Forwarding Number List
        /// </summary>
        /// <remarks>
        /// Returns the list of extension phone numbers used for call forwarding and call flip. The returned list contains all the extension phone numbers used for call forwarding and call flip.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted. (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items). (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetExtensionForwardingNumberListResponse</returns>
        System.Threading.Tasks.Task<GetExtensionForwardingNumberListResponse> ListForwardingNumbersAsync (string accountId, string extensionId, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Forwarding Number List
        /// </summary>
        /// <remarks>
        /// Returns the list of extension phone numbers used for call forwarding and call flip. The returned list contains all the extension phone numbers used for call forwarding and call flip.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted. (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items). (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetExtensionForwardingNumberListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetExtensionForwardingNumberListResponse>> ListForwardingNumbersWithHttpInfoAsync (string accountId, string extensionId, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Forwarding Number
        /// </summary>
        /// <remarks>
        /// Returns a specific forwarding number.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forwardingNumberId"></param>
        /// <param name="extensionId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ForwardingNumberInfo</returns>
        System.Threading.Tasks.Task<ForwardingNumberInfo> ReadForwardingNumberAsync (string forwardingNumberId, string extensionId, string accountId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Forwarding Number
        /// </summary>
        /// <remarks>
        /// Returns a specific forwarding number.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forwardingNumberId"></param>
        /// <param name="extensionId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ForwardingNumberInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ForwardingNumberInfo>> ReadForwardingNumberWithHttpInfoAsync (string forwardingNumberId, string extensionId, string accountId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Forwarding Number
        /// </summary>
        /// <remarks>
        /// Updates the existing forwarding number from the forwarding number list.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="forwardingNumberId">Internal identifier of a forwarding number; returned in response in the &#39;id&#39; field</param>
        /// <param name="updateForwardingNumberRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ForwardingNumberInfo</returns>
        System.Threading.Tasks.Task<ForwardingNumberInfo> UpdateForwardingNumberAsync (string accountId, string extensionId, string forwardingNumberId, UpdateForwardingNumberRequest updateForwardingNumberRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Forwarding Number
        /// </summary>
        /// <remarks>
        /// Updates the existing forwarding number from the forwarding number list.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="forwardingNumberId">Internal identifier of a forwarding number; returned in response in the &#39;id&#39; field</param>
        /// <param name="updateForwardingNumberRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ForwardingNumberInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ForwardingNumberInfo>> UpdateForwardingNumberWithHttpInfoAsync (string accountId, string extensionId, string forwardingNumberId, UpdateForwardingNumberRequest updateForwardingNumberRequest, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CallForwardingApi : ICallForwardingApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CallForwardingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CallForwardingApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallForwardingApi"/> class
        /// </summary>
        /// <returns></returns>
        public CallForwardingApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallForwardingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CallForwardingApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create Forwarding Number Adds a new forwarding number to the forwarding number list.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="createForwardingNumberRequest">JSON body</param>
        /// <returns>ForwardingNumberInfo</returns>
        public ForwardingNumberInfo CreateForwardingNumber (string accountId, string extensionId, CreateForwardingNumberRequest createForwardingNumberRequest)
        {
             ApiResponse<ForwardingNumberInfo> localVarResponse = CreateForwardingNumberWithHttpInfo(accountId, extensionId, createForwardingNumberRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Forwarding Number Adds a new forwarding number to the forwarding number list.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="createForwardingNumberRequest">JSON body</param>
        /// <returns>ApiResponse of ForwardingNumberInfo</returns>
        public ApiResponse<ForwardingNumberInfo> CreateForwardingNumberWithHttpInfo (string accountId, string extensionId, CreateForwardingNumberRequest createForwardingNumberRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallForwardingApi->CreateForwardingNumber");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallForwardingApi->CreateForwardingNumber");
            // verify the required parameter 'createForwardingNumberRequest' is set
            if (createForwardingNumberRequest == null)
                throw new ApiException(400, "Missing required parameter 'createForwardingNumberRequest' when calling CallForwardingApi->CreateForwardingNumber");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/forwarding-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (createForwardingNumberRequest != null && createForwardingNumberRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createForwardingNumberRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createForwardingNumberRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateForwardingNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ForwardingNumberInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ForwardingNumberInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ForwardingNumberInfo)));
        }

        /// <summary>
        /// Create Forwarding Number Adds a new forwarding number to the forwarding number list.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="createForwardingNumberRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ForwardingNumberInfo</returns>
        public async System.Threading.Tasks.Task<ForwardingNumberInfo> CreateForwardingNumberAsync (string accountId, string extensionId, CreateForwardingNumberRequest createForwardingNumberRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ForwardingNumberInfo> localVarResponse = await CreateForwardingNumberWithHttpInfoAsync(accountId, extensionId, createForwardingNumberRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Forwarding Number Adds a new forwarding number to the forwarding number list.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="createForwardingNumberRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ForwardingNumberInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ForwardingNumberInfo>> CreateForwardingNumberWithHttpInfoAsync (string accountId, string extensionId, CreateForwardingNumberRequest createForwardingNumberRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallForwardingApi->CreateForwardingNumber");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallForwardingApi->CreateForwardingNumber");
            // verify the required parameter 'createForwardingNumberRequest' is set
            if (createForwardingNumberRequest == null)
                throw new ApiException(400, "Missing required parameter 'createForwardingNumberRequest' when calling CallForwardingApi->CreateForwardingNumber");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/forwarding-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (createForwardingNumberRequest != null && createForwardingNumberRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createForwardingNumberRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createForwardingNumberRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateForwardingNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ForwardingNumberInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ForwardingNumberInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ForwardingNumberInfo)));
        }

        /// <summary>
        /// Delete Forwarding Number Deletes a forwarding number from the forwarding number list by its ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="forwardingNumberId">Internal identifier of a forwarding number</param>
        /// <returns></returns>
        public void DeleteForwardingNumber (string accountId, string extensionId, string forwardingNumberId)
        {
             DeleteForwardingNumberWithHttpInfo(accountId, extensionId, forwardingNumberId);
        }

        /// <summary>
        /// Delete Forwarding Number Deletes a forwarding number from the forwarding number list by its ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="forwardingNumberId">Internal identifier of a forwarding number</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteForwardingNumberWithHttpInfo (string accountId, string extensionId, string forwardingNumberId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallForwardingApi->DeleteForwardingNumber");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallForwardingApi->DeleteForwardingNumber");
            // verify the required parameter 'forwardingNumberId' is set
            if (forwardingNumberId == null)
                throw new ApiException(400, "Missing required parameter 'forwardingNumberId' when calling CallForwardingApi->DeleteForwardingNumber");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/forwarding-number/{forwardingNumberId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (forwardingNumberId != null) localVarPathParams.Add("forwardingNumberId", this.Configuration.ApiClient.ParameterToString(forwardingNumberId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteForwardingNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Forwarding Number Deletes a forwarding number from the forwarding number list by its ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="forwardingNumberId">Internal identifier of a forwarding number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteForwardingNumberAsync (string accountId, string extensionId, string forwardingNumberId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteForwardingNumberWithHttpInfoAsync(accountId, extensionId, forwardingNumberId, cancellationToken);

        }

        /// <summary>
        /// Delete Forwarding Number Deletes a forwarding number from the forwarding number list by its ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="forwardingNumberId">Internal identifier of a forwarding number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteForwardingNumberWithHttpInfoAsync (string accountId, string extensionId, string forwardingNumberId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallForwardingApi->DeleteForwardingNumber");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallForwardingApi->DeleteForwardingNumber");
            // verify the required parameter 'forwardingNumberId' is set
            if (forwardingNumberId == null)
                throw new ApiException(400, "Missing required parameter 'forwardingNumberId' when calling CallForwardingApi->DeleteForwardingNumber");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/forwarding-number/{forwardingNumberId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (forwardingNumberId != null) localVarPathParams.Add("forwardingNumberId", this.Configuration.ApiClient.ParameterToString(forwardingNumberId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteForwardingNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Forwarding Numbers Deletes multiple forwarding numbers from the forwarding number list by IDs.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="deleteForwardingNumbersRequest">JSON body</param>
        /// <returns></returns>
        public void DeleteForwardingNumbers (string accountId, string extensionId, DeleteForwardingNumbersRequest deleteForwardingNumbersRequest)
        {
             DeleteForwardingNumbersWithHttpInfo(accountId, extensionId, deleteForwardingNumbersRequest);
        }

        /// <summary>
        /// Delete Forwarding Numbers Deletes multiple forwarding numbers from the forwarding number list by IDs.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="deleteForwardingNumbersRequest">JSON body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteForwardingNumbersWithHttpInfo (string accountId, string extensionId, DeleteForwardingNumbersRequest deleteForwardingNumbersRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallForwardingApi->DeleteForwardingNumbers");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallForwardingApi->DeleteForwardingNumbers");
            // verify the required parameter 'deleteForwardingNumbersRequest' is set
            if (deleteForwardingNumbersRequest == null)
                throw new ApiException(400, "Missing required parameter 'deleteForwardingNumbersRequest' when calling CallForwardingApi->DeleteForwardingNumbers");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/forwarding-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (deleteForwardingNumbersRequest != null && deleteForwardingNumbersRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteForwardingNumbersRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteForwardingNumbersRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteForwardingNumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Forwarding Numbers Deletes multiple forwarding numbers from the forwarding number list by IDs.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="deleteForwardingNumbersRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteForwardingNumbersAsync (string accountId, string extensionId, DeleteForwardingNumbersRequest deleteForwardingNumbersRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteForwardingNumbersWithHttpInfoAsync(accountId, extensionId, deleteForwardingNumbersRequest, cancellationToken);

        }

        /// <summary>
        /// Delete Forwarding Numbers Deletes multiple forwarding numbers from the forwarding number list by IDs.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="deleteForwardingNumbersRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteForwardingNumbersWithHttpInfoAsync (string accountId, string extensionId, DeleteForwardingNumbersRequest deleteForwardingNumbersRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallForwardingApi->DeleteForwardingNumbers");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallForwardingApi->DeleteForwardingNumbers");
            // verify the required parameter 'deleteForwardingNumbersRequest' is set
            if (deleteForwardingNumbersRequest == null)
                throw new ApiException(400, "Missing required parameter 'deleteForwardingNumbersRequest' when calling CallForwardingApi->DeleteForwardingNumbers");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/forwarding-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (deleteForwardingNumbersRequest != null && deleteForwardingNumbersRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteForwardingNumbersRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteForwardingNumbersRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteForwardingNumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get Forwarding Number List Returns the list of extension phone numbers used for call forwarding and call flip. The returned list contains all the extension phone numbers used for call forwarding and call flip.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted. (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items). (optional, default to 100)</param>
        /// <returns>GetExtensionForwardingNumberListResponse</returns>
        public GetExtensionForwardingNumberListResponse ListForwardingNumbers (string accountId, string extensionId, int? page = default(int?), int? perPage = default(int?))
        {
             ApiResponse<GetExtensionForwardingNumberListResponse> localVarResponse = ListForwardingNumbersWithHttpInfo(accountId, extensionId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Forwarding Number List Returns the list of extension phone numbers used for call forwarding and call flip. The returned list contains all the extension phone numbers used for call forwarding and call flip.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted. (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items). (optional, default to 100)</param>
        /// <returns>ApiResponse of GetExtensionForwardingNumberListResponse</returns>
        public ApiResponse<GetExtensionForwardingNumberListResponse> ListForwardingNumbersWithHttpInfo (string accountId, string extensionId, int? page = default(int?), int? perPage = default(int?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallForwardingApi->ListForwardingNumbers");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallForwardingApi->ListForwardingNumbers");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/forwarding-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListForwardingNumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetExtensionForwardingNumberListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetExtensionForwardingNumberListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetExtensionForwardingNumberListResponse)));
        }

        /// <summary>
        /// Get Forwarding Number List Returns the list of extension phone numbers used for call forwarding and call flip. The returned list contains all the extension phone numbers used for call forwarding and call flip.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted. (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items). (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetExtensionForwardingNumberListResponse</returns>
        public async System.Threading.Tasks.Task<GetExtensionForwardingNumberListResponse> ListForwardingNumbersAsync (string accountId, string extensionId, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetExtensionForwardingNumberListResponse> localVarResponse = await ListForwardingNumbersWithHttpInfoAsync(accountId, extensionId, page, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Forwarding Number List Returns the list of extension phone numbers used for call forwarding and call flip. The returned list contains all the extension phone numbers used for call forwarding and call flip.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted. (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items). (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetExtensionForwardingNumberListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetExtensionForwardingNumberListResponse>> ListForwardingNumbersWithHttpInfoAsync (string accountId, string extensionId, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallForwardingApi->ListForwardingNumbers");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallForwardingApi->ListForwardingNumbers");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/forwarding-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListForwardingNumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetExtensionForwardingNumberListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetExtensionForwardingNumberListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetExtensionForwardingNumberListResponse)));
        }

        /// <summary>
        /// Get Forwarding Number Returns a specific forwarding number.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forwardingNumberId"></param>
        /// <param name="extensionId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ForwardingNumberInfo</returns>
        public ForwardingNumberInfo ReadForwardingNumber (string forwardingNumberId, string extensionId, string accountId)
        {
             ApiResponse<ForwardingNumberInfo> localVarResponse = ReadForwardingNumberWithHttpInfo(forwardingNumberId, extensionId, accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Forwarding Number Returns a specific forwarding number.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forwardingNumberId"></param>
        /// <param name="extensionId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of ForwardingNumberInfo</returns>
        public ApiResponse<ForwardingNumberInfo> ReadForwardingNumberWithHttpInfo (string forwardingNumberId, string extensionId, string accountId)
        {
            // verify the required parameter 'forwardingNumberId' is set
            if (forwardingNumberId == null)
                throw new ApiException(400, "Missing required parameter 'forwardingNumberId' when calling CallForwardingApi->ReadForwardingNumber");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallForwardingApi->ReadForwardingNumber");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallForwardingApi->ReadForwardingNumber");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/forwarding-number/{forwardingNumberId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (forwardingNumberId != null) localVarPathParams.Add("forwardingNumberId", this.Configuration.ApiClient.ParameterToString(forwardingNumberId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadForwardingNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ForwardingNumberInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ForwardingNumberInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ForwardingNumberInfo)));
        }

        /// <summary>
        /// Get Forwarding Number Returns a specific forwarding number.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forwardingNumberId"></param>
        /// <param name="extensionId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ForwardingNumberInfo</returns>
        public async System.Threading.Tasks.Task<ForwardingNumberInfo> ReadForwardingNumberAsync (string forwardingNumberId, string extensionId, string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ForwardingNumberInfo> localVarResponse = await ReadForwardingNumberWithHttpInfoAsync(forwardingNumberId, extensionId, accountId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Forwarding Number Returns a specific forwarding number.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forwardingNumberId"></param>
        /// <param name="extensionId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ForwardingNumberInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ForwardingNumberInfo>> ReadForwardingNumberWithHttpInfoAsync (string forwardingNumberId, string extensionId, string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'forwardingNumberId' is set
            if (forwardingNumberId == null)
                throw new ApiException(400, "Missing required parameter 'forwardingNumberId' when calling CallForwardingApi->ReadForwardingNumber");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallForwardingApi->ReadForwardingNumber");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallForwardingApi->ReadForwardingNumber");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/forwarding-number/{forwardingNumberId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (forwardingNumberId != null) localVarPathParams.Add("forwardingNumberId", this.Configuration.ApiClient.ParameterToString(forwardingNumberId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadForwardingNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ForwardingNumberInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ForwardingNumberInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ForwardingNumberInfo)));
        }

        /// <summary>
        /// Update Forwarding Number Updates the existing forwarding number from the forwarding number list.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="forwardingNumberId">Internal identifier of a forwarding number; returned in response in the &#39;id&#39; field</param>
        /// <param name="updateForwardingNumberRequest">JSON body</param>
        /// <returns>ForwardingNumberInfo</returns>
        public ForwardingNumberInfo UpdateForwardingNumber (string accountId, string extensionId, string forwardingNumberId, UpdateForwardingNumberRequest updateForwardingNumberRequest)
        {
             ApiResponse<ForwardingNumberInfo> localVarResponse = UpdateForwardingNumberWithHttpInfo(accountId, extensionId, forwardingNumberId, updateForwardingNumberRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Forwarding Number Updates the existing forwarding number from the forwarding number list.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="forwardingNumberId">Internal identifier of a forwarding number; returned in response in the &#39;id&#39; field</param>
        /// <param name="updateForwardingNumberRequest">JSON body</param>
        /// <returns>ApiResponse of ForwardingNumberInfo</returns>
        public ApiResponse<ForwardingNumberInfo> UpdateForwardingNumberWithHttpInfo (string accountId, string extensionId, string forwardingNumberId, UpdateForwardingNumberRequest updateForwardingNumberRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallForwardingApi->UpdateForwardingNumber");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallForwardingApi->UpdateForwardingNumber");
            // verify the required parameter 'forwardingNumberId' is set
            if (forwardingNumberId == null)
                throw new ApiException(400, "Missing required parameter 'forwardingNumberId' when calling CallForwardingApi->UpdateForwardingNumber");
            // verify the required parameter 'updateForwardingNumberRequest' is set
            if (updateForwardingNumberRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateForwardingNumberRequest' when calling CallForwardingApi->UpdateForwardingNumber");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/forwarding-number/{forwardingNumberId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (forwardingNumberId != null) localVarPathParams.Add("forwardingNumberId", this.Configuration.ApiClient.ParameterToString(forwardingNumberId)); // path parameter
            if (updateForwardingNumberRequest != null && updateForwardingNumberRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateForwardingNumberRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateForwardingNumberRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateForwardingNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ForwardingNumberInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ForwardingNumberInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ForwardingNumberInfo)));
        }

        /// <summary>
        /// Update Forwarding Number Updates the existing forwarding number from the forwarding number list.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="forwardingNumberId">Internal identifier of a forwarding number; returned in response in the &#39;id&#39; field</param>
        /// <param name="updateForwardingNumberRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ForwardingNumberInfo</returns>
        public async System.Threading.Tasks.Task<ForwardingNumberInfo> UpdateForwardingNumberAsync (string accountId, string extensionId, string forwardingNumberId, UpdateForwardingNumberRequest updateForwardingNumberRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ForwardingNumberInfo> localVarResponse = await UpdateForwardingNumberWithHttpInfoAsync(accountId, extensionId, forwardingNumberId, updateForwardingNumberRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Forwarding Number Updates the existing forwarding number from the forwarding number list.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="forwardingNumberId">Internal identifier of a forwarding number; returned in response in the &#39;id&#39; field</param>
        /// <param name="updateForwardingNumberRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ForwardingNumberInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ForwardingNumberInfo>> UpdateForwardingNumberWithHttpInfoAsync (string accountId, string extensionId, string forwardingNumberId, UpdateForwardingNumberRequest updateForwardingNumberRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CallForwardingApi->UpdateForwardingNumber");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling CallForwardingApi->UpdateForwardingNumber");
            // verify the required parameter 'forwardingNumberId' is set
            if (forwardingNumberId == null)
                throw new ApiException(400, "Missing required parameter 'forwardingNumberId' when calling CallForwardingApi->UpdateForwardingNumber");
            // verify the required parameter 'updateForwardingNumberRequest' is set
            if (updateForwardingNumberRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateForwardingNumberRequest' when calling CallForwardingApi->UpdateForwardingNumber");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/forwarding-number/{forwardingNumberId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (forwardingNumberId != null) localVarPathParams.Add("forwardingNumberId", this.Configuration.ApiClient.ParameterToString(forwardingNumberId)); // path parameter
            if (updateForwardingNumberRequest != null && updateForwardingNumberRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateForwardingNumberRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateForwardingNumberRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateForwardingNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ForwardingNumberInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ForwardingNumberInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ForwardingNumberInfo)));
        }

    }
}
