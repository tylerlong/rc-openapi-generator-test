/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExtensionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Extension
        /// </summary>
        /// <remarks>
        /// Creates an extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionCreationRequest">JSON body</param>
        /// <returns>ExtensionCreationResponse</returns>
        ExtensionCreationResponse CreateExtension (string accountId, ExtensionCreationRequest extensionCreationRequest);

        /// <summary>
        /// Create Extension
        /// </summary>
        /// <remarks>
        /// Creates an extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionCreationRequest">JSON body</param>
        /// <returns>ApiResponse of ExtensionCreationResponse</returns>
        ApiResponse<ExtensionCreationResponse> CreateExtensionWithHttpInfo (string accountId, ExtensionCreationRequest extensionCreationRequest);
        /// <summary>
        /// Update Multiple Extensions
        /// </summary>
        /// <remarks>
        /// Updates multiple extensions at once. Maximum 500 extensions can be updated per request.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionBulkUpdateRequest">JSON body</param>
        /// <returns>ExtensionBulkUpdateTaskResource</returns>
        ExtensionBulkUpdateTaskResource ExtensionBulkUpdate (string accountId, ExtensionBulkUpdateRequest extensionBulkUpdateRequest);

        /// <summary>
        /// Update Multiple Extensions
        /// </summary>
        /// <remarks>
        /// Updates multiple extensions at once. Maximum 500 extensions can be updated per request.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionBulkUpdateRequest">JSON body</param>
        /// <returns>ApiResponse of ExtensionBulkUpdateTaskResource</returns>
        ApiResponse<ExtensionBulkUpdateTaskResource> ExtensionBulkUpdateWithHttpInfo (string accountId, ExtensionBulkUpdateRequest extensionBulkUpdateRequest);
        /// <summary>
        /// Get Update Task Status
        /// </summary>
        /// <remarks>
        /// Returns the status of multiple extension update task
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <returns>ExtensionBulkUpdateTaskResource</returns>
        ExtensionBulkUpdateTaskResource GetExtensionBulkUpdateTask (string accountId, string taskId);

        /// <summary>
        /// Get Update Task Status
        /// </summary>
        /// <remarks>
        /// Returns the status of multiple extension update task
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <returns>ApiResponse of ExtensionBulkUpdateTaskResource</returns>
        ApiResponse<ExtensionBulkUpdateTaskResource> GetExtensionBulkUpdateTaskWithHttpInfo (string accountId, string taskId);
        /// <summary>
        /// Get Extension List
        /// </summary>
        /// <remarks>
        /// Returns the list of extensions created for a particular account. All types of extensions are included in this list.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionNumber">Number of extension to be retrieved (optional)</param>
        /// <param name="email">Extension email address. Multiple values are accepted (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="status">Extension current state. Multiple values are supported. If &#39;Unassigned&#39; is specified, then extensions without &#x60;extensionNumber&#x60; attribute are returned. If not specified, then all extensions are returned. (optional)</param>
        /// <param name="type">Extension type. Multiple values are supported. Please note that legacy &#39;Department&#39; extension type corresponds to &#39;Call Queue&#39; extensions in modern RingCentral product terminology (optional)</param>
        /// <returns>GetExtensionListResponse</returns>
        GetExtensionListResponse ListExtensions (string accountId, string extensionNumber = default(string), string email = default(string), long? page = default(long?), long? perPage = default(long?), List<string> status = default(List<string>), List<string> type = default(List<string>));

        /// <summary>
        /// Get Extension List
        /// </summary>
        /// <remarks>
        /// Returns the list of extensions created for a particular account. All types of extensions are included in this list.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionNumber">Number of extension to be retrieved (optional)</param>
        /// <param name="email">Extension email address. Multiple values are accepted (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="status">Extension current state. Multiple values are supported. If &#39;Unassigned&#39; is specified, then extensions without &#x60;extensionNumber&#x60; attribute are returned. If not specified, then all extensions are returned. (optional)</param>
        /// <param name="type">Extension type. Multiple values are supported. Please note that legacy &#39;Department&#39; extension type corresponds to &#39;Call Queue&#39; extensions in modern RingCentral product terminology (optional)</param>
        /// <returns>ApiResponse of GetExtensionListResponse</returns>
        ApiResponse<GetExtensionListResponse> ListExtensionsWithHttpInfo (string accountId, string extensionNumber = default(string), string email = default(string), long? page = default(long?), long? perPage = default(long?), List<string> status = default(List<string>), List<string> type = default(List<string>));
        /// <summary>
        /// Get User Template List
        /// </summary>
        /// <remarks>
        /// Returns the list of user templates for the current account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="type"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>UserTemplates</returns>
        UserTemplates ListUserTemplates (string accountId, string type = default(string), string page = default(string), string perPage = default(string));

        /// <summary>
        /// Get User Template List
        /// </summary>
        /// <remarks>
        /// Returns the list of user templates for the current account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="type"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>ApiResponse of UserTemplates</returns>
        ApiResponse<UserTemplates> ListUserTemplatesWithHttpInfo (string accountId, string type = default(string), string page = default(string), string perPage = default(string));
        /// <summary>
        /// Get User Template
        /// </summary>
        /// <remarks>
        /// Returns the user template by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="templateId"></param>
        /// <returns>TemplateInfo</returns>
        TemplateInfo ReadUserTemplate (string accountId, string templateId);

        /// <summary>
        /// Get User Template
        /// </summary>
        /// <remarks>
        /// Returns the user template by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="templateId"></param>
        /// <returns>ApiResponse of TemplateInfo</returns>
        ApiResponse<TemplateInfo> ReadUserTemplateWithHttpInfo (string accountId, string templateId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create Extension
        /// </summary>
        /// <remarks>
        /// Creates an extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionCreationRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ExtensionCreationResponse</returns>
        System.Threading.Tasks.Task<ExtensionCreationResponse> CreateExtensionAsync (string accountId, ExtensionCreationRequest extensionCreationRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Extension
        /// </summary>
        /// <remarks>
        /// Creates an extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionCreationRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ExtensionCreationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionCreationResponse>> CreateExtensionWithHttpInfoAsync (string accountId, ExtensionCreationRequest extensionCreationRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Multiple Extensions
        /// </summary>
        /// <remarks>
        /// Updates multiple extensions at once. Maximum 500 extensions can be updated per request.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionBulkUpdateRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ExtensionBulkUpdateTaskResource</returns>
        System.Threading.Tasks.Task<ExtensionBulkUpdateTaskResource> ExtensionBulkUpdateAsync (string accountId, ExtensionBulkUpdateRequest extensionBulkUpdateRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Multiple Extensions
        /// </summary>
        /// <remarks>
        /// Updates multiple extensions at once. Maximum 500 extensions can be updated per request.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionBulkUpdateRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ExtensionBulkUpdateTaskResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionBulkUpdateTaskResource>> ExtensionBulkUpdateWithHttpInfoAsync (string accountId, ExtensionBulkUpdateRequest extensionBulkUpdateRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Update Task Status
        /// </summary>
        /// <remarks>
        /// Returns the status of multiple extension update task
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ExtensionBulkUpdateTaskResource</returns>
        System.Threading.Tasks.Task<ExtensionBulkUpdateTaskResource> GetExtensionBulkUpdateTaskAsync (string accountId, string taskId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Update Task Status
        /// </summary>
        /// <remarks>
        /// Returns the status of multiple extension update task
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ExtensionBulkUpdateTaskResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionBulkUpdateTaskResource>> GetExtensionBulkUpdateTaskWithHttpInfoAsync (string accountId, string taskId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Extension List
        /// </summary>
        /// <remarks>
        /// Returns the list of extensions created for a particular account. All types of extensions are included in this list.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionNumber">Number of extension to be retrieved (optional)</param>
        /// <param name="email">Extension email address. Multiple values are accepted (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="status">Extension current state. Multiple values are supported. If &#39;Unassigned&#39; is specified, then extensions without &#x60;extensionNumber&#x60; attribute are returned. If not specified, then all extensions are returned. (optional)</param>
        /// <param name="type">Extension type. Multiple values are supported. Please note that legacy &#39;Department&#39; extension type corresponds to &#39;Call Queue&#39; extensions in modern RingCentral product terminology (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetExtensionListResponse</returns>
        System.Threading.Tasks.Task<GetExtensionListResponse> ListExtensionsAsync (string accountId, string extensionNumber = default(string), string email = default(string), long? page = default(long?), long? perPage = default(long?), List<string> status = default(List<string>), List<string> type = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Extension List
        /// </summary>
        /// <remarks>
        /// Returns the list of extensions created for a particular account. All types of extensions are included in this list.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionNumber">Number of extension to be retrieved (optional)</param>
        /// <param name="email">Extension email address. Multiple values are accepted (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="status">Extension current state. Multiple values are supported. If &#39;Unassigned&#39; is specified, then extensions without &#x60;extensionNumber&#x60; attribute are returned. If not specified, then all extensions are returned. (optional)</param>
        /// <param name="type">Extension type. Multiple values are supported. Please note that legacy &#39;Department&#39; extension type corresponds to &#39;Call Queue&#39; extensions in modern RingCentral product terminology (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetExtensionListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetExtensionListResponse>> ListExtensionsWithHttpInfoAsync (string accountId, string extensionNumber = default(string), string email = default(string), long? page = default(long?), long? perPage = default(long?), List<string> status = default(List<string>), List<string> type = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get User Template List
        /// </summary>
        /// <remarks>
        /// Returns the list of user templates for the current account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="type"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserTemplates</returns>
        System.Threading.Tasks.Task<UserTemplates> ListUserTemplatesAsync (string accountId, string type = default(string), string page = default(string), string perPage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get User Template List
        /// </summary>
        /// <remarks>
        /// Returns the list of user templates for the current account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="type"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserTemplates)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserTemplates>> ListUserTemplatesWithHttpInfoAsync (string accountId, string type = default(string), string page = default(string), string perPage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get User Template
        /// </summary>
        /// <remarks>
        /// Returns the user template by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="templateId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TemplateInfo</returns>
        System.Threading.Tasks.Task<TemplateInfo> ReadUserTemplateAsync (string accountId, string templateId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get User Template
        /// </summary>
        /// <remarks>
        /// Returns the user template by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="templateId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TemplateInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateInfo>> ReadUserTemplateWithHttpInfoAsync (string accountId, string templateId, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ExtensionsApi : IExtensionsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ExtensionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExtensionsApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExtensionsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ExtensionsApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExtensionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ExtensionsApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create Extension Creates an extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionCreationRequest">JSON body</param>
        /// <returns>ExtensionCreationResponse</returns>
        public ExtensionCreationResponse CreateExtension (string accountId, ExtensionCreationRequest extensionCreationRequest)
        {
             ApiResponse<ExtensionCreationResponse> localVarResponse = CreateExtensionWithHttpInfo(accountId, extensionCreationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Extension Creates an extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionCreationRequest">JSON body</param>
        /// <returns>ApiResponse of ExtensionCreationResponse</returns>
        public ApiResponse<ExtensionCreationResponse> CreateExtensionWithHttpInfo (string accountId, ExtensionCreationRequest extensionCreationRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExtensionsApi->CreateExtension");
            // verify the required parameter 'extensionCreationRequest' is set
            if (extensionCreationRequest == null)
                throw new ApiException(400, "Missing required parameter 'extensionCreationRequest' when calling ExtensionsApi->CreateExtension");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionCreationRequest != null && extensionCreationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(extensionCreationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = extensionCreationRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateExtension", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionCreationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtensionCreationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionCreationResponse)));
        }

        /// <summary>
        /// Create Extension Creates an extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionCreationRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ExtensionCreationResponse</returns>
        public async System.Threading.Tasks.Task<ExtensionCreationResponse> CreateExtensionAsync (string accountId, ExtensionCreationRequest extensionCreationRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ExtensionCreationResponse> localVarResponse = await CreateExtensionWithHttpInfoAsync(accountId, extensionCreationRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Extension Creates an extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionCreationRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ExtensionCreationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionCreationResponse>> CreateExtensionWithHttpInfoAsync (string accountId, ExtensionCreationRequest extensionCreationRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExtensionsApi->CreateExtension");
            // verify the required parameter 'extensionCreationRequest' is set
            if (extensionCreationRequest == null)
                throw new ApiException(400, "Missing required parameter 'extensionCreationRequest' when calling ExtensionsApi->CreateExtension");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionCreationRequest != null && extensionCreationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(extensionCreationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = extensionCreationRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateExtension", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionCreationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtensionCreationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionCreationResponse)));
        }

        /// <summary>
        /// Update Multiple Extensions Updates multiple extensions at once. Maximum 500 extensions can be updated per request.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionBulkUpdateRequest">JSON body</param>
        /// <returns>ExtensionBulkUpdateTaskResource</returns>
        public ExtensionBulkUpdateTaskResource ExtensionBulkUpdate (string accountId, ExtensionBulkUpdateRequest extensionBulkUpdateRequest)
        {
             ApiResponse<ExtensionBulkUpdateTaskResource> localVarResponse = ExtensionBulkUpdateWithHttpInfo(accountId, extensionBulkUpdateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Multiple Extensions Updates multiple extensions at once. Maximum 500 extensions can be updated per request.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionBulkUpdateRequest">JSON body</param>
        /// <returns>ApiResponse of ExtensionBulkUpdateTaskResource</returns>
        public ApiResponse<ExtensionBulkUpdateTaskResource> ExtensionBulkUpdateWithHttpInfo (string accountId, ExtensionBulkUpdateRequest extensionBulkUpdateRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExtensionsApi->ExtensionBulkUpdate");
            // verify the required parameter 'extensionBulkUpdateRequest' is set
            if (extensionBulkUpdateRequest == null)
                throw new ApiException(400, "Missing required parameter 'extensionBulkUpdateRequest' when calling ExtensionsApi->ExtensionBulkUpdate");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension-bulk-update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionBulkUpdateRequest != null && extensionBulkUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(extensionBulkUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = extensionBulkUpdateRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtensionBulkUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionBulkUpdateTaskResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtensionBulkUpdateTaskResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionBulkUpdateTaskResource)));
        }

        /// <summary>
        /// Update Multiple Extensions Updates multiple extensions at once. Maximum 500 extensions can be updated per request.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionBulkUpdateRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ExtensionBulkUpdateTaskResource</returns>
        public async System.Threading.Tasks.Task<ExtensionBulkUpdateTaskResource> ExtensionBulkUpdateAsync (string accountId, ExtensionBulkUpdateRequest extensionBulkUpdateRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ExtensionBulkUpdateTaskResource> localVarResponse = await ExtensionBulkUpdateWithHttpInfoAsync(accountId, extensionBulkUpdateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Multiple Extensions Updates multiple extensions at once. Maximum 500 extensions can be updated per request.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionBulkUpdateRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ExtensionBulkUpdateTaskResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionBulkUpdateTaskResource>> ExtensionBulkUpdateWithHttpInfoAsync (string accountId, ExtensionBulkUpdateRequest extensionBulkUpdateRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExtensionsApi->ExtensionBulkUpdate");
            // verify the required parameter 'extensionBulkUpdateRequest' is set
            if (extensionBulkUpdateRequest == null)
                throw new ApiException(400, "Missing required parameter 'extensionBulkUpdateRequest' when calling ExtensionsApi->ExtensionBulkUpdate");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension-bulk-update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionBulkUpdateRequest != null && extensionBulkUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(extensionBulkUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = extensionBulkUpdateRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtensionBulkUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionBulkUpdateTaskResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtensionBulkUpdateTaskResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionBulkUpdateTaskResource)));
        }

        /// <summary>
        /// Get Update Task Status Returns the status of multiple extension update task
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <returns>ExtensionBulkUpdateTaskResource</returns>
        public ExtensionBulkUpdateTaskResource GetExtensionBulkUpdateTask (string accountId, string taskId)
        {
             ApiResponse<ExtensionBulkUpdateTaskResource> localVarResponse = GetExtensionBulkUpdateTaskWithHttpInfo(accountId, taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Update Task Status Returns the status of multiple extension update task
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <returns>ApiResponse of ExtensionBulkUpdateTaskResource</returns>
        public ApiResponse<ExtensionBulkUpdateTaskResource> GetExtensionBulkUpdateTaskWithHttpInfo (string accountId, string taskId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExtensionsApi->GetExtensionBulkUpdateTask");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ExtensionsApi->GetExtensionBulkUpdateTask");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension-bulk-update/tasks/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExtensionBulkUpdateTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionBulkUpdateTaskResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtensionBulkUpdateTaskResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionBulkUpdateTaskResource)));
        }

        /// <summary>
        /// Get Update Task Status Returns the status of multiple extension update task
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ExtensionBulkUpdateTaskResource</returns>
        public async System.Threading.Tasks.Task<ExtensionBulkUpdateTaskResource> GetExtensionBulkUpdateTaskAsync (string accountId, string taskId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ExtensionBulkUpdateTaskResource> localVarResponse = await GetExtensionBulkUpdateTaskWithHttpInfoAsync(accountId, taskId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Update Task Status Returns the status of multiple extension update task
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ExtensionBulkUpdateTaskResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionBulkUpdateTaskResource>> GetExtensionBulkUpdateTaskWithHttpInfoAsync (string accountId, string taskId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExtensionsApi->GetExtensionBulkUpdateTask");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ExtensionsApi->GetExtensionBulkUpdateTask");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension-bulk-update/tasks/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExtensionBulkUpdateTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionBulkUpdateTaskResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtensionBulkUpdateTaskResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionBulkUpdateTaskResource)));
        }

        /// <summary>
        /// Get Extension List Returns the list of extensions created for a particular account. All types of extensions are included in this list.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionNumber">Number of extension to be retrieved (optional)</param>
        /// <param name="email">Extension email address. Multiple values are accepted (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="status">Extension current state. Multiple values are supported. If &#39;Unassigned&#39; is specified, then extensions without &#x60;extensionNumber&#x60; attribute are returned. If not specified, then all extensions are returned. (optional)</param>
        /// <param name="type">Extension type. Multiple values are supported. Please note that legacy &#39;Department&#39; extension type corresponds to &#39;Call Queue&#39; extensions in modern RingCentral product terminology (optional)</param>
        /// <returns>GetExtensionListResponse</returns>
        public GetExtensionListResponse ListExtensions (string accountId, string extensionNumber = default(string), string email = default(string), long? page = default(long?), long? perPage = default(long?), List<string> status = default(List<string>), List<string> type = default(List<string>))
        {
             ApiResponse<GetExtensionListResponse> localVarResponse = ListExtensionsWithHttpInfo(accountId, extensionNumber, email, page, perPage, status, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Extension List Returns the list of extensions created for a particular account. All types of extensions are included in this list.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionNumber">Number of extension to be retrieved (optional)</param>
        /// <param name="email">Extension email address. Multiple values are accepted (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="status">Extension current state. Multiple values are supported. If &#39;Unassigned&#39; is specified, then extensions without &#x60;extensionNumber&#x60; attribute are returned. If not specified, then all extensions are returned. (optional)</param>
        /// <param name="type">Extension type. Multiple values are supported. Please note that legacy &#39;Department&#39; extension type corresponds to &#39;Call Queue&#39; extensions in modern RingCentral product terminology (optional)</param>
        /// <returns>ApiResponse of GetExtensionListResponse</returns>
        public ApiResponse<GetExtensionListResponse> ListExtensionsWithHttpInfo (string accountId, string extensionNumber = default(string), string email = default(string), long? page = default(long?), long? perPage = default(long?), List<string> status = default(List<string>), List<string> type = default(List<string>))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExtensionsApi->ListExtensions");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extensionNumber", extensionNumber)); // query parameter
            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "status", status)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "type", type)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListExtensions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetExtensionListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetExtensionListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetExtensionListResponse)));
        }

        /// <summary>
        /// Get Extension List Returns the list of extensions created for a particular account. All types of extensions are included in this list.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionNumber">Number of extension to be retrieved (optional)</param>
        /// <param name="email">Extension email address. Multiple values are accepted (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="status">Extension current state. Multiple values are supported. If &#39;Unassigned&#39; is specified, then extensions without &#x60;extensionNumber&#x60; attribute are returned. If not specified, then all extensions are returned. (optional)</param>
        /// <param name="type">Extension type. Multiple values are supported. Please note that legacy &#39;Department&#39; extension type corresponds to &#39;Call Queue&#39; extensions in modern RingCentral product terminology (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetExtensionListResponse</returns>
        public async System.Threading.Tasks.Task<GetExtensionListResponse> ListExtensionsAsync (string accountId, string extensionNumber = default(string), string email = default(string), long? page = default(long?), long? perPage = default(long?), List<string> status = default(List<string>), List<string> type = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetExtensionListResponse> localVarResponse = await ListExtensionsWithHttpInfoAsync(accountId, extensionNumber, email, page, perPage, status, type, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Extension List Returns the list of extensions created for a particular account. All types of extensions are included in this list.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionNumber">Number of extension to be retrieved (optional)</param>
        /// <param name="email">Extension email address. Multiple values are accepted (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are allowed (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="status">Extension current state. Multiple values are supported. If &#39;Unassigned&#39; is specified, then extensions without &#x60;extensionNumber&#x60; attribute are returned. If not specified, then all extensions are returned. (optional)</param>
        /// <param name="type">Extension type. Multiple values are supported. Please note that legacy &#39;Department&#39; extension type corresponds to &#39;Call Queue&#39; extensions in modern RingCentral product terminology (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetExtensionListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetExtensionListResponse>> ListExtensionsWithHttpInfoAsync (string accountId, string extensionNumber = default(string), string email = default(string), long? page = default(long?), long? perPage = default(long?), List<string> status = default(List<string>), List<string> type = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExtensionsApi->ListExtensions");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extensionNumber", extensionNumber)); // query parameter
            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "status", status)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "type", type)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListExtensions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetExtensionListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetExtensionListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetExtensionListResponse)));
        }

        /// <summary>
        /// Get User Template List Returns the list of user templates for the current account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="type"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>UserTemplates</returns>
        public UserTemplates ListUserTemplates (string accountId, string type = default(string), string page = default(string), string perPage = default(string))
        {
             ApiResponse<UserTemplates> localVarResponse = ListUserTemplatesWithHttpInfo(accountId, type, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Template List Returns the list of user templates for the current account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="type"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>ApiResponse of UserTemplates</returns>
        public ApiResponse<UserTemplates> ListUserTemplatesWithHttpInfo (string accountId, string type = default(string), string page = default(string), string perPage = default(string))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExtensionsApi->ListUserTemplates");

            var localVarPath = "/restapi/v1.0/account/{accountId}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListUserTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserTemplates>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserTemplates) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserTemplates)));
        }

        /// <summary>
        /// Get User Template List Returns the list of user templates for the current account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="type"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserTemplates</returns>
        public async System.Threading.Tasks.Task<UserTemplates> ListUserTemplatesAsync (string accountId, string type = default(string), string page = default(string), string perPage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UserTemplates> localVarResponse = await ListUserTemplatesWithHttpInfoAsync(accountId, type, page, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get User Template List Returns the list of user templates for the current account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="type"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserTemplates)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserTemplates>> ListUserTemplatesWithHttpInfoAsync (string accountId, string type = default(string), string page = default(string), string perPage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExtensionsApi->ListUserTemplates");

            var localVarPath = "/restapi/v1.0/account/{accountId}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListUserTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserTemplates>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserTemplates) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserTemplates)));
        }

        /// <summary>
        /// Get User Template Returns the user template by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="templateId"></param>
        /// <returns>TemplateInfo</returns>
        public TemplateInfo ReadUserTemplate (string accountId, string templateId)
        {
             ApiResponse<TemplateInfo> localVarResponse = ReadUserTemplateWithHttpInfo(accountId, templateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Template Returns the user template by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="templateId"></param>
        /// <returns>ApiResponse of TemplateInfo</returns>
        public ApiResponse<TemplateInfo> ReadUserTemplateWithHttpInfo (string accountId, string templateId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExtensionsApi->ReadUserTemplate");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling ExtensionsApi->ReadUserTemplate");

            var localVarPath = "/restapi/v1.0/account/{accountId}/templates/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadUserTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TemplateInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateInfo)));
        }

        /// <summary>
        /// Get User Template Returns the user template by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="templateId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TemplateInfo</returns>
        public async System.Threading.Tasks.Task<TemplateInfo> ReadUserTemplateAsync (string accountId, string templateId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TemplateInfo> localVarResponse = await ReadUserTemplateWithHttpInfoAsync(accountId, templateId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get User Template Returns the user template by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="templateId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TemplateInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateInfo>> ReadUserTemplateWithHttpInfoAsync (string accountId, string templateId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExtensionsApi->ReadUserTemplate");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling ExtensionsApi->ReadUserTemplate");

            var localVarPath = "/restapi/v1.0/account/{accountId}/templates/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadUserTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TemplateInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateInfo)));
        }

    }
}
