/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOAuthOIDCApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// OAuth 2.0 Authorization
        /// </summary>
        /// <remarks>
        /// Performs OAuth 2.0 authorization (GET version)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void Authorize ();

        /// <summary>
        /// OAuth 2.0 Authorization
        /// </summary>
        /// <remarks>
        /// Performs OAuth 2.0 authorization (GET version)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AuthorizeWithHttpInfo ();
        /// <summary>
        /// OAuth 2.0 Authorization (POST)
        /// </summary>
        /// <remarks>
        /// Performs OAuth 2.0 authorization (POST version)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType">Determines authorization flow: **code** - Authorization Code, **token** - Implicit Grant</param>
        /// <param name="redirectUri">This is a callback URI which determines where the response is sent. The value of this parameter must exactly match one of the URIs you have provided for your app upon registration</param>
        /// <param name="clientId">Identifier (key) of a client application</param>
        /// <param name="state">Client state. Returned back to the client at the end of the flow (optional)</param>
        /// <param name="brandId">Brand identifier. If it is not provided in request, server will try to determine brand from client app profile. The default value is &#39;1210&#39; - RingCentral US (optional)</param>
        /// <param name="display">Style of login form. The default value is &#39;page&#39;. The &#39;popup&#39; and &#39;touch&#39; values are featured for mobile applications (optional)</param>
        /// <param name="prompt">Specifies which login form will be displayed. Space-separated set of the following values: &#39;login&#39; - official RingCentral login form, &#39;sso&#39; - Single Sign-On login form, &#39;consent&#39; - form to show the requested scope and prompt user for consent. Either &#39;login&#39; or &#39;sso&#39; (or both) must be specified. The default value is &#39;login&amp;sso&#39; (optional)</param>
        /// <param name="localeId">Localization code of a language. Overwrites &#39;Accept-Language&#39; header value (optional)</param>
        /// <param name="uiLocales">Localization code of a language. Overwrites &#39;localeId&#39; parameter value (optional)</param>
        /// <param name="uiOptions">User interface options data (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <param name="requestUri"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="codeChallenge"> (optional)</param>
        /// <param name="codeChallengeMethod"> (optional)</param>
        /// <returns></returns>
        void Authorize2 (string responseType, string redirectUri, string clientId, string state = default(string), string brandId = default(string), string display = default(string), string prompt = default(string), string localeId = default(string), string uiLocales = default(string), string uiOptions = default(string), string scope = default(string), string acceptLanguage = default(string), string request = default(string), string requestUri = default(string), string nonce = default(string), string codeChallenge = default(string), string codeChallengeMethod = default(string));

        /// <summary>
        /// OAuth 2.0 Authorization (POST)
        /// </summary>
        /// <remarks>
        /// Performs OAuth 2.0 authorization (POST version)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType">Determines authorization flow: **code** - Authorization Code, **token** - Implicit Grant</param>
        /// <param name="redirectUri">This is a callback URI which determines where the response is sent. The value of this parameter must exactly match one of the URIs you have provided for your app upon registration</param>
        /// <param name="clientId">Identifier (key) of a client application</param>
        /// <param name="state">Client state. Returned back to the client at the end of the flow (optional)</param>
        /// <param name="brandId">Brand identifier. If it is not provided in request, server will try to determine brand from client app profile. The default value is &#39;1210&#39; - RingCentral US (optional)</param>
        /// <param name="display">Style of login form. The default value is &#39;page&#39;. The &#39;popup&#39; and &#39;touch&#39; values are featured for mobile applications (optional)</param>
        /// <param name="prompt">Specifies which login form will be displayed. Space-separated set of the following values: &#39;login&#39; - official RingCentral login form, &#39;sso&#39; - Single Sign-On login form, &#39;consent&#39; - form to show the requested scope and prompt user for consent. Either &#39;login&#39; or &#39;sso&#39; (or both) must be specified. The default value is &#39;login&amp;sso&#39; (optional)</param>
        /// <param name="localeId">Localization code of a language. Overwrites &#39;Accept-Language&#39; header value (optional)</param>
        /// <param name="uiLocales">Localization code of a language. Overwrites &#39;localeId&#39; parameter value (optional)</param>
        /// <param name="uiOptions">User interface options data (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <param name="requestUri"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="codeChallenge"> (optional)</param>
        /// <param name="codeChallengeMethod"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Authorize2WithHttpInfo (string responseType, string redirectUri, string clientId, string state = default(string), string brandId = default(string), string display = default(string), string prompt = default(string), string localeId = default(string), string uiLocales = default(string), string uiOptions = default(string), string scope = default(string), string acceptLanguage = default(string), string request = default(string), string requestUri = default(string), string nonce = default(string), string codeChallenge = default(string), string codeChallengeMethod = default(string));
        /// <summary>
        /// Get OAuth Token
        /// </summary>
        /// <remarks>
        /// Returns access (and potentially refresh) tokens for making API requests.  Depending on client application type requests to this endpoint may require authentication with HTTP Basic scheme using registered client ID and client secret as login and password, correspondingly. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Phone number linked to an account or extension in E.164 format with or without leading &#39;+&#39; sign (optional)</param>
        /// <param name="password">User&#39;s password (optional)</param>
        /// <param name="extension">Optional. Extension short number. If company number is specified as a username, and extension is not specified, the server will attempt to authenticate client as main company administrator (optional)</param>
        /// <param name="grantType">Grant type (optional, default to password)</param>
        /// <param name="code">Authorization code (optional)</param>
        /// <param name="redirectUri">This is a callback URI which determines where the response is sent. The value of this parameter must exactly match one of the URIs you have provided for your app upon registration (optional)</param>
        /// <param name="accessTokenTtl">Access token lifetime in seconds (optional, default to 3600)</param>
        /// <param name="refreshTokenTtl">Refresh token lifetime in seconds (optional, default to 604800)</param>
        /// <param name="scope">List of API permissions to be used with access token. Can be omitted when requesting all permissions defined during the application registration phase (optional)</param>
        /// <param name="refreshToken">Previously issued refresh token. This is the only formData field used for the Refresh Token Flow. (optional)</param>
        /// <param name="endpointId">The unique identifier of a client application. If not specified, the previously specified or auto generated value is used by default (optional)</param>
        /// <param name="pin"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="accountId"> (optional)</param>
        /// <param name="partnerAccountId"> (optional)</param>
        /// <param name="clientAssertionType"> (optional)</param>
        /// <param name="clientAssertion"> (optional)</param>
        /// <param name="assertion"> (optional)</param>
        /// <param name="brandId"> (optional)</param>
        /// <param name="codeVerifier"> (optional)</param>
        /// <param name="deviceCode"> (optional)</param>
        /// <returns>TokenInfo</returns>
        TokenInfo GetToken (string username = default(string), string password = default(string), string extension = default(string), string grantType = default(string), string code = default(string), string redirectUri = default(string), int? accessTokenTtl = default(int?), int? refreshTokenTtl = default(int?), string scope = default(string), string refreshToken = default(string), string endpointId = default(string), string pin = default(string), string clientId = default(string), string accountId = default(string), string partnerAccountId = default(string), string clientAssertionType = default(string), string clientAssertion = default(string), string assertion = default(string), string brandId = default(string), string codeVerifier = default(string), string deviceCode = default(string));

        /// <summary>
        /// Get OAuth Token
        /// </summary>
        /// <remarks>
        /// Returns access (and potentially refresh) tokens for making API requests.  Depending on client application type requests to this endpoint may require authentication with HTTP Basic scheme using registered client ID and client secret as login and password, correspondingly. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Phone number linked to an account or extension in E.164 format with or without leading &#39;+&#39; sign (optional)</param>
        /// <param name="password">User&#39;s password (optional)</param>
        /// <param name="extension">Optional. Extension short number. If company number is specified as a username, and extension is not specified, the server will attempt to authenticate client as main company administrator (optional)</param>
        /// <param name="grantType">Grant type (optional, default to password)</param>
        /// <param name="code">Authorization code (optional)</param>
        /// <param name="redirectUri">This is a callback URI which determines where the response is sent. The value of this parameter must exactly match one of the URIs you have provided for your app upon registration (optional)</param>
        /// <param name="accessTokenTtl">Access token lifetime in seconds (optional, default to 3600)</param>
        /// <param name="refreshTokenTtl">Refresh token lifetime in seconds (optional, default to 604800)</param>
        /// <param name="scope">List of API permissions to be used with access token. Can be omitted when requesting all permissions defined during the application registration phase (optional)</param>
        /// <param name="refreshToken">Previously issued refresh token. This is the only formData field used for the Refresh Token Flow. (optional)</param>
        /// <param name="endpointId">The unique identifier of a client application. If not specified, the previously specified or auto generated value is used by default (optional)</param>
        /// <param name="pin"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="accountId"> (optional)</param>
        /// <param name="partnerAccountId"> (optional)</param>
        /// <param name="clientAssertionType"> (optional)</param>
        /// <param name="clientAssertion"> (optional)</param>
        /// <param name="assertion"> (optional)</param>
        /// <param name="brandId"> (optional)</param>
        /// <param name="codeVerifier"> (optional)</param>
        /// <param name="deviceCode"> (optional)</param>
        /// <returns>ApiResponse of TokenInfo</returns>
        ApiResponse<TokenInfo> GetTokenWithHttpInfo (string username = default(string), string password = default(string), string extension = default(string), string grantType = default(string), string code = default(string), string redirectUri = default(string), int? accessTokenTtl = default(int?), int? refreshTokenTtl = default(int?), string scope = default(string), string refreshToken = default(string), string endpointId = default(string), string pin = default(string), string clientId = default(string), string accountId = default(string), string partnerAccountId = default(string), string clientAssertionType = default(string), string clientAssertion = default(string), string assertion = default(string), string brandId = default(string), string codeVerifier = default(string), string deviceCode = default(string));
        /// <summary>
        /// Revoke Token
        /// </summary>
        /// <remarks>
        /// Revokes previously issued access and refresh token.  Depending on client application type requests to this endpoint may require authentication with HTTP Basic scheme using registered client ID and client secret as login and password, correspondingly. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Active access or refresh token to be revoked</param>
        /// <param name="clientAssertionType"> (optional)</param>
        /// <param name="clientAssertion"> (optional)</param>
        /// <returns></returns>
        void RevokeToken (string token, string clientAssertionType = default(string), string clientAssertion = default(string));

        /// <summary>
        /// Revoke Token
        /// </summary>
        /// <remarks>
        /// Revokes previously issued access and refresh token.  Depending on client application type requests to this endpoint may require authentication with HTTP Basic scheme using registered client ID and client secret as login and password, correspondingly. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Active access or refresh token to be revoked</param>
        /// <param name="clientAssertionType"> (optional)</param>
        /// <param name="clientAssertion"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RevokeTokenWithHttpInfo (string token, string clientAssertionType = default(string), string clientAssertion = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// OAuth 2.0 Authorization
        /// </summary>
        /// <remarks>
        /// Performs OAuth 2.0 authorization (GET version)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AuthorizeAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// OAuth 2.0 Authorization
        /// </summary>
        /// <remarks>
        /// Performs OAuth 2.0 authorization (GET version)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AuthorizeWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// OAuth 2.0 Authorization (POST)
        /// </summary>
        /// <remarks>
        /// Performs OAuth 2.0 authorization (POST version)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType">Determines authorization flow: **code** - Authorization Code, **token** - Implicit Grant</param>
        /// <param name="redirectUri">This is a callback URI which determines where the response is sent. The value of this parameter must exactly match one of the URIs you have provided for your app upon registration</param>
        /// <param name="clientId">Identifier (key) of a client application</param>
        /// <param name="state">Client state. Returned back to the client at the end of the flow (optional)</param>
        /// <param name="brandId">Brand identifier. If it is not provided in request, server will try to determine brand from client app profile. The default value is &#39;1210&#39; - RingCentral US (optional)</param>
        /// <param name="display">Style of login form. The default value is &#39;page&#39;. The &#39;popup&#39; and &#39;touch&#39; values are featured for mobile applications (optional)</param>
        /// <param name="prompt">Specifies which login form will be displayed. Space-separated set of the following values: &#39;login&#39; - official RingCentral login form, &#39;sso&#39; - Single Sign-On login form, &#39;consent&#39; - form to show the requested scope and prompt user for consent. Either &#39;login&#39; or &#39;sso&#39; (or both) must be specified. The default value is &#39;login&amp;sso&#39; (optional)</param>
        /// <param name="localeId">Localization code of a language. Overwrites &#39;Accept-Language&#39; header value (optional)</param>
        /// <param name="uiLocales">Localization code of a language. Overwrites &#39;localeId&#39; parameter value (optional)</param>
        /// <param name="uiOptions">User interface options data (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <param name="requestUri"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="codeChallenge"> (optional)</param>
        /// <param name="codeChallengeMethod"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Authorize2Async (string responseType, string redirectUri, string clientId, string state = default(string), string brandId = default(string), string display = default(string), string prompt = default(string), string localeId = default(string), string uiLocales = default(string), string uiOptions = default(string), string scope = default(string), string acceptLanguage = default(string), string request = default(string), string requestUri = default(string), string nonce = default(string), string codeChallenge = default(string), string codeChallengeMethod = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// OAuth 2.0 Authorization (POST)
        /// </summary>
        /// <remarks>
        /// Performs OAuth 2.0 authorization (POST version)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType">Determines authorization flow: **code** - Authorization Code, **token** - Implicit Grant</param>
        /// <param name="redirectUri">This is a callback URI which determines where the response is sent. The value of this parameter must exactly match one of the URIs you have provided for your app upon registration</param>
        /// <param name="clientId">Identifier (key) of a client application</param>
        /// <param name="state">Client state. Returned back to the client at the end of the flow (optional)</param>
        /// <param name="brandId">Brand identifier. If it is not provided in request, server will try to determine brand from client app profile. The default value is &#39;1210&#39; - RingCentral US (optional)</param>
        /// <param name="display">Style of login form. The default value is &#39;page&#39;. The &#39;popup&#39; and &#39;touch&#39; values are featured for mobile applications (optional)</param>
        /// <param name="prompt">Specifies which login form will be displayed. Space-separated set of the following values: &#39;login&#39; - official RingCentral login form, &#39;sso&#39; - Single Sign-On login form, &#39;consent&#39; - form to show the requested scope and prompt user for consent. Either &#39;login&#39; or &#39;sso&#39; (or both) must be specified. The default value is &#39;login&amp;sso&#39; (optional)</param>
        /// <param name="localeId">Localization code of a language. Overwrites &#39;Accept-Language&#39; header value (optional)</param>
        /// <param name="uiLocales">Localization code of a language. Overwrites &#39;localeId&#39; parameter value (optional)</param>
        /// <param name="uiOptions">User interface options data (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <param name="requestUri"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="codeChallenge"> (optional)</param>
        /// <param name="codeChallengeMethod"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Authorize2WithHttpInfoAsync (string responseType, string redirectUri, string clientId, string state = default(string), string brandId = default(string), string display = default(string), string prompt = default(string), string localeId = default(string), string uiLocales = default(string), string uiOptions = default(string), string scope = default(string), string acceptLanguage = default(string), string request = default(string), string requestUri = default(string), string nonce = default(string), string codeChallenge = default(string), string codeChallengeMethod = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get OAuth Token
        /// </summary>
        /// <remarks>
        /// Returns access (and potentially refresh) tokens for making API requests.  Depending on client application type requests to this endpoint may require authentication with HTTP Basic scheme using registered client ID and client secret as login and password, correspondingly. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Phone number linked to an account or extension in E.164 format with or without leading &#39;+&#39; sign (optional)</param>
        /// <param name="password">User&#39;s password (optional)</param>
        /// <param name="extension">Optional. Extension short number. If company number is specified as a username, and extension is not specified, the server will attempt to authenticate client as main company administrator (optional)</param>
        /// <param name="grantType">Grant type (optional, default to password)</param>
        /// <param name="code">Authorization code (optional)</param>
        /// <param name="redirectUri">This is a callback URI which determines where the response is sent. The value of this parameter must exactly match one of the URIs you have provided for your app upon registration (optional)</param>
        /// <param name="accessTokenTtl">Access token lifetime in seconds (optional, default to 3600)</param>
        /// <param name="refreshTokenTtl">Refresh token lifetime in seconds (optional, default to 604800)</param>
        /// <param name="scope">List of API permissions to be used with access token. Can be omitted when requesting all permissions defined during the application registration phase (optional)</param>
        /// <param name="refreshToken">Previously issued refresh token. This is the only formData field used for the Refresh Token Flow. (optional)</param>
        /// <param name="endpointId">The unique identifier of a client application. If not specified, the previously specified or auto generated value is used by default (optional)</param>
        /// <param name="pin"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="accountId"> (optional)</param>
        /// <param name="partnerAccountId"> (optional)</param>
        /// <param name="clientAssertionType"> (optional)</param>
        /// <param name="clientAssertion"> (optional)</param>
        /// <param name="assertion"> (optional)</param>
        /// <param name="brandId"> (optional)</param>
        /// <param name="codeVerifier"> (optional)</param>
        /// <param name="deviceCode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TokenInfo</returns>
        System.Threading.Tasks.Task<TokenInfo> GetTokenAsync (string username = default(string), string password = default(string), string extension = default(string), string grantType = default(string), string code = default(string), string redirectUri = default(string), int? accessTokenTtl = default(int?), int? refreshTokenTtl = default(int?), string scope = default(string), string refreshToken = default(string), string endpointId = default(string), string pin = default(string), string clientId = default(string), string accountId = default(string), string partnerAccountId = default(string), string clientAssertionType = default(string), string clientAssertion = default(string), string assertion = default(string), string brandId = default(string), string codeVerifier = default(string), string deviceCode = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get OAuth Token
        /// </summary>
        /// <remarks>
        /// Returns access (and potentially refresh) tokens for making API requests.  Depending on client application type requests to this endpoint may require authentication with HTTP Basic scheme using registered client ID and client secret as login and password, correspondingly. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Phone number linked to an account or extension in E.164 format with or without leading &#39;+&#39; sign (optional)</param>
        /// <param name="password">User&#39;s password (optional)</param>
        /// <param name="extension">Optional. Extension short number. If company number is specified as a username, and extension is not specified, the server will attempt to authenticate client as main company administrator (optional)</param>
        /// <param name="grantType">Grant type (optional, default to password)</param>
        /// <param name="code">Authorization code (optional)</param>
        /// <param name="redirectUri">This is a callback URI which determines where the response is sent. The value of this parameter must exactly match one of the URIs you have provided for your app upon registration (optional)</param>
        /// <param name="accessTokenTtl">Access token lifetime in seconds (optional, default to 3600)</param>
        /// <param name="refreshTokenTtl">Refresh token lifetime in seconds (optional, default to 604800)</param>
        /// <param name="scope">List of API permissions to be used with access token. Can be omitted when requesting all permissions defined during the application registration phase (optional)</param>
        /// <param name="refreshToken">Previously issued refresh token. This is the only formData field used for the Refresh Token Flow. (optional)</param>
        /// <param name="endpointId">The unique identifier of a client application. If not specified, the previously specified or auto generated value is used by default (optional)</param>
        /// <param name="pin"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="accountId"> (optional)</param>
        /// <param name="partnerAccountId"> (optional)</param>
        /// <param name="clientAssertionType"> (optional)</param>
        /// <param name="clientAssertion"> (optional)</param>
        /// <param name="assertion"> (optional)</param>
        /// <param name="brandId"> (optional)</param>
        /// <param name="codeVerifier"> (optional)</param>
        /// <param name="deviceCode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TokenInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenInfo>> GetTokenWithHttpInfoAsync (string username = default(string), string password = default(string), string extension = default(string), string grantType = default(string), string code = default(string), string redirectUri = default(string), int? accessTokenTtl = default(int?), int? refreshTokenTtl = default(int?), string scope = default(string), string refreshToken = default(string), string endpointId = default(string), string pin = default(string), string clientId = default(string), string accountId = default(string), string partnerAccountId = default(string), string clientAssertionType = default(string), string clientAssertion = default(string), string assertion = default(string), string brandId = default(string), string codeVerifier = default(string), string deviceCode = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Revoke Token
        /// </summary>
        /// <remarks>
        /// Revokes previously issued access and refresh token.  Depending on client application type requests to this endpoint may require authentication with HTTP Basic scheme using registered client ID and client secret as login and password, correspondingly. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Active access or refresh token to be revoked</param>
        /// <param name="clientAssertionType"> (optional)</param>
        /// <param name="clientAssertion"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RevokeTokenAsync (string token, string clientAssertionType = default(string), string clientAssertion = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Revoke Token
        /// </summary>
        /// <remarks>
        /// Revokes previously issued access and refresh token.  Depending on client application type requests to this endpoint may require authentication with HTTP Basic scheme using registered client ID and client secret as login and password, correspondingly. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Active access or refresh token to be revoked</param>
        /// <param name="clientAssertionType"> (optional)</param>
        /// <param name="clientAssertion"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RevokeTokenWithHttpInfoAsync (string token, string clientAssertionType = default(string), string clientAssertion = default(string), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OAuthOIDCApi : IOAuthOIDCApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuthOIDCApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OAuthOIDCApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuthOIDCApi"/> class
        /// </summary>
        /// <returns></returns>
        public OAuthOIDCApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuthOIDCApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OAuthOIDCApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// OAuth 2.0 Authorization Performs OAuth 2.0 authorization (GET version)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void Authorize ()
        {
             AuthorizeWithHttpInfo();
        }

        /// <summary>
        /// OAuth 2.0 Authorization Performs OAuth 2.0 authorization (GET version)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AuthorizeWithHttpInfo ()
        {

            var localVarPath = "/restapi/oauth/authorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Authorize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// OAuth 2.0 Authorization Performs OAuth 2.0 authorization (GET version)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AuthorizeAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             await AuthorizeWithHttpInfoAsync(cancellationToken);

        }

        /// <summary>
        /// OAuth 2.0 Authorization Performs OAuth 2.0 authorization (GET version)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AuthorizeWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/restapi/oauth/authorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Authorize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// OAuth 2.0 Authorization (POST) Performs OAuth 2.0 authorization (POST version)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType">Determines authorization flow: **code** - Authorization Code, **token** - Implicit Grant</param>
        /// <param name="redirectUri">This is a callback URI which determines where the response is sent. The value of this parameter must exactly match one of the URIs you have provided for your app upon registration</param>
        /// <param name="clientId">Identifier (key) of a client application</param>
        /// <param name="state">Client state. Returned back to the client at the end of the flow (optional)</param>
        /// <param name="brandId">Brand identifier. If it is not provided in request, server will try to determine brand from client app profile. The default value is &#39;1210&#39; - RingCentral US (optional)</param>
        /// <param name="display">Style of login form. The default value is &#39;page&#39;. The &#39;popup&#39; and &#39;touch&#39; values are featured for mobile applications (optional)</param>
        /// <param name="prompt">Specifies which login form will be displayed. Space-separated set of the following values: &#39;login&#39; - official RingCentral login form, &#39;sso&#39; - Single Sign-On login form, &#39;consent&#39; - form to show the requested scope and prompt user for consent. Either &#39;login&#39; or &#39;sso&#39; (or both) must be specified. The default value is &#39;login&amp;sso&#39; (optional)</param>
        /// <param name="localeId">Localization code of a language. Overwrites &#39;Accept-Language&#39; header value (optional)</param>
        /// <param name="uiLocales">Localization code of a language. Overwrites &#39;localeId&#39; parameter value (optional)</param>
        /// <param name="uiOptions">User interface options data (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <param name="requestUri"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="codeChallenge"> (optional)</param>
        /// <param name="codeChallengeMethod"> (optional)</param>
        /// <returns></returns>
        public void Authorize2 (string responseType, string redirectUri, string clientId, string state = default(string), string brandId = default(string), string display = default(string), string prompt = default(string), string localeId = default(string), string uiLocales = default(string), string uiOptions = default(string), string scope = default(string), string acceptLanguage = default(string), string request = default(string), string requestUri = default(string), string nonce = default(string), string codeChallenge = default(string), string codeChallengeMethod = default(string))
        {
             Authorize2WithHttpInfo(responseType, redirectUri, clientId, state, brandId, display, prompt, localeId, uiLocales, uiOptions, scope, acceptLanguage, request, requestUri, nonce, codeChallenge, codeChallengeMethod);
        }

        /// <summary>
        /// OAuth 2.0 Authorization (POST) Performs OAuth 2.0 authorization (POST version)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType">Determines authorization flow: **code** - Authorization Code, **token** - Implicit Grant</param>
        /// <param name="redirectUri">This is a callback URI which determines where the response is sent. The value of this parameter must exactly match one of the URIs you have provided for your app upon registration</param>
        /// <param name="clientId">Identifier (key) of a client application</param>
        /// <param name="state">Client state. Returned back to the client at the end of the flow (optional)</param>
        /// <param name="brandId">Brand identifier. If it is not provided in request, server will try to determine brand from client app profile. The default value is &#39;1210&#39; - RingCentral US (optional)</param>
        /// <param name="display">Style of login form. The default value is &#39;page&#39;. The &#39;popup&#39; and &#39;touch&#39; values are featured for mobile applications (optional)</param>
        /// <param name="prompt">Specifies which login form will be displayed. Space-separated set of the following values: &#39;login&#39; - official RingCentral login form, &#39;sso&#39; - Single Sign-On login form, &#39;consent&#39; - form to show the requested scope and prompt user for consent. Either &#39;login&#39; or &#39;sso&#39; (or both) must be specified. The default value is &#39;login&amp;sso&#39; (optional)</param>
        /// <param name="localeId">Localization code of a language. Overwrites &#39;Accept-Language&#39; header value (optional)</param>
        /// <param name="uiLocales">Localization code of a language. Overwrites &#39;localeId&#39; parameter value (optional)</param>
        /// <param name="uiOptions">User interface options data (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <param name="requestUri"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="codeChallenge"> (optional)</param>
        /// <param name="codeChallengeMethod"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Authorize2WithHttpInfo (string responseType, string redirectUri, string clientId, string state = default(string), string brandId = default(string), string display = default(string), string prompt = default(string), string localeId = default(string), string uiLocales = default(string), string uiOptions = default(string), string scope = default(string), string acceptLanguage = default(string), string request = default(string), string requestUri = default(string), string nonce = default(string), string codeChallenge = default(string), string codeChallengeMethod = default(string))
        {
            // verify the required parameter 'responseType' is set
            if (responseType == null)
                throw new ApiException(400, "Missing required parameter 'responseType' when calling OAuthOIDCApi->Authorize2");
            // verify the required parameter 'redirectUri' is set
            if (redirectUri == null)
                throw new ApiException(400, "Missing required parameter 'redirectUri' when calling OAuthOIDCApi->Authorize2");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling OAuthOIDCApi->Authorize2");

            var localVarPath = "/restapi/oauth/authorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (responseType != null) localVarFormParams.Add("response_type", this.Configuration.ApiClient.ParameterToString(responseType)); // form parameter
            if (redirectUri != null) localVarFormParams.Add("redirect_uri", this.Configuration.ApiClient.ParameterToString(redirectUri)); // form parameter
            if (clientId != null) localVarFormParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // form parameter
            if (state != null) localVarFormParams.Add("state", this.Configuration.ApiClient.ParameterToString(state)); // form parameter
            if (brandId != null) localVarFormParams.Add("brand_id", this.Configuration.ApiClient.ParameterToString(brandId)); // form parameter
            if (display != null) localVarFormParams.Add("display", this.Configuration.ApiClient.ParameterToString(display)); // form parameter
            if (prompt != null) localVarFormParams.Add("prompt", this.Configuration.ApiClient.ParameterToString(prompt)); // form parameter
            if (localeId != null) localVarFormParams.Add("localeId", this.Configuration.ApiClient.ParameterToString(localeId)); // form parameter
            if (uiLocales != null) localVarFormParams.Add("ui_locales", this.Configuration.ApiClient.ParameterToString(uiLocales)); // form parameter
            if (uiOptions != null) localVarFormParams.Add("ui_options", this.Configuration.ApiClient.ParameterToString(uiOptions)); // form parameter
            if (scope != null) localVarFormParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // form parameter
            if (acceptLanguage != null) localVarFormParams.Add("accept_language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // form parameter
            if (request != null) localVarFormParams.Add("request", this.Configuration.ApiClient.ParameterToString(request)); // form parameter
            if (requestUri != null) localVarFormParams.Add("request_uri", this.Configuration.ApiClient.ParameterToString(requestUri)); // form parameter
            if (nonce != null) localVarFormParams.Add("nonce", this.Configuration.ApiClient.ParameterToString(nonce)); // form parameter
            if (codeChallenge != null) localVarFormParams.Add("code_challenge", this.Configuration.ApiClient.ParameterToString(codeChallenge)); // form parameter
            if (codeChallengeMethod != null) localVarFormParams.Add("code_challenge_method", this.Configuration.ApiClient.ParameterToString(codeChallengeMethod)); // form parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Authorize2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// OAuth 2.0 Authorization (POST) Performs OAuth 2.0 authorization (POST version)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType">Determines authorization flow: **code** - Authorization Code, **token** - Implicit Grant</param>
        /// <param name="redirectUri">This is a callback URI which determines where the response is sent. The value of this parameter must exactly match one of the URIs you have provided for your app upon registration</param>
        /// <param name="clientId">Identifier (key) of a client application</param>
        /// <param name="state">Client state. Returned back to the client at the end of the flow (optional)</param>
        /// <param name="brandId">Brand identifier. If it is not provided in request, server will try to determine brand from client app profile. The default value is &#39;1210&#39; - RingCentral US (optional)</param>
        /// <param name="display">Style of login form. The default value is &#39;page&#39;. The &#39;popup&#39; and &#39;touch&#39; values are featured for mobile applications (optional)</param>
        /// <param name="prompt">Specifies which login form will be displayed. Space-separated set of the following values: &#39;login&#39; - official RingCentral login form, &#39;sso&#39; - Single Sign-On login form, &#39;consent&#39; - form to show the requested scope and prompt user for consent. Either &#39;login&#39; or &#39;sso&#39; (or both) must be specified. The default value is &#39;login&amp;sso&#39; (optional)</param>
        /// <param name="localeId">Localization code of a language. Overwrites &#39;Accept-Language&#39; header value (optional)</param>
        /// <param name="uiLocales">Localization code of a language. Overwrites &#39;localeId&#39; parameter value (optional)</param>
        /// <param name="uiOptions">User interface options data (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <param name="requestUri"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="codeChallenge"> (optional)</param>
        /// <param name="codeChallengeMethod"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Authorize2Async (string responseType, string redirectUri, string clientId, string state = default(string), string brandId = default(string), string display = default(string), string prompt = default(string), string localeId = default(string), string uiLocales = default(string), string uiOptions = default(string), string scope = default(string), string acceptLanguage = default(string), string request = default(string), string requestUri = default(string), string nonce = default(string), string codeChallenge = default(string), string codeChallengeMethod = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await Authorize2WithHttpInfoAsync(responseType, redirectUri, clientId, state, brandId, display, prompt, localeId, uiLocales, uiOptions, scope, acceptLanguage, request, requestUri, nonce, codeChallenge, codeChallengeMethod, cancellationToken);

        }

        /// <summary>
        /// OAuth 2.0 Authorization (POST) Performs OAuth 2.0 authorization (POST version)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType">Determines authorization flow: **code** - Authorization Code, **token** - Implicit Grant</param>
        /// <param name="redirectUri">This is a callback URI which determines where the response is sent. The value of this parameter must exactly match one of the URIs you have provided for your app upon registration</param>
        /// <param name="clientId">Identifier (key) of a client application</param>
        /// <param name="state">Client state. Returned back to the client at the end of the flow (optional)</param>
        /// <param name="brandId">Brand identifier. If it is not provided in request, server will try to determine brand from client app profile. The default value is &#39;1210&#39; - RingCentral US (optional)</param>
        /// <param name="display">Style of login form. The default value is &#39;page&#39;. The &#39;popup&#39; and &#39;touch&#39; values are featured for mobile applications (optional)</param>
        /// <param name="prompt">Specifies which login form will be displayed. Space-separated set of the following values: &#39;login&#39; - official RingCentral login form, &#39;sso&#39; - Single Sign-On login form, &#39;consent&#39; - form to show the requested scope and prompt user for consent. Either &#39;login&#39; or &#39;sso&#39; (or both) must be specified. The default value is &#39;login&amp;sso&#39; (optional)</param>
        /// <param name="localeId">Localization code of a language. Overwrites &#39;Accept-Language&#39; header value (optional)</param>
        /// <param name="uiLocales">Localization code of a language. Overwrites &#39;localeId&#39; parameter value (optional)</param>
        /// <param name="uiOptions">User interface options data (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <param name="requestUri"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="codeChallenge"> (optional)</param>
        /// <param name="codeChallengeMethod"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Authorize2WithHttpInfoAsync (string responseType, string redirectUri, string clientId, string state = default(string), string brandId = default(string), string display = default(string), string prompt = default(string), string localeId = default(string), string uiLocales = default(string), string uiOptions = default(string), string scope = default(string), string acceptLanguage = default(string), string request = default(string), string requestUri = default(string), string nonce = default(string), string codeChallenge = default(string), string codeChallengeMethod = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'responseType' is set
            if (responseType == null)
                throw new ApiException(400, "Missing required parameter 'responseType' when calling OAuthOIDCApi->Authorize2");
            // verify the required parameter 'redirectUri' is set
            if (redirectUri == null)
                throw new ApiException(400, "Missing required parameter 'redirectUri' when calling OAuthOIDCApi->Authorize2");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling OAuthOIDCApi->Authorize2");

            var localVarPath = "/restapi/oauth/authorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (responseType != null) localVarFormParams.Add("response_type", this.Configuration.ApiClient.ParameterToString(responseType)); // form parameter
            if (redirectUri != null) localVarFormParams.Add("redirect_uri", this.Configuration.ApiClient.ParameterToString(redirectUri)); // form parameter
            if (clientId != null) localVarFormParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // form parameter
            if (state != null) localVarFormParams.Add("state", this.Configuration.ApiClient.ParameterToString(state)); // form parameter
            if (brandId != null) localVarFormParams.Add("brand_id", this.Configuration.ApiClient.ParameterToString(brandId)); // form parameter
            if (display != null) localVarFormParams.Add("display", this.Configuration.ApiClient.ParameterToString(display)); // form parameter
            if (prompt != null) localVarFormParams.Add("prompt", this.Configuration.ApiClient.ParameterToString(prompt)); // form parameter
            if (localeId != null) localVarFormParams.Add("localeId", this.Configuration.ApiClient.ParameterToString(localeId)); // form parameter
            if (uiLocales != null) localVarFormParams.Add("ui_locales", this.Configuration.ApiClient.ParameterToString(uiLocales)); // form parameter
            if (uiOptions != null) localVarFormParams.Add("ui_options", this.Configuration.ApiClient.ParameterToString(uiOptions)); // form parameter
            if (scope != null) localVarFormParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // form parameter
            if (acceptLanguage != null) localVarFormParams.Add("accept_language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // form parameter
            if (request != null) localVarFormParams.Add("request", this.Configuration.ApiClient.ParameterToString(request)); // form parameter
            if (requestUri != null) localVarFormParams.Add("request_uri", this.Configuration.ApiClient.ParameterToString(requestUri)); // form parameter
            if (nonce != null) localVarFormParams.Add("nonce", this.Configuration.ApiClient.ParameterToString(nonce)); // form parameter
            if (codeChallenge != null) localVarFormParams.Add("code_challenge", this.Configuration.ApiClient.ParameterToString(codeChallenge)); // form parameter
            if (codeChallengeMethod != null) localVarFormParams.Add("code_challenge_method", this.Configuration.ApiClient.ParameterToString(codeChallengeMethod)); // form parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Authorize2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get OAuth Token Returns access (and potentially refresh) tokens for making API requests.  Depending on client application type requests to this endpoint may require authentication with HTTP Basic scheme using registered client ID and client secret as login and password, correspondingly. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Phone number linked to an account or extension in E.164 format with or without leading &#39;+&#39; sign (optional)</param>
        /// <param name="password">User&#39;s password (optional)</param>
        /// <param name="extension">Optional. Extension short number. If company number is specified as a username, and extension is not specified, the server will attempt to authenticate client as main company administrator (optional)</param>
        /// <param name="grantType">Grant type (optional, default to password)</param>
        /// <param name="code">Authorization code (optional)</param>
        /// <param name="redirectUri">This is a callback URI which determines where the response is sent. The value of this parameter must exactly match one of the URIs you have provided for your app upon registration (optional)</param>
        /// <param name="accessTokenTtl">Access token lifetime in seconds (optional, default to 3600)</param>
        /// <param name="refreshTokenTtl">Refresh token lifetime in seconds (optional, default to 604800)</param>
        /// <param name="scope">List of API permissions to be used with access token. Can be omitted when requesting all permissions defined during the application registration phase (optional)</param>
        /// <param name="refreshToken">Previously issued refresh token. This is the only formData field used for the Refresh Token Flow. (optional)</param>
        /// <param name="endpointId">The unique identifier of a client application. If not specified, the previously specified or auto generated value is used by default (optional)</param>
        /// <param name="pin"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="accountId"> (optional)</param>
        /// <param name="partnerAccountId"> (optional)</param>
        /// <param name="clientAssertionType"> (optional)</param>
        /// <param name="clientAssertion"> (optional)</param>
        /// <param name="assertion"> (optional)</param>
        /// <param name="brandId"> (optional)</param>
        /// <param name="codeVerifier"> (optional)</param>
        /// <param name="deviceCode"> (optional)</param>
        /// <returns>TokenInfo</returns>
        public TokenInfo GetToken (string username = default(string), string password = default(string), string extension = default(string), string grantType = default(string), string code = default(string), string redirectUri = default(string), int? accessTokenTtl = default(int?), int? refreshTokenTtl = default(int?), string scope = default(string), string refreshToken = default(string), string endpointId = default(string), string pin = default(string), string clientId = default(string), string accountId = default(string), string partnerAccountId = default(string), string clientAssertionType = default(string), string clientAssertion = default(string), string assertion = default(string), string brandId = default(string), string codeVerifier = default(string), string deviceCode = default(string))
        {
             ApiResponse<TokenInfo> localVarResponse = GetTokenWithHttpInfo(username, password, extension, grantType, code, redirectUri, accessTokenTtl, refreshTokenTtl, scope, refreshToken, endpointId, pin, clientId, accountId, partnerAccountId, clientAssertionType, clientAssertion, assertion, brandId, codeVerifier, deviceCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get OAuth Token Returns access (and potentially refresh) tokens for making API requests.  Depending on client application type requests to this endpoint may require authentication with HTTP Basic scheme using registered client ID and client secret as login and password, correspondingly. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Phone number linked to an account or extension in E.164 format with or without leading &#39;+&#39; sign (optional)</param>
        /// <param name="password">User&#39;s password (optional)</param>
        /// <param name="extension">Optional. Extension short number. If company number is specified as a username, and extension is not specified, the server will attempt to authenticate client as main company administrator (optional)</param>
        /// <param name="grantType">Grant type (optional, default to password)</param>
        /// <param name="code">Authorization code (optional)</param>
        /// <param name="redirectUri">This is a callback URI which determines where the response is sent. The value of this parameter must exactly match one of the URIs you have provided for your app upon registration (optional)</param>
        /// <param name="accessTokenTtl">Access token lifetime in seconds (optional, default to 3600)</param>
        /// <param name="refreshTokenTtl">Refresh token lifetime in seconds (optional, default to 604800)</param>
        /// <param name="scope">List of API permissions to be used with access token. Can be omitted when requesting all permissions defined during the application registration phase (optional)</param>
        /// <param name="refreshToken">Previously issued refresh token. This is the only formData field used for the Refresh Token Flow. (optional)</param>
        /// <param name="endpointId">The unique identifier of a client application. If not specified, the previously specified or auto generated value is used by default (optional)</param>
        /// <param name="pin"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="accountId"> (optional)</param>
        /// <param name="partnerAccountId"> (optional)</param>
        /// <param name="clientAssertionType"> (optional)</param>
        /// <param name="clientAssertion"> (optional)</param>
        /// <param name="assertion"> (optional)</param>
        /// <param name="brandId"> (optional)</param>
        /// <param name="codeVerifier"> (optional)</param>
        /// <param name="deviceCode"> (optional)</param>
        /// <returns>ApiResponse of TokenInfo</returns>
        public ApiResponse<TokenInfo> GetTokenWithHttpInfo (string username = default(string), string password = default(string), string extension = default(string), string grantType = default(string), string code = default(string), string redirectUri = default(string), int? accessTokenTtl = default(int?), int? refreshTokenTtl = default(int?), string scope = default(string), string refreshToken = default(string), string endpointId = default(string), string pin = default(string), string clientId = default(string), string accountId = default(string), string partnerAccountId = default(string), string clientAssertionType = default(string), string clientAssertion = default(string), string assertion = default(string), string brandId = default(string), string codeVerifier = default(string), string deviceCode = default(string))
        {

            var localVarPath = "/restapi/oauth/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarFormParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // form parameter
            if (password != null) localVarFormParams.Add("password", this.Configuration.ApiClient.ParameterToString(password)); // form parameter
            if (extension != null) localVarFormParams.Add("extension", this.Configuration.ApiClient.ParameterToString(extension)); // form parameter
            if (grantType != null) localVarFormParams.Add("grant_type", this.Configuration.ApiClient.ParameterToString(grantType)); // form parameter
            if (code != null) localVarFormParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // form parameter
            if (redirectUri != null) localVarFormParams.Add("redirect_uri", this.Configuration.ApiClient.ParameterToString(redirectUri)); // form parameter
            if (accessTokenTtl != null) localVarFormParams.Add("access_token_ttl", this.Configuration.ApiClient.ParameterToString(accessTokenTtl)); // form parameter
            if (refreshTokenTtl != null) localVarFormParams.Add("refresh_token_ttl", this.Configuration.ApiClient.ParameterToString(refreshTokenTtl)); // form parameter
            if (scope != null) localVarFormParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // form parameter
            if (refreshToken != null) localVarFormParams.Add("refresh_token", this.Configuration.ApiClient.ParameterToString(refreshToken)); // form parameter
            if (endpointId != null) localVarFormParams.Add("endpoint_id", this.Configuration.ApiClient.ParameterToString(endpointId)); // form parameter
            if (pin != null) localVarFormParams.Add("pin", this.Configuration.ApiClient.ParameterToString(pin)); // form parameter
            if (clientId != null) localVarFormParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // form parameter
            if (accountId != null) localVarFormParams.Add("account_id", this.Configuration.ApiClient.ParameterToString(accountId)); // form parameter
            if (partnerAccountId != null) localVarFormParams.Add("partner_account_id", this.Configuration.ApiClient.ParameterToString(partnerAccountId)); // form parameter
            if (clientAssertionType != null) localVarFormParams.Add("client_assertion_type", this.Configuration.ApiClient.ParameterToString(clientAssertionType)); // form parameter
            if (clientAssertion != null) localVarFormParams.Add("client_assertion", this.Configuration.ApiClient.ParameterToString(clientAssertion)); // form parameter
            if (assertion != null) localVarFormParams.Add("assertion", this.Configuration.ApiClient.ParameterToString(assertion)); // form parameter
            if (brandId != null) localVarFormParams.Add("brand_id", this.Configuration.ApiClient.ParameterToString(brandId)); // form parameter
            if (codeVerifier != null) localVarFormParams.Add("code_verifier", this.Configuration.ApiClient.ParameterToString(codeVerifier)); // form parameter
            if (deviceCode != null) localVarFormParams.Add("device_code", this.Configuration.ApiClient.ParameterToString(deviceCode)); // form parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokenInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TokenInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokenInfo)));
        }

        /// <summary>
        /// Get OAuth Token Returns access (and potentially refresh) tokens for making API requests.  Depending on client application type requests to this endpoint may require authentication with HTTP Basic scheme using registered client ID and client secret as login and password, correspondingly. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Phone number linked to an account or extension in E.164 format with or without leading &#39;+&#39; sign (optional)</param>
        /// <param name="password">User&#39;s password (optional)</param>
        /// <param name="extension">Optional. Extension short number. If company number is specified as a username, and extension is not specified, the server will attempt to authenticate client as main company administrator (optional)</param>
        /// <param name="grantType">Grant type (optional, default to password)</param>
        /// <param name="code">Authorization code (optional)</param>
        /// <param name="redirectUri">This is a callback URI which determines where the response is sent. The value of this parameter must exactly match one of the URIs you have provided for your app upon registration (optional)</param>
        /// <param name="accessTokenTtl">Access token lifetime in seconds (optional, default to 3600)</param>
        /// <param name="refreshTokenTtl">Refresh token lifetime in seconds (optional, default to 604800)</param>
        /// <param name="scope">List of API permissions to be used with access token. Can be omitted when requesting all permissions defined during the application registration phase (optional)</param>
        /// <param name="refreshToken">Previously issued refresh token. This is the only formData field used for the Refresh Token Flow. (optional)</param>
        /// <param name="endpointId">The unique identifier of a client application. If not specified, the previously specified or auto generated value is used by default (optional)</param>
        /// <param name="pin"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="accountId"> (optional)</param>
        /// <param name="partnerAccountId"> (optional)</param>
        /// <param name="clientAssertionType"> (optional)</param>
        /// <param name="clientAssertion"> (optional)</param>
        /// <param name="assertion"> (optional)</param>
        /// <param name="brandId"> (optional)</param>
        /// <param name="codeVerifier"> (optional)</param>
        /// <param name="deviceCode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TokenInfo</returns>
        public async System.Threading.Tasks.Task<TokenInfo> GetTokenAsync (string username = default(string), string password = default(string), string extension = default(string), string grantType = default(string), string code = default(string), string redirectUri = default(string), int? accessTokenTtl = default(int?), int? refreshTokenTtl = default(int?), string scope = default(string), string refreshToken = default(string), string endpointId = default(string), string pin = default(string), string clientId = default(string), string accountId = default(string), string partnerAccountId = default(string), string clientAssertionType = default(string), string clientAssertion = default(string), string assertion = default(string), string brandId = default(string), string codeVerifier = default(string), string deviceCode = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TokenInfo> localVarResponse = await GetTokenWithHttpInfoAsync(username, password, extension, grantType, code, redirectUri, accessTokenTtl, refreshTokenTtl, scope, refreshToken, endpointId, pin, clientId, accountId, partnerAccountId, clientAssertionType, clientAssertion, assertion, brandId, codeVerifier, deviceCode, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get OAuth Token Returns access (and potentially refresh) tokens for making API requests.  Depending on client application type requests to this endpoint may require authentication with HTTP Basic scheme using registered client ID and client secret as login and password, correspondingly. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Phone number linked to an account or extension in E.164 format with or without leading &#39;+&#39; sign (optional)</param>
        /// <param name="password">User&#39;s password (optional)</param>
        /// <param name="extension">Optional. Extension short number. If company number is specified as a username, and extension is not specified, the server will attempt to authenticate client as main company administrator (optional)</param>
        /// <param name="grantType">Grant type (optional, default to password)</param>
        /// <param name="code">Authorization code (optional)</param>
        /// <param name="redirectUri">This is a callback URI which determines where the response is sent. The value of this parameter must exactly match one of the URIs you have provided for your app upon registration (optional)</param>
        /// <param name="accessTokenTtl">Access token lifetime in seconds (optional, default to 3600)</param>
        /// <param name="refreshTokenTtl">Refresh token lifetime in seconds (optional, default to 604800)</param>
        /// <param name="scope">List of API permissions to be used with access token. Can be omitted when requesting all permissions defined during the application registration phase (optional)</param>
        /// <param name="refreshToken">Previously issued refresh token. This is the only formData field used for the Refresh Token Flow. (optional)</param>
        /// <param name="endpointId">The unique identifier of a client application. If not specified, the previously specified or auto generated value is used by default (optional)</param>
        /// <param name="pin"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="accountId"> (optional)</param>
        /// <param name="partnerAccountId"> (optional)</param>
        /// <param name="clientAssertionType"> (optional)</param>
        /// <param name="clientAssertion"> (optional)</param>
        /// <param name="assertion"> (optional)</param>
        /// <param name="brandId"> (optional)</param>
        /// <param name="codeVerifier"> (optional)</param>
        /// <param name="deviceCode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TokenInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TokenInfo>> GetTokenWithHttpInfoAsync (string username = default(string), string password = default(string), string extension = default(string), string grantType = default(string), string code = default(string), string redirectUri = default(string), int? accessTokenTtl = default(int?), int? refreshTokenTtl = default(int?), string scope = default(string), string refreshToken = default(string), string endpointId = default(string), string pin = default(string), string clientId = default(string), string accountId = default(string), string partnerAccountId = default(string), string clientAssertionType = default(string), string clientAssertion = default(string), string assertion = default(string), string brandId = default(string), string codeVerifier = default(string), string deviceCode = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/restapi/oauth/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarFormParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // form parameter
            if (password != null) localVarFormParams.Add("password", this.Configuration.ApiClient.ParameterToString(password)); // form parameter
            if (extension != null) localVarFormParams.Add("extension", this.Configuration.ApiClient.ParameterToString(extension)); // form parameter
            if (grantType != null) localVarFormParams.Add("grant_type", this.Configuration.ApiClient.ParameterToString(grantType)); // form parameter
            if (code != null) localVarFormParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // form parameter
            if (redirectUri != null) localVarFormParams.Add("redirect_uri", this.Configuration.ApiClient.ParameterToString(redirectUri)); // form parameter
            if (accessTokenTtl != null) localVarFormParams.Add("access_token_ttl", this.Configuration.ApiClient.ParameterToString(accessTokenTtl)); // form parameter
            if (refreshTokenTtl != null) localVarFormParams.Add("refresh_token_ttl", this.Configuration.ApiClient.ParameterToString(refreshTokenTtl)); // form parameter
            if (scope != null) localVarFormParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // form parameter
            if (refreshToken != null) localVarFormParams.Add("refresh_token", this.Configuration.ApiClient.ParameterToString(refreshToken)); // form parameter
            if (endpointId != null) localVarFormParams.Add("endpoint_id", this.Configuration.ApiClient.ParameterToString(endpointId)); // form parameter
            if (pin != null) localVarFormParams.Add("pin", this.Configuration.ApiClient.ParameterToString(pin)); // form parameter
            if (clientId != null) localVarFormParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // form parameter
            if (accountId != null) localVarFormParams.Add("account_id", this.Configuration.ApiClient.ParameterToString(accountId)); // form parameter
            if (partnerAccountId != null) localVarFormParams.Add("partner_account_id", this.Configuration.ApiClient.ParameterToString(partnerAccountId)); // form parameter
            if (clientAssertionType != null) localVarFormParams.Add("client_assertion_type", this.Configuration.ApiClient.ParameterToString(clientAssertionType)); // form parameter
            if (clientAssertion != null) localVarFormParams.Add("client_assertion", this.Configuration.ApiClient.ParameterToString(clientAssertion)); // form parameter
            if (assertion != null) localVarFormParams.Add("assertion", this.Configuration.ApiClient.ParameterToString(assertion)); // form parameter
            if (brandId != null) localVarFormParams.Add("brand_id", this.Configuration.ApiClient.ParameterToString(brandId)); // form parameter
            if (codeVerifier != null) localVarFormParams.Add("code_verifier", this.Configuration.ApiClient.ParameterToString(codeVerifier)); // form parameter
            if (deviceCode != null) localVarFormParams.Add("device_code", this.Configuration.ApiClient.ParameterToString(deviceCode)); // form parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokenInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TokenInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokenInfo)));
        }

        /// <summary>
        /// Revoke Token Revokes previously issued access and refresh token.  Depending on client application type requests to this endpoint may require authentication with HTTP Basic scheme using registered client ID and client secret as login and password, correspondingly. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Active access or refresh token to be revoked</param>
        /// <param name="clientAssertionType"> (optional)</param>
        /// <param name="clientAssertion"> (optional)</param>
        /// <returns></returns>
        public void RevokeToken (string token, string clientAssertionType = default(string), string clientAssertion = default(string))
        {
             RevokeTokenWithHttpInfo(token, clientAssertionType, clientAssertion);
        }

        /// <summary>
        /// Revoke Token Revokes previously issued access and refresh token.  Depending on client application type requests to this endpoint may require authentication with HTTP Basic scheme using registered client ID and client secret as login and password, correspondingly. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Active access or refresh token to be revoked</param>
        /// <param name="clientAssertionType"> (optional)</param>
        /// <param name="clientAssertion"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RevokeTokenWithHttpInfo (string token, string clientAssertionType = default(string), string clientAssertion = default(string))
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling OAuthOIDCApi->RevokeToken");

            var localVarPath = "/restapi/oauth/revoke";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientAssertionType != null) localVarFormParams.Add("client_assertion_type", this.Configuration.ApiClient.ParameterToString(clientAssertionType)); // form parameter
            if (clientAssertion != null) localVarFormParams.Add("client_assertion", this.Configuration.ApiClient.ParameterToString(clientAssertion)); // form parameter
            if (token != null) localVarFormParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // form parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Revoke Token Revokes previously issued access and refresh token.  Depending on client application type requests to this endpoint may require authentication with HTTP Basic scheme using registered client ID and client secret as login and password, correspondingly. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Active access or refresh token to be revoked</param>
        /// <param name="clientAssertionType"> (optional)</param>
        /// <param name="clientAssertion"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RevokeTokenAsync (string token, string clientAssertionType = default(string), string clientAssertion = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await RevokeTokenWithHttpInfoAsync(token, clientAssertionType, clientAssertion, cancellationToken);

        }

        /// <summary>
        /// Revoke Token Revokes previously issued access and refresh token.  Depending on client application type requests to this endpoint may require authentication with HTTP Basic scheme using registered client ID and client secret as login and password, correspondingly. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Active access or refresh token to be revoked</param>
        /// <param name="clientAssertionType"> (optional)</param>
        /// <param name="clientAssertion"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RevokeTokenWithHttpInfoAsync (string token, string clientAssertionType = default(string), string clientAssertion = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling OAuthOIDCApi->RevokeToken");

            var localVarPath = "/restapi/oauth/revoke";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientAssertionType != null) localVarFormParams.Add("client_assertion_type", this.Configuration.ApiClient.ParameterToString(clientAssertionType)); // form parameter
            if (clientAssertion != null) localVarFormParams.Add("client_assertion", this.Configuration.ApiClient.ParameterToString(clientAssertion)); // form parameter
            if (token != null) localVarFormParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // form parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
