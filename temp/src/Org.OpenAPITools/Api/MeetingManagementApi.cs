/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMeetingManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Meeting
        /// </summary>
        /// <remarks>
        /// Creates a new meeting.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="meetingRequestResource"> (optional)</param>
        /// <returns>MeetingResponseResource</returns>
        MeetingResponseResource CreateMeeting (string extensionId, string accountId, MeetingRequestResource meetingRequestResource = default(MeetingRequestResource));

        /// <summary>
        /// Create Meeting
        /// </summary>
        /// <remarks>
        /// Creates a new meeting.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="meetingRequestResource"> (optional)</param>
        /// <returns>ApiResponse of MeetingResponseResource</returns>
        ApiResponse<MeetingResponseResource> CreateMeetingWithHttpInfo (string extensionId, string accountId, MeetingRequestResource meetingRequestResource = default(MeetingRequestResource));
        /// <summary>
        /// Delete Meeting
        /// </summary>
        /// <remarks>
        /// Deletes a scheduled meeting.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns></returns>
        void DeleteMeeting (string meetingId, string extensionId, string accountId);

        /// <summary>
        /// Delete Meeting
        /// </summary>
        /// <remarks>
        /// Deletes a scheduled meeting.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMeetingWithHttpInfo (string meetingId, string extensionId, string accountId);
        /// <summary>
        /// End Meeting
        /// </summary>
        /// <remarks>
        /// Ends a meetings which is in progress.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId"></param>
        /// <returns></returns>
        void EndMeeting (string meetingId, string extensionId, string accountId);

        /// <summary>
        /// End Meeting
        /// </summary>
        /// <remarks>
        /// Ends a meetings which is in progress.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EndMeetingWithHttpInfo (string meetingId, string extensionId, string accountId);
        /// <summary>
        /// Get Scheduled Meetings
        /// </summary>
        /// <remarks>
        /// Returns a list of user meetings scheduled for the future (meetings of 'Instant' type are not included).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>MeetingsResource</returns>
        MeetingsResource ListMeetings (string extensionId, string accountId);

        /// <summary>
        /// Get Scheduled Meetings
        /// </summary>
        /// <remarks>
        /// Returns a list of user meetings scheduled for the future (meetings of 'Instant' type are not included).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of MeetingsResource</returns>
        ApiResponse<MeetingsResource> ListMeetingsWithHttpInfo (string extensionId, string accountId);
        /// <summary>
        /// Get Meeting Info
        /// </summary>
        /// <remarks>
        /// Returns a particular meetings details by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>MeetingResponseResource</returns>
        MeetingResponseResource ReadMeeting (string meetingId, string extensionId, string accountId);

        /// <summary>
        /// Get Meeting Info
        /// </summary>
        /// <remarks>
        /// Returns a particular meetings details by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of MeetingResponseResource</returns>
        ApiResponse<MeetingResponseResource> ReadMeetingWithHttpInfo (string meetingId, string extensionId, string accountId);
        /// <summary>
        /// Get Meeting Invitation
        /// </summary>
        /// <remarks>
        /// Returns a meeting invitation by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of an account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>PublicMeetingInvitationResponse</returns>
        PublicMeetingInvitationResponse ReadMeetingInvitation (long meetingId, string extensionId, string accountId);

        /// <summary>
        /// Get Meeting Invitation
        /// </summary>
        /// <remarks>
        /// Returns a meeting invitation by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of an account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of PublicMeetingInvitationResponse</returns>
        ApiResponse<PublicMeetingInvitationResponse> ReadMeetingInvitationWithHttpInfo (long meetingId, string extensionId, string accountId);
        /// <summary>
        /// Update Meeting
        /// </summary>
        /// <remarks>
        /// Modifies a particular meeting.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="meetingRequestResource"> (optional)</param>
        /// <returns>MeetingResponseResource</returns>
        MeetingResponseResource UpdateMeeting (string meetingId, string extensionId, string accountId, MeetingRequestResource meetingRequestResource = default(MeetingRequestResource));

        /// <summary>
        /// Update Meeting
        /// </summary>
        /// <remarks>
        /// Modifies a particular meeting.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="meetingRequestResource"> (optional)</param>
        /// <returns>ApiResponse of MeetingResponseResource</returns>
        ApiResponse<MeetingResponseResource> UpdateMeetingWithHttpInfo (string meetingId, string extensionId, string accountId, MeetingRequestResource meetingRequestResource = default(MeetingRequestResource));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create Meeting
        /// </summary>
        /// <remarks>
        /// Creates a new meeting.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="meetingRequestResource"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MeetingResponseResource</returns>
        System.Threading.Tasks.Task<MeetingResponseResource> CreateMeetingAsync (string extensionId, string accountId, MeetingRequestResource meetingRequestResource = default(MeetingRequestResource), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Meeting
        /// </summary>
        /// <remarks>
        /// Creates a new meeting.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="meetingRequestResource"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MeetingResponseResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<MeetingResponseResource>> CreateMeetingWithHttpInfoAsync (string extensionId, string accountId, MeetingRequestResource meetingRequestResource = default(MeetingRequestResource), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete Meeting
        /// </summary>
        /// <remarks>
        /// Deletes a scheduled meeting.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMeetingAsync (string meetingId, string extensionId, string accountId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Meeting
        /// </summary>
        /// <remarks>
        /// Deletes a scheduled meeting.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMeetingWithHttpInfoAsync (string meetingId, string extensionId, string accountId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// End Meeting
        /// </summary>
        /// <remarks>
        /// Ends a meetings which is in progress.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EndMeetingAsync (string meetingId, string extensionId, string accountId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// End Meeting
        /// </summary>
        /// <remarks>
        /// Ends a meetings which is in progress.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EndMeetingWithHttpInfoAsync (string meetingId, string extensionId, string accountId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Scheduled Meetings
        /// </summary>
        /// <remarks>
        /// Returns a list of user meetings scheduled for the future (meetings of 'Instant' type are not included).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MeetingsResource</returns>
        System.Threading.Tasks.Task<MeetingsResource> ListMeetingsAsync (string extensionId, string accountId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Scheduled Meetings
        /// </summary>
        /// <remarks>
        /// Returns a list of user meetings scheduled for the future (meetings of 'Instant' type are not included).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MeetingsResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<MeetingsResource>> ListMeetingsWithHttpInfoAsync (string extensionId, string accountId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Meeting Info
        /// </summary>
        /// <remarks>
        /// Returns a particular meetings details by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MeetingResponseResource</returns>
        System.Threading.Tasks.Task<MeetingResponseResource> ReadMeetingAsync (string meetingId, string extensionId, string accountId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Meeting Info
        /// </summary>
        /// <remarks>
        /// Returns a particular meetings details by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MeetingResponseResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<MeetingResponseResource>> ReadMeetingWithHttpInfoAsync (string meetingId, string extensionId, string accountId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Meeting Invitation
        /// </summary>
        /// <remarks>
        /// Returns a meeting invitation by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of an account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PublicMeetingInvitationResponse</returns>
        System.Threading.Tasks.Task<PublicMeetingInvitationResponse> ReadMeetingInvitationAsync (long meetingId, string extensionId, string accountId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Meeting Invitation
        /// </summary>
        /// <remarks>
        /// Returns a meeting invitation by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of an account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PublicMeetingInvitationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublicMeetingInvitationResponse>> ReadMeetingInvitationWithHttpInfoAsync (long meetingId, string extensionId, string accountId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Meeting
        /// </summary>
        /// <remarks>
        /// Modifies a particular meeting.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="meetingRequestResource"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MeetingResponseResource</returns>
        System.Threading.Tasks.Task<MeetingResponseResource> UpdateMeetingAsync (string meetingId, string extensionId, string accountId, MeetingRequestResource meetingRequestResource = default(MeetingRequestResource), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Meeting
        /// </summary>
        /// <remarks>
        /// Modifies a particular meeting.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="meetingRequestResource"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MeetingResponseResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<MeetingResponseResource>> UpdateMeetingWithHttpInfoAsync (string meetingId, string extensionId, string accountId, MeetingRequestResource meetingRequestResource = default(MeetingRequestResource), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MeetingManagementApi : IMeetingManagementApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MeetingManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MeetingManagementApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeetingManagementApi"/> class
        /// </summary>
        /// <returns></returns>
        public MeetingManagementApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeetingManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MeetingManagementApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create Meeting Creates a new meeting.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="meetingRequestResource"> (optional)</param>
        /// <returns>MeetingResponseResource</returns>
        public MeetingResponseResource CreateMeeting (string extensionId, string accountId, MeetingRequestResource meetingRequestResource = default(MeetingRequestResource))
        {
             ApiResponse<MeetingResponseResource> localVarResponse = CreateMeetingWithHttpInfo(extensionId, accountId, meetingRequestResource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Meeting Creates a new meeting.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="meetingRequestResource"> (optional)</param>
        /// <returns>ApiResponse of MeetingResponseResource</returns>
        public ApiResponse<MeetingResponseResource> CreateMeetingWithHttpInfo (string extensionId, string accountId, MeetingRequestResource meetingRequestResource = default(MeetingRequestResource))
        {
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling MeetingManagementApi->CreateMeeting");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MeetingManagementApi->CreateMeeting");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/meeting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (meetingRequestResource != null && meetingRequestResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(meetingRequestResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = meetingRequestResource; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMeeting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MeetingResponseResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MeetingResponseResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MeetingResponseResource)));
        }

        /// <summary>
        /// Create Meeting Creates a new meeting.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="meetingRequestResource"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MeetingResponseResource</returns>
        public async System.Threading.Tasks.Task<MeetingResponseResource> CreateMeetingAsync (string extensionId, string accountId, MeetingRequestResource meetingRequestResource = default(MeetingRequestResource), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MeetingResponseResource> localVarResponse = await CreateMeetingWithHttpInfoAsync(extensionId, accountId, meetingRequestResource, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Meeting Creates a new meeting.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="meetingRequestResource"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MeetingResponseResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MeetingResponseResource>> CreateMeetingWithHttpInfoAsync (string extensionId, string accountId, MeetingRequestResource meetingRequestResource = default(MeetingRequestResource), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling MeetingManagementApi->CreateMeeting");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MeetingManagementApi->CreateMeeting");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/meeting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (meetingRequestResource != null && meetingRequestResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(meetingRequestResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = meetingRequestResource; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMeeting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MeetingResponseResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MeetingResponseResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MeetingResponseResource)));
        }

        /// <summary>
        /// Delete Meeting Deletes a scheduled meeting.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns></returns>
        public void DeleteMeeting (string meetingId, string extensionId, string accountId)
        {
             DeleteMeetingWithHttpInfo(meetingId, extensionId, accountId);
        }

        /// <summary>
        /// Delete Meeting Deletes a scheduled meeting.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteMeetingWithHttpInfo (string meetingId, string extensionId, string accountId)
        {
            // verify the required parameter 'meetingId' is set
            if (meetingId == null)
                throw new ApiException(400, "Missing required parameter 'meetingId' when calling MeetingManagementApi->DeleteMeeting");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling MeetingManagementApi->DeleteMeeting");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MeetingManagementApi->DeleteMeeting");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/meeting/{meetingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (meetingId != null) localVarPathParams.Add("meetingId", this.Configuration.ApiClient.ParameterToString(meetingId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMeeting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Meeting Deletes a scheduled meeting.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMeetingAsync (string meetingId, string extensionId, string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteMeetingWithHttpInfoAsync(meetingId, extensionId, accountId, cancellationToken);

        }

        /// <summary>
        /// Delete Meeting Deletes a scheduled meeting.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMeetingWithHttpInfoAsync (string meetingId, string extensionId, string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'meetingId' is set
            if (meetingId == null)
                throw new ApiException(400, "Missing required parameter 'meetingId' when calling MeetingManagementApi->DeleteMeeting");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling MeetingManagementApi->DeleteMeeting");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MeetingManagementApi->DeleteMeeting");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/meeting/{meetingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (meetingId != null) localVarPathParams.Add("meetingId", this.Configuration.ApiClient.ParameterToString(meetingId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMeeting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// End Meeting Ends a meetings which is in progress.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId"></param>
        /// <returns></returns>
        public void EndMeeting (string meetingId, string extensionId, string accountId)
        {
             EndMeetingWithHttpInfo(meetingId, extensionId, accountId);
        }

        /// <summary>
        /// End Meeting Ends a meetings which is in progress.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> EndMeetingWithHttpInfo (string meetingId, string extensionId, string accountId)
        {
            // verify the required parameter 'meetingId' is set
            if (meetingId == null)
                throw new ApiException(400, "Missing required parameter 'meetingId' when calling MeetingManagementApi->EndMeeting");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling MeetingManagementApi->EndMeeting");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MeetingManagementApi->EndMeeting");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/meeting/{meetingId}/end";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (meetingId != null) localVarPathParams.Add("meetingId", this.Configuration.ApiClient.ParameterToString(meetingId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EndMeeting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// End Meeting Ends a meetings which is in progress.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EndMeetingAsync (string meetingId, string extensionId, string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await EndMeetingWithHttpInfoAsync(meetingId, extensionId, accountId, cancellationToken);

        }

        /// <summary>
        /// End Meeting Ends a meetings which is in progress.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> EndMeetingWithHttpInfoAsync (string meetingId, string extensionId, string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'meetingId' is set
            if (meetingId == null)
                throw new ApiException(400, "Missing required parameter 'meetingId' when calling MeetingManagementApi->EndMeeting");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling MeetingManagementApi->EndMeeting");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MeetingManagementApi->EndMeeting");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/meeting/{meetingId}/end";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (meetingId != null) localVarPathParams.Add("meetingId", this.Configuration.ApiClient.ParameterToString(meetingId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EndMeeting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get Scheduled Meetings Returns a list of user meetings scheduled for the future (meetings of 'Instant' type are not included).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>MeetingsResource</returns>
        public MeetingsResource ListMeetings (string extensionId, string accountId)
        {
             ApiResponse<MeetingsResource> localVarResponse = ListMeetingsWithHttpInfo(extensionId, accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Scheduled Meetings Returns a list of user meetings scheduled for the future (meetings of 'Instant' type are not included).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of MeetingsResource</returns>
        public ApiResponse<MeetingsResource> ListMeetingsWithHttpInfo (string extensionId, string accountId)
        {
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling MeetingManagementApi->ListMeetings");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MeetingManagementApi->ListMeetings");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/meeting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMeetings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MeetingsResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MeetingsResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MeetingsResource)));
        }

        /// <summary>
        /// Get Scheduled Meetings Returns a list of user meetings scheduled for the future (meetings of 'Instant' type are not included).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MeetingsResource</returns>
        public async System.Threading.Tasks.Task<MeetingsResource> ListMeetingsAsync (string extensionId, string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MeetingsResource> localVarResponse = await ListMeetingsWithHttpInfoAsync(extensionId, accountId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Scheduled Meetings Returns a list of user meetings scheduled for the future (meetings of 'Instant' type are not included).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MeetingsResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MeetingsResource>> ListMeetingsWithHttpInfoAsync (string extensionId, string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling MeetingManagementApi->ListMeetings");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MeetingManagementApi->ListMeetings");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/meeting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMeetings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MeetingsResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MeetingsResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MeetingsResource)));
        }

        /// <summary>
        /// Get Meeting Info Returns a particular meetings details by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>MeetingResponseResource</returns>
        public MeetingResponseResource ReadMeeting (string meetingId, string extensionId, string accountId)
        {
             ApiResponse<MeetingResponseResource> localVarResponse = ReadMeetingWithHttpInfo(meetingId, extensionId, accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Meeting Info Returns a particular meetings details by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of MeetingResponseResource</returns>
        public ApiResponse<MeetingResponseResource> ReadMeetingWithHttpInfo (string meetingId, string extensionId, string accountId)
        {
            // verify the required parameter 'meetingId' is set
            if (meetingId == null)
                throw new ApiException(400, "Missing required parameter 'meetingId' when calling MeetingManagementApi->ReadMeeting");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling MeetingManagementApi->ReadMeeting");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MeetingManagementApi->ReadMeeting");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/meeting/{meetingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (meetingId != null) localVarPathParams.Add("meetingId", this.Configuration.ApiClient.ParameterToString(meetingId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadMeeting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MeetingResponseResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MeetingResponseResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MeetingResponseResource)));
        }

        /// <summary>
        /// Get Meeting Info Returns a particular meetings details by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MeetingResponseResource</returns>
        public async System.Threading.Tasks.Task<MeetingResponseResource> ReadMeetingAsync (string meetingId, string extensionId, string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MeetingResponseResource> localVarResponse = await ReadMeetingWithHttpInfoAsync(meetingId, extensionId, accountId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Meeting Info Returns a particular meetings details by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MeetingResponseResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MeetingResponseResource>> ReadMeetingWithHttpInfoAsync (string meetingId, string extensionId, string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'meetingId' is set
            if (meetingId == null)
                throw new ApiException(400, "Missing required parameter 'meetingId' when calling MeetingManagementApi->ReadMeeting");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling MeetingManagementApi->ReadMeeting");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MeetingManagementApi->ReadMeeting");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/meeting/{meetingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (meetingId != null) localVarPathParams.Add("meetingId", this.Configuration.ApiClient.ParameterToString(meetingId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadMeeting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MeetingResponseResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MeetingResponseResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MeetingResponseResource)));
        }

        /// <summary>
        /// Get Meeting Invitation Returns a meeting invitation by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of an account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>PublicMeetingInvitationResponse</returns>
        public PublicMeetingInvitationResponse ReadMeetingInvitation (long meetingId, string extensionId, string accountId)
        {
             ApiResponse<PublicMeetingInvitationResponse> localVarResponse = ReadMeetingInvitationWithHttpInfo(meetingId, extensionId, accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Meeting Invitation Returns a meeting invitation by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of an account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of PublicMeetingInvitationResponse</returns>
        public ApiResponse<PublicMeetingInvitationResponse> ReadMeetingInvitationWithHttpInfo (long meetingId, string extensionId, string accountId)
        {
            // verify the required parameter 'meetingId' is set
            if (meetingId == null)
                throw new ApiException(400, "Missing required parameter 'meetingId' when calling MeetingManagementApi->ReadMeetingInvitation");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling MeetingManagementApi->ReadMeetingInvitation");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MeetingManagementApi->ReadMeetingInvitation");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/meeting/{meetingId}/invitation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (meetingId != null) localVarPathParams.Add("meetingId", this.Configuration.ApiClient.ParameterToString(meetingId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadMeetingInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicMeetingInvitationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PublicMeetingInvitationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicMeetingInvitationResponse)));
        }

        /// <summary>
        /// Get Meeting Invitation Returns a meeting invitation by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of an account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PublicMeetingInvitationResponse</returns>
        public async System.Threading.Tasks.Task<PublicMeetingInvitationResponse> ReadMeetingInvitationAsync (long meetingId, string extensionId, string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PublicMeetingInvitationResponse> localVarResponse = await ReadMeetingInvitationWithHttpInfoAsync(meetingId, extensionId, accountId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Meeting Invitation Returns a meeting invitation by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of an account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PublicMeetingInvitationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PublicMeetingInvitationResponse>> ReadMeetingInvitationWithHttpInfoAsync (long meetingId, string extensionId, string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'meetingId' is set
            if (meetingId == null)
                throw new ApiException(400, "Missing required parameter 'meetingId' when calling MeetingManagementApi->ReadMeetingInvitation");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling MeetingManagementApi->ReadMeetingInvitation");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MeetingManagementApi->ReadMeetingInvitation");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/meeting/{meetingId}/invitation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (meetingId != null) localVarPathParams.Add("meetingId", this.Configuration.ApiClient.ParameterToString(meetingId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadMeetingInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicMeetingInvitationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PublicMeetingInvitationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicMeetingInvitationResponse)));
        }

        /// <summary>
        /// Update Meeting Modifies a particular meeting.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="meetingRequestResource"> (optional)</param>
        /// <returns>MeetingResponseResource</returns>
        public MeetingResponseResource UpdateMeeting (string meetingId, string extensionId, string accountId, MeetingRequestResource meetingRequestResource = default(MeetingRequestResource))
        {
             ApiResponse<MeetingResponseResource> localVarResponse = UpdateMeetingWithHttpInfo(meetingId, extensionId, accountId, meetingRequestResource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Meeting Modifies a particular meeting.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="meetingRequestResource"> (optional)</param>
        /// <returns>ApiResponse of MeetingResponseResource</returns>
        public ApiResponse<MeetingResponseResource> UpdateMeetingWithHttpInfo (string meetingId, string extensionId, string accountId, MeetingRequestResource meetingRequestResource = default(MeetingRequestResource))
        {
            // verify the required parameter 'meetingId' is set
            if (meetingId == null)
                throw new ApiException(400, "Missing required parameter 'meetingId' when calling MeetingManagementApi->UpdateMeeting");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling MeetingManagementApi->UpdateMeeting");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MeetingManagementApi->UpdateMeeting");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/meeting/{meetingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (meetingId != null) localVarPathParams.Add("meetingId", this.Configuration.ApiClient.ParameterToString(meetingId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (meetingRequestResource != null && meetingRequestResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(meetingRequestResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = meetingRequestResource; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMeeting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MeetingResponseResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MeetingResponseResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MeetingResponseResource)));
        }

        /// <summary>
        /// Update Meeting Modifies a particular meeting.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="meetingRequestResource"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MeetingResponseResource</returns>
        public async System.Threading.Tasks.Task<MeetingResponseResource> UpdateMeetingAsync (string meetingId, string extensionId, string accountId, MeetingRequestResource meetingRequestResource = default(MeetingRequestResource), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MeetingResponseResource> localVarResponse = await UpdateMeetingWithHttpInfoAsync(meetingId, extensionId, accountId, meetingRequestResource, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Meeting Modifies a particular meeting.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Internal identifier of a RingCentral meeting</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="meetingRequestResource"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MeetingResponseResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MeetingResponseResource>> UpdateMeetingWithHttpInfoAsync (string meetingId, string extensionId, string accountId, MeetingRequestResource meetingRequestResource = default(MeetingRequestResource), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'meetingId' is set
            if (meetingId == null)
                throw new ApiException(400, "Missing required parameter 'meetingId' when calling MeetingManagementApi->UpdateMeeting");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling MeetingManagementApi->UpdateMeeting");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MeetingManagementApi->UpdateMeeting");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/meeting/{meetingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (meetingId != null) localVarPathParams.Add("meetingId", this.Configuration.ApiClient.ParameterToString(meetingId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (meetingRequestResource != null && meetingRequestResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(meetingRequestResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = meetingRequestResource; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMeeting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MeetingResponseResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MeetingResponseResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MeetingResponseResource)));
        }

    }
}
