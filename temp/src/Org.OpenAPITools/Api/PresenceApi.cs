/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPresenceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get User Presence Status List
        /// </summary>
        /// <remarks>
        /// Returns presence status of all extensions of an account. Please note: The presenceStatus is returned as Offline (the parameters telephonyStatus, message, userStatus and dndStatus are not returned at all) for the following extension types: Department, Announcement Only, Voicemail (Take Messages Only), Fax User, Paging Only Group, Shared Lines Group, IVR Menu, Application Extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="detailedTelephonyState">Whether to return detailed telephony state (optional)</param>
        /// <param name="sipData">Whether to return SIP data (optional)</param>
        /// <param name="page">Page number for account presence information (optional)</param>
        /// <param name="perPage">Number for account presence information items per page (optional)</param>
        /// <returns>AccountPresenceInfo</returns>
        AccountPresenceInfo ReadAccountPresence (string accountId, bool? detailedTelephonyState = default(bool?), bool? sipData = default(bool?), int? page = default(int?), int? perPage = default(int?));

        /// <summary>
        /// Get User Presence Status List
        /// </summary>
        /// <remarks>
        /// Returns presence status of all extensions of an account. Please note: The presenceStatus is returned as Offline (the parameters telephonyStatus, message, userStatus and dndStatus are not returned at all) for the following extension types: Department, Announcement Only, Voicemail (Take Messages Only), Fax User, Paging Only Group, Shared Lines Group, IVR Menu, Application Extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="detailedTelephonyState">Whether to return detailed telephony state (optional)</param>
        /// <param name="sipData">Whether to return SIP data (optional)</param>
        /// <param name="page">Page number for account presence information (optional)</param>
        /// <param name="perPage">Number for account presence information items per page (optional)</param>
        /// <returns>ApiResponse of AccountPresenceInfo</returns>
        ApiResponse<AccountPresenceInfo> ReadAccountPresenceWithHttpInfo (string accountId, bool? detailedTelephonyState = default(bool?), bool? sipData = default(bool?), int? page = default(int?), int? perPage = default(int?));
        /// <summary>
        /// Get Call Queue Presence
        /// </summary>
        /// <remarks>
        /// Returns presence status of the call queue members.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId">Internal identifier of an call queue extension</param>
        /// <returns>CallQueuePresence</returns>
        CallQueuePresence ReadCallQueuePresence (string accountId, string groupId);

        /// <summary>
        /// Get Call Queue Presence
        /// </summary>
        /// <remarks>
        /// Returns presence status of the call queue members.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId">Internal identifier of an call queue extension</param>
        /// <returns>ApiResponse of CallQueuePresence</returns>
        ApiResponse<CallQueuePresence> ReadCallQueuePresenceWithHttpInfo (string accountId, string groupId);
        /// <summary>
        /// Get Agent’s Call Queue Presence
        /// </summary>
        /// <remarks>
        /// Returns a list of agent's call queues with the agent presence status (per queue).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension</param>
        /// <param name="editableMemberStatus">Filtering by the flag &#39;Allow members to change their Queue Status&#39;. If &#39;true&#39; only queues where user can change his availability status are returned (optional)</param>
        /// <returns>ExtensionCallQueuePresenceList</returns>
        ExtensionCallQueuePresenceList ReadExtensionCallQueuePresence (string accountId, string extensionId, bool? editableMemberStatus = default(bool?));

        /// <summary>
        /// Get Agent’s Call Queue Presence
        /// </summary>
        /// <remarks>
        /// Returns a list of agent's call queues with the agent presence status (per queue).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension</param>
        /// <param name="editableMemberStatus">Filtering by the flag &#39;Allow members to change their Queue Status&#39;. If &#39;true&#39; only queues where user can change his availability status are returned (optional)</param>
        /// <returns>ApiResponse of ExtensionCallQueuePresenceList</returns>
        ApiResponse<ExtensionCallQueuePresenceList> ReadExtensionCallQueuePresenceWithHttpInfo (string accountId, string extensionId, bool? editableMemberStatus = default(bool?));
        /// <summary>
        /// Get Unified Presence
        /// </summary>
        /// <remarks>
        /// Returns the unified presence status of the requested user(s). The set of parameters returned by this method differs whether you return the requester's presence or any other user presence.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <returns>UnifiedPresence</returns>
        UnifiedPresence ReadUnifiedPresence (string accountId, string extensionId);

        /// <summary>
        /// Get Unified Presence
        /// </summary>
        /// <remarks>
        /// Returns the unified presence status of the requested user(s). The set of parameters returned by this method differs whether you return the requester's presence or any other user presence.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <returns>ApiResponse of UnifiedPresence</returns>
        ApiResponse<UnifiedPresence> ReadUnifiedPresenceWithHttpInfo (string accountId, string extensionId);
        /// <summary>
        /// Get User Presence Status
        /// </summary>
        /// <remarks>
        /// Returns presence status of an extension or several extensions by their ID(s). Batch request is supported. The 'presenceStatus' is returned as Offline (the parameters 'telephonyStatus', 'message', 'userStatus' and 'dndStatus' are not returned at all) for the following extension types: Department/Announcement Only/Take Messages Only (Voicemail)/Fax User/Paging Only Group/Shared Lines Group/IVR Menu/Application Extension/Park Location.If the user requests his/her own presence status, the response contains actual presence status even if the status publication is turned off. Batch request is supported. For batch requests the number of extensions in one request is limited to 30. If more extensions are included in the request, the error code 400 Bad Request is returned with the logical error code InvalidMultipartRequest and the corresponding message 'Extension Presence Info multipart request is limited to 30 extensions'.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="detailedTelephonyState">Whether to return detailed telephony state (optional)</param>
        /// <param name="sipData">Whether to return SIP data (optional)</param>
        /// <returns>GetPresenceInfo</returns>
        GetPresenceInfo ReadUserPresenceStatus (string accountId, string extensionId, bool? detailedTelephonyState = default(bool?), bool? sipData = default(bool?));

        /// <summary>
        /// Get User Presence Status
        /// </summary>
        /// <remarks>
        /// Returns presence status of an extension or several extensions by their ID(s). Batch request is supported. The 'presenceStatus' is returned as Offline (the parameters 'telephonyStatus', 'message', 'userStatus' and 'dndStatus' are not returned at all) for the following extension types: Department/Announcement Only/Take Messages Only (Voicemail)/Fax User/Paging Only Group/Shared Lines Group/IVR Menu/Application Extension/Park Location.If the user requests his/her own presence status, the response contains actual presence status even if the status publication is turned off. Batch request is supported. For batch requests the number of extensions in one request is limited to 30. If more extensions are included in the request, the error code 400 Bad Request is returned with the logical error code InvalidMultipartRequest and the corresponding message 'Extension Presence Info multipart request is limited to 30 extensions'.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="detailedTelephonyState">Whether to return detailed telephony state (optional)</param>
        /// <param name="sipData">Whether to return SIP data (optional)</param>
        /// <returns>ApiResponse of GetPresenceInfo</returns>
        ApiResponse<GetPresenceInfo> ReadUserPresenceStatusWithHttpInfo (string accountId, string extensionId, bool? detailedTelephonyState = default(bool?), bool? sipData = default(bool?));
        /// <summary>
        /// Update Call Queue Presence
        /// </summary>
        /// <remarks>
        /// Updates presence status of the call queue members in the specified queue.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId">Internal identifier of a call queue extension</param>
        /// <param name="callQueueUpdatePresence"></param>
        /// <returns>CallQueuePresence</returns>
        CallQueuePresence UpdateCallQueuePresence (string accountId, string groupId, CallQueueUpdatePresence callQueueUpdatePresence);

        /// <summary>
        /// Update Call Queue Presence
        /// </summary>
        /// <remarks>
        /// Updates presence status of the call queue members in the specified queue.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId">Internal identifier of a call queue extension</param>
        /// <param name="callQueueUpdatePresence"></param>
        /// <returns>ApiResponse of CallQueuePresence</returns>
        ApiResponse<CallQueuePresence> UpdateCallQueuePresenceWithHttpInfo (string accountId, string groupId, CallQueueUpdatePresence callQueueUpdatePresence);
        /// <summary>
        /// Update Call Queue Presence
        /// </summary>
        /// <remarks>
        /// Updates availability of the agent for the call queues.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension</param>
        /// <param name="extensionCallQueueUpdatePresenceList"></param>
        /// <returns>ExtensionCallQueuePresenceList</returns>
        ExtensionCallQueuePresenceList UpdateExtensionCallQueuePresence (string accountId, string extensionId, ExtensionCallQueueUpdatePresenceList extensionCallQueueUpdatePresenceList);

        /// <summary>
        /// Update Call Queue Presence
        /// </summary>
        /// <remarks>
        /// Updates availability of the agent for the call queues.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension</param>
        /// <param name="extensionCallQueueUpdatePresenceList"></param>
        /// <returns>ApiResponse of ExtensionCallQueuePresenceList</returns>
        ApiResponse<ExtensionCallQueuePresenceList> UpdateExtensionCallQueuePresenceWithHttpInfo (string accountId, string extensionId, ExtensionCallQueueUpdatePresenceList extensionCallQueueUpdatePresenceList);
        /// <summary>
        /// Update Unified Presence
        /// </summary>
        /// <remarks>
        /// Updates the unified presence for the current user specified in path.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="updateUnifiedPresence">JSON body</param>
        /// <returns>UnifiedPresence</returns>
        UnifiedPresence UpdateUnifiedPresence (string accountId, string extensionId, UpdateUnifiedPresence updateUnifiedPresence);

        /// <summary>
        /// Update Unified Presence
        /// </summary>
        /// <remarks>
        /// Updates the unified presence for the current user specified in path.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="updateUnifiedPresence">JSON body</param>
        /// <returns>ApiResponse of UnifiedPresence</returns>
        ApiResponse<UnifiedPresence> UpdateUnifiedPresenceWithHttpInfo (string accountId, string extensionId, UpdateUnifiedPresence updateUnifiedPresence);
        /// <summary>
        /// Update User Presence Status
        /// </summary>
        /// <remarks>
        /// Updates user-defined extension presence status, status message and DnD status by extension ID. Supported for regular User extensions only. The extension types listed do not support presence status: Department, Announcement Only, Take Messages Only (Voicemail), Fax User, Paging Only Group, Shared Lines Group, IVR Menu, Application Extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="presenceInfoRequest"> (optional)</param>
        /// <returns>PresenceInfoResponse</returns>
        PresenceInfoResponse UpdateUserPresenceStatus (string extensionId, string accountId, PresenceInfoRequest presenceInfoRequest = default(PresenceInfoRequest));

        /// <summary>
        /// Update User Presence Status
        /// </summary>
        /// <remarks>
        /// Updates user-defined extension presence status, status message and DnD status by extension ID. Supported for regular User extensions only. The extension types listed do not support presence status: Department, Announcement Only, Take Messages Only (Voicemail), Fax User, Paging Only Group, Shared Lines Group, IVR Menu, Application Extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="presenceInfoRequest"> (optional)</param>
        /// <returns>ApiResponse of PresenceInfoResponse</returns>
        ApiResponse<PresenceInfoResponse> UpdateUserPresenceStatusWithHttpInfo (string extensionId, string accountId, PresenceInfoRequest presenceInfoRequest = default(PresenceInfoRequest));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get User Presence Status List
        /// </summary>
        /// <remarks>
        /// Returns presence status of all extensions of an account. Please note: The presenceStatus is returned as Offline (the parameters telephonyStatus, message, userStatus and dndStatus are not returned at all) for the following extension types: Department, Announcement Only, Voicemail (Take Messages Only), Fax User, Paging Only Group, Shared Lines Group, IVR Menu, Application Extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="detailedTelephonyState">Whether to return detailed telephony state (optional)</param>
        /// <param name="sipData">Whether to return SIP data (optional)</param>
        /// <param name="page">Page number for account presence information (optional)</param>
        /// <param name="perPage">Number for account presence information items per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AccountPresenceInfo</returns>
        System.Threading.Tasks.Task<AccountPresenceInfo> ReadAccountPresenceAsync (string accountId, bool? detailedTelephonyState = default(bool?), bool? sipData = default(bool?), int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get User Presence Status List
        /// </summary>
        /// <remarks>
        /// Returns presence status of all extensions of an account. Please note: The presenceStatus is returned as Offline (the parameters telephonyStatus, message, userStatus and dndStatus are not returned at all) for the following extension types: Department, Announcement Only, Voicemail (Take Messages Only), Fax User, Paging Only Group, Shared Lines Group, IVR Menu, Application Extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="detailedTelephonyState">Whether to return detailed telephony state (optional)</param>
        /// <param name="sipData">Whether to return SIP data (optional)</param>
        /// <param name="page">Page number for account presence information (optional)</param>
        /// <param name="perPage">Number for account presence information items per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AccountPresenceInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountPresenceInfo>> ReadAccountPresenceWithHttpInfoAsync (string accountId, bool? detailedTelephonyState = default(bool?), bool? sipData = default(bool?), int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Call Queue Presence
        /// </summary>
        /// <remarks>
        /// Returns presence status of the call queue members.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId">Internal identifier of an call queue extension</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallQueuePresence</returns>
        System.Threading.Tasks.Task<CallQueuePresence> ReadCallQueuePresenceAsync (string accountId, string groupId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Call Queue Presence
        /// </summary>
        /// <remarks>
        /// Returns presence status of the call queue members.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId">Internal identifier of an call queue extension</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallQueuePresence)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallQueuePresence>> ReadCallQueuePresenceWithHttpInfoAsync (string accountId, string groupId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Agent’s Call Queue Presence
        /// </summary>
        /// <remarks>
        /// Returns a list of agent's call queues with the agent presence status (per queue).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension</param>
        /// <param name="editableMemberStatus">Filtering by the flag &#39;Allow members to change their Queue Status&#39;. If &#39;true&#39; only queues where user can change his availability status are returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ExtensionCallQueuePresenceList</returns>
        System.Threading.Tasks.Task<ExtensionCallQueuePresenceList> ReadExtensionCallQueuePresenceAsync (string accountId, string extensionId, bool? editableMemberStatus = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Agent’s Call Queue Presence
        /// </summary>
        /// <remarks>
        /// Returns a list of agent's call queues with the agent presence status (per queue).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension</param>
        /// <param name="editableMemberStatus">Filtering by the flag &#39;Allow members to change their Queue Status&#39;. If &#39;true&#39; only queues where user can change his availability status are returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ExtensionCallQueuePresenceList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionCallQueuePresenceList>> ReadExtensionCallQueuePresenceWithHttpInfoAsync (string accountId, string extensionId, bool? editableMemberStatus = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Unified Presence
        /// </summary>
        /// <remarks>
        /// Returns the unified presence status of the requested user(s). The set of parameters returned by this method differs whether you return the requester's presence or any other user presence.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UnifiedPresence</returns>
        System.Threading.Tasks.Task<UnifiedPresence> ReadUnifiedPresenceAsync (string accountId, string extensionId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Unified Presence
        /// </summary>
        /// <remarks>
        /// Returns the unified presence status of the requested user(s). The set of parameters returned by this method differs whether you return the requester's presence or any other user presence.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UnifiedPresence)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnifiedPresence>> ReadUnifiedPresenceWithHttpInfoAsync (string accountId, string extensionId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get User Presence Status
        /// </summary>
        /// <remarks>
        /// Returns presence status of an extension or several extensions by their ID(s). Batch request is supported. The 'presenceStatus' is returned as Offline (the parameters 'telephonyStatus', 'message', 'userStatus' and 'dndStatus' are not returned at all) for the following extension types: Department/Announcement Only/Take Messages Only (Voicemail)/Fax User/Paging Only Group/Shared Lines Group/IVR Menu/Application Extension/Park Location.If the user requests his/her own presence status, the response contains actual presence status even if the status publication is turned off. Batch request is supported. For batch requests the number of extensions in one request is limited to 30. If more extensions are included in the request, the error code 400 Bad Request is returned with the logical error code InvalidMultipartRequest and the corresponding message 'Extension Presence Info multipart request is limited to 30 extensions'.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="detailedTelephonyState">Whether to return detailed telephony state (optional)</param>
        /// <param name="sipData">Whether to return SIP data (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetPresenceInfo</returns>
        System.Threading.Tasks.Task<GetPresenceInfo> ReadUserPresenceStatusAsync (string accountId, string extensionId, bool? detailedTelephonyState = default(bool?), bool? sipData = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get User Presence Status
        /// </summary>
        /// <remarks>
        /// Returns presence status of an extension or several extensions by their ID(s). Batch request is supported. The 'presenceStatus' is returned as Offline (the parameters 'telephonyStatus', 'message', 'userStatus' and 'dndStatus' are not returned at all) for the following extension types: Department/Announcement Only/Take Messages Only (Voicemail)/Fax User/Paging Only Group/Shared Lines Group/IVR Menu/Application Extension/Park Location.If the user requests his/her own presence status, the response contains actual presence status even if the status publication is turned off. Batch request is supported. For batch requests the number of extensions in one request is limited to 30. If more extensions are included in the request, the error code 400 Bad Request is returned with the logical error code InvalidMultipartRequest and the corresponding message 'Extension Presence Info multipart request is limited to 30 extensions'.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="detailedTelephonyState">Whether to return detailed telephony state (optional)</param>
        /// <param name="sipData">Whether to return SIP data (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetPresenceInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPresenceInfo>> ReadUserPresenceStatusWithHttpInfoAsync (string accountId, string extensionId, bool? detailedTelephonyState = default(bool?), bool? sipData = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Call Queue Presence
        /// </summary>
        /// <remarks>
        /// Updates presence status of the call queue members in the specified queue.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId">Internal identifier of a call queue extension</param>
        /// <param name="callQueueUpdatePresence"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallQueuePresence</returns>
        System.Threading.Tasks.Task<CallQueuePresence> UpdateCallQueuePresenceAsync (string accountId, string groupId, CallQueueUpdatePresence callQueueUpdatePresence, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Call Queue Presence
        /// </summary>
        /// <remarks>
        /// Updates presence status of the call queue members in the specified queue.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId">Internal identifier of a call queue extension</param>
        /// <param name="callQueueUpdatePresence"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallQueuePresence)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallQueuePresence>> UpdateCallQueuePresenceWithHttpInfoAsync (string accountId, string groupId, CallQueueUpdatePresence callQueueUpdatePresence, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Call Queue Presence
        /// </summary>
        /// <remarks>
        /// Updates availability of the agent for the call queues.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension</param>
        /// <param name="extensionCallQueueUpdatePresenceList"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ExtensionCallQueuePresenceList</returns>
        System.Threading.Tasks.Task<ExtensionCallQueuePresenceList> UpdateExtensionCallQueuePresenceAsync (string accountId, string extensionId, ExtensionCallQueueUpdatePresenceList extensionCallQueueUpdatePresenceList, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Call Queue Presence
        /// </summary>
        /// <remarks>
        /// Updates availability of the agent for the call queues.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension</param>
        /// <param name="extensionCallQueueUpdatePresenceList"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ExtensionCallQueuePresenceList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionCallQueuePresenceList>> UpdateExtensionCallQueuePresenceWithHttpInfoAsync (string accountId, string extensionId, ExtensionCallQueueUpdatePresenceList extensionCallQueueUpdatePresenceList, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Unified Presence
        /// </summary>
        /// <remarks>
        /// Updates the unified presence for the current user specified in path.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="updateUnifiedPresence">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UnifiedPresence</returns>
        System.Threading.Tasks.Task<UnifiedPresence> UpdateUnifiedPresenceAsync (string accountId, string extensionId, UpdateUnifiedPresence updateUnifiedPresence, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Unified Presence
        /// </summary>
        /// <remarks>
        /// Updates the unified presence for the current user specified in path.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="updateUnifiedPresence">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UnifiedPresence)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnifiedPresence>> UpdateUnifiedPresenceWithHttpInfoAsync (string accountId, string extensionId, UpdateUnifiedPresence updateUnifiedPresence, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update User Presence Status
        /// </summary>
        /// <remarks>
        /// Updates user-defined extension presence status, status message and DnD status by extension ID. Supported for regular User extensions only. The extension types listed do not support presence status: Department, Announcement Only, Take Messages Only (Voicemail), Fax User, Paging Only Group, Shared Lines Group, IVR Menu, Application Extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="presenceInfoRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PresenceInfoResponse</returns>
        System.Threading.Tasks.Task<PresenceInfoResponse> UpdateUserPresenceStatusAsync (string extensionId, string accountId, PresenceInfoRequest presenceInfoRequest = default(PresenceInfoRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update User Presence Status
        /// </summary>
        /// <remarks>
        /// Updates user-defined extension presence status, status message and DnD status by extension ID. Supported for regular User extensions only. The extension types listed do not support presence status: Department, Announcement Only, Take Messages Only (Voicemail), Fax User, Paging Only Group, Shared Lines Group, IVR Menu, Application Extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="presenceInfoRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PresenceInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PresenceInfoResponse>> UpdateUserPresenceStatusWithHttpInfoAsync (string extensionId, string accountId, PresenceInfoRequest presenceInfoRequest = default(PresenceInfoRequest), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PresenceApi : IPresenceApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PresenceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PresenceApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PresenceApi"/> class
        /// </summary>
        /// <returns></returns>
        public PresenceApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PresenceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PresenceApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get User Presence Status List Returns presence status of all extensions of an account. Please note: The presenceStatus is returned as Offline (the parameters telephonyStatus, message, userStatus and dndStatus are not returned at all) for the following extension types: Department, Announcement Only, Voicemail (Take Messages Only), Fax User, Paging Only Group, Shared Lines Group, IVR Menu, Application Extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="detailedTelephonyState">Whether to return detailed telephony state (optional)</param>
        /// <param name="sipData">Whether to return SIP data (optional)</param>
        /// <param name="page">Page number for account presence information (optional)</param>
        /// <param name="perPage">Number for account presence information items per page (optional)</param>
        /// <returns>AccountPresenceInfo</returns>
        public AccountPresenceInfo ReadAccountPresence (string accountId, bool? detailedTelephonyState = default(bool?), bool? sipData = default(bool?), int? page = default(int?), int? perPage = default(int?))
        {
             ApiResponse<AccountPresenceInfo> localVarResponse = ReadAccountPresenceWithHttpInfo(accountId, detailedTelephonyState, sipData, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Presence Status List Returns presence status of all extensions of an account. Please note: The presenceStatus is returned as Offline (the parameters telephonyStatus, message, userStatus and dndStatus are not returned at all) for the following extension types: Department, Announcement Only, Voicemail (Take Messages Only), Fax User, Paging Only Group, Shared Lines Group, IVR Menu, Application Extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="detailedTelephonyState">Whether to return detailed telephony state (optional)</param>
        /// <param name="sipData">Whether to return SIP data (optional)</param>
        /// <param name="page">Page number for account presence information (optional)</param>
        /// <param name="perPage">Number for account presence information items per page (optional)</param>
        /// <returns>ApiResponse of AccountPresenceInfo</returns>
        public ApiResponse<AccountPresenceInfo> ReadAccountPresenceWithHttpInfo (string accountId, bool? detailedTelephonyState = default(bool?), bool? sipData = default(bool?), int? page = default(int?), int? perPage = default(int?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PresenceApi->ReadAccountPresence");

            var localVarPath = "/restapi/v1.0/account/{accountId}/presence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (detailedTelephonyState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "detailedTelephonyState", detailedTelephonyState)); // query parameter
            if (sipData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sipData", sipData)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadAccountPresence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountPresenceInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccountPresenceInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountPresenceInfo)));
        }

        /// <summary>
        /// Get User Presence Status List Returns presence status of all extensions of an account. Please note: The presenceStatus is returned as Offline (the parameters telephonyStatus, message, userStatus and dndStatus are not returned at all) for the following extension types: Department, Announcement Only, Voicemail (Take Messages Only), Fax User, Paging Only Group, Shared Lines Group, IVR Menu, Application Extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="detailedTelephonyState">Whether to return detailed telephony state (optional)</param>
        /// <param name="sipData">Whether to return SIP data (optional)</param>
        /// <param name="page">Page number for account presence information (optional)</param>
        /// <param name="perPage">Number for account presence information items per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AccountPresenceInfo</returns>
        public async System.Threading.Tasks.Task<AccountPresenceInfo> ReadAccountPresenceAsync (string accountId, bool? detailedTelephonyState = default(bool?), bool? sipData = default(bool?), int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AccountPresenceInfo> localVarResponse = await ReadAccountPresenceWithHttpInfoAsync(accountId, detailedTelephonyState, sipData, page, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get User Presence Status List Returns presence status of all extensions of an account. Please note: The presenceStatus is returned as Offline (the parameters telephonyStatus, message, userStatus and dndStatus are not returned at all) for the following extension types: Department, Announcement Only, Voicemail (Take Messages Only), Fax User, Paging Only Group, Shared Lines Group, IVR Menu, Application Extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="detailedTelephonyState">Whether to return detailed telephony state (optional)</param>
        /// <param name="sipData">Whether to return SIP data (optional)</param>
        /// <param name="page">Page number for account presence information (optional)</param>
        /// <param name="perPage">Number for account presence information items per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AccountPresenceInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountPresenceInfo>> ReadAccountPresenceWithHttpInfoAsync (string accountId, bool? detailedTelephonyState = default(bool?), bool? sipData = default(bool?), int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PresenceApi->ReadAccountPresence");

            var localVarPath = "/restapi/v1.0/account/{accountId}/presence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (detailedTelephonyState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "detailedTelephonyState", detailedTelephonyState)); // query parameter
            if (sipData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sipData", sipData)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadAccountPresence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountPresenceInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccountPresenceInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountPresenceInfo)));
        }

        /// <summary>
        /// Get Call Queue Presence Returns presence status of the call queue members.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId">Internal identifier of an call queue extension</param>
        /// <returns>CallQueuePresence</returns>
        public CallQueuePresence ReadCallQueuePresence (string accountId, string groupId)
        {
             ApiResponse<CallQueuePresence> localVarResponse = ReadCallQueuePresenceWithHttpInfo(accountId, groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Queue Presence Returns presence status of the call queue members.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId">Internal identifier of an call queue extension</param>
        /// <returns>ApiResponse of CallQueuePresence</returns>
        public ApiResponse<CallQueuePresence> ReadCallQueuePresenceWithHttpInfo (string accountId, string groupId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PresenceApi->ReadCallQueuePresence");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling PresenceApi->ReadCallQueuePresence");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-queues/{groupId}/presence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadCallQueuePresence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallQueuePresence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallQueuePresence) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallQueuePresence)));
        }

        /// <summary>
        /// Get Call Queue Presence Returns presence status of the call queue members.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId">Internal identifier of an call queue extension</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallQueuePresence</returns>
        public async System.Threading.Tasks.Task<CallQueuePresence> ReadCallQueuePresenceAsync (string accountId, string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CallQueuePresence> localVarResponse = await ReadCallQueuePresenceWithHttpInfoAsync(accountId, groupId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Call Queue Presence Returns presence status of the call queue members.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId">Internal identifier of an call queue extension</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallQueuePresence)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallQueuePresence>> ReadCallQueuePresenceWithHttpInfoAsync (string accountId, string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PresenceApi->ReadCallQueuePresence");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling PresenceApi->ReadCallQueuePresence");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-queues/{groupId}/presence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadCallQueuePresence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallQueuePresence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallQueuePresence) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallQueuePresence)));
        }

        /// <summary>
        /// Get Agent’s Call Queue Presence Returns a list of agent's call queues with the agent presence status (per queue).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension</param>
        /// <param name="editableMemberStatus">Filtering by the flag &#39;Allow members to change their Queue Status&#39;. If &#39;true&#39; only queues where user can change his availability status are returned (optional)</param>
        /// <returns>ExtensionCallQueuePresenceList</returns>
        public ExtensionCallQueuePresenceList ReadExtensionCallQueuePresence (string accountId, string extensionId, bool? editableMemberStatus = default(bool?))
        {
             ApiResponse<ExtensionCallQueuePresenceList> localVarResponse = ReadExtensionCallQueuePresenceWithHttpInfo(accountId, extensionId, editableMemberStatus);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Agent’s Call Queue Presence Returns a list of agent's call queues with the agent presence status (per queue).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension</param>
        /// <param name="editableMemberStatus">Filtering by the flag &#39;Allow members to change their Queue Status&#39;. If &#39;true&#39; only queues where user can change his availability status are returned (optional)</param>
        /// <returns>ApiResponse of ExtensionCallQueuePresenceList</returns>
        public ApiResponse<ExtensionCallQueuePresenceList> ReadExtensionCallQueuePresenceWithHttpInfo (string accountId, string extensionId, bool? editableMemberStatus = default(bool?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PresenceApi->ReadExtensionCallQueuePresence");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling PresenceApi->ReadExtensionCallQueuePresence");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/call-queue-presence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (editableMemberStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "editableMemberStatus", editableMemberStatus)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadExtensionCallQueuePresence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionCallQueuePresenceList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtensionCallQueuePresenceList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionCallQueuePresenceList)));
        }

        /// <summary>
        /// Get Agent’s Call Queue Presence Returns a list of agent's call queues with the agent presence status (per queue).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension</param>
        /// <param name="editableMemberStatus">Filtering by the flag &#39;Allow members to change their Queue Status&#39;. If &#39;true&#39; only queues where user can change his availability status are returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ExtensionCallQueuePresenceList</returns>
        public async System.Threading.Tasks.Task<ExtensionCallQueuePresenceList> ReadExtensionCallQueuePresenceAsync (string accountId, string extensionId, bool? editableMemberStatus = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ExtensionCallQueuePresenceList> localVarResponse = await ReadExtensionCallQueuePresenceWithHttpInfoAsync(accountId, extensionId, editableMemberStatus, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Agent’s Call Queue Presence Returns a list of agent's call queues with the agent presence status (per queue).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension</param>
        /// <param name="editableMemberStatus">Filtering by the flag &#39;Allow members to change their Queue Status&#39;. If &#39;true&#39; only queues where user can change his availability status are returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ExtensionCallQueuePresenceList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionCallQueuePresenceList>> ReadExtensionCallQueuePresenceWithHttpInfoAsync (string accountId, string extensionId, bool? editableMemberStatus = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PresenceApi->ReadExtensionCallQueuePresence");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling PresenceApi->ReadExtensionCallQueuePresence");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/call-queue-presence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (editableMemberStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "editableMemberStatus", editableMemberStatus)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadExtensionCallQueuePresence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionCallQueuePresenceList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtensionCallQueuePresenceList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionCallQueuePresenceList)));
        }

        /// <summary>
        /// Get Unified Presence Returns the unified presence status of the requested user(s). The set of parameters returned by this method differs whether you return the requester's presence or any other user presence.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <returns>UnifiedPresence</returns>
        public UnifiedPresence ReadUnifiedPresence (string accountId, string extensionId)
        {
             ApiResponse<UnifiedPresence> localVarResponse = ReadUnifiedPresenceWithHttpInfo(accountId, extensionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Unified Presence Returns the unified presence status of the requested user(s). The set of parameters returned by this method differs whether you return the requester's presence or any other user presence.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <returns>ApiResponse of UnifiedPresence</returns>
        public ApiResponse<UnifiedPresence> ReadUnifiedPresenceWithHttpInfo (string accountId, string extensionId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PresenceApi->ReadUnifiedPresence");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling PresenceApi->ReadUnifiedPresence");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/unified-presence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadUnifiedPresence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnifiedPresence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UnifiedPresence) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnifiedPresence)));
        }

        /// <summary>
        /// Get Unified Presence Returns the unified presence status of the requested user(s). The set of parameters returned by this method differs whether you return the requester's presence or any other user presence.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UnifiedPresence</returns>
        public async System.Threading.Tasks.Task<UnifiedPresence> ReadUnifiedPresenceAsync (string accountId, string extensionId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UnifiedPresence> localVarResponse = await ReadUnifiedPresenceWithHttpInfoAsync(accountId, extensionId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Unified Presence Returns the unified presence status of the requested user(s). The set of parameters returned by this method differs whether you return the requester's presence or any other user presence.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UnifiedPresence)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UnifiedPresence>> ReadUnifiedPresenceWithHttpInfoAsync (string accountId, string extensionId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PresenceApi->ReadUnifiedPresence");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling PresenceApi->ReadUnifiedPresence");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/unified-presence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadUnifiedPresence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnifiedPresence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UnifiedPresence) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnifiedPresence)));
        }

        /// <summary>
        /// Get User Presence Status Returns presence status of an extension or several extensions by their ID(s). Batch request is supported. The 'presenceStatus' is returned as Offline (the parameters 'telephonyStatus', 'message', 'userStatus' and 'dndStatus' are not returned at all) for the following extension types: Department/Announcement Only/Take Messages Only (Voicemail)/Fax User/Paging Only Group/Shared Lines Group/IVR Menu/Application Extension/Park Location.If the user requests his/her own presence status, the response contains actual presence status even if the status publication is turned off. Batch request is supported. For batch requests the number of extensions in one request is limited to 30. If more extensions are included in the request, the error code 400 Bad Request is returned with the logical error code InvalidMultipartRequest and the corresponding message 'Extension Presence Info multipart request is limited to 30 extensions'.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="detailedTelephonyState">Whether to return detailed telephony state (optional)</param>
        /// <param name="sipData">Whether to return SIP data (optional)</param>
        /// <returns>GetPresenceInfo</returns>
        public GetPresenceInfo ReadUserPresenceStatus (string accountId, string extensionId, bool? detailedTelephonyState = default(bool?), bool? sipData = default(bool?))
        {
             ApiResponse<GetPresenceInfo> localVarResponse = ReadUserPresenceStatusWithHttpInfo(accountId, extensionId, detailedTelephonyState, sipData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Presence Status Returns presence status of an extension or several extensions by their ID(s). Batch request is supported. The 'presenceStatus' is returned as Offline (the parameters 'telephonyStatus', 'message', 'userStatus' and 'dndStatus' are not returned at all) for the following extension types: Department/Announcement Only/Take Messages Only (Voicemail)/Fax User/Paging Only Group/Shared Lines Group/IVR Menu/Application Extension/Park Location.If the user requests his/her own presence status, the response contains actual presence status even if the status publication is turned off. Batch request is supported. For batch requests the number of extensions in one request is limited to 30. If more extensions are included in the request, the error code 400 Bad Request is returned with the logical error code InvalidMultipartRequest and the corresponding message 'Extension Presence Info multipart request is limited to 30 extensions'.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="detailedTelephonyState">Whether to return detailed telephony state (optional)</param>
        /// <param name="sipData">Whether to return SIP data (optional)</param>
        /// <returns>ApiResponse of GetPresenceInfo</returns>
        public ApiResponse<GetPresenceInfo> ReadUserPresenceStatusWithHttpInfo (string accountId, string extensionId, bool? detailedTelephonyState = default(bool?), bool? sipData = default(bool?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PresenceApi->ReadUserPresenceStatus");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling PresenceApi->ReadUserPresenceStatus");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/presence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (detailedTelephonyState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "detailedTelephonyState", detailedTelephonyState)); // query parameter
            if (sipData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sipData", sipData)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadUserPresenceStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPresenceInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetPresenceInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPresenceInfo)));
        }

        /// <summary>
        /// Get User Presence Status Returns presence status of an extension or several extensions by their ID(s). Batch request is supported. The 'presenceStatus' is returned as Offline (the parameters 'telephonyStatus', 'message', 'userStatus' and 'dndStatus' are not returned at all) for the following extension types: Department/Announcement Only/Take Messages Only (Voicemail)/Fax User/Paging Only Group/Shared Lines Group/IVR Menu/Application Extension/Park Location.If the user requests his/her own presence status, the response contains actual presence status even if the status publication is turned off. Batch request is supported. For batch requests the number of extensions in one request is limited to 30. If more extensions are included in the request, the error code 400 Bad Request is returned with the logical error code InvalidMultipartRequest and the corresponding message 'Extension Presence Info multipart request is limited to 30 extensions'.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="detailedTelephonyState">Whether to return detailed telephony state (optional)</param>
        /// <param name="sipData">Whether to return SIP data (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetPresenceInfo</returns>
        public async System.Threading.Tasks.Task<GetPresenceInfo> ReadUserPresenceStatusAsync (string accountId, string extensionId, bool? detailedTelephonyState = default(bool?), bool? sipData = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetPresenceInfo> localVarResponse = await ReadUserPresenceStatusWithHttpInfoAsync(accountId, extensionId, detailedTelephonyState, sipData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get User Presence Status Returns presence status of an extension or several extensions by their ID(s). Batch request is supported. The 'presenceStatus' is returned as Offline (the parameters 'telephonyStatus', 'message', 'userStatus' and 'dndStatus' are not returned at all) for the following extension types: Department/Announcement Only/Take Messages Only (Voicemail)/Fax User/Paging Only Group/Shared Lines Group/IVR Menu/Application Extension/Park Location.If the user requests his/her own presence status, the response contains actual presence status even if the status publication is turned off. Batch request is supported. For batch requests the number of extensions in one request is limited to 30. If more extensions are included in the request, the error code 400 Bad Request is returned with the logical error code InvalidMultipartRequest and the corresponding message 'Extension Presence Info multipart request is limited to 30 extensions'.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="detailedTelephonyState">Whether to return detailed telephony state (optional)</param>
        /// <param name="sipData">Whether to return SIP data (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetPresenceInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPresenceInfo>> ReadUserPresenceStatusWithHttpInfoAsync (string accountId, string extensionId, bool? detailedTelephonyState = default(bool?), bool? sipData = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PresenceApi->ReadUserPresenceStatus");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling PresenceApi->ReadUserPresenceStatus");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/presence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (detailedTelephonyState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "detailedTelephonyState", detailedTelephonyState)); // query parameter
            if (sipData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sipData", sipData)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadUserPresenceStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPresenceInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetPresenceInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPresenceInfo)));
        }

        /// <summary>
        /// Update Call Queue Presence Updates presence status of the call queue members in the specified queue.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId">Internal identifier of a call queue extension</param>
        /// <param name="callQueueUpdatePresence"></param>
        /// <returns>CallQueuePresence</returns>
        public CallQueuePresence UpdateCallQueuePresence (string accountId, string groupId, CallQueueUpdatePresence callQueueUpdatePresence)
        {
             ApiResponse<CallQueuePresence> localVarResponse = UpdateCallQueuePresenceWithHttpInfo(accountId, groupId, callQueueUpdatePresence);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Call Queue Presence Updates presence status of the call queue members in the specified queue.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId">Internal identifier of a call queue extension</param>
        /// <param name="callQueueUpdatePresence"></param>
        /// <returns>ApiResponse of CallQueuePresence</returns>
        public ApiResponse<CallQueuePresence> UpdateCallQueuePresenceWithHttpInfo (string accountId, string groupId, CallQueueUpdatePresence callQueueUpdatePresence)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PresenceApi->UpdateCallQueuePresence");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling PresenceApi->UpdateCallQueuePresence");
            // verify the required parameter 'callQueueUpdatePresence' is set
            if (callQueueUpdatePresence == null)
                throw new ApiException(400, "Missing required parameter 'callQueueUpdatePresence' when calling PresenceApi->UpdateCallQueuePresence");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-queues/{groupId}/presence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (callQueueUpdatePresence != null && callQueueUpdatePresence.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(callQueueUpdatePresence); // http body (model) parameter
            }
            else
            {
                localVarPostBody = callQueueUpdatePresence; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCallQueuePresence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallQueuePresence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallQueuePresence) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallQueuePresence)));
        }

        /// <summary>
        /// Update Call Queue Presence Updates presence status of the call queue members in the specified queue.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId">Internal identifier of a call queue extension</param>
        /// <param name="callQueueUpdatePresence"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallQueuePresence</returns>
        public async System.Threading.Tasks.Task<CallQueuePresence> UpdateCallQueuePresenceAsync (string accountId, string groupId, CallQueueUpdatePresence callQueueUpdatePresence, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CallQueuePresence> localVarResponse = await UpdateCallQueuePresenceWithHttpInfoAsync(accountId, groupId, callQueueUpdatePresence, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Call Queue Presence Updates presence status of the call queue members in the specified queue.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="groupId">Internal identifier of a call queue extension</param>
        /// <param name="callQueueUpdatePresence"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallQueuePresence)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallQueuePresence>> UpdateCallQueuePresenceWithHttpInfoAsync (string accountId, string groupId, CallQueueUpdatePresence callQueueUpdatePresence, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PresenceApi->UpdateCallQueuePresence");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling PresenceApi->UpdateCallQueuePresence");
            // verify the required parameter 'callQueueUpdatePresence' is set
            if (callQueueUpdatePresence == null)
                throw new ApiException(400, "Missing required parameter 'callQueueUpdatePresence' when calling PresenceApi->UpdateCallQueuePresence");

            var localVarPath = "/restapi/v1.0/account/{accountId}/call-queues/{groupId}/presence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (callQueueUpdatePresence != null && callQueueUpdatePresence.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(callQueueUpdatePresence); // http body (model) parameter
            }
            else
            {
                localVarPostBody = callQueueUpdatePresence; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCallQueuePresence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallQueuePresence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallQueuePresence) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallQueuePresence)));
        }

        /// <summary>
        /// Update Call Queue Presence Updates availability of the agent for the call queues.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension</param>
        /// <param name="extensionCallQueueUpdatePresenceList"></param>
        /// <returns>ExtensionCallQueuePresenceList</returns>
        public ExtensionCallQueuePresenceList UpdateExtensionCallQueuePresence (string accountId, string extensionId, ExtensionCallQueueUpdatePresenceList extensionCallQueueUpdatePresenceList)
        {
             ApiResponse<ExtensionCallQueuePresenceList> localVarResponse = UpdateExtensionCallQueuePresenceWithHttpInfo(accountId, extensionId, extensionCallQueueUpdatePresenceList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Call Queue Presence Updates availability of the agent for the call queues.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension</param>
        /// <param name="extensionCallQueueUpdatePresenceList"></param>
        /// <returns>ApiResponse of ExtensionCallQueuePresenceList</returns>
        public ApiResponse<ExtensionCallQueuePresenceList> UpdateExtensionCallQueuePresenceWithHttpInfo (string accountId, string extensionId, ExtensionCallQueueUpdatePresenceList extensionCallQueueUpdatePresenceList)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PresenceApi->UpdateExtensionCallQueuePresence");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling PresenceApi->UpdateExtensionCallQueuePresence");
            // verify the required parameter 'extensionCallQueueUpdatePresenceList' is set
            if (extensionCallQueueUpdatePresenceList == null)
                throw new ApiException(400, "Missing required parameter 'extensionCallQueueUpdatePresenceList' when calling PresenceApi->UpdateExtensionCallQueuePresence");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/call-queue-presence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (extensionCallQueueUpdatePresenceList != null && extensionCallQueueUpdatePresenceList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(extensionCallQueueUpdatePresenceList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = extensionCallQueueUpdatePresenceList; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateExtensionCallQueuePresence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionCallQueuePresenceList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtensionCallQueuePresenceList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionCallQueuePresenceList)));
        }

        /// <summary>
        /// Update Call Queue Presence Updates availability of the agent for the call queues.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension</param>
        /// <param name="extensionCallQueueUpdatePresenceList"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ExtensionCallQueuePresenceList</returns>
        public async System.Threading.Tasks.Task<ExtensionCallQueuePresenceList> UpdateExtensionCallQueuePresenceAsync (string accountId, string extensionId, ExtensionCallQueueUpdatePresenceList extensionCallQueueUpdatePresenceList, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ExtensionCallQueuePresenceList> localVarResponse = await UpdateExtensionCallQueuePresenceWithHttpInfoAsync(accountId, extensionId, extensionCallQueueUpdatePresenceList, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Call Queue Presence Updates availability of the agent for the call queues.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension</param>
        /// <param name="extensionCallQueueUpdatePresenceList"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ExtensionCallQueuePresenceList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionCallQueuePresenceList>> UpdateExtensionCallQueuePresenceWithHttpInfoAsync (string accountId, string extensionId, ExtensionCallQueueUpdatePresenceList extensionCallQueueUpdatePresenceList, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PresenceApi->UpdateExtensionCallQueuePresence");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling PresenceApi->UpdateExtensionCallQueuePresence");
            // verify the required parameter 'extensionCallQueueUpdatePresenceList' is set
            if (extensionCallQueueUpdatePresenceList == null)
                throw new ApiException(400, "Missing required parameter 'extensionCallQueueUpdatePresenceList' when calling PresenceApi->UpdateExtensionCallQueuePresence");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/call-queue-presence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (extensionCallQueueUpdatePresenceList != null && extensionCallQueueUpdatePresenceList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(extensionCallQueueUpdatePresenceList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = extensionCallQueueUpdatePresenceList; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateExtensionCallQueuePresence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionCallQueuePresenceList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtensionCallQueuePresenceList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionCallQueuePresenceList)));
        }

        /// <summary>
        /// Update Unified Presence Updates the unified presence for the current user specified in path.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="updateUnifiedPresence">JSON body</param>
        /// <returns>UnifiedPresence</returns>
        public UnifiedPresence UpdateUnifiedPresence (string accountId, string extensionId, UpdateUnifiedPresence updateUnifiedPresence)
        {
             ApiResponse<UnifiedPresence> localVarResponse = UpdateUnifiedPresenceWithHttpInfo(accountId, extensionId, updateUnifiedPresence);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Unified Presence Updates the unified presence for the current user specified in path.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="updateUnifiedPresence">JSON body</param>
        /// <returns>ApiResponse of UnifiedPresence</returns>
        public ApiResponse<UnifiedPresence> UpdateUnifiedPresenceWithHttpInfo (string accountId, string extensionId, UpdateUnifiedPresence updateUnifiedPresence)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PresenceApi->UpdateUnifiedPresence");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling PresenceApi->UpdateUnifiedPresence");
            // verify the required parameter 'updateUnifiedPresence' is set
            if (updateUnifiedPresence == null)
                throw new ApiException(400, "Missing required parameter 'updateUnifiedPresence' when calling PresenceApi->UpdateUnifiedPresence");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/unified-presence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (updateUnifiedPresence != null && updateUnifiedPresence.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateUnifiedPresence); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateUnifiedPresence; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUnifiedPresence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnifiedPresence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UnifiedPresence) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnifiedPresence)));
        }

        /// <summary>
        /// Update Unified Presence Updates the unified presence for the current user specified in path.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="updateUnifiedPresence">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UnifiedPresence</returns>
        public async System.Threading.Tasks.Task<UnifiedPresence> UpdateUnifiedPresenceAsync (string accountId, string extensionId, UpdateUnifiedPresence updateUnifiedPresence, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UnifiedPresence> localVarResponse = await UpdateUnifiedPresenceWithHttpInfoAsync(accountId, extensionId, updateUnifiedPresence, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Unified Presence Updates the unified presence for the current user specified in path.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="updateUnifiedPresence">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UnifiedPresence)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UnifiedPresence>> UpdateUnifiedPresenceWithHttpInfoAsync (string accountId, string extensionId, UpdateUnifiedPresence updateUnifiedPresence, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PresenceApi->UpdateUnifiedPresence");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling PresenceApi->UpdateUnifiedPresence");
            // verify the required parameter 'updateUnifiedPresence' is set
            if (updateUnifiedPresence == null)
                throw new ApiException(400, "Missing required parameter 'updateUnifiedPresence' when calling PresenceApi->UpdateUnifiedPresence");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/unified-presence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (updateUnifiedPresence != null && updateUnifiedPresence.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateUnifiedPresence); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateUnifiedPresence; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUnifiedPresence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnifiedPresence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UnifiedPresence) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnifiedPresence)));
        }

        /// <summary>
        /// Update User Presence Status Updates user-defined extension presence status, status message and DnD status by extension ID. Supported for regular User extensions only. The extension types listed do not support presence status: Department, Announcement Only, Take Messages Only (Voicemail), Fax User, Paging Only Group, Shared Lines Group, IVR Menu, Application Extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="presenceInfoRequest"> (optional)</param>
        /// <returns>PresenceInfoResponse</returns>
        public PresenceInfoResponse UpdateUserPresenceStatus (string extensionId, string accountId, PresenceInfoRequest presenceInfoRequest = default(PresenceInfoRequest))
        {
             ApiResponse<PresenceInfoResponse> localVarResponse = UpdateUserPresenceStatusWithHttpInfo(extensionId, accountId, presenceInfoRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update User Presence Status Updates user-defined extension presence status, status message and DnD status by extension ID. Supported for regular User extensions only. The extension types listed do not support presence status: Department, Announcement Only, Take Messages Only (Voicemail), Fax User, Paging Only Group, Shared Lines Group, IVR Menu, Application Extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="presenceInfoRequest"> (optional)</param>
        /// <returns>ApiResponse of PresenceInfoResponse</returns>
        public ApiResponse<PresenceInfoResponse> UpdateUserPresenceStatusWithHttpInfo (string extensionId, string accountId, PresenceInfoRequest presenceInfoRequest = default(PresenceInfoRequest))
        {
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling PresenceApi->UpdateUserPresenceStatus");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PresenceApi->UpdateUserPresenceStatus");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/presence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (presenceInfoRequest != null && presenceInfoRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(presenceInfoRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = presenceInfoRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserPresenceStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PresenceInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PresenceInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PresenceInfoResponse)));
        }

        /// <summary>
        /// Update User Presence Status Updates user-defined extension presence status, status message and DnD status by extension ID. Supported for regular User extensions only. The extension types listed do not support presence status: Department, Announcement Only, Take Messages Only (Voicemail), Fax User, Paging Only Group, Shared Lines Group, IVR Menu, Application Extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="presenceInfoRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PresenceInfoResponse</returns>
        public async System.Threading.Tasks.Task<PresenceInfoResponse> UpdateUserPresenceStatusAsync (string extensionId, string accountId, PresenceInfoRequest presenceInfoRequest = default(PresenceInfoRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PresenceInfoResponse> localVarResponse = await UpdateUserPresenceStatusWithHttpInfoAsync(extensionId, accountId, presenceInfoRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update User Presence Status Updates user-defined extension presence status, status message and DnD status by extension ID. Supported for regular User extensions only. The extension types listed do not support presence status: Department, Announcement Only, Take Messages Only (Voicemail), Fax User, Paging Only Group, Shared Lines Group, IVR Menu, Application Extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="presenceInfoRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PresenceInfoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PresenceInfoResponse>> UpdateUserPresenceStatusWithHttpInfoAsync (string extensionId, string accountId, PresenceInfoRequest presenceInfoRequest = default(PresenceInfoRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling PresenceApi->UpdateUserPresenceStatus");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PresenceApi->UpdateUserPresenceStatus");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/presence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (presenceInfoRequest != null && presenceInfoRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(presenceInfoRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = presenceInfoRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserPresenceStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PresenceInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PresenceInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PresenceInfoResponse)));
        }

    }
}
