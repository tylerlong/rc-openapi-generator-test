/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITasksApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Complete Task
        /// </summary>
        /// <remarks>
        /// Completes a task in the specified chat.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="glipCompleteTask">JSON body</param>
        /// <returns></returns>
        void CompleteTask (string taskId, GlipCompleteTask glipCompleteTask);

        /// <summary>
        /// Complete Task
        /// </summary>
        /// <remarks>
        /// Completes a task in the specified chat.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="glipCompleteTask">JSON body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CompleteTaskWithHttpInfo (string taskId, GlipCompleteTask glipCompleteTask);
        /// <summary>
        /// Create Task
        /// </summary>
        /// <remarks>
        /// Creates a task in the specified chat.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat</param>
        /// <param name="glipCreateTask"></param>
        /// <returns>GlipTaskInfo</returns>
        GlipTaskInfo CreateTask (string chatId, GlipCreateTask glipCreateTask);

        /// <summary>
        /// Create Task
        /// </summary>
        /// <remarks>
        /// Creates a task in the specified chat.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat</param>
        /// <param name="glipCreateTask"></param>
        /// <returns>ApiResponse of GlipTaskInfo</returns>
        ApiResponse<GlipTaskInfo> CreateTaskWithHttpInfo (string chatId, GlipCreateTask glipCreateTask);
        /// <summary>
        /// Delete Task
        /// </summary>
        /// <remarks>
        /// Deletes the specified task.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <returns></returns>
        void DeleteTask (string taskId);

        /// <summary>
        /// Delete Task
        /// </summary>
        /// <remarks>
        /// Deletes the specified task.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTaskWithHttpInfo (string taskId);
        /// <summary>
        /// Get Chat Tasks
        /// </summary>
        /// <remarks>
        /// Returns the list of tasks of the specified chat.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat</param>
        /// <param name="creationTimeTo">The end datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, e.g. 2019-03-10T18:23:45Z (optional, default to &quot;now&quot;)</param>
        /// <param name="creationTimeFrom">The start datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, e.g. 2016-02-23T00:00:00 (optional)</param>
        /// <param name="creatorId">Internal identifier of a task creator (optional)</param>
        /// <param name="status">Task execution status (optional)</param>
        /// <param name="assignmentStatus">Task assignment status (optional)</param>
        /// <param name="assigneeId">Internal identifier of a task assignee (optional)</param>
        /// <param name="assigneeStatus">Task execution status by assignee(-s) specified in assigneeId (optional)</param>
        /// <param name="pageToken">Token of the current page. If token is omitted then the first page should be returned (optional)</param>
        /// <param name="recordCount">Number of records to be returned per screen (optional, default to 30)</param>
        /// <returns>GlipTaskList</returns>
        GlipTaskList ListChatTasks (string chatId, string creationTimeTo = default(string), string creationTimeFrom = default(string), List<string> creatorId = default(List<string>), List<string> status = default(List<string>), string assignmentStatus = default(string), List<string> assigneeId = default(List<string>), string assigneeStatus = default(string), string pageToken = default(string), int? recordCount = default(int?));

        /// <summary>
        /// Get Chat Tasks
        /// </summary>
        /// <remarks>
        /// Returns the list of tasks of the specified chat.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat</param>
        /// <param name="creationTimeTo">The end datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, e.g. 2019-03-10T18:23:45Z (optional, default to &quot;now&quot;)</param>
        /// <param name="creationTimeFrom">The start datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, e.g. 2016-02-23T00:00:00 (optional)</param>
        /// <param name="creatorId">Internal identifier of a task creator (optional)</param>
        /// <param name="status">Task execution status (optional)</param>
        /// <param name="assignmentStatus">Task assignment status (optional)</param>
        /// <param name="assigneeId">Internal identifier of a task assignee (optional)</param>
        /// <param name="assigneeStatus">Task execution status by assignee(-s) specified in assigneeId (optional)</param>
        /// <param name="pageToken">Token of the current page. If token is omitted then the first page should be returned (optional)</param>
        /// <param name="recordCount">Number of records to be returned per screen (optional, default to 30)</param>
        /// <returns>ApiResponse of GlipTaskList</returns>
        ApiResponse<GlipTaskList> ListChatTasksWithHttpInfo (string chatId, string creationTimeTo = default(string), string creationTimeFrom = default(string), List<string> creatorId = default(List<string>), List<string> status = default(List<string>), string assignmentStatus = default(string), List<string> assigneeId = default(List<string>), string assigneeStatus = default(string), string pageToken = default(string), int? recordCount = default(int?));
        /// <summary>
        /// Update Task
        /// </summary>
        /// <remarks>
        /// Updates the specified task by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="glipUpdateTask">JSON body (optional)</param>
        /// <returns>GlipTaskList</returns>
        GlipTaskList PatchTask (string taskId, GlipUpdateTask glipUpdateTask = default(GlipUpdateTask));

        /// <summary>
        /// Update Task
        /// </summary>
        /// <remarks>
        /// Updates the specified task by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="glipUpdateTask">JSON body (optional)</param>
        /// <returns>ApiResponse of GlipTaskList</returns>
        ApiResponse<GlipTaskList> PatchTaskWithHttpInfo (string taskId, GlipUpdateTask glipUpdateTask = default(GlipUpdateTask));
        /// <summary>
        /// Get Task
        /// </summary>
        /// <remarks>
        /// Returns information about the specified task(s) by ID(s).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task, or comma separated list of task IDs</param>
        /// <returns>GlipTaskInfo</returns>
        GlipTaskInfo ReadTask (string taskId);

        /// <summary>
        /// Get Task
        /// </summary>
        /// <remarks>
        /// Returns information about the specified task(s) by ID(s).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task, or comma separated list of task IDs</param>
        /// <returns>ApiResponse of GlipTaskInfo</returns>
        ApiResponse<GlipTaskInfo> ReadTaskWithHttpInfo (string taskId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Complete Task
        /// </summary>
        /// <remarks>
        /// Completes a task in the specified chat.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="glipCompleteTask">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CompleteTaskAsync (string taskId, GlipCompleteTask glipCompleteTask, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Complete Task
        /// </summary>
        /// <remarks>
        /// Completes a task in the specified chat.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="glipCompleteTask">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CompleteTaskWithHttpInfoAsync (string taskId, GlipCompleteTask glipCompleteTask, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create Task
        /// </summary>
        /// <remarks>
        /// Creates a task in the specified chat.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat</param>
        /// <param name="glipCreateTask"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipTaskInfo</returns>
        System.Threading.Tasks.Task<GlipTaskInfo> CreateTaskAsync (string chatId, GlipCreateTask glipCreateTask, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Task
        /// </summary>
        /// <remarks>
        /// Creates a task in the specified chat.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat</param>
        /// <param name="glipCreateTask"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipTaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlipTaskInfo>> CreateTaskWithHttpInfoAsync (string chatId, GlipCreateTask glipCreateTask, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete Task
        /// </summary>
        /// <remarks>
        /// Deletes the specified task.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTaskAsync (string taskId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Task
        /// </summary>
        /// <remarks>
        /// Deletes the specified task.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaskWithHttpInfoAsync (string taskId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Chat Tasks
        /// </summary>
        /// <remarks>
        /// Returns the list of tasks of the specified chat.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat</param>
        /// <param name="creationTimeTo">The end datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, e.g. 2019-03-10T18:23:45Z (optional, default to &quot;now&quot;)</param>
        /// <param name="creationTimeFrom">The start datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, e.g. 2016-02-23T00:00:00 (optional)</param>
        /// <param name="creatorId">Internal identifier of a task creator (optional)</param>
        /// <param name="status">Task execution status (optional)</param>
        /// <param name="assignmentStatus">Task assignment status (optional)</param>
        /// <param name="assigneeId">Internal identifier of a task assignee (optional)</param>
        /// <param name="assigneeStatus">Task execution status by assignee(-s) specified in assigneeId (optional)</param>
        /// <param name="pageToken">Token of the current page. If token is omitted then the first page should be returned (optional)</param>
        /// <param name="recordCount">Number of records to be returned per screen (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipTaskList</returns>
        System.Threading.Tasks.Task<GlipTaskList> ListChatTasksAsync (string chatId, string creationTimeTo = default(string), string creationTimeFrom = default(string), List<string> creatorId = default(List<string>), List<string> status = default(List<string>), string assignmentStatus = default(string), List<string> assigneeId = default(List<string>), string assigneeStatus = default(string), string pageToken = default(string), int? recordCount = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Chat Tasks
        /// </summary>
        /// <remarks>
        /// Returns the list of tasks of the specified chat.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat</param>
        /// <param name="creationTimeTo">The end datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, e.g. 2019-03-10T18:23:45Z (optional, default to &quot;now&quot;)</param>
        /// <param name="creationTimeFrom">The start datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, e.g. 2016-02-23T00:00:00 (optional)</param>
        /// <param name="creatorId">Internal identifier of a task creator (optional)</param>
        /// <param name="status">Task execution status (optional)</param>
        /// <param name="assignmentStatus">Task assignment status (optional)</param>
        /// <param name="assigneeId">Internal identifier of a task assignee (optional)</param>
        /// <param name="assigneeStatus">Task execution status by assignee(-s) specified in assigneeId (optional)</param>
        /// <param name="pageToken">Token of the current page. If token is omitted then the first page should be returned (optional)</param>
        /// <param name="recordCount">Number of records to be returned per screen (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipTaskList)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlipTaskList>> ListChatTasksWithHttpInfoAsync (string chatId, string creationTimeTo = default(string), string creationTimeFrom = default(string), List<string> creatorId = default(List<string>), List<string> status = default(List<string>), string assignmentStatus = default(string), List<string> assigneeId = default(List<string>), string assigneeStatus = default(string), string pageToken = default(string), int? recordCount = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Task
        /// </summary>
        /// <remarks>
        /// Updates the specified task by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="glipUpdateTask">JSON body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipTaskList</returns>
        System.Threading.Tasks.Task<GlipTaskList> PatchTaskAsync (string taskId, GlipUpdateTask glipUpdateTask = default(GlipUpdateTask), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Task
        /// </summary>
        /// <remarks>
        /// Updates the specified task by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="glipUpdateTask">JSON body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipTaskList)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlipTaskList>> PatchTaskWithHttpInfoAsync (string taskId, GlipUpdateTask glipUpdateTask = default(GlipUpdateTask), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Task
        /// </summary>
        /// <remarks>
        /// Returns information about the specified task(s) by ID(s).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task, or comma separated list of task IDs</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipTaskInfo</returns>
        System.Threading.Tasks.Task<GlipTaskInfo> ReadTaskAsync (string taskId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Task
        /// </summary>
        /// <remarks>
        /// Returns information about the specified task(s) by ID(s).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task, or comma separated list of task IDs</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipTaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlipTaskInfo>> ReadTaskWithHttpInfoAsync (string taskId, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TasksApi : ITasksApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TasksApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class
        /// </summary>
        /// <returns></returns>
        public TasksApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TasksApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Complete Task Completes a task in the specified chat.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="glipCompleteTask">JSON body</param>
        /// <returns></returns>
        public void CompleteTask (string taskId, GlipCompleteTask glipCompleteTask)
        {
             CompleteTaskWithHttpInfo(taskId, glipCompleteTask);
        }

        /// <summary>
        /// Complete Task Completes a task in the specified chat.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="glipCompleteTask">JSON body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CompleteTaskWithHttpInfo (string taskId, GlipCompleteTask glipCompleteTask)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->CompleteTask");
            // verify the required parameter 'glipCompleteTask' is set
            if (glipCompleteTask == null)
                throw new ApiException(400, "Missing required parameter 'glipCompleteTask' when calling TasksApi->CompleteTask");

            var localVarPath = "/restapi/v1.0/glip/tasks/{taskId}/complete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (glipCompleteTask != null && glipCompleteTask.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipCompleteTask); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipCompleteTask; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompleteTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Complete Task Completes a task in the specified chat.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="glipCompleteTask">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CompleteTaskAsync (string taskId, GlipCompleteTask glipCompleteTask, CancellationToken cancellationToken = default(CancellationToken))
        {
             await CompleteTaskWithHttpInfoAsync(taskId, glipCompleteTask, cancellationToken);

        }

        /// <summary>
        /// Complete Task Completes a task in the specified chat.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="glipCompleteTask">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CompleteTaskWithHttpInfoAsync (string taskId, GlipCompleteTask glipCompleteTask, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->CompleteTask");
            // verify the required parameter 'glipCompleteTask' is set
            if (glipCompleteTask == null)
                throw new ApiException(400, "Missing required parameter 'glipCompleteTask' when calling TasksApi->CompleteTask");

            var localVarPath = "/restapi/v1.0/glip/tasks/{taskId}/complete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (glipCompleteTask != null && glipCompleteTask.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipCompleteTask); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipCompleteTask; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompleteTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create Task Creates a task in the specified chat.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat</param>
        /// <param name="glipCreateTask"></param>
        /// <returns>GlipTaskInfo</returns>
        public GlipTaskInfo CreateTask (string chatId, GlipCreateTask glipCreateTask)
        {
             ApiResponse<GlipTaskInfo> localVarResponse = CreateTaskWithHttpInfo(chatId, glipCreateTask);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Task Creates a task in the specified chat.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat</param>
        /// <param name="glipCreateTask"></param>
        /// <returns>ApiResponse of GlipTaskInfo</returns>
        public ApiResponse<GlipTaskInfo> CreateTaskWithHttpInfo (string chatId, GlipCreateTask glipCreateTask)
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling TasksApi->CreateTask");
            // verify the required parameter 'glipCreateTask' is set
            if (glipCreateTask == null)
                throw new ApiException(400, "Missing required parameter 'glipCreateTask' when calling TasksApi->CreateTask");

            var localVarPath = "/restapi/v1.0/glip/chats/{chatId}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter
            if (glipCreateTask != null && glipCreateTask.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipCreateTask); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipCreateTask; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipTaskInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipTaskInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipTaskInfo)));
        }

        /// <summary>
        /// Create Task Creates a task in the specified chat.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat</param>
        /// <param name="glipCreateTask"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipTaskInfo</returns>
        public async System.Threading.Tasks.Task<GlipTaskInfo> CreateTaskAsync (string chatId, GlipCreateTask glipCreateTask, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipTaskInfo> localVarResponse = await CreateTaskWithHttpInfoAsync(chatId, glipCreateTask, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Task Creates a task in the specified chat.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat</param>
        /// <param name="glipCreateTask"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipTaskInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlipTaskInfo>> CreateTaskWithHttpInfoAsync (string chatId, GlipCreateTask glipCreateTask, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling TasksApi->CreateTask");
            // verify the required parameter 'glipCreateTask' is set
            if (glipCreateTask == null)
                throw new ApiException(400, "Missing required parameter 'glipCreateTask' when calling TasksApi->CreateTask");

            var localVarPath = "/restapi/v1.0/glip/chats/{chatId}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter
            if (glipCreateTask != null && glipCreateTask.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipCreateTask); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipCreateTask; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipTaskInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipTaskInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipTaskInfo)));
        }

        /// <summary>
        /// Delete Task Deletes the specified task.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <returns></returns>
        public void DeleteTask (string taskId)
        {
             DeleteTaskWithHttpInfo(taskId);
        }

        /// <summary>
        /// Delete Task Deletes the specified task.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTaskWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->DeleteTask");

            var localVarPath = "/restapi/v1.0/glip/tasks/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Task Deletes the specified task.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTaskAsync (string taskId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteTaskWithHttpInfoAsync(taskId, cancellationToken);

        }

        /// <summary>
        /// Delete Task Deletes the specified task.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaskWithHttpInfoAsync (string taskId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->DeleteTask");

            var localVarPath = "/restapi/v1.0/glip/tasks/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get Chat Tasks Returns the list of tasks of the specified chat.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat</param>
        /// <param name="creationTimeTo">The end datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, e.g. 2019-03-10T18:23:45Z (optional, default to &quot;now&quot;)</param>
        /// <param name="creationTimeFrom">The start datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, e.g. 2016-02-23T00:00:00 (optional)</param>
        /// <param name="creatorId">Internal identifier of a task creator (optional)</param>
        /// <param name="status">Task execution status (optional)</param>
        /// <param name="assignmentStatus">Task assignment status (optional)</param>
        /// <param name="assigneeId">Internal identifier of a task assignee (optional)</param>
        /// <param name="assigneeStatus">Task execution status by assignee(-s) specified in assigneeId (optional)</param>
        /// <param name="pageToken">Token of the current page. If token is omitted then the first page should be returned (optional)</param>
        /// <param name="recordCount">Number of records to be returned per screen (optional, default to 30)</param>
        /// <returns>GlipTaskList</returns>
        public GlipTaskList ListChatTasks (string chatId, string creationTimeTo = default(string), string creationTimeFrom = default(string), List<string> creatorId = default(List<string>), List<string> status = default(List<string>), string assignmentStatus = default(string), List<string> assigneeId = default(List<string>), string assigneeStatus = default(string), string pageToken = default(string), int? recordCount = default(int?))
        {
             ApiResponse<GlipTaskList> localVarResponse = ListChatTasksWithHttpInfo(chatId, creationTimeTo, creationTimeFrom, creatorId, status, assignmentStatus, assigneeId, assigneeStatus, pageToken, recordCount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Chat Tasks Returns the list of tasks of the specified chat.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat</param>
        /// <param name="creationTimeTo">The end datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, e.g. 2019-03-10T18:23:45Z (optional, default to &quot;now&quot;)</param>
        /// <param name="creationTimeFrom">The start datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, e.g. 2016-02-23T00:00:00 (optional)</param>
        /// <param name="creatorId">Internal identifier of a task creator (optional)</param>
        /// <param name="status">Task execution status (optional)</param>
        /// <param name="assignmentStatus">Task assignment status (optional)</param>
        /// <param name="assigneeId">Internal identifier of a task assignee (optional)</param>
        /// <param name="assigneeStatus">Task execution status by assignee(-s) specified in assigneeId (optional)</param>
        /// <param name="pageToken">Token of the current page. If token is omitted then the first page should be returned (optional)</param>
        /// <param name="recordCount">Number of records to be returned per screen (optional, default to 30)</param>
        /// <returns>ApiResponse of GlipTaskList</returns>
        public ApiResponse<GlipTaskList> ListChatTasksWithHttpInfo (string chatId, string creationTimeTo = default(string), string creationTimeFrom = default(string), List<string> creatorId = default(List<string>), List<string> status = default(List<string>), string assignmentStatus = default(string), List<string> assigneeId = default(List<string>), string assigneeStatus = default(string), string pageToken = default(string), int? recordCount = default(int?))
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling TasksApi->ListChatTasks");

            var localVarPath = "/restapi/v1.0/glip/chats/{chatId}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter
            if (creationTimeTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "creationTimeTo", creationTimeTo)); // query parameter
            if (creationTimeFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "creationTimeFrom", creationTimeFrom)); // query parameter
            if (creatorId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "creatorId", creatorId)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "status", status)); // query parameter
            if (assignmentStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assignmentStatus", assignmentStatus)); // query parameter
            if (assigneeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "assigneeId", assigneeId)); // query parameter
            if (assigneeStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assigneeStatus", assigneeStatus)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter
            if (recordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordCount", recordCount)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListChatTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipTaskList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipTaskList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipTaskList)));
        }

        /// <summary>
        /// Get Chat Tasks Returns the list of tasks of the specified chat.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat</param>
        /// <param name="creationTimeTo">The end datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, e.g. 2019-03-10T18:23:45Z (optional, default to &quot;now&quot;)</param>
        /// <param name="creationTimeFrom">The start datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, e.g. 2016-02-23T00:00:00 (optional)</param>
        /// <param name="creatorId">Internal identifier of a task creator (optional)</param>
        /// <param name="status">Task execution status (optional)</param>
        /// <param name="assignmentStatus">Task assignment status (optional)</param>
        /// <param name="assigneeId">Internal identifier of a task assignee (optional)</param>
        /// <param name="assigneeStatus">Task execution status by assignee(-s) specified in assigneeId (optional)</param>
        /// <param name="pageToken">Token of the current page. If token is omitted then the first page should be returned (optional)</param>
        /// <param name="recordCount">Number of records to be returned per screen (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipTaskList</returns>
        public async System.Threading.Tasks.Task<GlipTaskList> ListChatTasksAsync (string chatId, string creationTimeTo = default(string), string creationTimeFrom = default(string), List<string> creatorId = default(List<string>), List<string> status = default(List<string>), string assignmentStatus = default(string), List<string> assigneeId = default(List<string>), string assigneeStatus = default(string), string pageToken = default(string), int? recordCount = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipTaskList> localVarResponse = await ListChatTasksWithHttpInfoAsync(chatId, creationTimeTo, creationTimeFrom, creatorId, status, assignmentStatus, assigneeId, assigneeStatus, pageToken, recordCount, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Chat Tasks Returns the list of tasks of the specified chat.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat</param>
        /// <param name="creationTimeTo">The end datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, e.g. 2019-03-10T18:23:45Z (optional, default to &quot;now&quot;)</param>
        /// <param name="creationTimeFrom">The start datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, e.g. 2016-02-23T00:00:00 (optional)</param>
        /// <param name="creatorId">Internal identifier of a task creator (optional)</param>
        /// <param name="status">Task execution status (optional)</param>
        /// <param name="assignmentStatus">Task assignment status (optional)</param>
        /// <param name="assigneeId">Internal identifier of a task assignee (optional)</param>
        /// <param name="assigneeStatus">Task execution status by assignee(-s) specified in assigneeId (optional)</param>
        /// <param name="pageToken">Token of the current page. If token is omitted then the first page should be returned (optional)</param>
        /// <param name="recordCount">Number of records to be returned per screen (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipTaskList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlipTaskList>> ListChatTasksWithHttpInfoAsync (string chatId, string creationTimeTo = default(string), string creationTimeFrom = default(string), List<string> creatorId = default(List<string>), List<string> status = default(List<string>), string assignmentStatus = default(string), List<string> assigneeId = default(List<string>), string assigneeStatus = default(string), string pageToken = default(string), int? recordCount = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling TasksApi->ListChatTasks");

            var localVarPath = "/restapi/v1.0/glip/chats/{chatId}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter
            if (creationTimeTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "creationTimeTo", creationTimeTo)); // query parameter
            if (creationTimeFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "creationTimeFrom", creationTimeFrom)); // query parameter
            if (creatorId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "creatorId", creatorId)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "status", status)); // query parameter
            if (assignmentStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assignmentStatus", assignmentStatus)); // query parameter
            if (assigneeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "assigneeId", assigneeId)); // query parameter
            if (assigneeStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assigneeStatus", assigneeStatus)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter
            if (recordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordCount", recordCount)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListChatTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipTaskList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipTaskList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipTaskList)));
        }

        /// <summary>
        /// Update Task Updates the specified task by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="glipUpdateTask">JSON body (optional)</param>
        /// <returns>GlipTaskList</returns>
        public GlipTaskList PatchTask (string taskId, GlipUpdateTask glipUpdateTask = default(GlipUpdateTask))
        {
             ApiResponse<GlipTaskList> localVarResponse = PatchTaskWithHttpInfo(taskId, glipUpdateTask);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Task Updates the specified task by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="glipUpdateTask">JSON body (optional)</param>
        /// <returns>ApiResponse of GlipTaskList</returns>
        public ApiResponse<GlipTaskList> PatchTaskWithHttpInfo (string taskId, GlipUpdateTask glipUpdateTask = default(GlipUpdateTask))
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->PatchTask");

            var localVarPath = "/restapi/v1.0/glip/tasks/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (glipUpdateTask != null && glipUpdateTask.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipUpdateTask); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipUpdateTask; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipTaskList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipTaskList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipTaskList)));
        }

        /// <summary>
        /// Update Task Updates the specified task by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="glipUpdateTask">JSON body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipTaskList</returns>
        public async System.Threading.Tasks.Task<GlipTaskList> PatchTaskAsync (string taskId, GlipUpdateTask glipUpdateTask = default(GlipUpdateTask), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipTaskList> localVarResponse = await PatchTaskWithHttpInfoAsync(taskId, glipUpdateTask, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Task Updates the specified task by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="glipUpdateTask">JSON body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipTaskList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlipTaskList>> PatchTaskWithHttpInfoAsync (string taskId, GlipUpdateTask glipUpdateTask = default(GlipUpdateTask), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->PatchTask");

            var localVarPath = "/restapi/v1.0/glip/tasks/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (glipUpdateTask != null && glipUpdateTask.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipUpdateTask); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipUpdateTask; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipTaskList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipTaskList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipTaskList)));
        }

        /// <summary>
        /// Get Task Returns information about the specified task(s) by ID(s).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task, or comma separated list of task IDs</param>
        /// <returns>GlipTaskInfo</returns>
        public GlipTaskInfo ReadTask (string taskId)
        {
             ApiResponse<GlipTaskInfo> localVarResponse = ReadTaskWithHttpInfo(taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Task Returns information about the specified task(s) by ID(s).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task, or comma separated list of task IDs</param>
        /// <returns>ApiResponse of GlipTaskInfo</returns>
        public ApiResponse<GlipTaskInfo> ReadTaskWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->ReadTask");

            var localVarPath = "/restapi/v1.0/glip/tasks/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipTaskInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipTaskInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipTaskInfo)));
        }

        /// <summary>
        /// Get Task Returns information about the specified task(s) by ID(s).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task, or comma separated list of task IDs</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipTaskInfo</returns>
        public async System.Threading.Tasks.Task<GlipTaskInfo> ReadTaskAsync (string taskId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipTaskInfo> localVarResponse = await ReadTaskWithHttpInfoAsync(taskId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Task Returns information about the specified task(s) by ID(s).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task, or comma separated list of task IDs</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipTaskInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlipTaskInfo>> ReadTaskWithHttpInfoAsync (string taskId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->ReadTask");

            var localVarPath = "/restapi/v1.0/glip/tasks/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipTaskInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipTaskInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipTaskInfo)));
        }

    }
}
