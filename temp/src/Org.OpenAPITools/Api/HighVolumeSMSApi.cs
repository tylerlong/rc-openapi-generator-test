/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHighVolumeSMSApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Assign Multiple Opted Out/In Numbers
        /// </summary>
        /// <remarks>
        /// Adds multiple opt-outs and/or opt-ins for the specified sender number and a set of recipient numbers.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="optOutBulkAssignRequest">Consists of &#x60;from&#x60; field and &#x60;optOuts&#x60; and &#x60;optIns&#x60; lists. Both &#x60;optOuts&#x60; and &#x60;optIns&#x60; can be empty but not simultaneously - at least one of the lists must be entered. (optional)</param>
        /// <returns>OptOutBulkAssignResponse</returns>
        OptOutBulkAssignResponse AddA2PSMSOptOuts (string accountId, OptOutBulkAssignRequest optOutBulkAssignRequest = default(OptOutBulkAssignRequest));

        /// <summary>
        /// Assign Multiple Opted Out/In Numbers
        /// </summary>
        /// <remarks>
        /// Adds multiple opt-outs and/or opt-ins for the specified sender number and a set of recipient numbers.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="optOutBulkAssignRequest">Consists of &#x60;from&#x60; field and &#x60;optOuts&#x60; and &#x60;optIns&#x60; lists. Both &#x60;optOuts&#x60; and &#x60;optIns&#x60; can be empty but not simultaneously - at least one of the lists must be entered. (optional)</param>
        /// <returns>ApiResponse of OptOutBulkAssignResponse</returns>
        ApiResponse<OptOutBulkAssignResponse> AddA2PSMSOptOutsWithHttpInfo (string accountId, OptOutBulkAssignRequest optOutBulkAssignRequest = default(OptOutBulkAssignRequest));
        /// <summary>
        /// List A2P SMS Statuses
        /// </summary>
        /// <remarks>
        /// Retrieves a set of message counts by message status and error codes filtered by dates, batchId and message direction.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="batchId">Internal identifier of a message batch to filter the response (optional)</param>
        /// <param name="direction">Direction of a message to filter the message list result. By default there is no filter applied - both Inbound and Outbound messages are returned (optional)</param>
        /// <param name="dateFrom">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the &#39;dateTo&#39; minus 24 hours (optional)</param>
        /// <param name="dateTo">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the current time (optional)</param>
        /// <param name="phoneNumber">List of phone numbers (specified in &#39;to&#39; or &#39;from&#39; fields of a message) to filter the results. Maximum number of phone numbers allowed to be specified as filters is 15 (optional)</param>
        /// <returns>MessageStatusesResponse</returns>
        MessageStatusesResponse AggregateA2PSMSStatuses (string accountId, string batchId = default(string), SmsDirectionEnum? direction = default(SmsDirectionEnum?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), List<string> phoneNumber = default(List<string>));

        /// <summary>
        /// List A2P SMS Statuses
        /// </summary>
        /// <remarks>
        /// Retrieves a set of message counts by message status and error codes filtered by dates, batchId and message direction.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="batchId">Internal identifier of a message batch to filter the response (optional)</param>
        /// <param name="direction">Direction of a message to filter the message list result. By default there is no filter applied - both Inbound and Outbound messages are returned (optional)</param>
        /// <param name="dateFrom">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the &#39;dateTo&#39; minus 24 hours (optional)</param>
        /// <param name="dateTo">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the current time (optional)</param>
        /// <param name="phoneNumber">List of phone numbers (specified in &#39;to&#39; or &#39;from&#39; fields of a message) to filter the results. Maximum number of phone numbers allowed to be specified as filters is 15 (optional)</param>
        /// <returns>ApiResponse of MessageStatusesResponse</returns>
        ApiResponse<MessageStatusesResponse> AggregateA2PSMSStatusesWithHttpInfo (string accountId, string batchId = default(string), SmsDirectionEnum? direction = default(SmsDirectionEnum?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), List<string> phoneNumber = default(List<string>));
        /// <summary>
        /// Send A2P SMS
        /// </summary>
        /// <remarks>
        /// Allows to send high volume of A2P (Application-to-Person) SMS messages (in message batches). Only phone number with the `A2PSmsSender` feature can be used as a sender. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="messageBatchCreateRequest">SMS batch payload (optional)</param>
        /// <returns>MessageBatchResponse</returns>
        MessageBatchResponse CreateA2PSMS (string accountId, MessageBatchCreateRequest messageBatchCreateRequest = default(MessageBatchCreateRequest));

        /// <summary>
        /// Send A2P SMS
        /// </summary>
        /// <remarks>
        /// Allows to send high volume of A2P (Application-to-Person) SMS messages (in message batches). Only phone number with the `A2PSmsSender` feature can be used as a sender. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="messageBatchCreateRequest">SMS batch payload (optional)</param>
        /// <returns>ApiResponse of MessageBatchResponse</returns>
        ApiResponse<MessageBatchResponse> CreateA2PSMSWithHttpInfo (string accountId, MessageBatchCreateRequest messageBatchCreateRequest = default(MessageBatchCreateRequest));
        /// <summary>
        /// Get A2P SMS Batches
        /// </summary>
        /// <remarks>
        /// Returns the list of A2P batches sent from the current account. The list can be filtered by message batch ID and/or from phone number.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="dateFrom">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the &#39;dateTo&#39; minus 24 hours (optional)</param>
        /// <param name="dateTo">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the current time (optional)</param>
        /// <param name="from">Phone number in E.164 format from which the messages are going to be sent (optional)</param>
        /// <param name="status">A list of batch statuses to filter the results (optional)</param>
        /// <param name="pageToken">The page token of the page to be retrieved (optional)</param>
        /// <param name="perPage">The number of records to be returned per page (optional)</param>
        /// <returns>BatchListResponse</returns>
        BatchListResponse ListA2PBatches (string accountId, DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), string from = default(string), List<string> status = default(List<string>), string pageToken = default(string), long? perPage = default(long?));

        /// <summary>
        /// Get A2P SMS Batches
        /// </summary>
        /// <remarks>
        /// Returns the list of A2P batches sent from the current account. The list can be filtered by message batch ID and/or from phone number.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="dateFrom">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the &#39;dateTo&#39; minus 24 hours (optional)</param>
        /// <param name="dateTo">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the current time (optional)</param>
        /// <param name="from">Phone number in E.164 format from which the messages are going to be sent (optional)</param>
        /// <param name="status">A list of batch statuses to filter the results (optional)</param>
        /// <param name="pageToken">The page token of the page to be retrieved (optional)</param>
        /// <param name="perPage">The number of records to be returned per page (optional)</param>
        /// <returns>ApiResponse of BatchListResponse</returns>
        ApiResponse<BatchListResponse> ListA2PBatchesWithHttpInfo (string accountId, DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), string from = default(string), List<string> status = default(List<string>), string pageToken = default(string), long? perPage = default(long?));
        /// <summary>
        /// Get A2P SMS List
        /// </summary>
        /// <remarks>
        /// Returns the list of outbound/inbound A2P messages sent from/to A2P phone numbers of the current account. The list can be filtered by message batch ID and/or phone number.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="batchId">Internal identifier of a message batch to filter the response (optional)</param>
        /// <param name="direction">Direction of a message to filter the message list result. By default there is no filter applied - both Inbound and Outbound messages are returned (optional)</param>
        /// <param name="dateFrom">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the &#39;dateTo&#39; minus 24 hours (optional)</param>
        /// <param name="dateTo">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the current time (optional)</param>
        /// <param name="view">Indicates if the response has to be detailed, includes text in the response if detailed (optional, default to Simple)</param>
        /// <param name="phoneNumber">List of phone numbers (specified in &#39;to&#39; or &#39;from&#39; fields of a message) to filter the results. Maximum number of phone numbers allowed to be specified as filters is 15 (optional)</param>
        /// <param name="pageToken">The page token of the page to be retrieved. (optional)</param>
        /// <param name="perPage">The number of messages to be returned per request (optional, default to 1000)</param>
        /// <returns>MessageListResponse</returns>
        MessageListResponse ListA2PSMS (string accountId, string batchId = default(string), SmsDirectionEnum? direction = default(SmsDirectionEnum?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), string view = default(string), List<string> phoneNumber = default(List<string>), string pageToken = default(string), int? perPage = default(int?));

        /// <summary>
        /// Get A2P SMS List
        /// </summary>
        /// <remarks>
        /// Returns the list of outbound/inbound A2P messages sent from/to A2P phone numbers of the current account. The list can be filtered by message batch ID and/or phone number.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="batchId">Internal identifier of a message batch to filter the response (optional)</param>
        /// <param name="direction">Direction of a message to filter the message list result. By default there is no filter applied - both Inbound and Outbound messages are returned (optional)</param>
        /// <param name="dateFrom">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the &#39;dateTo&#39; minus 24 hours (optional)</param>
        /// <param name="dateTo">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the current time (optional)</param>
        /// <param name="view">Indicates if the response has to be detailed, includes text in the response if detailed (optional, default to Simple)</param>
        /// <param name="phoneNumber">List of phone numbers (specified in &#39;to&#39; or &#39;from&#39; fields of a message) to filter the results. Maximum number of phone numbers allowed to be specified as filters is 15 (optional)</param>
        /// <param name="pageToken">The page token of the page to be retrieved. (optional)</param>
        /// <param name="perPage">The number of messages to be returned per request (optional, default to 1000)</param>
        /// <returns>ApiResponse of MessageListResponse</returns>
        ApiResponse<MessageListResponse> ListA2PSMSWithHttpInfo (string accountId, string batchId = default(string), SmsDirectionEnum? direction = default(SmsDirectionEnum?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), string view = default(string), List<string> phoneNumber = default(List<string>), string pageToken = default(string), int? perPage = default(int?));
        /// <summary>
        /// Get A2P SMS Batch
        /// </summary>
        /// <remarks>
        /// Returns information on a message batch.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="batchId">Internal identifier of a message batch to be retrieved</param>
        /// <returns>MessageBatchResponse</returns>
        MessageBatchResponse ReadA2PBatch (string accountId, string batchId);

        /// <summary>
        /// Get A2P SMS Batch
        /// </summary>
        /// <remarks>
        /// Returns information on a message batch.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="batchId">Internal identifier of a message batch to be retrieved</param>
        /// <returns>ApiResponse of MessageBatchResponse</returns>
        ApiResponse<MessageBatchResponse> ReadA2PBatchWithHttpInfo (string accountId, string batchId);
        /// <summary>
        /// Get A2P SMS
        /// </summary>
        /// <remarks>
        /// Returns the details of an A2P SMS message by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="messageId">Internal identifier of a message to be retrieved</param>
        /// <returns>MessageDetailsResponse</returns>
        MessageDetailsResponse ReadA2PSMS (string accountId, string messageId);

        /// <summary>
        /// Get A2P SMS
        /// </summary>
        /// <remarks>
        /// Returns the details of an A2P SMS message by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="messageId">Internal identifier of a message to be retrieved</param>
        /// <returns>ApiResponse of MessageDetailsResponse</returns>
        ApiResponse<MessageDetailsResponse> ReadA2PSMSWithHttpInfo (string accountId, string messageId);
        /// <summary>
        /// Get Opted Out Numbers
        /// </summary>
        /// <remarks>
        /// Returns the list of numbers opted out from the account. The list can be filtered by `to`/`from` phone number query parameters. Specifying `text/csv` in the Accept header downloads the data in CSV format.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="from">The sender&#39;s phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format for filtering messages. The asterisk value \&quot;*\&quot; means any number in &#x60;from&#x60; field (optional)</param>
        /// <param name="to">The receiver&#39;s phone number (&#x60;to&#x60; field) in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format for filtering messages (optional)</param>
        /// <param name="status">The status (opted out, opted in, or both) to be used as the filter (optional, default to optout)</param>
        /// <param name="pageToken">The page token of the page to be retrieved (optional)</param>
        /// <param name="perPage">The number of records to be returned for the page (optional, default to 1000)</param>
        /// <returns>OptOutListResponse</returns>
        OptOutListResponse ReadA2PSMSOptOuts (string accountId, string from = default(string), string to = default(string), string status = default(string), string pageToken = default(string), int? perPage = default(int?));

        /// <summary>
        /// Get Opted Out Numbers
        /// </summary>
        /// <remarks>
        /// Returns the list of numbers opted out from the account. The list can be filtered by `to`/`from` phone number query parameters. Specifying `text/csv` in the Accept header downloads the data in CSV format.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="from">The sender&#39;s phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format for filtering messages. The asterisk value \&quot;*\&quot; means any number in &#x60;from&#x60; field (optional)</param>
        /// <param name="to">The receiver&#39;s phone number (&#x60;to&#x60; field) in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format for filtering messages (optional)</param>
        /// <param name="status">The status (opted out, opted in, or both) to be used as the filter (optional, default to optout)</param>
        /// <param name="pageToken">The page token of the page to be retrieved (optional)</param>
        /// <param name="perPage">The number of records to be returned for the page (optional, default to 1000)</param>
        /// <returns>ApiResponse of OptOutListResponse</returns>
        ApiResponse<OptOutListResponse> ReadA2PSMSOptOutsWithHttpInfo (string accountId, string from = default(string), string to = default(string), string status = default(string), string pageToken = default(string), int? perPage = default(int?));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Assign Multiple Opted Out/In Numbers
        /// </summary>
        /// <remarks>
        /// Adds multiple opt-outs and/or opt-ins for the specified sender number and a set of recipient numbers.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="optOutBulkAssignRequest">Consists of &#x60;from&#x60; field and &#x60;optOuts&#x60; and &#x60;optIns&#x60; lists. Both &#x60;optOuts&#x60; and &#x60;optIns&#x60; can be empty but not simultaneously - at least one of the lists must be entered. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OptOutBulkAssignResponse</returns>
        System.Threading.Tasks.Task<OptOutBulkAssignResponse> AddA2PSMSOptOutsAsync (string accountId, OptOutBulkAssignRequest optOutBulkAssignRequest = default(OptOutBulkAssignRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Assign Multiple Opted Out/In Numbers
        /// </summary>
        /// <remarks>
        /// Adds multiple opt-outs and/or opt-ins for the specified sender number and a set of recipient numbers.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="optOutBulkAssignRequest">Consists of &#x60;from&#x60; field and &#x60;optOuts&#x60; and &#x60;optIns&#x60; lists. Both &#x60;optOuts&#x60; and &#x60;optIns&#x60; can be empty but not simultaneously - at least one of the lists must be entered. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OptOutBulkAssignResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OptOutBulkAssignResponse>> AddA2PSMSOptOutsWithHttpInfoAsync (string accountId, OptOutBulkAssignRequest optOutBulkAssignRequest = default(OptOutBulkAssignRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List A2P SMS Statuses
        /// </summary>
        /// <remarks>
        /// Retrieves a set of message counts by message status and error codes filtered by dates, batchId and message direction.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="batchId">Internal identifier of a message batch to filter the response (optional)</param>
        /// <param name="direction">Direction of a message to filter the message list result. By default there is no filter applied - both Inbound and Outbound messages are returned (optional)</param>
        /// <param name="dateFrom">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the &#39;dateTo&#39; minus 24 hours (optional)</param>
        /// <param name="dateTo">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the current time (optional)</param>
        /// <param name="phoneNumber">List of phone numbers (specified in &#39;to&#39; or &#39;from&#39; fields of a message) to filter the results. Maximum number of phone numbers allowed to be specified as filters is 15 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MessageStatusesResponse</returns>
        System.Threading.Tasks.Task<MessageStatusesResponse> AggregateA2PSMSStatusesAsync (string accountId, string batchId = default(string), SmsDirectionEnum? direction = default(SmsDirectionEnum?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), List<string> phoneNumber = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List A2P SMS Statuses
        /// </summary>
        /// <remarks>
        /// Retrieves a set of message counts by message status and error codes filtered by dates, batchId and message direction.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="batchId">Internal identifier of a message batch to filter the response (optional)</param>
        /// <param name="direction">Direction of a message to filter the message list result. By default there is no filter applied - both Inbound and Outbound messages are returned (optional)</param>
        /// <param name="dateFrom">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the &#39;dateTo&#39; minus 24 hours (optional)</param>
        /// <param name="dateTo">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the current time (optional)</param>
        /// <param name="phoneNumber">List of phone numbers (specified in &#39;to&#39; or &#39;from&#39; fields of a message) to filter the results. Maximum number of phone numbers allowed to be specified as filters is 15 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MessageStatusesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageStatusesResponse>> AggregateA2PSMSStatusesWithHttpInfoAsync (string accountId, string batchId = default(string), SmsDirectionEnum? direction = default(SmsDirectionEnum?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), List<string> phoneNumber = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send A2P SMS
        /// </summary>
        /// <remarks>
        /// Allows to send high volume of A2P (Application-to-Person) SMS messages (in message batches). Only phone number with the `A2PSmsSender` feature can be used as a sender. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="messageBatchCreateRequest">SMS batch payload (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MessageBatchResponse</returns>
        System.Threading.Tasks.Task<MessageBatchResponse> CreateA2PSMSAsync (string accountId, MessageBatchCreateRequest messageBatchCreateRequest = default(MessageBatchCreateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send A2P SMS
        /// </summary>
        /// <remarks>
        /// Allows to send high volume of A2P (Application-to-Person) SMS messages (in message batches). Only phone number with the `A2PSmsSender` feature can be used as a sender. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="messageBatchCreateRequest">SMS batch payload (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MessageBatchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageBatchResponse>> CreateA2PSMSWithHttpInfoAsync (string accountId, MessageBatchCreateRequest messageBatchCreateRequest = default(MessageBatchCreateRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get A2P SMS Batches
        /// </summary>
        /// <remarks>
        /// Returns the list of A2P batches sent from the current account. The list can be filtered by message batch ID and/or from phone number.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="dateFrom">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the &#39;dateTo&#39; minus 24 hours (optional)</param>
        /// <param name="dateTo">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the current time (optional)</param>
        /// <param name="from">Phone number in E.164 format from which the messages are going to be sent (optional)</param>
        /// <param name="status">A list of batch statuses to filter the results (optional)</param>
        /// <param name="pageToken">The page token of the page to be retrieved (optional)</param>
        /// <param name="perPage">The number of records to be returned per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BatchListResponse</returns>
        System.Threading.Tasks.Task<BatchListResponse> ListA2PBatchesAsync (string accountId, DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), string from = default(string), List<string> status = default(List<string>), string pageToken = default(string), long? perPage = default(long?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get A2P SMS Batches
        /// </summary>
        /// <remarks>
        /// Returns the list of A2P batches sent from the current account. The list can be filtered by message batch ID and/or from phone number.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="dateFrom">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the &#39;dateTo&#39; minus 24 hours (optional)</param>
        /// <param name="dateTo">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the current time (optional)</param>
        /// <param name="from">Phone number in E.164 format from which the messages are going to be sent (optional)</param>
        /// <param name="status">A list of batch statuses to filter the results (optional)</param>
        /// <param name="pageToken">The page token of the page to be retrieved (optional)</param>
        /// <param name="perPage">The number of records to be returned per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BatchListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchListResponse>> ListA2PBatchesWithHttpInfoAsync (string accountId, DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), string from = default(string), List<string> status = default(List<string>), string pageToken = default(string), long? perPage = default(long?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get A2P SMS List
        /// </summary>
        /// <remarks>
        /// Returns the list of outbound/inbound A2P messages sent from/to A2P phone numbers of the current account. The list can be filtered by message batch ID and/or phone number.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="batchId">Internal identifier of a message batch to filter the response (optional)</param>
        /// <param name="direction">Direction of a message to filter the message list result. By default there is no filter applied - both Inbound and Outbound messages are returned (optional)</param>
        /// <param name="dateFrom">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the &#39;dateTo&#39; minus 24 hours (optional)</param>
        /// <param name="dateTo">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the current time (optional)</param>
        /// <param name="view">Indicates if the response has to be detailed, includes text in the response if detailed (optional, default to Simple)</param>
        /// <param name="phoneNumber">List of phone numbers (specified in &#39;to&#39; or &#39;from&#39; fields of a message) to filter the results. Maximum number of phone numbers allowed to be specified as filters is 15 (optional)</param>
        /// <param name="pageToken">The page token of the page to be retrieved. (optional)</param>
        /// <param name="perPage">The number of messages to be returned per request (optional, default to 1000)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MessageListResponse</returns>
        System.Threading.Tasks.Task<MessageListResponse> ListA2PSMSAsync (string accountId, string batchId = default(string), SmsDirectionEnum? direction = default(SmsDirectionEnum?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), string view = default(string), List<string> phoneNumber = default(List<string>), string pageToken = default(string), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get A2P SMS List
        /// </summary>
        /// <remarks>
        /// Returns the list of outbound/inbound A2P messages sent from/to A2P phone numbers of the current account. The list can be filtered by message batch ID and/or phone number.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="batchId">Internal identifier of a message batch to filter the response (optional)</param>
        /// <param name="direction">Direction of a message to filter the message list result. By default there is no filter applied - both Inbound and Outbound messages are returned (optional)</param>
        /// <param name="dateFrom">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the &#39;dateTo&#39; minus 24 hours (optional)</param>
        /// <param name="dateTo">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the current time (optional)</param>
        /// <param name="view">Indicates if the response has to be detailed, includes text in the response if detailed (optional, default to Simple)</param>
        /// <param name="phoneNumber">List of phone numbers (specified in &#39;to&#39; or &#39;from&#39; fields of a message) to filter the results. Maximum number of phone numbers allowed to be specified as filters is 15 (optional)</param>
        /// <param name="pageToken">The page token of the page to be retrieved. (optional)</param>
        /// <param name="perPage">The number of messages to be returned per request (optional, default to 1000)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MessageListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageListResponse>> ListA2PSMSWithHttpInfoAsync (string accountId, string batchId = default(string), SmsDirectionEnum? direction = default(SmsDirectionEnum?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), string view = default(string), List<string> phoneNumber = default(List<string>), string pageToken = default(string), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get A2P SMS Batch
        /// </summary>
        /// <remarks>
        /// Returns information on a message batch.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="batchId">Internal identifier of a message batch to be retrieved</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MessageBatchResponse</returns>
        System.Threading.Tasks.Task<MessageBatchResponse> ReadA2PBatchAsync (string accountId, string batchId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get A2P SMS Batch
        /// </summary>
        /// <remarks>
        /// Returns information on a message batch.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="batchId">Internal identifier of a message batch to be retrieved</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MessageBatchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageBatchResponse>> ReadA2PBatchWithHttpInfoAsync (string accountId, string batchId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get A2P SMS
        /// </summary>
        /// <remarks>
        /// Returns the details of an A2P SMS message by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="messageId">Internal identifier of a message to be retrieved</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MessageDetailsResponse</returns>
        System.Threading.Tasks.Task<MessageDetailsResponse> ReadA2PSMSAsync (string accountId, string messageId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get A2P SMS
        /// </summary>
        /// <remarks>
        /// Returns the details of an A2P SMS message by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="messageId">Internal identifier of a message to be retrieved</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MessageDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageDetailsResponse>> ReadA2PSMSWithHttpInfoAsync (string accountId, string messageId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Opted Out Numbers
        /// </summary>
        /// <remarks>
        /// Returns the list of numbers opted out from the account. The list can be filtered by `to`/`from` phone number query parameters. Specifying `text/csv` in the Accept header downloads the data in CSV format.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="from">The sender&#39;s phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format for filtering messages. The asterisk value \&quot;*\&quot; means any number in &#x60;from&#x60; field (optional)</param>
        /// <param name="to">The receiver&#39;s phone number (&#x60;to&#x60; field) in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format for filtering messages (optional)</param>
        /// <param name="status">The status (opted out, opted in, or both) to be used as the filter (optional, default to optout)</param>
        /// <param name="pageToken">The page token of the page to be retrieved (optional)</param>
        /// <param name="perPage">The number of records to be returned for the page (optional, default to 1000)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OptOutListResponse</returns>
        System.Threading.Tasks.Task<OptOutListResponse> ReadA2PSMSOptOutsAsync (string accountId, string from = default(string), string to = default(string), string status = default(string), string pageToken = default(string), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Opted Out Numbers
        /// </summary>
        /// <remarks>
        /// Returns the list of numbers opted out from the account. The list can be filtered by `to`/`from` phone number query parameters. Specifying `text/csv` in the Accept header downloads the data in CSV format.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="from">The sender&#39;s phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format for filtering messages. The asterisk value \&quot;*\&quot; means any number in &#x60;from&#x60; field (optional)</param>
        /// <param name="to">The receiver&#39;s phone number (&#x60;to&#x60; field) in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format for filtering messages (optional)</param>
        /// <param name="status">The status (opted out, opted in, or both) to be used as the filter (optional, default to optout)</param>
        /// <param name="pageToken">The page token of the page to be retrieved (optional)</param>
        /// <param name="perPage">The number of records to be returned for the page (optional, default to 1000)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OptOutListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OptOutListResponse>> ReadA2PSMSOptOutsWithHttpInfoAsync (string accountId, string from = default(string), string to = default(string), string status = default(string), string pageToken = default(string), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class HighVolumeSMSApi : IHighVolumeSMSApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="HighVolumeSMSApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HighVolumeSMSApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HighVolumeSMSApi"/> class
        /// </summary>
        /// <returns></returns>
        public HighVolumeSMSApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HighVolumeSMSApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public HighVolumeSMSApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Assign Multiple Opted Out/In Numbers Adds multiple opt-outs and/or opt-ins for the specified sender number and a set of recipient numbers.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="optOutBulkAssignRequest">Consists of &#x60;from&#x60; field and &#x60;optOuts&#x60; and &#x60;optIns&#x60; lists. Both &#x60;optOuts&#x60; and &#x60;optIns&#x60; can be empty but not simultaneously - at least one of the lists must be entered. (optional)</param>
        /// <returns>OptOutBulkAssignResponse</returns>
        public OptOutBulkAssignResponse AddA2PSMSOptOuts (string accountId, OptOutBulkAssignRequest optOutBulkAssignRequest = default(OptOutBulkAssignRequest))
        {
             ApiResponse<OptOutBulkAssignResponse> localVarResponse = AddA2PSMSOptOutsWithHttpInfo(accountId, optOutBulkAssignRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Assign Multiple Opted Out/In Numbers Adds multiple opt-outs and/or opt-ins for the specified sender number and a set of recipient numbers.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="optOutBulkAssignRequest">Consists of &#x60;from&#x60; field and &#x60;optOuts&#x60; and &#x60;optIns&#x60; lists. Both &#x60;optOuts&#x60; and &#x60;optIns&#x60; can be empty but not simultaneously - at least one of the lists must be entered. (optional)</param>
        /// <returns>ApiResponse of OptOutBulkAssignResponse</returns>
        public ApiResponse<OptOutBulkAssignResponse> AddA2PSMSOptOutsWithHttpInfo (string accountId, OptOutBulkAssignRequest optOutBulkAssignRequest = default(OptOutBulkAssignRequest))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling HighVolumeSMSApi->AddA2PSMSOptOuts");

            var localVarPath = "/restapi/v1.0/account/{accountId}/a2p-sms/opt-outs/bulk-assign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (optOutBulkAssignRequest != null && optOutBulkAssignRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(optOutBulkAssignRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = optOutBulkAssignRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddA2PSMSOptOuts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OptOutBulkAssignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OptOutBulkAssignResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OptOutBulkAssignResponse)));
        }

        /// <summary>
        /// Assign Multiple Opted Out/In Numbers Adds multiple opt-outs and/or opt-ins for the specified sender number and a set of recipient numbers.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="optOutBulkAssignRequest">Consists of &#x60;from&#x60; field and &#x60;optOuts&#x60; and &#x60;optIns&#x60; lists. Both &#x60;optOuts&#x60; and &#x60;optIns&#x60; can be empty but not simultaneously - at least one of the lists must be entered. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OptOutBulkAssignResponse</returns>
        public async System.Threading.Tasks.Task<OptOutBulkAssignResponse> AddA2PSMSOptOutsAsync (string accountId, OptOutBulkAssignRequest optOutBulkAssignRequest = default(OptOutBulkAssignRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OptOutBulkAssignResponse> localVarResponse = await AddA2PSMSOptOutsWithHttpInfoAsync(accountId, optOutBulkAssignRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Assign Multiple Opted Out/In Numbers Adds multiple opt-outs and/or opt-ins for the specified sender number and a set of recipient numbers.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="optOutBulkAssignRequest">Consists of &#x60;from&#x60; field and &#x60;optOuts&#x60; and &#x60;optIns&#x60; lists. Both &#x60;optOuts&#x60; and &#x60;optIns&#x60; can be empty but not simultaneously - at least one of the lists must be entered. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OptOutBulkAssignResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OptOutBulkAssignResponse>> AddA2PSMSOptOutsWithHttpInfoAsync (string accountId, OptOutBulkAssignRequest optOutBulkAssignRequest = default(OptOutBulkAssignRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling HighVolumeSMSApi->AddA2PSMSOptOuts");

            var localVarPath = "/restapi/v1.0/account/{accountId}/a2p-sms/opt-outs/bulk-assign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (optOutBulkAssignRequest != null && optOutBulkAssignRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(optOutBulkAssignRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = optOutBulkAssignRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddA2PSMSOptOuts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OptOutBulkAssignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OptOutBulkAssignResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OptOutBulkAssignResponse)));
        }

        /// <summary>
        /// List A2P SMS Statuses Retrieves a set of message counts by message status and error codes filtered by dates, batchId and message direction.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="batchId">Internal identifier of a message batch to filter the response (optional)</param>
        /// <param name="direction">Direction of a message to filter the message list result. By default there is no filter applied - both Inbound and Outbound messages are returned (optional)</param>
        /// <param name="dateFrom">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the &#39;dateTo&#39; minus 24 hours (optional)</param>
        /// <param name="dateTo">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the current time (optional)</param>
        /// <param name="phoneNumber">List of phone numbers (specified in &#39;to&#39; or &#39;from&#39; fields of a message) to filter the results. Maximum number of phone numbers allowed to be specified as filters is 15 (optional)</param>
        /// <returns>MessageStatusesResponse</returns>
        public MessageStatusesResponse AggregateA2PSMSStatuses (string accountId, string batchId = default(string), SmsDirectionEnum? direction = default(SmsDirectionEnum?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), List<string> phoneNumber = default(List<string>))
        {
             ApiResponse<MessageStatusesResponse> localVarResponse = AggregateA2PSMSStatusesWithHttpInfo(accountId, batchId, direction, dateFrom, dateTo, phoneNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List A2P SMS Statuses Retrieves a set of message counts by message status and error codes filtered by dates, batchId and message direction.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="batchId">Internal identifier of a message batch to filter the response (optional)</param>
        /// <param name="direction">Direction of a message to filter the message list result. By default there is no filter applied - both Inbound and Outbound messages are returned (optional)</param>
        /// <param name="dateFrom">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the &#39;dateTo&#39; minus 24 hours (optional)</param>
        /// <param name="dateTo">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the current time (optional)</param>
        /// <param name="phoneNumber">List of phone numbers (specified in &#39;to&#39; or &#39;from&#39; fields of a message) to filter the results. Maximum number of phone numbers allowed to be specified as filters is 15 (optional)</param>
        /// <returns>ApiResponse of MessageStatusesResponse</returns>
        public ApiResponse<MessageStatusesResponse> AggregateA2PSMSStatusesWithHttpInfo (string accountId, string batchId = default(string), SmsDirectionEnum? direction = default(SmsDirectionEnum?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), List<string> phoneNumber = default(List<string>))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling HighVolumeSMSApi->AggregateA2PSMSStatuses");

            var localVarPath = "/restapi/v1.0/account/{accountId}/a2p-sms/statuses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (batchId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchId", batchId)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateFrom", dateFrom)); // query parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateTo", dateTo)); // query parameter
            if (phoneNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "phoneNumber", phoneNumber)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AggregateA2PSMSStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageStatusesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessageStatusesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageStatusesResponse)));
        }

        /// <summary>
        /// List A2P SMS Statuses Retrieves a set of message counts by message status and error codes filtered by dates, batchId and message direction.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="batchId">Internal identifier of a message batch to filter the response (optional)</param>
        /// <param name="direction">Direction of a message to filter the message list result. By default there is no filter applied - both Inbound and Outbound messages are returned (optional)</param>
        /// <param name="dateFrom">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the &#39;dateTo&#39; minus 24 hours (optional)</param>
        /// <param name="dateTo">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the current time (optional)</param>
        /// <param name="phoneNumber">List of phone numbers (specified in &#39;to&#39; or &#39;from&#39; fields of a message) to filter the results. Maximum number of phone numbers allowed to be specified as filters is 15 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MessageStatusesResponse</returns>
        public async System.Threading.Tasks.Task<MessageStatusesResponse> AggregateA2PSMSStatusesAsync (string accountId, string batchId = default(string), SmsDirectionEnum? direction = default(SmsDirectionEnum?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), List<string> phoneNumber = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MessageStatusesResponse> localVarResponse = await AggregateA2PSMSStatusesWithHttpInfoAsync(accountId, batchId, direction, dateFrom, dateTo, phoneNumber, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List A2P SMS Statuses Retrieves a set of message counts by message status and error codes filtered by dates, batchId and message direction.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="batchId">Internal identifier of a message batch to filter the response (optional)</param>
        /// <param name="direction">Direction of a message to filter the message list result. By default there is no filter applied - both Inbound and Outbound messages are returned (optional)</param>
        /// <param name="dateFrom">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the &#39;dateTo&#39; minus 24 hours (optional)</param>
        /// <param name="dateTo">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the current time (optional)</param>
        /// <param name="phoneNumber">List of phone numbers (specified in &#39;to&#39; or &#39;from&#39; fields of a message) to filter the results. Maximum number of phone numbers allowed to be specified as filters is 15 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MessageStatusesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessageStatusesResponse>> AggregateA2PSMSStatusesWithHttpInfoAsync (string accountId, string batchId = default(string), SmsDirectionEnum? direction = default(SmsDirectionEnum?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), List<string> phoneNumber = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling HighVolumeSMSApi->AggregateA2PSMSStatuses");

            var localVarPath = "/restapi/v1.0/account/{accountId}/a2p-sms/statuses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (batchId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchId", batchId)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateFrom", dateFrom)); // query parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateTo", dateTo)); // query parameter
            if (phoneNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "phoneNumber", phoneNumber)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AggregateA2PSMSStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageStatusesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessageStatusesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageStatusesResponse)));
        }

        /// <summary>
        /// Send A2P SMS Allows to send high volume of A2P (Application-to-Person) SMS messages (in message batches). Only phone number with the `A2PSmsSender` feature can be used as a sender. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="messageBatchCreateRequest">SMS batch payload (optional)</param>
        /// <returns>MessageBatchResponse</returns>
        public MessageBatchResponse CreateA2PSMS (string accountId, MessageBatchCreateRequest messageBatchCreateRequest = default(MessageBatchCreateRequest))
        {
             ApiResponse<MessageBatchResponse> localVarResponse = CreateA2PSMSWithHttpInfo(accountId, messageBatchCreateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send A2P SMS Allows to send high volume of A2P (Application-to-Person) SMS messages (in message batches). Only phone number with the `A2PSmsSender` feature can be used as a sender. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="messageBatchCreateRequest">SMS batch payload (optional)</param>
        /// <returns>ApiResponse of MessageBatchResponse</returns>
        public ApiResponse<MessageBatchResponse> CreateA2PSMSWithHttpInfo (string accountId, MessageBatchCreateRequest messageBatchCreateRequest = default(MessageBatchCreateRequest))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling HighVolumeSMSApi->CreateA2PSMS");

            var localVarPath = "/restapi/v1.0/account/{accountId}/a2p-sms/batches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (messageBatchCreateRequest != null && messageBatchCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(messageBatchCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = messageBatchCreateRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateA2PSMS", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageBatchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessageBatchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageBatchResponse)));
        }

        /// <summary>
        /// Send A2P SMS Allows to send high volume of A2P (Application-to-Person) SMS messages (in message batches). Only phone number with the `A2PSmsSender` feature can be used as a sender. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="messageBatchCreateRequest">SMS batch payload (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MessageBatchResponse</returns>
        public async System.Threading.Tasks.Task<MessageBatchResponse> CreateA2PSMSAsync (string accountId, MessageBatchCreateRequest messageBatchCreateRequest = default(MessageBatchCreateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MessageBatchResponse> localVarResponse = await CreateA2PSMSWithHttpInfoAsync(accountId, messageBatchCreateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send A2P SMS Allows to send high volume of A2P (Application-to-Person) SMS messages (in message batches). Only phone number with the `A2PSmsSender` feature can be used as a sender. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="messageBatchCreateRequest">SMS batch payload (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MessageBatchResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessageBatchResponse>> CreateA2PSMSWithHttpInfoAsync (string accountId, MessageBatchCreateRequest messageBatchCreateRequest = default(MessageBatchCreateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling HighVolumeSMSApi->CreateA2PSMS");

            var localVarPath = "/restapi/v1.0/account/{accountId}/a2p-sms/batches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (messageBatchCreateRequest != null && messageBatchCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(messageBatchCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = messageBatchCreateRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateA2PSMS", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageBatchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessageBatchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageBatchResponse)));
        }

        /// <summary>
        /// Get A2P SMS Batches Returns the list of A2P batches sent from the current account. The list can be filtered by message batch ID and/or from phone number.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="dateFrom">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the &#39;dateTo&#39; minus 24 hours (optional)</param>
        /// <param name="dateTo">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the current time (optional)</param>
        /// <param name="from">Phone number in E.164 format from which the messages are going to be sent (optional)</param>
        /// <param name="status">A list of batch statuses to filter the results (optional)</param>
        /// <param name="pageToken">The page token of the page to be retrieved (optional)</param>
        /// <param name="perPage">The number of records to be returned per page (optional)</param>
        /// <returns>BatchListResponse</returns>
        public BatchListResponse ListA2PBatches (string accountId, DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), string from = default(string), List<string> status = default(List<string>), string pageToken = default(string), long? perPage = default(long?))
        {
             ApiResponse<BatchListResponse> localVarResponse = ListA2PBatchesWithHttpInfo(accountId, dateFrom, dateTo, from, status, pageToken, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get A2P SMS Batches Returns the list of A2P batches sent from the current account. The list can be filtered by message batch ID and/or from phone number.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="dateFrom">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the &#39;dateTo&#39; minus 24 hours (optional)</param>
        /// <param name="dateTo">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the current time (optional)</param>
        /// <param name="from">Phone number in E.164 format from which the messages are going to be sent (optional)</param>
        /// <param name="status">A list of batch statuses to filter the results (optional)</param>
        /// <param name="pageToken">The page token of the page to be retrieved (optional)</param>
        /// <param name="perPage">The number of records to be returned per page (optional)</param>
        /// <returns>ApiResponse of BatchListResponse</returns>
        public ApiResponse<BatchListResponse> ListA2PBatchesWithHttpInfo (string accountId, DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), string from = default(string), List<string> status = default(List<string>), string pageToken = default(string), long? perPage = default(long?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling HighVolumeSMSApi->ListA2PBatches");

            var localVarPath = "/restapi/v1.0/account/{accountId}/a2p-sms/batches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateFrom", dateFrom)); // query parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateTo", dateTo)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "status", status)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListA2PBatches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BatchListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchListResponse)));
        }

        /// <summary>
        /// Get A2P SMS Batches Returns the list of A2P batches sent from the current account. The list can be filtered by message batch ID and/or from phone number.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="dateFrom">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the &#39;dateTo&#39; minus 24 hours (optional)</param>
        /// <param name="dateTo">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the current time (optional)</param>
        /// <param name="from">Phone number in E.164 format from which the messages are going to be sent (optional)</param>
        /// <param name="status">A list of batch statuses to filter the results (optional)</param>
        /// <param name="pageToken">The page token of the page to be retrieved (optional)</param>
        /// <param name="perPage">The number of records to be returned per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BatchListResponse</returns>
        public async System.Threading.Tasks.Task<BatchListResponse> ListA2PBatchesAsync (string accountId, DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), string from = default(string), List<string> status = default(List<string>), string pageToken = default(string), long? perPage = default(long?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BatchListResponse> localVarResponse = await ListA2PBatchesWithHttpInfoAsync(accountId, dateFrom, dateTo, from, status, pageToken, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get A2P SMS Batches Returns the list of A2P batches sent from the current account. The list can be filtered by message batch ID and/or from phone number.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="dateFrom">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the &#39;dateTo&#39; minus 24 hours (optional)</param>
        /// <param name="dateTo">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the current time (optional)</param>
        /// <param name="from">Phone number in E.164 format from which the messages are going to be sent (optional)</param>
        /// <param name="status">A list of batch statuses to filter the results (optional)</param>
        /// <param name="pageToken">The page token of the page to be retrieved (optional)</param>
        /// <param name="perPage">The number of records to be returned per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BatchListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchListResponse>> ListA2PBatchesWithHttpInfoAsync (string accountId, DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), string from = default(string), List<string> status = default(List<string>), string pageToken = default(string), long? perPage = default(long?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling HighVolumeSMSApi->ListA2PBatches");

            var localVarPath = "/restapi/v1.0/account/{accountId}/a2p-sms/batches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateFrom", dateFrom)); // query parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateTo", dateTo)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "status", status)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListA2PBatches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BatchListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchListResponse)));
        }

        /// <summary>
        /// Get A2P SMS List Returns the list of outbound/inbound A2P messages sent from/to A2P phone numbers of the current account. The list can be filtered by message batch ID and/or phone number.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="batchId">Internal identifier of a message batch to filter the response (optional)</param>
        /// <param name="direction">Direction of a message to filter the message list result. By default there is no filter applied - both Inbound and Outbound messages are returned (optional)</param>
        /// <param name="dateFrom">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the &#39;dateTo&#39; minus 24 hours (optional)</param>
        /// <param name="dateTo">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the current time (optional)</param>
        /// <param name="view">Indicates if the response has to be detailed, includes text in the response if detailed (optional, default to Simple)</param>
        /// <param name="phoneNumber">List of phone numbers (specified in &#39;to&#39; or &#39;from&#39; fields of a message) to filter the results. Maximum number of phone numbers allowed to be specified as filters is 15 (optional)</param>
        /// <param name="pageToken">The page token of the page to be retrieved. (optional)</param>
        /// <param name="perPage">The number of messages to be returned per request (optional, default to 1000)</param>
        /// <returns>MessageListResponse</returns>
        public MessageListResponse ListA2PSMS (string accountId, string batchId = default(string), SmsDirectionEnum? direction = default(SmsDirectionEnum?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), string view = default(string), List<string> phoneNumber = default(List<string>), string pageToken = default(string), int? perPage = default(int?))
        {
             ApiResponse<MessageListResponse> localVarResponse = ListA2PSMSWithHttpInfo(accountId, batchId, direction, dateFrom, dateTo, view, phoneNumber, pageToken, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get A2P SMS List Returns the list of outbound/inbound A2P messages sent from/to A2P phone numbers of the current account. The list can be filtered by message batch ID and/or phone number.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="batchId">Internal identifier of a message batch to filter the response (optional)</param>
        /// <param name="direction">Direction of a message to filter the message list result. By default there is no filter applied - both Inbound and Outbound messages are returned (optional)</param>
        /// <param name="dateFrom">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the &#39;dateTo&#39; minus 24 hours (optional)</param>
        /// <param name="dateTo">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the current time (optional)</param>
        /// <param name="view">Indicates if the response has to be detailed, includes text in the response if detailed (optional, default to Simple)</param>
        /// <param name="phoneNumber">List of phone numbers (specified in &#39;to&#39; or &#39;from&#39; fields of a message) to filter the results. Maximum number of phone numbers allowed to be specified as filters is 15 (optional)</param>
        /// <param name="pageToken">The page token of the page to be retrieved. (optional)</param>
        /// <param name="perPage">The number of messages to be returned per request (optional, default to 1000)</param>
        /// <returns>ApiResponse of MessageListResponse</returns>
        public ApiResponse<MessageListResponse> ListA2PSMSWithHttpInfo (string accountId, string batchId = default(string), SmsDirectionEnum? direction = default(SmsDirectionEnum?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), string view = default(string), List<string> phoneNumber = default(List<string>), string pageToken = default(string), int? perPage = default(int?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling HighVolumeSMSApi->ListA2PSMS");

            var localVarPath = "/restapi/v1.0/account/{accountId}/a2p-sms/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (batchId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchId", batchId)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateFrom", dateFrom)); // query parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateTo", dateTo)); // query parameter
            if (view != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "view", view)); // query parameter
            if (phoneNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "phoneNumber", phoneNumber)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListA2PSMS", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessageListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageListResponse)));
        }

        /// <summary>
        /// Get A2P SMS List Returns the list of outbound/inbound A2P messages sent from/to A2P phone numbers of the current account. The list can be filtered by message batch ID and/or phone number.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="batchId">Internal identifier of a message batch to filter the response (optional)</param>
        /// <param name="direction">Direction of a message to filter the message list result. By default there is no filter applied - both Inbound and Outbound messages are returned (optional)</param>
        /// <param name="dateFrom">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the &#39;dateTo&#39; minus 24 hours (optional)</param>
        /// <param name="dateTo">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the current time (optional)</param>
        /// <param name="view">Indicates if the response has to be detailed, includes text in the response if detailed (optional, default to Simple)</param>
        /// <param name="phoneNumber">List of phone numbers (specified in &#39;to&#39; or &#39;from&#39; fields of a message) to filter the results. Maximum number of phone numbers allowed to be specified as filters is 15 (optional)</param>
        /// <param name="pageToken">The page token of the page to be retrieved. (optional)</param>
        /// <param name="perPage">The number of messages to be returned per request (optional, default to 1000)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MessageListResponse</returns>
        public async System.Threading.Tasks.Task<MessageListResponse> ListA2PSMSAsync (string accountId, string batchId = default(string), SmsDirectionEnum? direction = default(SmsDirectionEnum?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), string view = default(string), List<string> phoneNumber = default(List<string>), string pageToken = default(string), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MessageListResponse> localVarResponse = await ListA2PSMSWithHttpInfoAsync(accountId, batchId, direction, dateFrom, dateTo, view, phoneNumber, pageToken, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get A2P SMS List Returns the list of outbound/inbound A2P messages sent from/to A2P phone numbers of the current account. The list can be filtered by message batch ID and/or phone number.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="batchId">Internal identifier of a message batch to filter the response (optional)</param>
        /// <param name="direction">Direction of a message to filter the message list result. By default there is no filter applied - both Inbound and Outbound messages are returned (optional)</param>
        /// <param name="dateFrom">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the &#39;dateTo&#39; minus 24 hours (optional)</param>
        /// <param name="dateTo">The end of the time range to filter the results in ISO 8601 format including timezone. Default is the current time (optional)</param>
        /// <param name="view">Indicates if the response has to be detailed, includes text in the response if detailed (optional, default to Simple)</param>
        /// <param name="phoneNumber">List of phone numbers (specified in &#39;to&#39; or &#39;from&#39; fields of a message) to filter the results. Maximum number of phone numbers allowed to be specified as filters is 15 (optional)</param>
        /// <param name="pageToken">The page token of the page to be retrieved. (optional)</param>
        /// <param name="perPage">The number of messages to be returned per request (optional, default to 1000)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MessageListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessageListResponse>> ListA2PSMSWithHttpInfoAsync (string accountId, string batchId = default(string), SmsDirectionEnum? direction = default(SmsDirectionEnum?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), string view = default(string), List<string> phoneNumber = default(List<string>), string pageToken = default(string), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling HighVolumeSMSApi->ListA2PSMS");

            var localVarPath = "/restapi/v1.0/account/{accountId}/a2p-sms/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (batchId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchId", batchId)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateFrom", dateFrom)); // query parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateTo", dateTo)); // query parameter
            if (view != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "view", view)); // query parameter
            if (phoneNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "phoneNumber", phoneNumber)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListA2PSMS", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessageListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageListResponse)));
        }

        /// <summary>
        /// Get A2P SMS Batch Returns information on a message batch.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="batchId">Internal identifier of a message batch to be retrieved</param>
        /// <returns>MessageBatchResponse</returns>
        public MessageBatchResponse ReadA2PBatch (string accountId, string batchId)
        {
             ApiResponse<MessageBatchResponse> localVarResponse = ReadA2PBatchWithHttpInfo(accountId, batchId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get A2P SMS Batch Returns information on a message batch.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="batchId">Internal identifier of a message batch to be retrieved</param>
        /// <returns>ApiResponse of MessageBatchResponse</returns>
        public ApiResponse<MessageBatchResponse> ReadA2PBatchWithHttpInfo (string accountId, string batchId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling HighVolumeSMSApi->ReadA2PBatch");
            // verify the required parameter 'batchId' is set
            if (batchId == null)
                throw new ApiException(400, "Missing required parameter 'batchId' when calling HighVolumeSMSApi->ReadA2PBatch");

            var localVarPath = "/restapi/v1.0/account/{accountId}/a2p-sms/batches/{batchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (batchId != null) localVarPathParams.Add("batchId", this.Configuration.ApiClient.ParameterToString(batchId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadA2PBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageBatchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessageBatchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageBatchResponse)));
        }

        /// <summary>
        /// Get A2P SMS Batch Returns information on a message batch.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="batchId">Internal identifier of a message batch to be retrieved</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MessageBatchResponse</returns>
        public async System.Threading.Tasks.Task<MessageBatchResponse> ReadA2PBatchAsync (string accountId, string batchId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MessageBatchResponse> localVarResponse = await ReadA2PBatchWithHttpInfoAsync(accountId, batchId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get A2P SMS Batch Returns information on a message batch.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="batchId">Internal identifier of a message batch to be retrieved</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MessageBatchResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessageBatchResponse>> ReadA2PBatchWithHttpInfoAsync (string accountId, string batchId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling HighVolumeSMSApi->ReadA2PBatch");
            // verify the required parameter 'batchId' is set
            if (batchId == null)
                throw new ApiException(400, "Missing required parameter 'batchId' when calling HighVolumeSMSApi->ReadA2PBatch");

            var localVarPath = "/restapi/v1.0/account/{accountId}/a2p-sms/batches/{batchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (batchId != null) localVarPathParams.Add("batchId", this.Configuration.ApiClient.ParameterToString(batchId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadA2PBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageBatchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessageBatchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageBatchResponse)));
        }

        /// <summary>
        /// Get A2P SMS Returns the details of an A2P SMS message by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="messageId">Internal identifier of a message to be retrieved</param>
        /// <returns>MessageDetailsResponse</returns>
        public MessageDetailsResponse ReadA2PSMS (string accountId, string messageId)
        {
             ApiResponse<MessageDetailsResponse> localVarResponse = ReadA2PSMSWithHttpInfo(accountId, messageId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get A2P SMS Returns the details of an A2P SMS message by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="messageId">Internal identifier of a message to be retrieved</param>
        /// <returns>ApiResponse of MessageDetailsResponse</returns>
        public ApiResponse<MessageDetailsResponse> ReadA2PSMSWithHttpInfo (string accountId, string messageId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling HighVolumeSMSApi->ReadA2PSMS");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling HighVolumeSMSApi->ReadA2PSMS");

            var localVarPath = "/restapi/v1.0/account/{accountId}/a2p-sms/messages/{messageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (messageId != null) localVarPathParams.Add("messageId", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadA2PSMS", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessageDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageDetailsResponse)));
        }

        /// <summary>
        /// Get A2P SMS Returns the details of an A2P SMS message by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="messageId">Internal identifier of a message to be retrieved</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MessageDetailsResponse</returns>
        public async System.Threading.Tasks.Task<MessageDetailsResponse> ReadA2PSMSAsync (string accountId, string messageId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MessageDetailsResponse> localVarResponse = await ReadA2PSMSWithHttpInfoAsync(accountId, messageId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get A2P SMS Returns the details of an A2P SMS message by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="messageId">Internal identifier of a message to be retrieved</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MessageDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessageDetailsResponse>> ReadA2PSMSWithHttpInfoAsync (string accountId, string messageId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling HighVolumeSMSApi->ReadA2PSMS");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling HighVolumeSMSApi->ReadA2PSMS");

            var localVarPath = "/restapi/v1.0/account/{accountId}/a2p-sms/messages/{messageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (messageId != null) localVarPathParams.Add("messageId", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadA2PSMS", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessageDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageDetailsResponse)));
        }

        /// <summary>
        /// Get Opted Out Numbers Returns the list of numbers opted out from the account. The list can be filtered by `to`/`from` phone number query parameters. Specifying `text/csv` in the Accept header downloads the data in CSV format.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="from">The sender&#39;s phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format for filtering messages. The asterisk value \&quot;*\&quot; means any number in &#x60;from&#x60; field (optional)</param>
        /// <param name="to">The receiver&#39;s phone number (&#x60;to&#x60; field) in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format for filtering messages (optional)</param>
        /// <param name="status">The status (opted out, opted in, or both) to be used as the filter (optional, default to optout)</param>
        /// <param name="pageToken">The page token of the page to be retrieved (optional)</param>
        /// <param name="perPage">The number of records to be returned for the page (optional, default to 1000)</param>
        /// <returns>OptOutListResponse</returns>
        public OptOutListResponse ReadA2PSMSOptOuts (string accountId, string from = default(string), string to = default(string), string status = default(string), string pageToken = default(string), int? perPage = default(int?))
        {
             ApiResponse<OptOutListResponse> localVarResponse = ReadA2PSMSOptOutsWithHttpInfo(accountId, from, to, status, pageToken, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Opted Out Numbers Returns the list of numbers opted out from the account. The list can be filtered by `to`/`from` phone number query parameters. Specifying `text/csv` in the Accept header downloads the data in CSV format.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="from">The sender&#39;s phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format for filtering messages. The asterisk value \&quot;*\&quot; means any number in &#x60;from&#x60; field (optional)</param>
        /// <param name="to">The receiver&#39;s phone number (&#x60;to&#x60; field) in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format for filtering messages (optional)</param>
        /// <param name="status">The status (opted out, opted in, or both) to be used as the filter (optional, default to optout)</param>
        /// <param name="pageToken">The page token of the page to be retrieved (optional)</param>
        /// <param name="perPage">The number of records to be returned for the page (optional, default to 1000)</param>
        /// <returns>ApiResponse of OptOutListResponse</returns>
        public ApiResponse<OptOutListResponse> ReadA2PSMSOptOutsWithHttpInfo (string accountId, string from = default(string), string to = default(string), string status = default(string), string pageToken = default(string), int? perPage = default(int?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling HighVolumeSMSApi->ReadA2PSMSOptOuts");

            var localVarPath = "/restapi/v1.0/account/{accountId}/a2p-sms/opt-outs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadA2PSMSOptOuts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OptOutListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OptOutListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OptOutListResponse)));
        }

        /// <summary>
        /// Get Opted Out Numbers Returns the list of numbers opted out from the account. The list can be filtered by `to`/`from` phone number query parameters. Specifying `text/csv` in the Accept header downloads the data in CSV format.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="from">The sender&#39;s phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format for filtering messages. The asterisk value \&quot;*\&quot; means any number in &#x60;from&#x60; field (optional)</param>
        /// <param name="to">The receiver&#39;s phone number (&#x60;to&#x60; field) in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format for filtering messages (optional)</param>
        /// <param name="status">The status (opted out, opted in, or both) to be used as the filter (optional, default to optout)</param>
        /// <param name="pageToken">The page token of the page to be retrieved (optional)</param>
        /// <param name="perPage">The number of records to be returned for the page (optional, default to 1000)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OptOutListResponse</returns>
        public async System.Threading.Tasks.Task<OptOutListResponse> ReadA2PSMSOptOutsAsync (string accountId, string from = default(string), string to = default(string), string status = default(string), string pageToken = default(string), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OptOutListResponse> localVarResponse = await ReadA2PSMSOptOutsWithHttpInfoAsync(accountId, from, to, status, pageToken, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Opted Out Numbers Returns the list of numbers opted out from the account. The list can be filtered by `to`/`from` phone number query parameters. Specifying `text/csv` in the Accept header downloads the data in CSV format.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="from">The sender&#39;s phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format for filtering messages. The asterisk value \&quot;*\&quot; means any number in &#x60;from&#x60; field (optional)</param>
        /// <param name="to">The receiver&#39;s phone number (&#x60;to&#x60; field) in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format for filtering messages (optional)</param>
        /// <param name="status">The status (opted out, opted in, or both) to be used as the filter (optional, default to optout)</param>
        /// <param name="pageToken">The page token of the page to be retrieved (optional)</param>
        /// <param name="perPage">The number of records to be returned for the page (optional, default to 1000)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OptOutListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OptOutListResponse>> ReadA2PSMSOptOutsWithHttpInfoAsync (string accountId, string from = default(string), string to = default(string), string status = default(string), string pageToken = default(string), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling HighVolumeSMSApi->ReadA2PSMSOptOuts");

            var localVarPath = "/restapi/v1.0/account/{accountId}/a2p-sms/opt-outs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadA2PSMSOptOuts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OptOutListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OptOutListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OptOutListResponse)));
        }

    }
}
