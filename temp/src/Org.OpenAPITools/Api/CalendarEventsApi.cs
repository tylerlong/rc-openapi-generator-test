/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICalendarEventsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Event
        /// </summary>
        /// <remarks>
        /// Creates a new calendar event.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipEventCreate"></param>
        /// <returns>GlipEventInfo</returns>
        GlipEventInfo CreateEvent (GlipEventCreate glipEventCreate);

        /// <summary>
        /// Create Event
        /// </summary>
        /// <remarks>
        /// Creates a new calendar event.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipEventCreate"></param>
        /// <returns>ApiResponse of GlipEventInfo</returns>
        ApiResponse<GlipEventInfo> CreateEventWithHttpInfo (GlipEventCreate glipEventCreate);
        /// <summary>
        /// Create Event by Group ID
        /// </summary>
        /// <remarks>
        /// Creates a new calendar event within the specified group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="glipEventCreate"></param>
        /// <returns>GlipEventInfo</returns>
        GlipEventInfo CreateEventByGroupId (string groupId, GlipEventCreate glipEventCreate);

        /// <summary>
        /// Create Event by Group ID
        /// </summary>
        /// <remarks>
        /// Creates a new calendar event within the specified group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="glipEventCreate"></param>
        /// <returns>ApiResponse of GlipEventInfo</returns>
        ApiResponse<GlipEventInfo> CreateEventByGroupIdWithHttpInfo (string groupId, GlipEventCreate glipEventCreate);
        /// <summary>
        /// Delete Event
        /// </summary>
        /// <remarks>
        /// Deletes the specified calendar event.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">Internal identifier of an event to be deleted</param>
        /// <returns></returns>
        void DeleteEvent (string eventId);

        /// <summary>
        /// Delete Event
        /// </summary>
        /// <remarks>
        /// Deletes the specified calendar event.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">Internal identifier of an event to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteEventWithHttpInfo (string eventId);
        /// <summary>
        /// Get Group Events
        /// </summary>
        /// <remarks>
        /// Returns a list of calendar events available for the current user within the specified group. Users can only see their personal tasks and public tasks.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <returns>GlipEventInfo</returns>
        GlipEventInfo ListGroupEvents (string groupId);

        /// <summary>
        /// Get Group Events
        /// </summary>
        /// <remarks>
        /// Returns a list of calendar events available for the current user within the specified group. Users can only see their personal tasks and public tasks.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <returns>ApiResponse of GlipEventInfo</returns>
        ApiResponse<GlipEventInfo> ListGroupEventsWithHttpInfo (string groupId);
        /// <summary>
        /// Get Event
        /// </summary>
        /// <remarks>
        /// Returns the specified calendar event(s) by ID(s).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">event id or comma separated list of event ids.</param>
        /// <returns>GlipEventInfo</returns>
        GlipEventInfo ReadEvent (List<string> eventId);

        /// <summary>
        /// Get Event
        /// </summary>
        /// <remarks>
        /// Returns the specified calendar event(s) by ID(s).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">event id or comma separated list of event ids.</param>
        /// <returns>ApiResponse of GlipEventInfo</returns>
        ApiResponse<GlipEventInfo> ReadEventWithHttpInfo (List<string> eventId);
        /// <summary>
        /// Get User Events List
        /// </summary>
        /// <remarks>
        /// Returns all calendar events created by the current user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordCount">Number of groups to be fetched by one request. The maximum value is 250, by default - 30. (optional, default to 30)</param>
        /// <param name="pageToken">Token of a page to be returned (optional)</param>
        /// <returns>GlipEventsInfo</returns>
        GlipEventsInfo ReadGlipEvents (int? recordCount = default(int?), string pageToken = default(string));

        /// <summary>
        /// Get User Events List
        /// </summary>
        /// <remarks>
        /// Returns all calendar events created by the current user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordCount">Number of groups to be fetched by one request. The maximum value is 250, by default - 30. (optional, default to 30)</param>
        /// <param name="pageToken">Token of a page to be returned (optional)</param>
        /// <returns>ApiResponse of GlipEventsInfo</returns>
        ApiResponse<GlipEventsInfo> ReadGlipEventsWithHttpInfo (int? recordCount = default(int?), string pageToken = default(string));
        /// <summary>
        /// Update Event
        /// </summary>
        /// <remarks>
        /// Updates the specified calendar event.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">Internal identifier of an event</param>
        /// <param name="glipEventCreate"></param>
        /// <returns>GlipEventInfo</returns>
        GlipEventInfo UpdateEvent (string eventId, GlipEventCreate glipEventCreate);

        /// <summary>
        /// Update Event
        /// </summary>
        /// <remarks>
        /// Updates the specified calendar event.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">Internal identifier of an event</param>
        /// <param name="glipEventCreate"></param>
        /// <returns>ApiResponse of GlipEventInfo</returns>
        ApiResponse<GlipEventInfo> UpdateEventWithHttpInfo (string eventId, GlipEventCreate glipEventCreate);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create Event
        /// </summary>
        /// <remarks>
        /// Creates a new calendar event.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipEventCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipEventInfo</returns>
        System.Threading.Tasks.Task<GlipEventInfo> CreateEventAsync (GlipEventCreate glipEventCreate, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Event
        /// </summary>
        /// <remarks>
        /// Creates a new calendar event.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipEventCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipEventInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlipEventInfo>> CreateEventWithHttpInfoAsync (GlipEventCreate glipEventCreate, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create Event by Group ID
        /// </summary>
        /// <remarks>
        /// Creates a new calendar event within the specified group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="glipEventCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipEventInfo</returns>
        System.Threading.Tasks.Task<GlipEventInfo> CreateEventByGroupIdAsync (string groupId, GlipEventCreate glipEventCreate, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Event by Group ID
        /// </summary>
        /// <remarks>
        /// Creates a new calendar event within the specified group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="glipEventCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipEventInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlipEventInfo>> CreateEventByGroupIdWithHttpInfoAsync (string groupId, GlipEventCreate glipEventCreate, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete Event
        /// </summary>
        /// <remarks>
        /// Deletes the specified calendar event.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">Internal identifier of an event to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteEventAsync (string eventId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Event
        /// </summary>
        /// <remarks>
        /// Deletes the specified calendar event.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">Internal identifier of an event to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEventWithHttpInfoAsync (string eventId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Group Events
        /// </summary>
        /// <remarks>
        /// Returns a list of calendar events available for the current user within the specified group. Users can only see their personal tasks and public tasks.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipEventInfo</returns>
        System.Threading.Tasks.Task<GlipEventInfo> ListGroupEventsAsync (string groupId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Group Events
        /// </summary>
        /// <remarks>
        /// Returns a list of calendar events available for the current user within the specified group. Users can only see their personal tasks and public tasks.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipEventInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlipEventInfo>> ListGroupEventsWithHttpInfoAsync (string groupId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Event
        /// </summary>
        /// <remarks>
        /// Returns the specified calendar event(s) by ID(s).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">event id or comma separated list of event ids.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipEventInfo</returns>
        System.Threading.Tasks.Task<GlipEventInfo> ReadEventAsync (List<string> eventId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Event
        /// </summary>
        /// <remarks>
        /// Returns the specified calendar event(s) by ID(s).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">event id or comma separated list of event ids.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipEventInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlipEventInfo>> ReadEventWithHttpInfoAsync (List<string> eventId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get User Events List
        /// </summary>
        /// <remarks>
        /// Returns all calendar events created by the current user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordCount">Number of groups to be fetched by one request. The maximum value is 250, by default - 30. (optional, default to 30)</param>
        /// <param name="pageToken">Token of a page to be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipEventsInfo</returns>
        System.Threading.Tasks.Task<GlipEventsInfo> ReadGlipEventsAsync (int? recordCount = default(int?), string pageToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get User Events List
        /// </summary>
        /// <remarks>
        /// Returns all calendar events created by the current user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordCount">Number of groups to be fetched by one request. The maximum value is 250, by default - 30. (optional, default to 30)</param>
        /// <param name="pageToken">Token of a page to be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipEventsInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlipEventsInfo>> ReadGlipEventsWithHttpInfoAsync (int? recordCount = default(int?), string pageToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Event
        /// </summary>
        /// <remarks>
        /// Updates the specified calendar event.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">Internal identifier of an event</param>
        /// <param name="glipEventCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipEventInfo</returns>
        System.Threading.Tasks.Task<GlipEventInfo> UpdateEventAsync (string eventId, GlipEventCreate glipEventCreate, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Event
        /// </summary>
        /// <remarks>
        /// Updates the specified calendar event.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">Internal identifier of an event</param>
        /// <param name="glipEventCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipEventInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlipEventInfo>> UpdateEventWithHttpInfoAsync (string eventId, GlipEventCreate glipEventCreate, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CalendarEventsApi : ICalendarEventsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CalendarEventsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CalendarEventsApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CalendarEventsApi"/> class
        /// </summary>
        /// <returns></returns>
        public CalendarEventsApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CalendarEventsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CalendarEventsApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create Event Creates a new calendar event.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipEventCreate"></param>
        /// <returns>GlipEventInfo</returns>
        public GlipEventInfo CreateEvent (GlipEventCreate glipEventCreate)
        {
             ApiResponse<GlipEventInfo> localVarResponse = CreateEventWithHttpInfo(glipEventCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Event Creates a new calendar event.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipEventCreate"></param>
        /// <returns>ApiResponse of GlipEventInfo</returns>
        public ApiResponse<GlipEventInfo> CreateEventWithHttpInfo (GlipEventCreate glipEventCreate)
        {
            // verify the required parameter 'glipEventCreate' is set
            if (glipEventCreate == null)
                throw new ApiException(400, "Missing required parameter 'glipEventCreate' when calling CalendarEventsApi->CreateEvent");

            var localVarPath = "/restapi/v1.0/glip/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (glipEventCreate != null && glipEventCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipEventCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipEventCreate; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipEventInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipEventInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipEventInfo)));
        }

        /// <summary>
        /// Create Event Creates a new calendar event.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipEventCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipEventInfo</returns>
        public async System.Threading.Tasks.Task<GlipEventInfo> CreateEventAsync (GlipEventCreate glipEventCreate, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipEventInfo> localVarResponse = await CreateEventWithHttpInfoAsync(glipEventCreate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Event Creates a new calendar event.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipEventCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipEventInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlipEventInfo>> CreateEventWithHttpInfoAsync (GlipEventCreate glipEventCreate, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'glipEventCreate' is set
            if (glipEventCreate == null)
                throw new ApiException(400, "Missing required parameter 'glipEventCreate' when calling CalendarEventsApi->CreateEvent");

            var localVarPath = "/restapi/v1.0/glip/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (glipEventCreate != null && glipEventCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipEventCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipEventCreate; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipEventInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipEventInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipEventInfo)));
        }

        /// <summary>
        /// Create Event by Group ID Creates a new calendar event within the specified group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="glipEventCreate"></param>
        /// <returns>GlipEventInfo</returns>
        public GlipEventInfo CreateEventByGroupId (string groupId, GlipEventCreate glipEventCreate)
        {
             ApiResponse<GlipEventInfo> localVarResponse = CreateEventByGroupIdWithHttpInfo(groupId, glipEventCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Event by Group ID Creates a new calendar event within the specified group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="glipEventCreate"></param>
        /// <returns>ApiResponse of GlipEventInfo</returns>
        public ApiResponse<GlipEventInfo> CreateEventByGroupIdWithHttpInfo (string groupId, GlipEventCreate glipEventCreate)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling CalendarEventsApi->CreateEventByGroupId");
            // verify the required parameter 'glipEventCreate' is set
            if (glipEventCreate == null)
                throw new ApiException(400, "Missing required parameter 'glipEventCreate' when calling CalendarEventsApi->CreateEventByGroupId");

            var localVarPath = "/restapi/v1.0/glip/groups/{groupId}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (glipEventCreate != null && glipEventCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipEventCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipEventCreate; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEventByGroupId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipEventInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipEventInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipEventInfo)));
        }

        /// <summary>
        /// Create Event by Group ID Creates a new calendar event within the specified group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="glipEventCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipEventInfo</returns>
        public async System.Threading.Tasks.Task<GlipEventInfo> CreateEventByGroupIdAsync (string groupId, GlipEventCreate glipEventCreate, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipEventInfo> localVarResponse = await CreateEventByGroupIdWithHttpInfoAsync(groupId, glipEventCreate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Event by Group ID Creates a new calendar event within the specified group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="glipEventCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipEventInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlipEventInfo>> CreateEventByGroupIdWithHttpInfoAsync (string groupId, GlipEventCreate glipEventCreate, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling CalendarEventsApi->CreateEventByGroupId");
            // verify the required parameter 'glipEventCreate' is set
            if (glipEventCreate == null)
                throw new ApiException(400, "Missing required parameter 'glipEventCreate' when calling CalendarEventsApi->CreateEventByGroupId");

            var localVarPath = "/restapi/v1.0/glip/groups/{groupId}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (glipEventCreate != null && glipEventCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipEventCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipEventCreate; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEventByGroupId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipEventInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipEventInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipEventInfo)));
        }

        /// <summary>
        /// Delete Event Deletes the specified calendar event.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">Internal identifier of an event to be deleted</param>
        /// <returns></returns>
        public void DeleteEvent (string eventId)
        {
             DeleteEventWithHttpInfo(eventId);
        }

        /// <summary>
        /// Delete Event Deletes the specified calendar event.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">Internal identifier of an event to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteEventWithHttpInfo (string eventId)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling CalendarEventsApi->DeleteEvent");

            var localVarPath = "/restapi/v1.0/glip/events/{eventId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventId != null) localVarPathParams.Add("eventId", this.Configuration.ApiClient.ParameterToString(eventId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Event Deletes the specified calendar event.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">Internal identifier of an event to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteEventAsync (string eventId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteEventWithHttpInfoAsync(eventId, cancellationToken);

        }

        /// <summary>
        /// Delete Event Deletes the specified calendar event.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">Internal identifier of an event to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEventWithHttpInfoAsync (string eventId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling CalendarEventsApi->DeleteEvent");

            var localVarPath = "/restapi/v1.0/glip/events/{eventId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventId != null) localVarPathParams.Add("eventId", this.Configuration.ApiClient.ParameterToString(eventId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get Group Events Returns a list of calendar events available for the current user within the specified group. Users can only see their personal tasks and public tasks.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <returns>GlipEventInfo</returns>
        public GlipEventInfo ListGroupEvents (string groupId)
        {
             ApiResponse<GlipEventInfo> localVarResponse = ListGroupEventsWithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group Events Returns a list of calendar events available for the current user within the specified group. Users can only see their personal tasks and public tasks.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <returns>ApiResponse of GlipEventInfo</returns>
        public ApiResponse<GlipEventInfo> ListGroupEventsWithHttpInfo (string groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling CalendarEventsApi->ListGroupEvents");

            var localVarPath = "/restapi/v1.0/glip/groups/{groupId}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListGroupEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipEventInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipEventInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipEventInfo)));
        }

        /// <summary>
        /// Get Group Events Returns a list of calendar events available for the current user within the specified group. Users can only see their personal tasks and public tasks.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipEventInfo</returns>
        public async System.Threading.Tasks.Task<GlipEventInfo> ListGroupEventsAsync (string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipEventInfo> localVarResponse = await ListGroupEventsWithHttpInfoAsync(groupId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Group Events Returns a list of calendar events available for the current user within the specified group. Users can only see their personal tasks and public tasks.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipEventInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlipEventInfo>> ListGroupEventsWithHttpInfoAsync (string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling CalendarEventsApi->ListGroupEvents");

            var localVarPath = "/restapi/v1.0/glip/groups/{groupId}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListGroupEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipEventInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipEventInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipEventInfo)));
        }

        /// <summary>
        /// Get Event Returns the specified calendar event(s) by ID(s).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">event id or comma separated list of event ids.</param>
        /// <returns>GlipEventInfo</returns>
        public GlipEventInfo ReadEvent (List<string> eventId)
        {
             ApiResponse<GlipEventInfo> localVarResponse = ReadEventWithHttpInfo(eventId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Event Returns the specified calendar event(s) by ID(s).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">event id or comma separated list of event ids.</param>
        /// <returns>ApiResponse of GlipEventInfo</returns>
        public ApiResponse<GlipEventInfo> ReadEventWithHttpInfo (List<string> eventId)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling CalendarEventsApi->ReadEvent");

            var localVarPath = "/restapi/v1.0/glip/events/{eventId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "multipart/mixed"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventId != null) localVarPathParams.Add("eventId", this.Configuration.ApiClient.ParameterToString(eventId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipEventInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipEventInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipEventInfo)));
        }

        /// <summary>
        /// Get Event Returns the specified calendar event(s) by ID(s).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">event id or comma separated list of event ids.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipEventInfo</returns>
        public async System.Threading.Tasks.Task<GlipEventInfo> ReadEventAsync (List<string> eventId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipEventInfo> localVarResponse = await ReadEventWithHttpInfoAsync(eventId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Event Returns the specified calendar event(s) by ID(s).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">event id or comma separated list of event ids.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipEventInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlipEventInfo>> ReadEventWithHttpInfoAsync (List<string> eventId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling CalendarEventsApi->ReadEvent");

            var localVarPath = "/restapi/v1.0/glip/events/{eventId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "multipart/mixed"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventId != null) localVarPathParams.Add("eventId", this.Configuration.ApiClient.ParameterToString(eventId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipEventInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipEventInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipEventInfo)));
        }

        /// <summary>
        /// Get User Events List Returns all calendar events created by the current user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordCount">Number of groups to be fetched by one request. The maximum value is 250, by default - 30. (optional, default to 30)</param>
        /// <param name="pageToken">Token of a page to be returned (optional)</param>
        /// <returns>GlipEventsInfo</returns>
        public GlipEventsInfo ReadGlipEvents (int? recordCount = default(int?), string pageToken = default(string))
        {
             ApiResponse<GlipEventsInfo> localVarResponse = ReadGlipEventsWithHttpInfo(recordCount, pageToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Events List Returns all calendar events created by the current user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordCount">Number of groups to be fetched by one request. The maximum value is 250, by default - 30. (optional, default to 30)</param>
        /// <param name="pageToken">Token of a page to be returned (optional)</param>
        /// <returns>ApiResponse of GlipEventsInfo</returns>
        public ApiResponse<GlipEventsInfo> ReadGlipEventsWithHttpInfo (int? recordCount = default(int?), string pageToken = default(string))
        {

            var localVarPath = "/restapi/v1.0/glip/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "multipart/mixed"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordCount", recordCount)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadGlipEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipEventsInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipEventsInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipEventsInfo)));
        }

        /// <summary>
        /// Get User Events List Returns all calendar events created by the current user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordCount">Number of groups to be fetched by one request. The maximum value is 250, by default - 30. (optional, default to 30)</param>
        /// <param name="pageToken">Token of a page to be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipEventsInfo</returns>
        public async System.Threading.Tasks.Task<GlipEventsInfo> ReadGlipEventsAsync (int? recordCount = default(int?), string pageToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipEventsInfo> localVarResponse = await ReadGlipEventsWithHttpInfoAsync(recordCount, pageToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get User Events List Returns all calendar events created by the current user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordCount">Number of groups to be fetched by one request. The maximum value is 250, by default - 30. (optional, default to 30)</param>
        /// <param name="pageToken">Token of a page to be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipEventsInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlipEventsInfo>> ReadGlipEventsWithHttpInfoAsync (int? recordCount = default(int?), string pageToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/restapi/v1.0/glip/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "multipart/mixed"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordCount", recordCount)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadGlipEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipEventsInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipEventsInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipEventsInfo)));
        }

        /// <summary>
        /// Update Event Updates the specified calendar event.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">Internal identifier of an event</param>
        /// <param name="glipEventCreate"></param>
        /// <returns>GlipEventInfo</returns>
        public GlipEventInfo UpdateEvent (string eventId, GlipEventCreate glipEventCreate)
        {
             ApiResponse<GlipEventInfo> localVarResponse = UpdateEventWithHttpInfo(eventId, glipEventCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Event Updates the specified calendar event.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">Internal identifier of an event</param>
        /// <param name="glipEventCreate"></param>
        /// <returns>ApiResponse of GlipEventInfo</returns>
        public ApiResponse<GlipEventInfo> UpdateEventWithHttpInfo (string eventId, GlipEventCreate glipEventCreate)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling CalendarEventsApi->UpdateEvent");
            // verify the required parameter 'glipEventCreate' is set
            if (glipEventCreate == null)
                throw new ApiException(400, "Missing required parameter 'glipEventCreate' when calling CalendarEventsApi->UpdateEvent");

            var localVarPath = "/restapi/v1.0/glip/events/{eventId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventId != null) localVarPathParams.Add("eventId", this.Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (glipEventCreate != null && glipEventCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipEventCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipEventCreate; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipEventInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipEventInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipEventInfo)));
        }

        /// <summary>
        /// Update Event Updates the specified calendar event.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">Internal identifier of an event</param>
        /// <param name="glipEventCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipEventInfo</returns>
        public async System.Threading.Tasks.Task<GlipEventInfo> UpdateEventAsync (string eventId, GlipEventCreate glipEventCreate, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipEventInfo> localVarResponse = await UpdateEventWithHttpInfoAsync(eventId, glipEventCreate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Event Updates the specified calendar event.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">Internal identifier of an event</param>
        /// <param name="glipEventCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipEventInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlipEventInfo>> UpdateEventWithHttpInfoAsync (string eventId, GlipEventCreate glipEventCreate, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling CalendarEventsApi->UpdateEvent");
            // verify the required parameter 'glipEventCreate' is set
            if (glipEventCreate == null)
                throw new ApiException(400, "Missing required parameter 'glipEventCreate' when calling CalendarEventsApi->UpdateEvent");

            var localVarPath = "/restapi/v1.0/glip/events/{eventId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventId != null) localVarPathParams.Add("eventId", this.Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (glipEventCreate != null && glipEventCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipEventCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipEventCreate; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipEventInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipEventInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipEventInfo)));
        }

    }
}
