/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Subscription
        /// </summary>
        /// <remarks>
        /// Creates a new subscription for the current authorized user / client application.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequest">JSON body</param>
        /// <returns>SubscriptionInfo</returns>
        SubscriptionInfo CreateSubscription (CreateSubscriptionRequest createSubscriptionRequest);

        /// <summary>
        /// Create Subscription
        /// </summary>
        /// <remarks>
        /// Creates a new subscription for the current authorized user / client application.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequest">JSON body</param>
        /// <returns>ApiResponse of SubscriptionInfo</returns>
        ApiResponse<SubscriptionInfo> CreateSubscriptionWithHttpInfo (CreateSubscriptionRequest createSubscriptionRequest);
        /// <summary>
        /// Cancel Subscription
        /// </summary>
        /// <remarks>
        /// Cancels the existing subscription.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Internal identifier of a subscription</param>
        /// <returns></returns>
        void DeleteSubscription (string subscriptionId);

        /// <summary>
        /// Cancel Subscription
        /// </summary>
        /// <remarks>
        /// Cancels the existing subscription.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Internal identifier of a subscription</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSubscriptionWithHttpInfo (string subscriptionId);
        /// <summary>
        /// Get Subscription List
        /// </summary>
        /// <remarks>
        /// Returns a list of subscriptions created by the user for the current authorized client application. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SubscriptionListResource</returns>
        SubscriptionListResource ListSubscriptions ();

        /// <summary>
        /// Get Subscription List
        /// </summary>
        /// <remarks>
        /// Returns a list of subscriptions created by the user for the current authorized client application. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SubscriptionListResource</returns>
        ApiResponse<SubscriptionListResource> ListSubscriptionsWithHttpInfo ();
        /// <summary>
        /// Get Subscription
        /// </summary>
        /// <remarks>
        /// Returns the existing subscription by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Internal identifier of a subscription</param>
        /// <returns>SubscriptionInfo</returns>
        SubscriptionInfo ReadSubscription (string subscriptionId);

        /// <summary>
        /// Get Subscription
        /// </summary>
        /// <remarks>
        /// Returns the existing subscription by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Internal identifier of a subscription</param>
        /// <returns>ApiResponse of SubscriptionInfo</returns>
        ApiResponse<SubscriptionInfo> ReadSubscriptionWithHttpInfo (string subscriptionId);
        /// <summary>
        /// Renew Subscription
        /// </summary>
        /// <remarks>
        /// Renews the existing subscription (this request comes with empty body).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Internal identifier of a subscription</param>
        /// <returns>SubscriptionInfo</returns>
        SubscriptionInfo RenewSubscription (string subscriptionId);

        /// <summary>
        /// Renew Subscription
        /// </summary>
        /// <remarks>
        /// Renews the existing subscription (this request comes with empty body).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Internal identifier of a subscription</param>
        /// <returns>ApiResponse of SubscriptionInfo</returns>
        ApiResponse<SubscriptionInfo> RenewSubscriptionWithHttpInfo (string subscriptionId);
        /// <summary>
        /// Update Subscription
        /// </summary>
        /// <remarks>
        /// Updates the existing subscription. The client application can extend/narrow the list of events for which it receives notifications within this subscription. If event filters are specified, calling this method modifies them for the existing subscription. The method also allows to set the subscription expiration time. If other than `events` and `expiresIn` parameters are passed in the request they will be ignored. If the request body is empty then the specified subscription will be just renewed without any event filter modifications and with default expiration time. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Internal identifier of a subscription</param>
        /// <param name="updateSubscriptionRequest">JSON body</param>
        /// <returns>SubscriptionInfo</returns>
        SubscriptionInfo UpdateSubscription (string subscriptionId, UpdateSubscriptionRequest updateSubscriptionRequest);

        /// <summary>
        /// Update Subscription
        /// </summary>
        /// <remarks>
        /// Updates the existing subscription. The client application can extend/narrow the list of events for which it receives notifications within this subscription. If event filters are specified, calling this method modifies them for the existing subscription. The method also allows to set the subscription expiration time. If other than `events` and `expiresIn` parameters are passed in the request they will be ignored. If the request body is empty then the specified subscription will be just renewed without any event filter modifications and with default expiration time. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Internal identifier of a subscription</param>
        /// <param name="updateSubscriptionRequest">JSON body</param>
        /// <returns>ApiResponse of SubscriptionInfo</returns>
        ApiResponse<SubscriptionInfo> UpdateSubscriptionWithHttpInfo (string subscriptionId, UpdateSubscriptionRequest updateSubscriptionRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create Subscription
        /// </summary>
        /// <remarks>
        /// Creates a new subscription for the current authorized user / client application.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SubscriptionInfo</returns>
        System.Threading.Tasks.Task<SubscriptionInfo> CreateSubscriptionAsync (CreateSubscriptionRequest createSubscriptionRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Subscription
        /// </summary>
        /// <remarks>
        /// Creates a new subscription for the current authorized user / client application.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SubscriptionInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionInfo>> CreateSubscriptionWithHttpInfoAsync (CreateSubscriptionRequest createSubscriptionRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Cancel Subscription
        /// </summary>
        /// <remarks>
        /// Cancels the existing subscription.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Internal identifier of a subscription</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSubscriptionAsync (string subscriptionId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancel Subscription
        /// </summary>
        /// <remarks>
        /// Cancels the existing subscription.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Internal identifier of a subscription</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSubscriptionWithHttpInfoAsync (string subscriptionId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Subscription List
        /// </summary>
        /// <remarks>
        /// Returns a list of subscriptions created by the user for the current authorized client application. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SubscriptionListResource</returns>
        System.Threading.Tasks.Task<SubscriptionListResource> ListSubscriptionsAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Subscription List
        /// </summary>
        /// <remarks>
        /// Returns a list of subscriptions created by the user for the current authorized client application. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SubscriptionListResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionListResource>> ListSubscriptionsWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Subscription
        /// </summary>
        /// <remarks>
        /// Returns the existing subscription by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Internal identifier of a subscription</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SubscriptionInfo</returns>
        System.Threading.Tasks.Task<SubscriptionInfo> ReadSubscriptionAsync (string subscriptionId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Subscription
        /// </summary>
        /// <remarks>
        /// Returns the existing subscription by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Internal identifier of a subscription</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SubscriptionInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionInfo>> ReadSubscriptionWithHttpInfoAsync (string subscriptionId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Renew Subscription
        /// </summary>
        /// <remarks>
        /// Renews the existing subscription (this request comes with empty body).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Internal identifier of a subscription</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SubscriptionInfo</returns>
        System.Threading.Tasks.Task<SubscriptionInfo> RenewSubscriptionAsync (string subscriptionId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Renew Subscription
        /// </summary>
        /// <remarks>
        /// Renews the existing subscription (this request comes with empty body).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Internal identifier of a subscription</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SubscriptionInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionInfo>> RenewSubscriptionWithHttpInfoAsync (string subscriptionId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Subscription
        /// </summary>
        /// <remarks>
        /// Updates the existing subscription. The client application can extend/narrow the list of events for which it receives notifications within this subscription. If event filters are specified, calling this method modifies them for the existing subscription. The method also allows to set the subscription expiration time. If other than `events` and `expiresIn` parameters are passed in the request they will be ignored. If the request body is empty then the specified subscription will be just renewed without any event filter modifications and with default expiration time. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Internal identifier of a subscription</param>
        /// <param name="updateSubscriptionRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SubscriptionInfo</returns>
        System.Threading.Tasks.Task<SubscriptionInfo> UpdateSubscriptionAsync (string subscriptionId, UpdateSubscriptionRequest updateSubscriptionRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Subscription
        /// </summary>
        /// <remarks>
        /// Updates the existing subscription. The client application can extend/narrow the list of events for which it receives notifications within this subscription. If event filters are specified, calling this method modifies them for the existing subscription. The method also allows to set the subscription expiration time. If other than `events` and `expiresIn` parameters are passed in the request they will be ignored. If the request body is empty then the specified subscription will be just renewed without any event filter modifications and with default expiration time. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Internal identifier of a subscription</param>
        /// <param name="updateSubscriptionRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SubscriptionInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionInfo>> UpdateSubscriptionWithHttpInfoAsync (string subscriptionId, UpdateSubscriptionRequest updateSubscriptionRequest, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SubscriptionsApi : ISubscriptionsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubscriptionsApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class
        /// </summary>
        /// <returns></returns>
        public SubscriptionsApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SubscriptionsApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create Subscription Creates a new subscription for the current authorized user / client application.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequest">JSON body</param>
        /// <returns>SubscriptionInfo</returns>
        public SubscriptionInfo CreateSubscription (CreateSubscriptionRequest createSubscriptionRequest)
        {
             ApiResponse<SubscriptionInfo> localVarResponse = CreateSubscriptionWithHttpInfo(createSubscriptionRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Subscription Creates a new subscription for the current authorized user / client application.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequest">JSON body</param>
        /// <returns>ApiResponse of SubscriptionInfo</returns>
        public ApiResponse<SubscriptionInfo> CreateSubscriptionWithHttpInfo (CreateSubscriptionRequest createSubscriptionRequest)
        {
            // verify the required parameter 'createSubscriptionRequest' is set
            if (createSubscriptionRequest == null)
                throw new ApiException(400, "Missing required parameter 'createSubscriptionRequest' when calling SubscriptionsApi->CreateSubscription");

            var localVarPath = "/restapi/v1.0/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createSubscriptionRequest != null && createSubscriptionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createSubscriptionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createSubscriptionRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubscriptionInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionInfo)));
        }

        /// <summary>
        /// Create Subscription Creates a new subscription for the current authorized user / client application.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SubscriptionInfo</returns>
        public async System.Threading.Tasks.Task<SubscriptionInfo> CreateSubscriptionAsync (CreateSubscriptionRequest createSubscriptionRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SubscriptionInfo> localVarResponse = await CreateSubscriptionWithHttpInfoAsync(createSubscriptionRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Subscription Creates a new subscription for the current authorized user / client application.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SubscriptionInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubscriptionInfo>> CreateSubscriptionWithHttpInfoAsync (CreateSubscriptionRequest createSubscriptionRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'createSubscriptionRequest' is set
            if (createSubscriptionRequest == null)
                throw new ApiException(400, "Missing required parameter 'createSubscriptionRequest' when calling SubscriptionsApi->CreateSubscription");

            var localVarPath = "/restapi/v1.0/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createSubscriptionRequest != null && createSubscriptionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createSubscriptionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createSubscriptionRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubscriptionInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionInfo)));
        }

        /// <summary>
        /// Cancel Subscription Cancels the existing subscription.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Internal identifier of a subscription</param>
        /// <returns></returns>
        public void DeleteSubscription (string subscriptionId)
        {
             DeleteSubscriptionWithHttpInfo(subscriptionId);
        }

        /// <summary>
        /// Cancel Subscription Cancels the existing subscription.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Internal identifier of a subscription</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSubscriptionWithHttpInfo (string subscriptionId)
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling SubscriptionsApi->DeleteSubscription");

            var localVarPath = "/restapi/v1.0/subscription/{subscriptionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscriptionId != null) localVarPathParams.Add("subscriptionId", this.Configuration.ApiClient.ParameterToString(subscriptionId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Cancel Subscription Cancels the existing subscription.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Internal identifier of a subscription</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSubscriptionAsync (string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteSubscriptionWithHttpInfoAsync(subscriptionId, cancellationToken);

        }

        /// <summary>
        /// Cancel Subscription Cancels the existing subscription.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Internal identifier of a subscription</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSubscriptionWithHttpInfoAsync (string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling SubscriptionsApi->DeleteSubscription");

            var localVarPath = "/restapi/v1.0/subscription/{subscriptionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscriptionId != null) localVarPathParams.Add("subscriptionId", this.Configuration.ApiClient.ParameterToString(subscriptionId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get Subscription List Returns a list of subscriptions created by the user for the current authorized client application. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SubscriptionListResource</returns>
        public SubscriptionListResource ListSubscriptions ()
        {
             ApiResponse<SubscriptionListResource> localVarResponse = ListSubscriptionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Subscription List Returns a list of subscriptions created by the user for the current authorized client application. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SubscriptionListResource</returns>
        public ApiResponse<SubscriptionListResource> ListSubscriptionsWithHttpInfo ()
        {

            var localVarPath = "/restapi/v1.0/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSubscriptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionListResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubscriptionListResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionListResource)));
        }

        /// <summary>
        /// Get Subscription List Returns a list of subscriptions created by the user for the current authorized client application. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SubscriptionListResource</returns>
        public async System.Threading.Tasks.Task<SubscriptionListResource> ListSubscriptionsAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SubscriptionListResource> localVarResponse = await ListSubscriptionsWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Subscription List Returns a list of subscriptions created by the user for the current authorized client application. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SubscriptionListResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubscriptionListResource>> ListSubscriptionsWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/restapi/v1.0/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSubscriptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionListResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubscriptionListResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionListResource)));
        }

        /// <summary>
        /// Get Subscription Returns the existing subscription by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Internal identifier of a subscription</param>
        /// <returns>SubscriptionInfo</returns>
        public SubscriptionInfo ReadSubscription (string subscriptionId)
        {
             ApiResponse<SubscriptionInfo> localVarResponse = ReadSubscriptionWithHttpInfo(subscriptionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Subscription Returns the existing subscription by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Internal identifier of a subscription</param>
        /// <returns>ApiResponse of SubscriptionInfo</returns>
        public ApiResponse<SubscriptionInfo> ReadSubscriptionWithHttpInfo (string subscriptionId)
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling SubscriptionsApi->ReadSubscription");

            var localVarPath = "/restapi/v1.0/subscription/{subscriptionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscriptionId != null) localVarPathParams.Add("subscriptionId", this.Configuration.ApiClient.ParameterToString(subscriptionId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubscriptionInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionInfo)));
        }

        /// <summary>
        /// Get Subscription Returns the existing subscription by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Internal identifier of a subscription</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SubscriptionInfo</returns>
        public async System.Threading.Tasks.Task<SubscriptionInfo> ReadSubscriptionAsync (string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SubscriptionInfo> localVarResponse = await ReadSubscriptionWithHttpInfoAsync(subscriptionId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Subscription Returns the existing subscription by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Internal identifier of a subscription</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SubscriptionInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubscriptionInfo>> ReadSubscriptionWithHttpInfoAsync (string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling SubscriptionsApi->ReadSubscription");

            var localVarPath = "/restapi/v1.0/subscription/{subscriptionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscriptionId != null) localVarPathParams.Add("subscriptionId", this.Configuration.ApiClient.ParameterToString(subscriptionId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubscriptionInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionInfo)));
        }

        /// <summary>
        /// Renew Subscription Renews the existing subscription (this request comes with empty body).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Internal identifier of a subscription</param>
        /// <returns>SubscriptionInfo</returns>
        public SubscriptionInfo RenewSubscription (string subscriptionId)
        {
             ApiResponse<SubscriptionInfo> localVarResponse = RenewSubscriptionWithHttpInfo(subscriptionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Renew Subscription Renews the existing subscription (this request comes with empty body).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Internal identifier of a subscription</param>
        /// <returns>ApiResponse of SubscriptionInfo</returns>
        public ApiResponse<SubscriptionInfo> RenewSubscriptionWithHttpInfo (string subscriptionId)
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling SubscriptionsApi->RenewSubscription");

            var localVarPath = "/restapi/v1.0/subscription/{subscriptionId}/renew";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscriptionId != null) localVarPathParams.Add("subscriptionId", this.Configuration.ApiClient.ParameterToString(subscriptionId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RenewSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubscriptionInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionInfo)));
        }

        /// <summary>
        /// Renew Subscription Renews the existing subscription (this request comes with empty body).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Internal identifier of a subscription</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SubscriptionInfo</returns>
        public async System.Threading.Tasks.Task<SubscriptionInfo> RenewSubscriptionAsync (string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SubscriptionInfo> localVarResponse = await RenewSubscriptionWithHttpInfoAsync(subscriptionId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Renew Subscription Renews the existing subscription (this request comes with empty body).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Internal identifier of a subscription</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SubscriptionInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubscriptionInfo>> RenewSubscriptionWithHttpInfoAsync (string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling SubscriptionsApi->RenewSubscription");

            var localVarPath = "/restapi/v1.0/subscription/{subscriptionId}/renew";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscriptionId != null) localVarPathParams.Add("subscriptionId", this.Configuration.ApiClient.ParameterToString(subscriptionId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RenewSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubscriptionInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionInfo)));
        }

        /// <summary>
        /// Update Subscription Updates the existing subscription. The client application can extend/narrow the list of events for which it receives notifications within this subscription. If event filters are specified, calling this method modifies them for the existing subscription. The method also allows to set the subscription expiration time. If other than `events` and `expiresIn` parameters are passed in the request they will be ignored. If the request body is empty then the specified subscription will be just renewed without any event filter modifications and with default expiration time. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Internal identifier of a subscription</param>
        /// <param name="updateSubscriptionRequest">JSON body</param>
        /// <returns>SubscriptionInfo</returns>
        public SubscriptionInfo UpdateSubscription (string subscriptionId, UpdateSubscriptionRequest updateSubscriptionRequest)
        {
             ApiResponse<SubscriptionInfo> localVarResponse = UpdateSubscriptionWithHttpInfo(subscriptionId, updateSubscriptionRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Subscription Updates the existing subscription. The client application can extend/narrow the list of events for which it receives notifications within this subscription. If event filters are specified, calling this method modifies them for the existing subscription. The method also allows to set the subscription expiration time. If other than `events` and `expiresIn` parameters are passed in the request they will be ignored. If the request body is empty then the specified subscription will be just renewed without any event filter modifications and with default expiration time. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Internal identifier of a subscription</param>
        /// <param name="updateSubscriptionRequest">JSON body</param>
        /// <returns>ApiResponse of SubscriptionInfo</returns>
        public ApiResponse<SubscriptionInfo> UpdateSubscriptionWithHttpInfo (string subscriptionId, UpdateSubscriptionRequest updateSubscriptionRequest)
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling SubscriptionsApi->UpdateSubscription");
            // verify the required parameter 'updateSubscriptionRequest' is set
            if (updateSubscriptionRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateSubscriptionRequest' when calling SubscriptionsApi->UpdateSubscription");

            var localVarPath = "/restapi/v1.0/subscription/{subscriptionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscriptionId != null) localVarPathParams.Add("subscriptionId", this.Configuration.ApiClient.ParameterToString(subscriptionId)); // path parameter
            if (updateSubscriptionRequest != null && updateSubscriptionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateSubscriptionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateSubscriptionRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubscriptionInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionInfo)));
        }

        /// <summary>
        /// Update Subscription Updates the existing subscription. The client application can extend/narrow the list of events for which it receives notifications within this subscription. If event filters are specified, calling this method modifies them for the existing subscription. The method also allows to set the subscription expiration time. If other than `events` and `expiresIn` parameters are passed in the request they will be ignored. If the request body is empty then the specified subscription will be just renewed without any event filter modifications and with default expiration time. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Internal identifier of a subscription</param>
        /// <param name="updateSubscriptionRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SubscriptionInfo</returns>
        public async System.Threading.Tasks.Task<SubscriptionInfo> UpdateSubscriptionAsync (string subscriptionId, UpdateSubscriptionRequest updateSubscriptionRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SubscriptionInfo> localVarResponse = await UpdateSubscriptionWithHttpInfoAsync(subscriptionId, updateSubscriptionRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Subscription Updates the existing subscription. The client application can extend/narrow the list of events for which it receives notifications within this subscription. If event filters are specified, calling this method modifies them for the existing subscription. The method also allows to set the subscription expiration time. If other than `events` and `expiresIn` parameters are passed in the request they will be ignored. If the request body is empty then the specified subscription will be just renewed without any event filter modifications and with default expiration time. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Internal identifier of a subscription</param>
        /// <param name="updateSubscriptionRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SubscriptionInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubscriptionInfo>> UpdateSubscriptionWithHttpInfoAsync (string subscriptionId, UpdateSubscriptionRequest updateSubscriptionRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling SubscriptionsApi->UpdateSubscription");
            // verify the required parameter 'updateSubscriptionRequest' is set
            if (updateSubscriptionRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateSubscriptionRequest' when calling SubscriptionsApi->UpdateSubscription");

            var localVarPath = "/restapi/v1.0/subscription/{subscriptionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscriptionId != null) localVarPathParams.Add("subscriptionId", this.Configuration.ApiClient.ParameterToString(subscriptionId)); // path parameter
            if (updateSubscriptionRequest != null && updateSubscriptionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateSubscriptionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateSubscriptionRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubscriptionInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionInfo)));
        }

    }
}
