/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPostsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Card
        /// </summary>
        /// <remarks>
        /// Creates a new message.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipMessageAttachmentInfoRequest"></param>
        /// <param name="groupId">Internal identifier of a group where to create a post with the card (optional)</param>
        /// <returns>GlipMessageAttachmentInfo</returns>
        [Obsolete]
        GlipMessageAttachmentInfo CreateGlipCard (GlipMessageAttachmentInfoRequest glipMessageAttachmentInfoRequest, long? groupId = default(long?));

        /// <summary>
        /// Create Card
        /// </summary>
        /// <remarks>
        /// Creates a new message.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipMessageAttachmentInfoRequest"></param>
        /// <param name="groupId">Internal identifier of a group where to create a post with the card (optional)</param>
        /// <returns>ApiResponse of GlipMessageAttachmentInfo</returns>
        [Obsolete]
        ApiResponse<GlipMessageAttachmentInfo> CreateGlipCardWithHttpInfo (GlipMessageAttachmentInfoRequest glipMessageAttachmentInfoRequest, long? groupId = default(long?));
        /// <summary>
        /// Upload File
        /// </summary>
        /// <remarks>
        /// Posts a file.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The file (binary or multipart/form-data) to upload</param>
        /// <param name="groupId">Internal identifier of a group to which the post with attachment will be added to (optional)</param>
        /// <param name="name">Name of a file attached (optional)</param>
        /// <returns>PostGlipFile</returns>
        PostGlipFile CreateGlipFile (System.IO.Stream body, long? groupId = default(long?), string name = default(string));

        /// <summary>
        /// Upload File
        /// </summary>
        /// <remarks>
        /// Posts a file.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The file (binary or multipart/form-data) to upload</param>
        /// <param name="groupId">Internal identifier of a group to which the post with attachment will be added to (optional)</param>
        /// <param name="name">Name of a file attached (optional)</param>
        /// <returns>ApiResponse of PostGlipFile</returns>
        ApiResponse<PostGlipFile> CreateGlipFileWithHttpInfo (System.IO.Stream body, long? groupId = default(long?), string name = default(string));
        /// <summary>
        /// Create Post in Group
        /// </summary>
        /// <remarks>
        /// Creates a new post in a group specified.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group.</param>
        /// <param name="glipCreatePost"></param>
        /// <returns>GlipPostInfo</returns>
        [Obsolete]
        GlipPostInfo CreateGlipGroupPost (string groupId, GlipCreatePost glipCreatePost);

        /// <summary>
        /// Create Post in Group
        /// </summary>
        /// <remarks>
        /// Creates a new post in a group specified.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group.</param>
        /// <param name="glipCreatePost"></param>
        /// <returns>ApiResponse of GlipPostInfo</returns>
        [Obsolete]
        ApiResponse<GlipPostInfo> CreateGlipGroupPostWithHttpInfo (string groupId, GlipCreatePost glipCreatePost);
        /// <summary>
        /// Create Post
        /// </summary>
        /// <remarks>
        /// Creates a post in the chat specified in path. Any mention can be added within the `text` attribute of the request body in .md format - `![:Type](id)`, where `type` is one of (Person, Team, File, Note, Task, Event, Link, Card) and `id` is a unique identifier of the mentioned object of the specified type. Attachments of the following types (File, Card, Event, Note) can also be added to a post by passing type and ID of attachment(s) in request body.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat.</param>
        /// <param name="glipPostPostBody">JSON body</param>
        /// <returns>GlipPostInfo</returns>
        GlipPostInfo CreateGlipPost (string chatId, GlipPostPostBody glipPostPostBody);

        /// <summary>
        /// Create Post
        /// </summary>
        /// <remarks>
        /// Creates a post in the chat specified in path. Any mention can be added within the `text` attribute of the request body in .md format - `![:Type](id)`, where `type` is one of (Person, Team, File, Note, Task, Event, Link, Card) and `id` is a unique identifier of the mentioned object of the specified type. Attachments of the following types (File, Card, Event, Note) can also be added to a post by passing type and ID of attachment(s) in request body.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat.</param>
        /// <param name="glipPostPostBody">JSON body</param>
        /// <returns>ApiResponse of GlipPostInfo</returns>
        ApiResponse<GlipPostInfo> CreateGlipPostWithHttpInfo (string chatId, GlipPostPostBody glipPostPostBody);
        /// <summary>
        /// Create Post
        /// </summary>
        /// <remarks>
        /// Creates a post.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipCreatePost">JSON body</param>
        /// <returns>GlipPostInfo</returns>
        [Obsolete]
        GlipPostInfo CreatePost (GlipCreatePost glipCreatePost);

        /// <summary>
        /// Create Post
        /// </summary>
        /// <remarks>
        /// Creates a post.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipCreatePost">JSON body</param>
        /// <returns>ApiResponse of GlipPostInfo</returns>
        [Obsolete]
        ApiResponse<GlipPostInfo> CreatePostWithHttpInfo (GlipCreatePost glipCreatePost);
        /// <summary>
        /// Delete Card
        /// </summary>
        /// <remarks>
        /// Deletes a card by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Card ID to be deleted.</param>
        /// <returns></returns>
        [Obsolete]
        void DeleteGlipCard (string cardId);

        /// <summary>
        /// Delete Card
        /// </summary>
        /// <remarks>
        /// Deletes a card by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Card ID to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        ApiResponse<Object> DeleteGlipCardWithHttpInfo (string cardId);
        /// <summary>
        /// Delete Post
        /// </summary>
        /// <remarks>
        /// Deletes the specified post from the chat.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat.</param>
        /// <param name="postId">Internal identifier of a post to be deleted.</param>
        /// <returns></returns>
        void DeleteGlipPost (string chatId, string postId);

        /// <summary>
        /// Delete Post
        /// </summary>
        /// <remarks>
        /// Deletes the specified post from the chat.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat.</param>
        /// <param name="postId">Internal identifier of a post to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGlipPostWithHttpInfo (string chatId, string postId);
        /// <summary>
        /// Get Group Posts
        /// </summary>
        /// <remarks>
        /// Returns posts which are available for the current user by group ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="recordCount">Max number of records to be returned (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token (optional)</param>
        /// <returns>GlipPosts</returns>
        [Obsolete]
        GlipPosts ListGlipGroupPosts (string groupId, int? recordCount = default(int?), string pageToken = default(string));

        /// <summary>
        /// Get Group Posts
        /// </summary>
        /// <remarks>
        /// Returns posts which are available for the current user by group ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="recordCount">Max number of records to be returned (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token (optional)</param>
        /// <returns>ApiResponse of GlipPosts</returns>
        [Obsolete]
        ApiResponse<GlipPosts> ListGlipGroupPostsWithHttpInfo (string groupId, int? recordCount = default(int?), string pageToken = default(string));
        /// <summary>
        /// Get Posts
        /// </summary>
        /// <remarks>
        /// Returns posts available for the current user by group ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Identifier of a group to filter posts (optional)</param>
        /// <param name="pageToken">Token of a page to be returned (optional)</param>
        /// <param name="recordCount">Number of records to be returned. The maximum value is 250, by default - 30 (optional, default to 30)</param>
        /// <returns>GlipPosts</returns>
        [Obsolete]
        GlipPosts ListGlipPosts (string groupId = default(string), string pageToken = default(string), long? recordCount = default(long?));

        /// <summary>
        /// Get Posts
        /// </summary>
        /// <remarks>
        /// Returns posts available for the current user by group ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Identifier of a group to filter posts (optional)</param>
        /// <param name="pageToken">Token of a page to be returned (optional)</param>
        /// <param name="recordCount">Number of records to be returned. The maximum value is 250, by default - 30 (optional, default to 30)</param>
        /// <returns>ApiResponse of GlipPosts</returns>
        [Obsolete]
        ApiResponse<GlipPosts> ListGlipPostsWithHttpInfo (string groupId = default(string), string pageToken = default(string), long? recordCount = default(long?));
        /// <summary>
        /// Update Post
        /// </summary>
        /// <remarks>
        /// Updates a specific post within a chat.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat.</param>
        /// <param name="postId">Internal identifier of a post to be updated.</param>
        /// <param name="glipPatchPostBody">JSON body</param>
        /// <returns>GlipPostInfo</returns>
        GlipPostInfo PatchGlipPost (string chatId, string postId, GlipPatchPostBody glipPatchPostBody);

        /// <summary>
        /// Update Post
        /// </summary>
        /// <remarks>
        /// Updates a specific post within a chat.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat.</param>
        /// <param name="postId">Internal identifier of a post to be updated.</param>
        /// <param name="glipPatchPostBody">JSON body</param>
        /// <returns>ApiResponse of GlipPostInfo</returns>
        ApiResponse<GlipPostInfo> PatchGlipPostWithHttpInfo (string chatId, string postId, GlipPatchPostBody glipPatchPostBody);
        /// <summary>
        /// Get Card
        /// </summary>
        /// <remarks>
        /// Returns card(s) with given id(s).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Internal identifier of a card or comma separated list of card IDs.</param>
        /// <returns>GlipMessageAttachmentInfo</returns>
        [Obsolete]
        GlipMessageAttachmentInfo ReadGlipCard (List<string> cardId);

        /// <summary>
        /// Get Card
        /// </summary>
        /// <remarks>
        /// Returns card(s) with given id(s).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Internal identifier of a card or comma separated list of card IDs.</param>
        /// <returns>ApiResponse of GlipMessageAttachmentInfo</returns>
        [Obsolete]
        ApiResponse<GlipMessageAttachmentInfo> ReadGlipCardWithHttpInfo (List<string> cardId);
        /// <summary>
        /// Get Post
        /// </summary>
        /// <remarks>
        /// Returns information about the specified post.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat.</param>
        /// <param name="postId">Internal identifier of a post.</param>
        /// <returns>GlipPostInfo</returns>
        GlipPostInfo ReadGlipPost (string chatId, string postId);

        /// <summary>
        /// Get Post
        /// </summary>
        /// <remarks>
        /// Returns information about the specified post.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat.</param>
        /// <param name="postId">Internal identifier of a post.</param>
        /// <returns>ApiResponse of GlipPostInfo</returns>
        ApiResponse<GlipPostInfo> ReadGlipPostWithHttpInfo (string chatId, string postId);
        /// <summary>
        /// Get Posts
        /// </summary>
        /// <remarks>
        /// Returns a list of posts from the specified chat.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat</param>
        /// <param name="recordCount">Max number of posts to be fetched by one request (not more than 250) (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <returns>GlipPostsList</returns>
        GlipPostsList ReadGlipPosts (string chatId, int? recordCount = default(int?), string pageToken = default(string));

        /// <summary>
        /// Get Posts
        /// </summary>
        /// <remarks>
        /// Returns a list of posts from the specified chat.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat</param>
        /// <param name="recordCount">Max number of posts to be fetched by one request (not more than 250) (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <returns>ApiResponse of GlipPostsList</returns>
        ApiResponse<GlipPostsList> ReadGlipPostsWithHttpInfo (string chatId, int? recordCount = default(int?), string pageToken = default(string));
        /// <summary>
        /// Update Card
        /// </summary>
        /// <remarks>
        /// Updates a card.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Internal identifier of a card</param>
        /// <param name="glipMessageAttachmentInfoRequest"></param>
        /// <returns></returns>
        [Obsolete]
        void UpdateGlipCard (string cardId, GlipMessageAttachmentInfoRequest glipMessageAttachmentInfoRequest);

        /// <summary>
        /// Update Card
        /// </summary>
        /// <remarks>
        /// Updates a card.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Internal identifier of a card</param>
        /// <param name="glipMessageAttachmentInfoRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        ApiResponse<Object> UpdateGlipCardWithHttpInfo (string cardId, GlipMessageAttachmentInfoRequest glipMessageAttachmentInfoRequest);
        /// <summary>
        /// Update Post
        /// </summary>
        /// <remarks>
        /// Modifies text of a post.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="postId">Internal identifier of a post</param>
        /// <param name="body"></param>
        /// <returns>string</returns>
        [Obsolete]
        string UpdateGlipPostText (string groupId, string postId, string body);

        /// <summary>
        /// Update Post
        /// </summary>
        /// <remarks>
        /// Modifies text of a post.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="postId">Internal identifier of a post</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of string</returns>
        [Obsolete]
        ApiResponse<string> UpdateGlipPostTextWithHttpInfo (string groupId, string postId, string body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create Card
        /// </summary>
        /// <remarks>
        /// Creates a new message.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipMessageAttachmentInfoRequest"></param>
        /// <param name="groupId">Internal identifier of a group where to create a post with the card (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipMessageAttachmentInfo</returns>
        [Obsolete]
        System.Threading.Tasks.Task<GlipMessageAttachmentInfo> CreateGlipCardAsync (GlipMessageAttachmentInfoRequest glipMessageAttachmentInfoRequest, long? groupId = default(long?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Card
        /// </summary>
        /// <remarks>
        /// Creates a new message.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipMessageAttachmentInfoRequest"></param>
        /// <param name="groupId">Internal identifier of a group where to create a post with the card (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipMessageAttachmentInfo)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<GlipMessageAttachmentInfo>> CreateGlipCardWithHttpInfoAsync (GlipMessageAttachmentInfoRequest glipMessageAttachmentInfoRequest, long? groupId = default(long?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Upload File
        /// </summary>
        /// <remarks>
        /// Posts a file.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The file (binary or multipart/form-data) to upload</param>
        /// <param name="groupId">Internal identifier of a group to which the post with attachment will be added to (optional)</param>
        /// <param name="name">Name of a file attached (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PostGlipFile</returns>
        System.Threading.Tasks.Task<PostGlipFile> CreateGlipFileAsync (System.IO.Stream body, long? groupId = default(long?), string name = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Upload File
        /// </summary>
        /// <remarks>
        /// Posts a file.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The file (binary or multipart/form-data) to upload</param>
        /// <param name="groupId">Internal identifier of a group to which the post with attachment will be added to (optional)</param>
        /// <param name="name">Name of a file attached (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PostGlipFile)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostGlipFile>> CreateGlipFileWithHttpInfoAsync (System.IO.Stream body, long? groupId = default(long?), string name = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create Post in Group
        /// </summary>
        /// <remarks>
        /// Creates a new post in a group specified.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group.</param>
        /// <param name="glipCreatePost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipPostInfo</returns>
        [Obsolete]
        System.Threading.Tasks.Task<GlipPostInfo> CreateGlipGroupPostAsync (string groupId, GlipCreatePost glipCreatePost, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Post in Group
        /// </summary>
        /// <remarks>
        /// Creates a new post in a group specified.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group.</param>
        /// <param name="glipCreatePost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipPostInfo)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<GlipPostInfo>> CreateGlipGroupPostWithHttpInfoAsync (string groupId, GlipCreatePost glipCreatePost, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create Post
        /// </summary>
        /// <remarks>
        /// Creates a post in the chat specified in path. Any mention can be added within the `text` attribute of the request body in .md format - `![:Type](id)`, where `type` is one of (Person, Team, File, Note, Task, Event, Link, Card) and `id` is a unique identifier of the mentioned object of the specified type. Attachments of the following types (File, Card, Event, Note) can also be added to a post by passing type and ID of attachment(s) in request body.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat.</param>
        /// <param name="glipPostPostBody">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipPostInfo</returns>
        System.Threading.Tasks.Task<GlipPostInfo> CreateGlipPostAsync (string chatId, GlipPostPostBody glipPostPostBody, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Post
        /// </summary>
        /// <remarks>
        /// Creates a post in the chat specified in path. Any mention can be added within the `text` attribute of the request body in .md format - `![:Type](id)`, where `type` is one of (Person, Team, File, Note, Task, Event, Link, Card) and `id` is a unique identifier of the mentioned object of the specified type. Attachments of the following types (File, Card, Event, Note) can also be added to a post by passing type and ID of attachment(s) in request body.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat.</param>
        /// <param name="glipPostPostBody">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipPostInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlipPostInfo>> CreateGlipPostWithHttpInfoAsync (string chatId, GlipPostPostBody glipPostPostBody, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create Post
        /// </summary>
        /// <remarks>
        /// Creates a post.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipCreatePost">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipPostInfo</returns>
        [Obsolete]
        System.Threading.Tasks.Task<GlipPostInfo> CreatePostAsync (GlipCreatePost glipCreatePost, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Post
        /// </summary>
        /// <remarks>
        /// Creates a post.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipCreatePost">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipPostInfo)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<GlipPostInfo>> CreatePostWithHttpInfoAsync (GlipCreatePost glipCreatePost, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete Card
        /// </summary>
        /// <remarks>
        /// Deletes a card by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Card ID to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        [Obsolete]
        System.Threading.Tasks.Task DeleteGlipCardAsync (string cardId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Card
        /// </summary>
        /// <remarks>
        /// Deletes a card by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Card ID to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGlipCardWithHttpInfoAsync (string cardId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete Post
        /// </summary>
        /// <remarks>
        /// Deletes the specified post from the chat.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat.</param>
        /// <param name="postId">Internal identifier of a post to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteGlipPostAsync (string chatId, string postId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Post
        /// </summary>
        /// <remarks>
        /// Deletes the specified post from the chat.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat.</param>
        /// <param name="postId">Internal identifier of a post to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGlipPostWithHttpInfoAsync (string chatId, string postId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Group Posts
        /// </summary>
        /// <remarks>
        /// Returns posts which are available for the current user by group ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="recordCount">Max number of records to be returned (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipPosts</returns>
        [Obsolete]
        System.Threading.Tasks.Task<GlipPosts> ListGlipGroupPostsAsync (string groupId, int? recordCount = default(int?), string pageToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Group Posts
        /// </summary>
        /// <remarks>
        /// Returns posts which are available for the current user by group ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="recordCount">Max number of records to be returned (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipPosts)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<GlipPosts>> ListGlipGroupPostsWithHttpInfoAsync (string groupId, int? recordCount = default(int?), string pageToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Posts
        /// </summary>
        /// <remarks>
        /// Returns posts available for the current user by group ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Identifier of a group to filter posts (optional)</param>
        /// <param name="pageToken">Token of a page to be returned (optional)</param>
        /// <param name="recordCount">Number of records to be returned. The maximum value is 250, by default - 30 (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipPosts</returns>
        [Obsolete]
        System.Threading.Tasks.Task<GlipPosts> ListGlipPostsAsync (string groupId = default(string), string pageToken = default(string), long? recordCount = default(long?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Posts
        /// </summary>
        /// <remarks>
        /// Returns posts available for the current user by group ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Identifier of a group to filter posts (optional)</param>
        /// <param name="pageToken">Token of a page to be returned (optional)</param>
        /// <param name="recordCount">Number of records to be returned. The maximum value is 250, by default - 30 (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipPosts)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<GlipPosts>> ListGlipPostsWithHttpInfoAsync (string groupId = default(string), string pageToken = default(string), long? recordCount = default(long?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Post
        /// </summary>
        /// <remarks>
        /// Updates a specific post within a chat.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat.</param>
        /// <param name="postId">Internal identifier of a post to be updated.</param>
        /// <param name="glipPatchPostBody">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipPostInfo</returns>
        System.Threading.Tasks.Task<GlipPostInfo> PatchGlipPostAsync (string chatId, string postId, GlipPatchPostBody glipPatchPostBody, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Post
        /// </summary>
        /// <remarks>
        /// Updates a specific post within a chat.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat.</param>
        /// <param name="postId">Internal identifier of a post to be updated.</param>
        /// <param name="glipPatchPostBody">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipPostInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlipPostInfo>> PatchGlipPostWithHttpInfoAsync (string chatId, string postId, GlipPatchPostBody glipPatchPostBody, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Card
        /// </summary>
        /// <remarks>
        /// Returns card(s) with given id(s).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Internal identifier of a card or comma separated list of card IDs.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipMessageAttachmentInfo</returns>
        [Obsolete]
        System.Threading.Tasks.Task<GlipMessageAttachmentInfo> ReadGlipCardAsync (List<string> cardId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Card
        /// </summary>
        /// <remarks>
        /// Returns card(s) with given id(s).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Internal identifier of a card or comma separated list of card IDs.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipMessageAttachmentInfo)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<GlipMessageAttachmentInfo>> ReadGlipCardWithHttpInfoAsync (List<string> cardId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Post
        /// </summary>
        /// <remarks>
        /// Returns information about the specified post.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat.</param>
        /// <param name="postId">Internal identifier of a post.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipPostInfo</returns>
        System.Threading.Tasks.Task<GlipPostInfo> ReadGlipPostAsync (string chatId, string postId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Post
        /// </summary>
        /// <remarks>
        /// Returns information about the specified post.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat.</param>
        /// <param name="postId">Internal identifier of a post.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipPostInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlipPostInfo>> ReadGlipPostWithHttpInfoAsync (string chatId, string postId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Posts
        /// </summary>
        /// <remarks>
        /// Returns a list of posts from the specified chat.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat</param>
        /// <param name="recordCount">Max number of posts to be fetched by one request (not more than 250) (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipPostsList</returns>
        System.Threading.Tasks.Task<GlipPostsList> ReadGlipPostsAsync (string chatId, int? recordCount = default(int?), string pageToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Posts
        /// </summary>
        /// <remarks>
        /// Returns a list of posts from the specified chat.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat</param>
        /// <param name="recordCount">Max number of posts to be fetched by one request (not more than 250) (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipPostsList)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlipPostsList>> ReadGlipPostsWithHttpInfoAsync (string chatId, int? recordCount = default(int?), string pageToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Card
        /// </summary>
        /// <remarks>
        /// Updates a card.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Internal identifier of a card</param>
        /// <param name="glipMessageAttachmentInfoRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        [Obsolete]
        System.Threading.Tasks.Task UpdateGlipCardAsync (string cardId, GlipMessageAttachmentInfoRequest glipMessageAttachmentInfoRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Card
        /// </summary>
        /// <remarks>
        /// Updates a card.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Internal identifier of a card</param>
        /// <param name="glipMessageAttachmentInfoRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateGlipCardWithHttpInfoAsync (string cardId, GlipMessageAttachmentInfoRequest glipMessageAttachmentInfoRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Post
        /// </summary>
        /// <remarks>
        /// Modifies text of a post.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="postId">Internal identifier of a post</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        [Obsolete]
        System.Threading.Tasks.Task<string> UpdateGlipPostTextAsync (string groupId, string postId, string body, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Post
        /// </summary>
        /// <remarks>
        /// Modifies text of a post.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="postId">Internal identifier of a post</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<string>> UpdateGlipPostTextWithHttpInfoAsync (string groupId, string postId, string body, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PostsApi : IPostsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PostsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PostsApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PostsApi"/> class
        /// </summary>
        /// <returns></returns>
        public PostsApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PostsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PostsApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create Card Creates a new message.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipMessageAttachmentInfoRequest"></param>
        /// <param name="groupId">Internal identifier of a group where to create a post with the card (optional)</param>
        /// <returns>GlipMessageAttachmentInfo</returns>
        [Obsolete]
        public GlipMessageAttachmentInfo CreateGlipCard (GlipMessageAttachmentInfoRequest glipMessageAttachmentInfoRequest, long? groupId = default(long?))
        {
             ApiResponse<GlipMessageAttachmentInfo> localVarResponse = CreateGlipCardWithHttpInfo(glipMessageAttachmentInfoRequest, groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Card Creates a new message.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipMessageAttachmentInfoRequest"></param>
        /// <param name="groupId">Internal identifier of a group where to create a post with the card (optional)</param>
        /// <returns>ApiResponse of GlipMessageAttachmentInfo</returns>
        [Obsolete]
        public ApiResponse<GlipMessageAttachmentInfo> CreateGlipCardWithHttpInfo (GlipMessageAttachmentInfoRequest glipMessageAttachmentInfoRequest, long? groupId = default(long?))
        {
            // verify the required parameter 'glipMessageAttachmentInfoRequest' is set
            if (glipMessageAttachmentInfoRequest == null)
                throw new ApiException(400, "Missing required parameter 'glipMessageAttachmentInfoRequest' when calling PostsApi->CreateGlipCard");

            var localVarPath = "/restapi/v1.0/glip/cards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groupId", groupId)); // query parameter
            if (glipMessageAttachmentInfoRequest != null && glipMessageAttachmentInfoRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipMessageAttachmentInfoRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipMessageAttachmentInfoRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGlipCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipMessageAttachmentInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipMessageAttachmentInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipMessageAttachmentInfo)));
        }

        /// <summary>
        /// Create Card Creates a new message.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipMessageAttachmentInfoRequest"></param>
        /// <param name="groupId">Internal identifier of a group where to create a post with the card (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipMessageAttachmentInfo</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<GlipMessageAttachmentInfo> CreateGlipCardAsync (GlipMessageAttachmentInfoRequest glipMessageAttachmentInfoRequest, long? groupId = default(long?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipMessageAttachmentInfo> localVarResponse = await CreateGlipCardWithHttpInfoAsync(glipMessageAttachmentInfoRequest, groupId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Card Creates a new message.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipMessageAttachmentInfoRequest"></param>
        /// <param name="groupId">Internal identifier of a group where to create a post with the card (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipMessageAttachmentInfo)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<GlipMessageAttachmentInfo>> CreateGlipCardWithHttpInfoAsync (GlipMessageAttachmentInfoRequest glipMessageAttachmentInfoRequest, long? groupId = default(long?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'glipMessageAttachmentInfoRequest' is set
            if (glipMessageAttachmentInfoRequest == null)
                throw new ApiException(400, "Missing required parameter 'glipMessageAttachmentInfoRequest' when calling PostsApi->CreateGlipCard");

            var localVarPath = "/restapi/v1.0/glip/cards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groupId", groupId)); // query parameter
            if (glipMessageAttachmentInfoRequest != null && glipMessageAttachmentInfoRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipMessageAttachmentInfoRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipMessageAttachmentInfoRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGlipCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipMessageAttachmentInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipMessageAttachmentInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipMessageAttachmentInfo)));
        }

        /// <summary>
        /// Upload File Posts a file.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The file (binary or multipart/form-data) to upload</param>
        /// <param name="groupId">Internal identifier of a group to which the post with attachment will be added to (optional)</param>
        /// <param name="name">Name of a file attached (optional)</param>
        /// <returns>PostGlipFile</returns>
        public PostGlipFile CreateGlipFile (System.IO.Stream body, long? groupId = default(long?), string name = default(string))
        {
             ApiResponse<PostGlipFile> localVarResponse = CreateGlipFileWithHttpInfo(body, groupId, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload File Posts a file.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The file (binary or multipart/form-data) to upload</param>
        /// <param name="groupId">Internal identifier of a group to which the post with attachment will be added to (optional)</param>
        /// <param name="name">Name of a file attached (optional)</param>
        /// <returns>ApiResponse of PostGlipFile</returns>
        public ApiResponse<PostGlipFile> CreateGlipFileWithHttpInfo (System.IO.Stream body, long? groupId = default(long?), string name = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PostsApi->CreateGlipFile");

            var localVarPath = "/restapi/v1.0/glip/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groupId", groupId)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (body != null) localVarFileParams.Add("body", this.Configuration.ApiClient.ParameterToFile("body", body));

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGlipFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostGlipFile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PostGlipFile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostGlipFile)));
        }

        /// <summary>
        /// Upload File Posts a file.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The file (binary or multipart/form-data) to upload</param>
        /// <param name="groupId">Internal identifier of a group to which the post with attachment will be added to (optional)</param>
        /// <param name="name">Name of a file attached (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PostGlipFile</returns>
        public async System.Threading.Tasks.Task<PostGlipFile> CreateGlipFileAsync (System.IO.Stream body, long? groupId = default(long?), string name = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PostGlipFile> localVarResponse = await CreateGlipFileWithHttpInfoAsync(body, groupId, name, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload File Posts a file.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The file (binary or multipart/form-data) to upload</param>
        /// <param name="groupId">Internal identifier of a group to which the post with attachment will be added to (optional)</param>
        /// <param name="name">Name of a file attached (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PostGlipFile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostGlipFile>> CreateGlipFileWithHttpInfoAsync (System.IO.Stream body, long? groupId = default(long?), string name = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PostsApi->CreateGlipFile");

            var localVarPath = "/restapi/v1.0/glip/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groupId", groupId)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (body != null) localVarFileParams.Add("body", this.Configuration.ApiClient.ParameterToFile("body", body));

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGlipFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostGlipFile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PostGlipFile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostGlipFile)));
        }

        /// <summary>
        /// Create Post in Group Creates a new post in a group specified.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group.</param>
        /// <param name="glipCreatePost"></param>
        /// <returns>GlipPostInfo</returns>
        [Obsolete]
        public GlipPostInfo CreateGlipGroupPost (string groupId, GlipCreatePost glipCreatePost)
        {
             ApiResponse<GlipPostInfo> localVarResponse = CreateGlipGroupPostWithHttpInfo(groupId, glipCreatePost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Post in Group Creates a new post in a group specified.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group.</param>
        /// <param name="glipCreatePost"></param>
        /// <returns>ApiResponse of GlipPostInfo</returns>
        [Obsolete]
        public ApiResponse<GlipPostInfo> CreateGlipGroupPostWithHttpInfo (string groupId, GlipCreatePost glipCreatePost)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling PostsApi->CreateGlipGroupPost");
            // verify the required parameter 'glipCreatePost' is set
            if (glipCreatePost == null)
                throw new ApiException(400, "Missing required parameter 'glipCreatePost' when calling PostsApi->CreateGlipGroupPost");

            var localVarPath = "/restapi/v1.0/glip/groups/{groupId}/posts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (glipCreatePost != null && glipCreatePost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipCreatePost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipCreatePost; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGlipGroupPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipPostInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipPostInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipPostInfo)));
        }

        /// <summary>
        /// Create Post in Group Creates a new post in a group specified.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group.</param>
        /// <param name="glipCreatePost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipPostInfo</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<GlipPostInfo> CreateGlipGroupPostAsync (string groupId, GlipCreatePost glipCreatePost, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipPostInfo> localVarResponse = await CreateGlipGroupPostWithHttpInfoAsync(groupId, glipCreatePost, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Post in Group Creates a new post in a group specified.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group.</param>
        /// <param name="glipCreatePost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipPostInfo)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<GlipPostInfo>> CreateGlipGroupPostWithHttpInfoAsync (string groupId, GlipCreatePost glipCreatePost, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling PostsApi->CreateGlipGroupPost");
            // verify the required parameter 'glipCreatePost' is set
            if (glipCreatePost == null)
                throw new ApiException(400, "Missing required parameter 'glipCreatePost' when calling PostsApi->CreateGlipGroupPost");

            var localVarPath = "/restapi/v1.0/glip/groups/{groupId}/posts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (glipCreatePost != null && glipCreatePost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipCreatePost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipCreatePost; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGlipGroupPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipPostInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipPostInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipPostInfo)));
        }

        /// <summary>
        /// Create Post Creates a post in the chat specified in path. Any mention can be added within the `text` attribute of the request body in .md format - `![:Type](id)`, where `type` is one of (Person, Team, File, Note, Task, Event, Link, Card) and `id` is a unique identifier of the mentioned object of the specified type. Attachments of the following types (File, Card, Event, Note) can also be added to a post by passing type and ID of attachment(s) in request body.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat.</param>
        /// <param name="glipPostPostBody">JSON body</param>
        /// <returns>GlipPostInfo</returns>
        public GlipPostInfo CreateGlipPost (string chatId, GlipPostPostBody glipPostPostBody)
        {
             ApiResponse<GlipPostInfo> localVarResponse = CreateGlipPostWithHttpInfo(chatId, glipPostPostBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Post Creates a post in the chat specified in path. Any mention can be added within the `text` attribute of the request body in .md format - `![:Type](id)`, where `type` is one of (Person, Team, File, Note, Task, Event, Link, Card) and `id` is a unique identifier of the mentioned object of the specified type. Attachments of the following types (File, Card, Event, Note) can also be added to a post by passing type and ID of attachment(s) in request body.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat.</param>
        /// <param name="glipPostPostBody">JSON body</param>
        /// <returns>ApiResponse of GlipPostInfo</returns>
        public ApiResponse<GlipPostInfo> CreateGlipPostWithHttpInfo (string chatId, GlipPostPostBody glipPostPostBody)
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling PostsApi->CreateGlipPost");
            // verify the required parameter 'glipPostPostBody' is set
            if (glipPostPostBody == null)
                throw new ApiException(400, "Missing required parameter 'glipPostPostBody' when calling PostsApi->CreateGlipPost");

            var localVarPath = "/restapi/v1.0/glip/chats/{chatId}/posts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter
            if (glipPostPostBody != null && glipPostPostBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipPostPostBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipPostPostBody; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGlipPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipPostInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipPostInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipPostInfo)));
        }

        /// <summary>
        /// Create Post Creates a post in the chat specified in path. Any mention can be added within the `text` attribute of the request body in .md format - `![:Type](id)`, where `type` is one of (Person, Team, File, Note, Task, Event, Link, Card) and `id` is a unique identifier of the mentioned object of the specified type. Attachments of the following types (File, Card, Event, Note) can also be added to a post by passing type and ID of attachment(s) in request body.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat.</param>
        /// <param name="glipPostPostBody">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipPostInfo</returns>
        public async System.Threading.Tasks.Task<GlipPostInfo> CreateGlipPostAsync (string chatId, GlipPostPostBody glipPostPostBody, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipPostInfo> localVarResponse = await CreateGlipPostWithHttpInfoAsync(chatId, glipPostPostBody, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Post Creates a post in the chat specified in path. Any mention can be added within the `text` attribute of the request body in .md format - `![:Type](id)`, where `type` is one of (Person, Team, File, Note, Task, Event, Link, Card) and `id` is a unique identifier of the mentioned object of the specified type. Attachments of the following types (File, Card, Event, Note) can also be added to a post by passing type and ID of attachment(s) in request body.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat.</param>
        /// <param name="glipPostPostBody">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipPostInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlipPostInfo>> CreateGlipPostWithHttpInfoAsync (string chatId, GlipPostPostBody glipPostPostBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling PostsApi->CreateGlipPost");
            // verify the required parameter 'glipPostPostBody' is set
            if (glipPostPostBody == null)
                throw new ApiException(400, "Missing required parameter 'glipPostPostBody' when calling PostsApi->CreateGlipPost");

            var localVarPath = "/restapi/v1.0/glip/chats/{chatId}/posts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter
            if (glipPostPostBody != null && glipPostPostBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipPostPostBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipPostPostBody; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGlipPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipPostInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipPostInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipPostInfo)));
        }

        /// <summary>
        /// Create Post Creates a post.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipCreatePost">JSON body</param>
        /// <returns>GlipPostInfo</returns>
        [Obsolete]
        public GlipPostInfo CreatePost (GlipCreatePost glipCreatePost)
        {
             ApiResponse<GlipPostInfo> localVarResponse = CreatePostWithHttpInfo(glipCreatePost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Post Creates a post.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipCreatePost">JSON body</param>
        /// <returns>ApiResponse of GlipPostInfo</returns>
        [Obsolete]
        public ApiResponse<GlipPostInfo> CreatePostWithHttpInfo (GlipCreatePost glipCreatePost)
        {
            // verify the required parameter 'glipCreatePost' is set
            if (glipCreatePost == null)
                throw new ApiException(400, "Missing required parameter 'glipCreatePost' when calling PostsApi->CreatePost");

            var localVarPath = "/restapi/v1.0/glip/posts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (glipCreatePost != null && glipCreatePost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipCreatePost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipCreatePost; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipPostInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipPostInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipPostInfo)));
        }

        /// <summary>
        /// Create Post Creates a post.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipCreatePost">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipPostInfo</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<GlipPostInfo> CreatePostAsync (GlipCreatePost glipCreatePost, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipPostInfo> localVarResponse = await CreatePostWithHttpInfoAsync(glipCreatePost, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Post Creates a post.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipCreatePost">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipPostInfo)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<GlipPostInfo>> CreatePostWithHttpInfoAsync (GlipCreatePost glipCreatePost, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'glipCreatePost' is set
            if (glipCreatePost == null)
                throw new ApiException(400, "Missing required parameter 'glipCreatePost' when calling PostsApi->CreatePost");

            var localVarPath = "/restapi/v1.0/glip/posts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (glipCreatePost != null && glipCreatePost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipCreatePost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipCreatePost; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipPostInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipPostInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipPostInfo)));
        }

        /// <summary>
        /// Delete Card Deletes a card by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Card ID to be deleted.</param>
        /// <returns></returns>
        [Obsolete]
        public void DeleteGlipCard (string cardId)
        {
             DeleteGlipCardWithHttpInfo(cardId);
        }

        /// <summary>
        /// Delete Card Deletes a card by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Card ID to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        public ApiResponse<Object> DeleteGlipCardWithHttpInfo (string cardId)
        {
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling PostsApi->DeleteGlipCard");

            var localVarPath = "/restapi/v1.0/glip/cards/{cardId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGlipCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Card Deletes a card by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Card ID to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task DeleteGlipCardAsync (string cardId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteGlipCardWithHttpInfoAsync(cardId, cancellationToken);

        }

        /// <summary>
        /// Delete Card Deletes a card by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Card ID to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGlipCardWithHttpInfoAsync (string cardId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling PostsApi->DeleteGlipCard");

            var localVarPath = "/restapi/v1.0/glip/cards/{cardId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGlipCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Post Deletes the specified post from the chat.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat.</param>
        /// <param name="postId">Internal identifier of a post to be deleted.</param>
        /// <returns></returns>
        public void DeleteGlipPost (string chatId, string postId)
        {
             DeleteGlipPostWithHttpInfo(chatId, postId);
        }

        /// <summary>
        /// Delete Post Deletes the specified post from the chat.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat.</param>
        /// <param name="postId">Internal identifier of a post to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteGlipPostWithHttpInfo (string chatId, string postId)
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling PostsApi->DeleteGlipPost");
            // verify the required parameter 'postId' is set
            if (postId == null)
                throw new ApiException(400, "Missing required parameter 'postId' when calling PostsApi->DeleteGlipPost");

            var localVarPath = "/restapi/v1.0/glip/chats/{chatId}/posts/{postId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter
            if (postId != null) localVarPathParams.Add("postId", this.Configuration.ApiClient.ParameterToString(postId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGlipPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Post Deletes the specified post from the chat.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat.</param>
        /// <param name="postId">Internal identifier of a post to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteGlipPostAsync (string chatId, string postId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteGlipPostWithHttpInfoAsync(chatId, postId, cancellationToken);

        }

        /// <summary>
        /// Delete Post Deletes the specified post from the chat.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat.</param>
        /// <param name="postId">Internal identifier of a post to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGlipPostWithHttpInfoAsync (string chatId, string postId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling PostsApi->DeleteGlipPost");
            // verify the required parameter 'postId' is set
            if (postId == null)
                throw new ApiException(400, "Missing required parameter 'postId' when calling PostsApi->DeleteGlipPost");

            var localVarPath = "/restapi/v1.0/glip/chats/{chatId}/posts/{postId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter
            if (postId != null) localVarPathParams.Add("postId", this.Configuration.ApiClient.ParameterToString(postId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGlipPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get Group Posts Returns posts which are available for the current user by group ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="recordCount">Max number of records to be returned (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token (optional)</param>
        /// <returns>GlipPosts</returns>
        [Obsolete]
        public GlipPosts ListGlipGroupPosts (string groupId, int? recordCount = default(int?), string pageToken = default(string))
        {
             ApiResponse<GlipPosts> localVarResponse = ListGlipGroupPostsWithHttpInfo(groupId, recordCount, pageToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group Posts Returns posts which are available for the current user by group ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="recordCount">Max number of records to be returned (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token (optional)</param>
        /// <returns>ApiResponse of GlipPosts</returns>
        [Obsolete]
        public ApiResponse<GlipPosts> ListGlipGroupPostsWithHttpInfo (string groupId, int? recordCount = default(int?), string pageToken = default(string))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling PostsApi->ListGlipGroupPosts");

            var localVarPath = "/restapi/v1.0/glip/groups/{groupId}/posts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (recordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordCount", recordCount)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListGlipGroupPosts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipPosts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipPosts) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipPosts)));
        }

        /// <summary>
        /// Get Group Posts Returns posts which are available for the current user by group ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="recordCount">Max number of records to be returned (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipPosts</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<GlipPosts> ListGlipGroupPostsAsync (string groupId, int? recordCount = default(int?), string pageToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipPosts> localVarResponse = await ListGlipGroupPostsWithHttpInfoAsync(groupId, recordCount, pageToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Group Posts Returns posts which are available for the current user by group ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="recordCount">Max number of records to be returned (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipPosts)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<GlipPosts>> ListGlipGroupPostsWithHttpInfoAsync (string groupId, int? recordCount = default(int?), string pageToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling PostsApi->ListGlipGroupPosts");

            var localVarPath = "/restapi/v1.0/glip/groups/{groupId}/posts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (recordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordCount", recordCount)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListGlipGroupPosts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipPosts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipPosts) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipPosts)));
        }

        /// <summary>
        /// Get Posts Returns posts available for the current user by group ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Identifier of a group to filter posts (optional)</param>
        /// <param name="pageToken">Token of a page to be returned (optional)</param>
        /// <param name="recordCount">Number of records to be returned. The maximum value is 250, by default - 30 (optional, default to 30)</param>
        /// <returns>GlipPosts</returns>
        [Obsolete]
        public GlipPosts ListGlipPosts (string groupId = default(string), string pageToken = default(string), long? recordCount = default(long?))
        {
             ApiResponse<GlipPosts> localVarResponse = ListGlipPostsWithHttpInfo(groupId, pageToken, recordCount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Posts Returns posts available for the current user by group ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Identifier of a group to filter posts (optional)</param>
        /// <param name="pageToken">Token of a page to be returned (optional)</param>
        /// <param name="recordCount">Number of records to be returned. The maximum value is 250, by default - 30 (optional, default to 30)</param>
        /// <returns>ApiResponse of GlipPosts</returns>
        [Obsolete]
        public ApiResponse<GlipPosts> ListGlipPostsWithHttpInfo (string groupId = default(string), string pageToken = default(string), long? recordCount = default(long?))
        {

            var localVarPath = "/restapi/v1.0/glip/posts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groupId", groupId)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter
            if (recordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordCount", recordCount)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListGlipPosts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipPosts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipPosts) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipPosts)));
        }

        /// <summary>
        /// Get Posts Returns posts available for the current user by group ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Identifier of a group to filter posts (optional)</param>
        /// <param name="pageToken">Token of a page to be returned (optional)</param>
        /// <param name="recordCount">Number of records to be returned. The maximum value is 250, by default - 30 (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipPosts</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<GlipPosts> ListGlipPostsAsync (string groupId = default(string), string pageToken = default(string), long? recordCount = default(long?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipPosts> localVarResponse = await ListGlipPostsWithHttpInfoAsync(groupId, pageToken, recordCount, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Posts Returns posts available for the current user by group ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Identifier of a group to filter posts (optional)</param>
        /// <param name="pageToken">Token of a page to be returned (optional)</param>
        /// <param name="recordCount">Number of records to be returned. The maximum value is 250, by default - 30 (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipPosts)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<GlipPosts>> ListGlipPostsWithHttpInfoAsync (string groupId = default(string), string pageToken = default(string), long? recordCount = default(long?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/restapi/v1.0/glip/posts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groupId", groupId)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter
            if (recordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordCount", recordCount)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListGlipPosts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipPosts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipPosts) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipPosts)));
        }

        /// <summary>
        /// Update Post Updates a specific post within a chat.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat.</param>
        /// <param name="postId">Internal identifier of a post to be updated.</param>
        /// <param name="glipPatchPostBody">JSON body</param>
        /// <returns>GlipPostInfo</returns>
        public GlipPostInfo PatchGlipPost (string chatId, string postId, GlipPatchPostBody glipPatchPostBody)
        {
             ApiResponse<GlipPostInfo> localVarResponse = PatchGlipPostWithHttpInfo(chatId, postId, glipPatchPostBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Post Updates a specific post within a chat.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat.</param>
        /// <param name="postId">Internal identifier of a post to be updated.</param>
        /// <param name="glipPatchPostBody">JSON body</param>
        /// <returns>ApiResponse of GlipPostInfo</returns>
        public ApiResponse<GlipPostInfo> PatchGlipPostWithHttpInfo (string chatId, string postId, GlipPatchPostBody glipPatchPostBody)
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling PostsApi->PatchGlipPost");
            // verify the required parameter 'postId' is set
            if (postId == null)
                throw new ApiException(400, "Missing required parameter 'postId' when calling PostsApi->PatchGlipPost");
            // verify the required parameter 'glipPatchPostBody' is set
            if (glipPatchPostBody == null)
                throw new ApiException(400, "Missing required parameter 'glipPatchPostBody' when calling PostsApi->PatchGlipPost");

            var localVarPath = "/restapi/v1.0/glip/chats/{chatId}/posts/{postId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter
            if (postId != null) localVarPathParams.Add("postId", this.Configuration.ApiClient.ParameterToString(postId)); // path parameter
            if (glipPatchPostBody != null && glipPatchPostBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipPatchPostBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipPatchPostBody; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchGlipPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipPostInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipPostInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipPostInfo)));
        }

        /// <summary>
        /// Update Post Updates a specific post within a chat.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat.</param>
        /// <param name="postId">Internal identifier of a post to be updated.</param>
        /// <param name="glipPatchPostBody">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipPostInfo</returns>
        public async System.Threading.Tasks.Task<GlipPostInfo> PatchGlipPostAsync (string chatId, string postId, GlipPatchPostBody glipPatchPostBody, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipPostInfo> localVarResponse = await PatchGlipPostWithHttpInfoAsync(chatId, postId, glipPatchPostBody, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Post Updates a specific post within a chat.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat.</param>
        /// <param name="postId">Internal identifier of a post to be updated.</param>
        /// <param name="glipPatchPostBody">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipPostInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlipPostInfo>> PatchGlipPostWithHttpInfoAsync (string chatId, string postId, GlipPatchPostBody glipPatchPostBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling PostsApi->PatchGlipPost");
            // verify the required parameter 'postId' is set
            if (postId == null)
                throw new ApiException(400, "Missing required parameter 'postId' when calling PostsApi->PatchGlipPost");
            // verify the required parameter 'glipPatchPostBody' is set
            if (glipPatchPostBody == null)
                throw new ApiException(400, "Missing required parameter 'glipPatchPostBody' when calling PostsApi->PatchGlipPost");

            var localVarPath = "/restapi/v1.0/glip/chats/{chatId}/posts/{postId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter
            if (postId != null) localVarPathParams.Add("postId", this.Configuration.ApiClient.ParameterToString(postId)); // path parameter
            if (glipPatchPostBody != null && glipPatchPostBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipPatchPostBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipPatchPostBody; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchGlipPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipPostInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipPostInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipPostInfo)));
        }

        /// <summary>
        /// Get Card Returns card(s) with given id(s).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Internal identifier of a card or comma separated list of card IDs.</param>
        /// <returns>GlipMessageAttachmentInfo</returns>
        [Obsolete]
        public GlipMessageAttachmentInfo ReadGlipCard (List<string> cardId)
        {
             ApiResponse<GlipMessageAttachmentInfo> localVarResponse = ReadGlipCardWithHttpInfo(cardId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Card Returns card(s) with given id(s).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Internal identifier of a card or comma separated list of card IDs.</param>
        /// <returns>ApiResponse of GlipMessageAttachmentInfo</returns>
        [Obsolete]
        public ApiResponse<GlipMessageAttachmentInfo> ReadGlipCardWithHttpInfo (List<string> cardId)
        {
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling PostsApi->ReadGlipCard");

            var localVarPath = "/restapi/v1.0/glip/cards/{cardId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "multipart/mixed"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadGlipCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipMessageAttachmentInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipMessageAttachmentInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipMessageAttachmentInfo)));
        }

        /// <summary>
        /// Get Card Returns card(s) with given id(s).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Internal identifier of a card or comma separated list of card IDs.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipMessageAttachmentInfo</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<GlipMessageAttachmentInfo> ReadGlipCardAsync (List<string> cardId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipMessageAttachmentInfo> localVarResponse = await ReadGlipCardWithHttpInfoAsync(cardId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Card Returns card(s) with given id(s).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Internal identifier of a card or comma separated list of card IDs.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipMessageAttachmentInfo)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<GlipMessageAttachmentInfo>> ReadGlipCardWithHttpInfoAsync (List<string> cardId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling PostsApi->ReadGlipCard");

            var localVarPath = "/restapi/v1.0/glip/cards/{cardId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "multipart/mixed"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadGlipCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipMessageAttachmentInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipMessageAttachmentInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipMessageAttachmentInfo)));
        }

        /// <summary>
        /// Get Post Returns information about the specified post.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat.</param>
        /// <param name="postId">Internal identifier of a post.</param>
        /// <returns>GlipPostInfo</returns>
        public GlipPostInfo ReadGlipPost (string chatId, string postId)
        {
             ApiResponse<GlipPostInfo> localVarResponse = ReadGlipPostWithHttpInfo(chatId, postId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Post Returns information about the specified post.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat.</param>
        /// <param name="postId">Internal identifier of a post.</param>
        /// <returns>ApiResponse of GlipPostInfo</returns>
        public ApiResponse<GlipPostInfo> ReadGlipPostWithHttpInfo (string chatId, string postId)
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling PostsApi->ReadGlipPost");
            // verify the required parameter 'postId' is set
            if (postId == null)
                throw new ApiException(400, "Missing required parameter 'postId' when calling PostsApi->ReadGlipPost");

            var localVarPath = "/restapi/v1.0/glip/chats/{chatId}/posts/{postId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter
            if (postId != null) localVarPathParams.Add("postId", this.Configuration.ApiClient.ParameterToString(postId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadGlipPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipPostInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipPostInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipPostInfo)));
        }

        /// <summary>
        /// Get Post Returns information about the specified post.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat.</param>
        /// <param name="postId">Internal identifier of a post.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipPostInfo</returns>
        public async System.Threading.Tasks.Task<GlipPostInfo> ReadGlipPostAsync (string chatId, string postId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipPostInfo> localVarResponse = await ReadGlipPostWithHttpInfoAsync(chatId, postId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Post Returns information about the specified post.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat.</param>
        /// <param name="postId">Internal identifier of a post.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipPostInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlipPostInfo>> ReadGlipPostWithHttpInfoAsync (string chatId, string postId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling PostsApi->ReadGlipPost");
            // verify the required parameter 'postId' is set
            if (postId == null)
                throw new ApiException(400, "Missing required parameter 'postId' when calling PostsApi->ReadGlipPost");

            var localVarPath = "/restapi/v1.0/glip/chats/{chatId}/posts/{postId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter
            if (postId != null) localVarPathParams.Add("postId", this.Configuration.ApiClient.ParameterToString(postId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadGlipPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipPostInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipPostInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipPostInfo)));
        }

        /// <summary>
        /// Get Posts Returns a list of posts from the specified chat.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat</param>
        /// <param name="recordCount">Max number of posts to be fetched by one request (not more than 250) (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <returns>GlipPostsList</returns>
        public GlipPostsList ReadGlipPosts (string chatId, int? recordCount = default(int?), string pageToken = default(string))
        {
             ApiResponse<GlipPostsList> localVarResponse = ReadGlipPostsWithHttpInfo(chatId, recordCount, pageToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Posts Returns a list of posts from the specified chat.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat</param>
        /// <param name="recordCount">Max number of posts to be fetched by one request (not more than 250) (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <returns>ApiResponse of GlipPostsList</returns>
        public ApiResponse<GlipPostsList> ReadGlipPostsWithHttpInfo (string chatId, int? recordCount = default(int?), string pageToken = default(string))
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling PostsApi->ReadGlipPosts");

            var localVarPath = "/restapi/v1.0/glip/chats/{chatId}/posts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter
            if (recordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordCount", recordCount)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadGlipPosts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipPostsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipPostsList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipPostsList)));
        }

        /// <summary>
        /// Get Posts Returns a list of posts from the specified chat.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat</param>
        /// <param name="recordCount">Max number of posts to be fetched by one request (not more than 250) (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipPostsList</returns>
        public async System.Threading.Tasks.Task<GlipPostsList> ReadGlipPostsAsync (string chatId, int? recordCount = default(int?), string pageToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipPostsList> localVarResponse = await ReadGlipPostsWithHttpInfoAsync(chatId, recordCount, pageToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Posts Returns a list of posts from the specified chat.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat</param>
        /// <param name="recordCount">Max number of posts to be fetched by one request (not more than 250) (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipPostsList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlipPostsList>> ReadGlipPostsWithHttpInfoAsync (string chatId, int? recordCount = default(int?), string pageToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling PostsApi->ReadGlipPosts");

            var localVarPath = "/restapi/v1.0/glip/chats/{chatId}/posts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter
            if (recordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordCount", recordCount)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadGlipPosts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipPostsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipPostsList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipPostsList)));
        }

        /// <summary>
        /// Update Card Updates a card.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Internal identifier of a card</param>
        /// <param name="glipMessageAttachmentInfoRequest"></param>
        /// <returns></returns>
        [Obsolete]
        public void UpdateGlipCard (string cardId, GlipMessageAttachmentInfoRequest glipMessageAttachmentInfoRequest)
        {
             UpdateGlipCardWithHttpInfo(cardId, glipMessageAttachmentInfoRequest);
        }

        /// <summary>
        /// Update Card Updates a card.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Internal identifier of a card</param>
        /// <param name="glipMessageAttachmentInfoRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        public ApiResponse<Object> UpdateGlipCardWithHttpInfo (string cardId, GlipMessageAttachmentInfoRequest glipMessageAttachmentInfoRequest)
        {
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling PostsApi->UpdateGlipCard");
            // verify the required parameter 'glipMessageAttachmentInfoRequest' is set
            if (glipMessageAttachmentInfoRequest == null)
                throw new ApiException(400, "Missing required parameter 'glipMessageAttachmentInfoRequest' when calling PostsApi->UpdateGlipCard");

            var localVarPath = "/restapi/v1.0/glip/cards/{cardId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (glipMessageAttachmentInfoRequest != null && glipMessageAttachmentInfoRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipMessageAttachmentInfoRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipMessageAttachmentInfoRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGlipCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update Card Updates a card.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Internal identifier of a card</param>
        /// <param name="glipMessageAttachmentInfoRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task UpdateGlipCardAsync (string cardId, GlipMessageAttachmentInfoRequest glipMessageAttachmentInfoRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             await UpdateGlipCardWithHttpInfoAsync(cardId, glipMessageAttachmentInfoRequest, cancellationToken);

        }

        /// <summary>
        /// Update Card Updates a card.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Internal identifier of a card</param>
        /// <param name="glipMessageAttachmentInfoRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateGlipCardWithHttpInfoAsync (string cardId, GlipMessageAttachmentInfoRequest glipMessageAttachmentInfoRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling PostsApi->UpdateGlipCard");
            // verify the required parameter 'glipMessageAttachmentInfoRequest' is set
            if (glipMessageAttachmentInfoRequest == null)
                throw new ApiException(400, "Missing required parameter 'glipMessageAttachmentInfoRequest' when calling PostsApi->UpdateGlipCard");

            var localVarPath = "/restapi/v1.0/glip/cards/{cardId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (glipMessageAttachmentInfoRequest != null && glipMessageAttachmentInfoRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipMessageAttachmentInfoRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipMessageAttachmentInfoRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGlipCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update Post Modifies text of a post.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="postId">Internal identifier of a post</param>
        /// <param name="body"></param>
        /// <returns>string</returns>
        [Obsolete]
        public string UpdateGlipPostText (string groupId, string postId, string body)
        {
             ApiResponse<string> localVarResponse = UpdateGlipPostTextWithHttpInfo(groupId, postId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Post Modifies text of a post.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="postId">Internal identifier of a post</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of string</returns>
        [Obsolete]
        public ApiResponse<string> UpdateGlipPostTextWithHttpInfo (string groupId, string postId, string body)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling PostsApi->UpdateGlipPostText");
            // verify the required parameter 'postId' is set
            if (postId == null)
                throw new ApiException(400, "Missing required parameter 'postId' when calling PostsApi->UpdateGlipPostText");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PostsApi->UpdateGlipPostText");

            var localVarPath = "/restapi/v1.0/glip/groups/{groupId}/posts/{postId}/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (postId != null) localVarPathParams.Add("postId", this.Configuration.ApiClient.ParameterToString(postId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGlipPostText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update Post Modifies text of a post.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="postId">Internal identifier of a post</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<string> UpdateGlipPostTextAsync (string groupId, string postId, string body, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<string> localVarResponse = await UpdateGlipPostTextWithHttpInfoAsync(groupId, postId, body, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Post Modifies text of a post.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="postId">Internal identifier of a post</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<string>> UpdateGlipPostTextWithHttpInfoAsync (string groupId, string postId, string body, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling PostsApi->UpdateGlipPostText");
            // verify the required parameter 'postId' is set
            if (postId == null)
                throw new ApiException(400, "Missing required parameter 'postId' when calling PostsApi->UpdateGlipPostText");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PostsApi->UpdateGlipPostText");

            var localVarPath = "/restapi/v1.0/glip/groups/{groupId}/posts/{postId}/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (postId != null) localVarPathParams.Add("postId", this.Configuration.ApiClient.ParameterToString(postId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGlipPostText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
