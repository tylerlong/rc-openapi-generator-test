/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRingOutApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Make RingOut Call
        /// </summary>
        /// <remarks>
        /// Makes a 2-leg RingOut call.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="makeRingOutRequest">JSON body</param>
        /// <returns>GetRingOutStatusResponse</returns>
        GetRingOutStatusResponse CreateRingOutCall (string accountId, string extensionId, MakeRingOutRequest makeRingOutRequest);

        /// <summary>
        /// Make RingOut Call
        /// </summary>
        /// <remarks>
        /// Makes a 2-leg RingOut call.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="makeRingOutRequest">JSON body</param>
        /// <returns>ApiResponse of GetRingOutStatusResponse</returns>
        ApiResponse<GetRingOutStatusResponse> CreateRingOutCallWithHttpInfo (string accountId, string extensionId, MakeRingOutRequest makeRingOutRequest);
        /// <summary>
        /// Make RingOut Call
        /// </summary>
        /// <remarks>
        /// Makes a 2-leg RingOut call.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="makeRingOutRequest">JSON body</param>
        /// <returns>GetRingOutStatusResponseIntId</returns>
        [Obsolete]
        GetRingOutStatusResponseIntId CreateRingOutCallDeprecated (string accountId, string extensionId, MakeRingOutRequest makeRingOutRequest);

        /// <summary>
        /// Make RingOut Call
        /// </summary>
        /// <remarks>
        /// Makes a 2-leg RingOut call.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="makeRingOutRequest">JSON body</param>
        /// <returns>ApiResponse of GetRingOutStatusResponseIntId</returns>
        [Obsolete]
        ApiResponse<GetRingOutStatusResponseIntId> CreateRingOutCallDeprecatedWithHttpInfo (string accountId, string extensionId, MakeRingOutRequest makeRingOutRequest);
        /// <summary>
        /// Cancel RingOut Call
        /// </summary>
        /// <remarks>
        /// Cancels a 2-leg RingOut call.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ringoutId">Internal identifier of a RingOut call</param>
        /// <returns></returns>
        void DeleteRingOutCall (string accountId, string extensionId, string ringoutId);

        /// <summary>
        /// Cancel RingOut Call
        /// </summary>
        /// <remarks>
        /// Cancels a 2-leg RingOut call.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ringoutId">Internal identifier of a RingOut call</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRingOutCallWithHttpInfo (string accountId, string extensionId, string ringoutId);
        /// <summary>
        /// Cancel RingOut Call
        /// </summary>
        /// <remarks>
        /// Cancels a 2-leg RingOut call.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ringoutId">Internal identifier of a RingOut call</param>
        /// <returns></returns>
        [Obsolete]
        void DeleteRingOutCallDeprecated (string accountId, string extensionId, int ringoutId);

        /// <summary>
        /// Cancel RingOut Call
        /// </summary>
        /// <remarks>
        /// Cancels a 2-leg RingOut call.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ringoutId">Internal identifier of a RingOut call</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        ApiResponse<Object> DeleteRingOutCallDeprecatedWithHttpInfo (string accountId, string extensionId, int ringoutId);
        /// <summary>
        /// Get RingOut Call Status
        /// </summary>
        /// <remarks>
        /// Returns the status of a 2-leg RingOut call.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ringoutId">Internal identifier of a RingOut call</param>
        /// <returns>GetRingOutStatusResponse</returns>
        GetRingOutStatusResponse ReadRingOutCallStatus (string accountId, string extensionId, string ringoutId);

        /// <summary>
        /// Get RingOut Call Status
        /// </summary>
        /// <remarks>
        /// Returns the status of a 2-leg RingOut call.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ringoutId">Internal identifier of a RingOut call</param>
        /// <returns>ApiResponse of GetRingOutStatusResponse</returns>
        ApiResponse<GetRingOutStatusResponse> ReadRingOutCallStatusWithHttpInfo (string accountId, string extensionId, string ringoutId);
        /// <summary>
        /// Get RingOut Call Status
        /// </summary>
        /// <remarks>
        /// Returns status of a 2-leg RingOut call.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ringoutId">Internal identifier of a RingOut call</param>
        /// <returns>GetRingOutStatusResponse</returns>
        [Obsolete]
        GetRingOutStatusResponse ReadRingOutCallStatusDeprecated (string accountId, string extensionId, int ringoutId);

        /// <summary>
        /// Get RingOut Call Status
        /// </summary>
        /// <remarks>
        /// Returns status of a 2-leg RingOut call.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ringoutId">Internal identifier of a RingOut call</param>
        /// <returns>ApiResponse of GetRingOutStatusResponse</returns>
        [Obsolete]
        ApiResponse<GetRingOutStatusResponse> ReadRingOutCallStatusDeprecatedWithHttpInfo (string accountId, string extensionId, int ringoutId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Make RingOut Call
        /// </summary>
        /// <remarks>
        /// Makes a 2-leg RingOut call.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="makeRingOutRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetRingOutStatusResponse</returns>
        System.Threading.Tasks.Task<GetRingOutStatusResponse> CreateRingOutCallAsync (string accountId, string extensionId, MakeRingOutRequest makeRingOutRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Make RingOut Call
        /// </summary>
        /// <remarks>
        /// Makes a 2-leg RingOut call.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="makeRingOutRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetRingOutStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetRingOutStatusResponse>> CreateRingOutCallWithHttpInfoAsync (string accountId, string extensionId, MakeRingOutRequest makeRingOutRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Make RingOut Call
        /// </summary>
        /// <remarks>
        /// Makes a 2-leg RingOut call.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="makeRingOutRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetRingOutStatusResponseIntId</returns>
        [Obsolete]
        System.Threading.Tasks.Task<GetRingOutStatusResponseIntId> CreateRingOutCallDeprecatedAsync (string accountId, string extensionId, MakeRingOutRequest makeRingOutRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Make RingOut Call
        /// </summary>
        /// <remarks>
        /// Makes a 2-leg RingOut call.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="makeRingOutRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetRingOutStatusResponseIntId)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<GetRingOutStatusResponseIntId>> CreateRingOutCallDeprecatedWithHttpInfoAsync (string accountId, string extensionId, MakeRingOutRequest makeRingOutRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Cancel RingOut Call
        /// </summary>
        /// <remarks>
        /// Cancels a 2-leg RingOut call.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ringoutId">Internal identifier of a RingOut call</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRingOutCallAsync (string accountId, string extensionId, string ringoutId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancel RingOut Call
        /// </summary>
        /// <remarks>
        /// Cancels a 2-leg RingOut call.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ringoutId">Internal identifier of a RingOut call</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRingOutCallWithHttpInfoAsync (string accountId, string extensionId, string ringoutId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Cancel RingOut Call
        /// </summary>
        /// <remarks>
        /// Cancels a 2-leg RingOut call.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ringoutId">Internal identifier of a RingOut call</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        [Obsolete]
        System.Threading.Tasks.Task DeleteRingOutCallDeprecatedAsync (string accountId, string extensionId, int ringoutId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancel RingOut Call
        /// </summary>
        /// <remarks>
        /// Cancels a 2-leg RingOut call.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ringoutId">Internal identifier of a RingOut call</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRingOutCallDeprecatedWithHttpInfoAsync (string accountId, string extensionId, int ringoutId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get RingOut Call Status
        /// </summary>
        /// <remarks>
        /// Returns the status of a 2-leg RingOut call.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ringoutId">Internal identifier of a RingOut call</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetRingOutStatusResponse</returns>
        System.Threading.Tasks.Task<GetRingOutStatusResponse> ReadRingOutCallStatusAsync (string accountId, string extensionId, string ringoutId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get RingOut Call Status
        /// </summary>
        /// <remarks>
        /// Returns the status of a 2-leg RingOut call.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ringoutId">Internal identifier of a RingOut call</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetRingOutStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetRingOutStatusResponse>> ReadRingOutCallStatusWithHttpInfoAsync (string accountId, string extensionId, string ringoutId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get RingOut Call Status
        /// </summary>
        /// <remarks>
        /// Returns status of a 2-leg RingOut call.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ringoutId">Internal identifier of a RingOut call</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetRingOutStatusResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<GetRingOutStatusResponse> ReadRingOutCallStatusDeprecatedAsync (string accountId, string extensionId, int ringoutId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get RingOut Call Status
        /// </summary>
        /// <remarks>
        /// Returns status of a 2-leg RingOut call.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ringoutId">Internal identifier of a RingOut call</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetRingOutStatusResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<GetRingOutStatusResponse>> ReadRingOutCallStatusDeprecatedWithHttpInfoAsync (string accountId, string extensionId, int ringoutId, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RingOutApi : IRingOutApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RingOutApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RingOutApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RingOutApi"/> class
        /// </summary>
        /// <returns></returns>
        public RingOutApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RingOutApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RingOutApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Make RingOut Call Makes a 2-leg RingOut call.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="makeRingOutRequest">JSON body</param>
        /// <returns>GetRingOutStatusResponse</returns>
        public GetRingOutStatusResponse CreateRingOutCall (string accountId, string extensionId, MakeRingOutRequest makeRingOutRequest)
        {
             ApiResponse<GetRingOutStatusResponse> localVarResponse = CreateRingOutCallWithHttpInfo(accountId, extensionId, makeRingOutRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Make RingOut Call Makes a 2-leg RingOut call.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="makeRingOutRequest">JSON body</param>
        /// <returns>ApiResponse of GetRingOutStatusResponse</returns>
        public ApiResponse<GetRingOutStatusResponse> CreateRingOutCallWithHttpInfo (string accountId, string extensionId, MakeRingOutRequest makeRingOutRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RingOutApi->CreateRingOutCall");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling RingOutApi->CreateRingOutCall");
            // verify the required parameter 'makeRingOutRequest' is set
            if (makeRingOutRequest == null)
                throw new ApiException(400, "Missing required parameter 'makeRingOutRequest' when calling RingOutApi->CreateRingOutCall");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/ring-out";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (makeRingOutRequest != null && makeRingOutRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(makeRingOutRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = makeRingOutRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRingOutCall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetRingOutStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetRingOutStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetRingOutStatusResponse)));
        }

        /// <summary>
        /// Make RingOut Call Makes a 2-leg RingOut call.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="makeRingOutRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetRingOutStatusResponse</returns>
        public async System.Threading.Tasks.Task<GetRingOutStatusResponse> CreateRingOutCallAsync (string accountId, string extensionId, MakeRingOutRequest makeRingOutRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetRingOutStatusResponse> localVarResponse = await CreateRingOutCallWithHttpInfoAsync(accountId, extensionId, makeRingOutRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Make RingOut Call Makes a 2-leg RingOut call.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="makeRingOutRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetRingOutStatusResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetRingOutStatusResponse>> CreateRingOutCallWithHttpInfoAsync (string accountId, string extensionId, MakeRingOutRequest makeRingOutRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RingOutApi->CreateRingOutCall");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling RingOutApi->CreateRingOutCall");
            // verify the required parameter 'makeRingOutRequest' is set
            if (makeRingOutRequest == null)
                throw new ApiException(400, "Missing required parameter 'makeRingOutRequest' when calling RingOutApi->CreateRingOutCall");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/ring-out";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (makeRingOutRequest != null && makeRingOutRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(makeRingOutRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = makeRingOutRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRingOutCall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetRingOutStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetRingOutStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetRingOutStatusResponse)));
        }

        /// <summary>
        /// Make RingOut Call Makes a 2-leg RingOut call.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="makeRingOutRequest">JSON body</param>
        /// <returns>GetRingOutStatusResponseIntId</returns>
        [Obsolete]
        public GetRingOutStatusResponseIntId CreateRingOutCallDeprecated (string accountId, string extensionId, MakeRingOutRequest makeRingOutRequest)
        {
             ApiResponse<GetRingOutStatusResponseIntId> localVarResponse = CreateRingOutCallDeprecatedWithHttpInfo(accountId, extensionId, makeRingOutRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Make RingOut Call Makes a 2-leg RingOut call.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="makeRingOutRequest">JSON body</param>
        /// <returns>ApiResponse of GetRingOutStatusResponseIntId</returns>
        [Obsolete]
        public ApiResponse<GetRingOutStatusResponseIntId> CreateRingOutCallDeprecatedWithHttpInfo (string accountId, string extensionId, MakeRingOutRequest makeRingOutRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RingOutApi->CreateRingOutCallDeprecated");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling RingOutApi->CreateRingOutCallDeprecated");
            // verify the required parameter 'makeRingOutRequest' is set
            if (makeRingOutRequest == null)
                throw new ApiException(400, "Missing required parameter 'makeRingOutRequest' when calling RingOutApi->CreateRingOutCallDeprecated");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/ringout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (makeRingOutRequest != null && makeRingOutRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(makeRingOutRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = makeRingOutRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRingOutCallDeprecated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetRingOutStatusResponseIntId>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetRingOutStatusResponseIntId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetRingOutStatusResponseIntId)));
        }

        /// <summary>
        /// Make RingOut Call Makes a 2-leg RingOut call.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="makeRingOutRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetRingOutStatusResponseIntId</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<GetRingOutStatusResponseIntId> CreateRingOutCallDeprecatedAsync (string accountId, string extensionId, MakeRingOutRequest makeRingOutRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetRingOutStatusResponseIntId> localVarResponse = await CreateRingOutCallDeprecatedWithHttpInfoAsync(accountId, extensionId, makeRingOutRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Make RingOut Call Makes a 2-leg RingOut call.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="makeRingOutRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetRingOutStatusResponseIntId)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<GetRingOutStatusResponseIntId>> CreateRingOutCallDeprecatedWithHttpInfoAsync (string accountId, string extensionId, MakeRingOutRequest makeRingOutRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RingOutApi->CreateRingOutCallDeprecated");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling RingOutApi->CreateRingOutCallDeprecated");
            // verify the required parameter 'makeRingOutRequest' is set
            if (makeRingOutRequest == null)
                throw new ApiException(400, "Missing required parameter 'makeRingOutRequest' when calling RingOutApi->CreateRingOutCallDeprecated");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/ringout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (makeRingOutRequest != null && makeRingOutRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(makeRingOutRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = makeRingOutRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRingOutCallDeprecated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetRingOutStatusResponseIntId>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetRingOutStatusResponseIntId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetRingOutStatusResponseIntId)));
        }

        /// <summary>
        /// Cancel RingOut Call Cancels a 2-leg RingOut call.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ringoutId">Internal identifier of a RingOut call</param>
        /// <returns></returns>
        public void DeleteRingOutCall (string accountId, string extensionId, string ringoutId)
        {
             DeleteRingOutCallWithHttpInfo(accountId, extensionId, ringoutId);
        }

        /// <summary>
        /// Cancel RingOut Call Cancels a 2-leg RingOut call.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ringoutId">Internal identifier of a RingOut call</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteRingOutCallWithHttpInfo (string accountId, string extensionId, string ringoutId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RingOutApi->DeleteRingOutCall");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling RingOutApi->DeleteRingOutCall");
            // verify the required parameter 'ringoutId' is set
            if (ringoutId == null)
                throw new ApiException(400, "Missing required parameter 'ringoutId' when calling RingOutApi->DeleteRingOutCall");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/ring-out/{ringoutId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (ringoutId != null) localVarPathParams.Add("ringoutId", this.Configuration.ApiClient.ParameterToString(ringoutId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRingOutCall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Cancel RingOut Call Cancels a 2-leg RingOut call.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ringoutId">Internal identifier of a RingOut call</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRingOutCallAsync (string accountId, string extensionId, string ringoutId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteRingOutCallWithHttpInfoAsync(accountId, extensionId, ringoutId, cancellationToken);

        }

        /// <summary>
        /// Cancel RingOut Call Cancels a 2-leg RingOut call.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ringoutId">Internal identifier of a RingOut call</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRingOutCallWithHttpInfoAsync (string accountId, string extensionId, string ringoutId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RingOutApi->DeleteRingOutCall");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling RingOutApi->DeleteRingOutCall");
            // verify the required parameter 'ringoutId' is set
            if (ringoutId == null)
                throw new ApiException(400, "Missing required parameter 'ringoutId' when calling RingOutApi->DeleteRingOutCall");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/ring-out/{ringoutId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (ringoutId != null) localVarPathParams.Add("ringoutId", this.Configuration.ApiClient.ParameterToString(ringoutId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRingOutCall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Cancel RingOut Call Cancels a 2-leg RingOut call.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ringoutId">Internal identifier of a RingOut call</param>
        /// <returns></returns>
        [Obsolete]
        public void DeleteRingOutCallDeprecated (string accountId, string extensionId, int ringoutId)
        {
             DeleteRingOutCallDeprecatedWithHttpInfo(accountId, extensionId, ringoutId);
        }

        /// <summary>
        /// Cancel RingOut Call Cancels a 2-leg RingOut call.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ringoutId">Internal identifier of a RingOut call</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        public ApiResponse<Object> DeleteRingOutCallDeprecatedWithHttpInfo (string accountId, string extensionId, int ringoutId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RingOutApi->DeleteRingOutCallDeprecated");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling RingOutApi->DeleteRingOutCallDeprecated");
            // verify the required parameter 'ringoutId' is set
            if (ringoutId == null)
                throw new ApiException(400, "Missing required parameter 'ringoutId' when calling RingOutApi->DeleteRingOutCallDeprecated");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/ringout/{ringoutId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (ringoutId != null) localVarPathParams.Add("ringoutId", this.Configuration.ApiClient.ParameterToString(ringoutId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRingOutCallDeprecated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Cancel RingOut Call Cancels a 2-leg RingOut call.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ringoutId">Internal identifier of a RingOut call</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task DeleteRingOutCallDeprecatedAsync (string accountId, string extensionId, int ringoutId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteRingOutCallDeprecatedWithHttpInfoAsync(accountId, extensionId, ringoutId, cancellationToken);

        }

        /// <summary>
        /// Cancel RingOut Call Cancels a 2-leg RingOut call.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ringoutId">Internal identifier of a RingOut call</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRingOutCallDeprecatedWithHttpInfoAsync (string accountId, string extensionId, int ringoutId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RingOutApi->DeleteRingOutCallDeprecated");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling RingOutApi->DeleteRingOutCallDeprecated");
            // verify the required parameter 'ringoutId' is set
            if (ringoutId == null)
                throw new ApiException(400, "Missing required parameter 'ringoutId' when calling RingOutApi->DeleteRingOutCallDeprecated");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/ringout/{ringoutId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (ringoutId != null) localVarPathParams.Add("ringoutId", this.Configuration.ApiClient.ParameterToString(ringoutId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRingOutCallDeprecated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get RingOut Call Status Returns the status of a 2-leg RingOut call.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ringoutId">Internal identifier of a RingOut call</param>
        /// <returns>GetRingOutStatusResponse</returns>
        public GetRingOutStatusResponse ReadRingOutCallStatus (string accountId, string extensionId, string ringoutId)
        {
             ApiResponse<GetRingOutStatusResponse> localVarResponse = ReadRingOutCallStatusWithHttpInfo(accountId, extensionId, ringoutId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get RingOut Call Status Returns the status of a 2-leg RingOut call.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ringoutId">Internal identifier of a RingOut call</param>
        /// <returns>ApiResponse of GetRingOutStatusResponse</returns>
        public ApiResponse<GetRingOutStatusResponse> ReadRingOutCallStatusWithHttpInfo (string accountId, string extensionId, string ringoutId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RingOutApi->ReadRingOutCallStatus");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling RingOutApi->ReadRingOutCallStatus");
            // verify the required parameter 'ringoutId' is set
            if (ringoutId == null)
                throw new ApiException(400, "Missing required parameter 'ringoutId' when calling RingOutApi->ReadRingOutCallStatus");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/ring-out/{ringoutId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (ringoutId != null) localVarPathParams.Add("ringoutId", this.Configuration.ApiClient.ParameterToString(ringoutId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadRingOutCallStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetRingOutStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetRingOutStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetRingOutStatusResponse)));
        }

        /// <summary>
        /// Get RingOut Call Status Returns the status of a 2-leg RingOut call.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ringoutId">Internal identifier of a RingOut call</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetRingOutStatusResponse</returns>
        public async System.Threading.Tasks.Task<GetRingOutStatusResponse> ReadRingOutCallStatusAsync (string accountId, string extensionId, string ringoutId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetRingOutStatusResponse> localVarResponse = await ReadRingOutCallStatusWithHttpInfoAsync(accountId, extensionId, ringoutId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get RingOut Call Status Returns the status of a 2-leg RingOut call.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ringoutId">Internal identifier of a RingOut call</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetRingOutStatusResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetRingOutStatusResponse>> ReadRingOutCallStatusWithHttpInfoAsync (string accountId, string extensionId, string ringoutId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RingOutApi->ReadRingOutCallStatus");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling RingOutApi->ReadRingOutCallStatus");
            // verify the required parameter 'ringoutId' is set
            if (ringoutId == null)
                throw new ApiException(400, "Missing required parameter 'ringoutId' when calling RingOutApi->ReadRingOutCallStatus");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/ring-out/{ringoutId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (ringoutId != null) localVarPathParams.Add("ringoutId", this.Configuration.ApiClient.ParameterToString(ringoutId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadRingOutCallStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetRingOutStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetRingOutStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetRingOutStatusResponse)));
        }

        /// <summary>
        /// Get RingOut Call Status Returns status of a 2-leg RingOut call.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ringoutId">Internal identifier of a RingOut call</param>
        /// <returns>GetRingOutStatusResponse</returns>
        [Obsolete]
        public GetRingOutStatusResponse ReadRingOutCallStatusDeprecated (string accountId, string extensionId, int ringoutId)
        {
             ApiResponse<GetRingOutStatusResponse> localVarResponse = ReadRingOutCallStatusDeprecatedWithHttpInfo(accountId, extensionId, ringoutId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get RingOut Call Status Returns status of a 2-leg RingOut call.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ringoutId">Internal identifier of a RingOut call</param>
        /// <returns>ApiResponse of GetRingOutStatusResponse</returns>
        [Obsolete]
        public ApiResponse<GetRingOutStatusResponse> ReadRingOutCallStatusDeprecatedWithHttpInfo (string accountId, string extensionId, int ringoutId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RingOutApi->ReadRingOutCallStatusDeprecated");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling RingOutApi->ReadRingOutCallStatusDeprecated");
            // verify the required parameter 'ringoutId' is set
            if (ringoutId == null)
                throw new ApiException(400, "Missing required parameter 'ringoutId' when calling RingOutApi->ReadRingOutCallStatusDeprecated");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/ringout/{ringoutId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (ringoutId != null) localVarPathParams.Add("ringoutId", this.Configuration.ApiClient.ParameterToString(ringoutId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadRingOutCallStatusDeprecated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetRingOutStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetRingOutStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetRingOutStatusResponse)));
        }

        /// <summary>
        /// Get RingOut Call Status Returns status of a 2-leg RingOut call.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ringoutId">Internal identifier of a RingOut call</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetRingOutStatusResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<GetRingOutStatusResponse> ReadRingOutCallStatusDeprecatedAsync (string accountId, string extensionId, int ringoutId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetRingOutStatusResponse> localVarResponse = await ReadRingOutCallStatusDeprecatedWithHttpInfoAsync(accountId, extensionId, ringoutId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get RingOut Call Status Returns status of a 2-leg RingOut call.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="ringoutId">Internal identifier of a RingOut call</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetRingOutStatusResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<GetRingOutStatusResponse>> ReadRingOutCallStatusDeprecatedWithHttpInfoAsync (string accountId, string extensionId, int ringoutId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RingOutApi->ReadRingOutCallStatusDeprecated");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling RingOutApi->ReadRingOutCallStatusDeprecated");
            // verify the required parameter 'ringoutId' is set
            if (ringoutId == null)
                throw new ApiException(400, "Missing required parameter 'ringoutId' when calling RingOutApi->ReadRingOutCallStatusDeprecated");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/ringout/{ringoutId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (ringoutId != null) localVarPathParams.Add("ringoutId", this.Configuration.ApiClient.ParameterToString(ringoutId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadRingOutCallStatusDeprecated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetRingOutStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetRingOutStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetRingOutStatusResponse)));
        }

    }
}
