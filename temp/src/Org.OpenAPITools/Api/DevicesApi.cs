/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDevicesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Extension Device List
        /// </summary>
        /// <remarks>
        /// Returns devices of the extension(s) by their ID(s). Batch request is supported
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="linePooling">Pooling type of a device (optional)</param>
        /// <param name="feature">Device feature or multiple features supported (optional)</param>
        /// <param name="page">Number of a page to be returned (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage">Number of records per page to be returned (optional, default to &quot;100&quot;)</param>
        /// <param name="line">Device type (optional, default to HardPhone)</param>
        /// <param name="lineType">Type of phone line (optional)</param>
        /// <returns>GetExtensionDevicesResponse</returns>
        GetExtensionDevicesResponse ListExtensionDevices (string accountId, string extensionId, string linePooling = default(string), string feature = default(string), string page = default(string), string perPage = default(string), string line = default(string), string lineType = default(string));

        /// <summary>
        /// Get Extension Device List
        /// </summary>
        /// <remarks>
        /// Returns devices of the extension(s) by their ID(s). Batch request is supported
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="linePooling">Pooling type of a device (optional)</param>
        /// <param name="feature">Device feature or multiple features supported (optional)</param>
        /// <param name="page">Number of a page to be returned (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage">Number of records per page to be returned (optional, default to &quot;100&quot;)</param>
        /// <param name="line">Device type (optional, default to HardPhone)</param>
        /// <param name="lineType">Type of phone line (optional)</param>
        /// <returns>ApiResponse of GetExtensionDevicesResponse</returns>
        ApiResponse<GetExtensionDevicesResponse> ListExtensionDevicesWithHttpInfo (string accountId, string extensionId, string linePooling = default(string), string feature = default(string), string page = default(string), string perPage = default(string), string line = default(string), string lineType = default(string));
        /// <summary>
        /// Get Device
        /// </summary>
        /// <remarks>
        /// Returns account device(s) by their ID(s).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="deviceId">Internal identifier of a device</param>
        /// <param name="syncEmergencyAddress">Specifies if emergency address should be synchronized or not (optional, default to false)</param>
        /// <returns>GetDeviceInfoResponse</returns>
        GetDeviceInfoResponse ReadDevice (string accountId, long deviceId, bool? syncEmergencyAddress = default(bool?));

        /// <summary>
        /// Get Device
        /// </summary>
        /// <remarks>
        /// Returns account device(s) by their ID(s).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="deviceId">Internal identifier of a device</param>
        /// <param name="syncEmergencyAddress">Specifies if emergency address should be synchronized or not (optional, default to false)</param>
        /// <returns>ApiResponse of GetDeviceInfoResponse</returns>
        ApiResponse<GetDeviceInfoResponse> ReadDeviceWithHttpInfo (string accountId, long deviceId, bool? syncEmergencyAddress = default(bool?));
        /// <summary>
        /// Get Device SIP Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Internal identifier of a device</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>SipInfoResource</returns>
        SipInfoResource ReadDeviceSIPInfo (string deviceId, string accountId);

        /// <summary>
        /// Get Device SIP Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Internal identifier of a device</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of SipInfoResource</returns>
        ApiResponse<SipInfoResource> ReadDeviceSIPInfoWithHttpInfo (string deviceId, string accountId);
        /// <summary>
        /// Update Device
        /// </summary>
        /// <remarks>
        /// Updates account device(s) by their ID(s).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="prestatement"> (optional)</param>
        /// <param name="accountDeviceUpdate"> (optional)</param>
        /// <returns>GetDeviceInfoResponse</returns>
        GetDeviceInfoResponse UpdateDevice (string deviceId, string accountId, bool? prestatement = default(bool?), AccountDeviceUpdate accountDeviceUpdate = default(AccountDeviceUpdate));

        /// <summary>
        /// Update Device
        /// </summary>
        /// <remarks>
        /// Updates account device(s) by their ID(s).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="prestatement"> (optional)</param>
        /// <param name="accountDeviceUpdate"> (optional)</param>
        /// <returns>ApiResponse of GetDeviceInfoResponse</returns>
        ApiResponse<GetDeviceInfoResponse> UpdateDeviceWithHttpInfo (string deviceId, string accountId, bool? prestatement = default(bool?), AccountDeviceUpdate accountDeviceUpdate = default(AccountDeviceUpdate));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Extension Device List
        /// </summary>
        /// <remarks>
        /// Returns devices of the extension(s) by their ID(s). Batch request is supported
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="linePooling">Pooling type of a device (optional)</param>
        /// <param name="feature">Device feature or multiple features supported (optional)</param>
        /// <param name="page">Number of a page to be returned (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage">Number of records per page to be returned (optional, default to &quot;100&quot;)</param>
        /// <param name="line">Device type (optional, default to HardPhone)</param>
        /// <param name="lineType">Type of phone line (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetExtensionDevicesResponse</returns>
        System.Threading.Tasks.Task<GetExtensionDevicesResponse> ListExtensionDevicesAsync (string accountId, string extensionId, string linePooling = default(string), string feature = default(string), string page = default(string), string perPage = default(string), string line = default(string), string lineType = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Extension Device List
        /// </summary>
        /// <remarks>
        /// Returns devices of the extension(s) by their ID(s). Batch request is supported
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="linePooling">Pooling type of a device (optional)</param>
        /// <param name="feature">Device feature or multiple features supported (optional)</param>
        /// <param name="page">Number of a page to be returned (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage">Number of records per page to be returned (optional, default to &quot;100&quot;)</param>
        /// <param name="line">Device type (optional, default to HardPhone)</param>
        /// <param name="lineType">Type of phone line (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetExtensionDevicesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetExtensionDevicesResponse>> ListExtensionDevicesWithHttpInfoAsync (string accountId, string extensionId, string linePooling = default(string), string feature = default(string), string page = default(string), string perPage = default(string), string line = default(string), string lineType = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Device
        /// </summary>
        /// <remarks>
        /// Returns account device(s) by their ID(s).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="deviceId">Internal identifier of a device</param>
        /// <param name="syncEmergencyAddress">Specifies if emergency address should be synchronized or not (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetDeviceInfoResponse</returns>
        System.Threading.Tasks.Task<GetDeviceInfoResponse> ReadDeviceAsync (string accountId, long deviceId, bool? syncEmergencyAddress = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Device
        /// </summary>
        /// <remarks>
        /// Returns account device(s) by their ID(s).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="deviceId">Internal identifier of a device</param>
        /// <param name="syncEmergencyAddress">Specifies if emergency address should be synchronized or not (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetDeviceInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDeviceInfoResponse>> ReadDeviceWithHttpInfoAsync (string accountId, long deviceId, bool? syncEmergencyAddress = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Device SIP Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Internal identifier of a device</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SipInfoResource</returns>
        System.Threading.Tasks.Task<SipInfoResource> ReadDeviceSIPInfoAsync (string deviceId, string accountId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Device SIP Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Internal identifier of a device</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SipInfoResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<SipInfoResource>> ReadDeviceSIPInfoWithHttpInfoAsync (string deviceId, string accountId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Device
        /// </summary>
        /// <remarks>
        /// Updates account device(s) by their ID(s).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="prestatement"> (optional)</param>
        /// <param name="accountDeviceUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetDeviceInfoResponse</returns>
        System.Threading.Tasks.Task<GetDeviceInfoResponse> UpdateDeviceAsync (string deviceId, string accountId, bool? prestatement = default(bool?), AccountDeviceUpdate accountDeviceUpdate = default(AccountDeviceUpdate), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Device
        /// </summary>
        /// <remarks>
        /// Updates account device(s) by their ID(s).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="prestatement"> (optional)</param>
        /// <param name="accountDeviceUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetDeviceInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDeviceInfoResponse>> UpdateDeviceWithHttpInfoAsync (string deviceId, string accountId, bool? prestatement = default(bool?), AccountDeviceUpdate accountDeviceUpdate = default(AccountDeviceUpdate), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DevicesApi : IDevicesApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DevicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DevicesApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DevicesApi"/> class
        /// </summary>
        /// <returns></returns>
        public DevicesApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DevicesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DevicesApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Extension Device List Returns devices of the extension(s) by their ID(s). Batch request is supported
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="linePooling">Pooling type of a device (optional)</param>
        /// <param name="feature">Device feature or multiple features supported (optional)</param>
        /// <param name="page">Number of a page to be returned (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage">Number of records per page to be returned (optional, default to &quot;100&quot;)</param>
        /// <param name="line">Device type (optional, default to HardPhone)</param>
        /// <param name="lineType">Type of phone line (optional)</param>
        /// <returns>GetExtensionDevicesResponse</returns>
        public GetExtensionDevicesResponse ListExtensionDevices (string accountId, string extensionId, string linePooling = default(string), string feature = default(string), string page = default(string), string perPage = default(string), string line = default(string), string lineType = default(string))
        {
             ApiResponse<GetExtensionDevicesResponse> localVarResponse = ListExtensionDevicesWithHttpInfo(accountId, extensionId, linePooling, feature, page, perPage, line, lineType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Extension Device List Returns devices of the extension(s) by their ID(s). Batch request is supported
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="linePooling">Pooling type of a device (optional)</param>
        /// <param name="feature">Device feature or multiple features supported (optional)</param>
        /// <param name="page">Number of a page to be returned (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage">Number of records per page to be returned (optional, default to &quot;100&quot;)</param>
        /// <param name="line">Device type (optional, default to HardPhone)</param>
        /// <param name="lineType">Type of phone line (optional)</param>
        /// <returns>ApiResponse of GetExtensionDevicesResponse</returns>
        public ApiResponse<GetExtensionDevicesResponse> ListExtensionDevicesWithHttpInfo (string accountId, string extensionId, string linePooling = default(string), string feature = default(string), string page = default(string), string perPage = default(string), string line = default(string), string lineType = default(string))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling DevicesApi->ListExtensionDevices");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling DevicesApi->ListExtensionDevices");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/device";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (linePooling != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "linePooling", linePooling)); // query parameter
            if (feature != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "feature", feature)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (line != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "line", line)); // query parameter
            if (lineType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lineType", lineType)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListExtensionDevices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetExtensionDevicesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetExtensionDevicesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetExtensionDevicesResponse)));
        }

        /// <summary>
        /// Get Extension Device List Returns devices of the extension(s) by their ID(s). Batch request is supported
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="linePooling">Pooling type of a device (optional)</param>
        /// <param name="feature">Device feature or multiple features supported (optional)</param>
        /// <param name="page">Number of a page to be returned (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage">Number of records per page to be returned (optional, default to &quot;100&quot;)</param>
        /// <param name="line">Device type (optional, default to HardPhone)</param>
        /// <param name="lineType">Type of phone line (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetExtensionDevicesResponse</returns>
        public async System.Threading.Tasks.Task<GetExtensionDevicesResponse> ListExtensionDevicesAsync (string accountId, string extensionId, string linePooling = default(string), string feature = default(string), string page = default(string), string perPage = default(string), string line = default(string), string lineType = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetExtensionDevicesResponse> localVarResponse = await ListExtensionDevicesWithHttpInfoAsync(accountId, extensionId, linePooling, feature, page, perPage, line, lineType, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Extension Device List Returns devices of the extension(s) by their ID(s). Batch request is supported
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="linePooling">Pooling type of a device (optional)</param>
        /// <param name="feature">Device feature or multiple features supported (optional)</param>
        /// <param name="page">Number of a page to be returned (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage">Number of records per page to be returned (optional, default to &quot;100&quot;)</param>
        /// <param name="line">Device type (optional, default to HardPhone)</param>
        /// <param name="lineType">Type of phone line (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetExtensionDevicesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetExtensionDevicesResponse>> ListExtensionDevicesWithHttpInfoAsync (string accountId, string extensionId, string linePooling = default(string), string feature = default(string), string page = default(string), string perPage = default(string), string line = default(string), string lineType = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling DevicesApi->ListExtensionDevices");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling DevicesApi->ListExtensionDevices");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/device";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (linePooling != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "linePooling", linePooling)); // query parameter
            if (feature != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "feature", feature)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (line != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "line", line)); // query parameter
            if (lineType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lineType", lineType)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListExtensionDevices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetExtensionDevicesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetExtensionDevicesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetExtensionDevicesResponse)));
        }

        /// <summary>
        /// Get Device Returns account device(s) by their ID(s).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="deviceId">Internal identifier of a device</param>
        /// <param name="syncEmergencyAddress">Specifies if emergency address should be synchronized or not (optional, default to false)</param>
        /// <returns>GetDeviceInfoResponse</returns>
        public GetDeviceInfoResponse ReadDevice (string accountId, long deviceId, bool? syncEmergencyAddress = default(bool?))
        {
             ApiResponse<GetDeviceInfoResponse> localVarResponse = ReadDeviceWithHttpInfo(accountId, deviceId, syncEmergencyAddress);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Device Returns account device(s) by their ID(s).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="deviceId">Internal identifier of a device</param>
        /// <param name="syncEmergencyAddress">Specifies if emergency address should be synchronized or not (optional, default to false)</param>
        /// <returns>ApiResponse of GetDeviceInfoResponse</returns>
        public ApiResponse<GetDeviceInfoResponse> ReadDeviceWithHttpInfo (string accountId, long deviceId, bool? syncEmergencyAddress = default(bool?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling DevicesApi->ReadDevice");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ReadDevice");

            var localVarPath = "/restapi/v1.0/account/{accountId}/device/{deviceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (syncEmergencyAddress != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "syncEmergencyAddress", syncEmergencyAddress)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadDevice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDeviceInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetDeviceInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDeviceInfoResponse)));
        }

        /// <summary>
        /// Get Device Returns account device(s) by their ID(s).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="deviceId">Internal identifier of a device</param>
        /// <param name="syncEmergencyAddress">Specifies if emergency address should be synchronized or not (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetDeviceInfoResponse</returns>
        public async System.Threading.Tasks.Task<GetDeviceInfoResponse> ReadDeviceAsync (string accountId, long deviceId, bool? syncEmergencyAddress = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetDeviceInfoResponse> localVarResponse = await ReadDeviceWithHttpInfoAsync(accountId, deviceId, syncEmergencyAddress, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Device Returns account device(s) by their ID(s).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="deviceId">Internal identifier of a device</param>
        /// <param name="syncEmergencyAddress">Specifies if emergency address should be synchronized or not (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetDeviceInfoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetDeviceInfoResponse>> ReadDeviceWithHttpInfoAsync (string accountId, long deviceId, bool? syncEmergencyAddress = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling DevicesApi->ReadDevice");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ReadDevice");

            var localVarPath = "/restapi/v1.0/account/{accountId}/device/{deviceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (syncEmergencyAddress != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "syncEmergencyAddress", syncEmergencyAddress)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadDevice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDeviceInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetDeviceInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDeviceInfoResponse)));
        }

        /// <summary>
        /// Get Device SIP Info 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Internal identifier of a device</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>SipInfoResource</returns>
        public SipInfoResource ReadDeviceSIPInfo (string deviceId, string accountId)
        {
             ApiResponse<SipInfoResource> localVarResponse = ReadDeviceSIPInfoWithHttpInfo(deviceId, accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Device SIP Info 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Internal identifier of a device</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of SipInfoResource</returns>
        public ApiResponse<SipInfoResource> ReadDeviceSIPInfoWithHttpInfo (string deviceId, string accountId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ReadDeviceSIPInfo");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling DevicesApi->ReadDeviceSIPInfo");

            var localVarPath = "/restapi/v1.0/account/{accountId}/device/{deviceId}/sip-info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadDeviceSIPInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SipInfoResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SipInfoResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SipInfoResource)));
        }

        /// <summary>
        /// Get Device SIP Info 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Internal identifier of a device</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SipInfoResource</returns>
        public async System.Threading.Tasks.Task<SipInfoResource> ReadDeviceSIPInfoAsync (string deviceId, string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SipInfoResource> localVarResponse = await ReadDeviceSIPInfoWithHttpInfoAsync(deviceId, accountId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Device SIP Info 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Internal identifier of a device</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SipInfoResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SipInfoResource>> ReadDeviceSIPInfoWithHttpInfoAsync (string deviceId, string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ReadDeviceSIPInfo");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling DevicesApi->ReadDeviceSIPInfo");

            var localVarPath = "/restapi/v1.0/account/{accountId}/device/{deviceId}/sip-info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadDeviceSIPInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SipInfoResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SipInfoResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SipInfoResource)));
        }

        /// <summary>
        /// Update Device Updates account device(s) by their ID(s).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="prestatement"> (optional)</param>
        /// <param name="accountDeviceUpdate"> (optional)</param>
        /// <returns>GetDeviceInfoResponse</returns>
        public GetDeviceInfoResponse UpdateDevice (string deviceId, string accountId, bool? prestatement = default(bool?), AccountDeviceUpdate accountDeviceUpdate = default(AccountDeviceUpdate))
        {
             ApiResponse<GetDeviceInfoResponse> localVarResponse = UpdateDeviceWithHttpInfo(deviceId, accountId, prestatement, accountDeviceUpdate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Device Updates account device(s) by their ID(s).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="prestatement"> (optional)</param>
        /// <param name="accountDeviceUpdate"> (optional)</param>
        /// <returns>ApiResponse of GetDeviceInfoResponse</returns>
        public ApiResponse<GetDeviceInfoResponse> UpdateDeviceWithHttpInfo (string deviceId, string accountId, bool? prestatement = default(bool?), AccountDeviceUpdate accountDeviceUpdate = default(AccountDeviceUpdate))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->UpdateDevice");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling DevicesApi->UpdateDevice");

            var localVarPath = "/restapi/v1.0/account/{accountId}/device/{deviceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (prestatement != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "prestatement", prestatement)); // query parameter
            if (accountDeviceUpdate != null && accountDeviceUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(accountDeviceUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = accountDeviceUpdate; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDevice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDeviceInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetDeviceInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDeviceInfoResponse)));
        }

        /// <summary>
        /// Update Device Updates account device(s) by their ID(s).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="prestatement"> (optional)</param>
        /// <param name="accountDeviceUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetDeviceInfoResponse</returns>
        public async System.Threading.Tasks.Task<GetDeviceInfoResponse> UpdateDeviceAsync (string deviceId, string accountId, bool? prestatement = default(bool?), AccountDeviceUpdate accountDeviceUpdate = default(AccountDeviceUpdate), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetDeviceInfoResponse> localVarResponse = await UpdateDeviceWithHttpInfoAsync(deviceId, accountId, prestatement, accountDeviceUpdate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Device Updates account device(s) by their ID(s).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="prestatement"> (optional)</param>
        /// <param name="accountDeviceUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetDeviceInfoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetDeviceInfoResponse>> UpdateDeviceWithHttpInfoAsync (string deviceId, string accountId, bool? prestatement = default(bool?), AccountDeviceUpdate accountDeviceUpdate = default(AccountDeviceUpdate), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->UpdateDevice");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling DevicesApi->UpdateDevice");

            var localVarPath = "/restapi/v1.0/account/{accountId}/device/{deviceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (prestatement != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "prestatement", prestatement)); // query parameter
            if (accountDeviceUpdate != null && accountDeviceUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(accountDeviceUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = accountDeviceUpdate; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDevice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDeviceInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetDeviceInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDeviceInfoResponse)));
        }

    }
}
