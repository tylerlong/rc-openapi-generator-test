/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRoleManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Assign Default Role
        /// </summary>
        /// <remarks>
        /// Assigns the default role to the currently logged-in user extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>AssignedRolesResource</returns>
        AssignedRolesResource AssignDefaultRole (string extensionId, string accountId);

        /// <summary>
        /// Assign Default Role
        /// </summary>
        /// <remarks>
        /// Assigns the default role to the currently logged-in user extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of AssignedRolesResource</returns>
        ApiResponse<AssignedRolesResource> AssignDefaultRoleWithHttpInfo (string extensionId, string accountId);
        /// <summary>
        /// Assign Multiple User Roles
        /// </summary>
        /// <remarks>
        /// Assigns multiple user roles.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Internal identifier of a role</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="bulkRoleAssignResource"> (optional)</param>
        /// <returns></returns>
        void AssignMultipleUserRoles (string roleId, string accountId, BulkRoleAssignResource bulkRoleAssignResource = default(BulkRoleAssignResource));

        /// <summary>
        /// Assign Multiple User Roles
        /// </summary>
        /// <remarks>
        /// Assigns multiple user roles.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Internal identifier of a role</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="bulkRoleAssignResource"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssignMultipleUserRolesWithHttpInfo (string roleId, string accountId, BulkRoleAssignResource bulkRoleAssignResource = default(BulkRoleAssignResource));
        /// <summary>
        /// Create Custom Role
        /// </summary>
        /// <remarks>
        /// Creates custom user role.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="roleResource"> (optional)</param>
        /// <returns></returns>
        void CreateCustomRole (string accountId, RoleResource roleResource = default(RoleResource));

        /// <summary>
        /// Create Custom Role
        /// </summary>
        /// <remarks>
        /// Creates custom user role.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="roleResource"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateCustomRoleWithHttpInfo (string accountId, RoleResource roleResource = default(RoleResource));
        /// <summary>
        /// Delete Custom Role
        /// </summary>
        /// <remarks>
        /// Deletes custom user role by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="validateOnly">Specifies that role should be validated prior to deletion whether it can be deleted or not (optional)</param>
        /// <returns></returns>
        void DeleteCustomRole (string roleId, string accountId, bool? validateOnly = default(bool?));

        /// <summary>
        /// Delete Custom Role
        /// </summary>
        /// <remarks>
        /// Deletes custom user role by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="validateOnly">Specifies that role should be validated prior to deletion whether it can be deleted or not (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCustomRoleWithHttpInfo (string roleId, string accountId, bool? validateOnly = default(bool?));
        /// <summary>
        /// Get Assigned Role List
        /// </summary>
        /// <remarks>
        /// Returns the list of assigned roles for the current account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="showHidden"> (optional)</param>
        /// <returns>ExtensionWithRolesCollectionResource</returns>
        ExtensionWithRolesCollectionResource ListAssignedRoles (string accountId, bool? showHidden = default(bool?));

        /// <summary>
        /// Get Assigned Role List
        /// </summary>
        /// <remarks>
        /// Returns the list of assigned roles for the current account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="showHidden"> (optional)</param>
        /// <returns>ApiResponse of ExtensionWithRolesCollectionResource</returns>
        ApiResponse<ExtensionWithRolesCollectionResource> ListAssignedRolesWithHttpInfo (string accountId, bool? showHidden = default(bool?));
        /// <summary>
        /// Get Standard User Role List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <param name="servicePlanId"> (optional)</param>
        /// <returns>RolesCollectionResource</returns>
        RolesCollectionResource ListStandardUserRole (string page = default(string), string perPage = default(string), string servicePlanId = default(string));

        /// <summary>
        /// Get Standard User Role List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <param name="servicePlanId"> (optional)</param>
        /// <returns>ApiResponse of RolesCollectionResource</returns>
        ApiResponse<RolesCollectionResource> ListStandardUserRoleWithHttpInfo (string page = default(string), string perPage = default(string), string servicePlanId = default(string));
        /// <summary>
        /// Get User Assigned Role List
        /// </summary>
        /// <remarks>
        /// Returns the list of roles assigned to the current extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="showHidden"> (optional)</param>
        /// <returns>AssignedRolesResource</returns>
        AssignedRolesResource ListUserAssignedRoles (string extensionId, string accountId, bool? showHidden = default(bool?));

        /// <summary>
        /// Get User Assigned Role List
        /// </summary>
        /// <remarks>
        /// Returns the list of roles assigned to the current extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="showHidden"> (optional)</param>
        /// <returns>ApiResponse of AssignedRolesResource</returns>
        ApiResponse<AssignedRolesResource> ListUserAssignedRolesWithHttpInfo (string extensionId, string accountId, bool? showHidden = default(bool?));
        /// <summary>
        /// Get Account User Role List
        /// </summary>
        /// <remarks>
        /// Returns the list of account user roles.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="custom">Specifies whether to return custom or predefined only roles. If not specified, all roles are returned (optional)</param>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <returns>RolesCollectionResource</returns>
        RolesCollectionResource ListUserRoles (string accountId, bool? custom = default(bool?), string page = default(string), string perPage = default(string));

        /// <summary>
        /// Get Account User Role List
        /// </summary>
        /// <remarks>
        /// Returns the list of account user roles.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="custom">Specifies whether to return custom or predefined only roles. If not specified, all roles are returned (optional)</param>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <returns>ApiResponse of RolesCollectionResource</returns>
        ApiResponse<RolesCollectionResource> ListUserRolesWithHttpInfo (string accountId, bool? custom = default(bool?), string page = default(string), string perPage = default(string));
        /// <summary>
        /// Get Default User Role
        /// </summary>
        /// <remarks>
        /// Returns account default user role.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns></returns>
        void ReadDefaultRole (string accountId);

        /// <summary>
        /// Get Default User Role
        /// </summary>
        /// <remarks>
        /// Returns account default user role.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReadDefaultRoleWithHttpInfo (string accountId);
        /// <summary>
        /// Get Standard User Role
        /// </summary>
        /// <remarks>
        /// Returns standard user role.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>RoleResource</returns>
        RoleResource ReadStandardUserRole (string roleId);

        /// <summary>
        /// Get Standard User Role
        /// </summary>
        /// <remarks>
        /// Returns standard user role.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>ApiResponse of RoleResource</returns>
        ApiResponse<RoleResource> ReadStandardUserRoleWithHttpInfo (string roleId);
        /// <summary>
        /// Get User Role
        /// </summary>
        /// <remarks>
        /// Returns a user role on the current account by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>RoleResource</returns>
        RoleResource ReadUserRole (string roleId, string accountId);

        /// <summary>
        /// Get User Role
        /// </summary>
        /// <remarks>
        /// Returns a user role on the current account by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of RoleResource</returns>
        ApiResponse<RoleResource> ReadUserRoleWithHttpInfo (string roleId, string accountId);
        /// <summary>
        /// Set Default User Role
        /// </summary>
        /// <remarks>
        /// Updates account default user role.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="defaultUserRoleRequest">JSON body</param>
        /// <returns></returns>
        void UpdateDefaultUserRole (string accountId, DefaultUserRoleRequest defaultUserRoleRequest);

        /// <summary>
        /// Set Default User Role
        /// </summary>
        /// <remarks>
        /// Updates account default user role.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="defaultUserRoleRequest">JSON body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateDefaultUserRoleWithHttpInfo (string accountId, DefaultUserRoleRequest defaultUserRoleRequest);
        /// <summary>
        /// Update User Assigned Roles
        /// </summary>
        /// <remarks>
        /// Updates the list of assigned roles for the current user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="assignedRolesResource"> (optional)</param>
        /// <returns>AssignedRolesResource</returns>
        AssignedRolesResource UpdateUserAssignedRoles (string extensionId, string accountId, AssignedRolesResource assignedRolesResource = default(AssignedRolesResource));

        /// <summary>
        /// Update User Assigned Roles
        /// </summary>
        /// <remarks>
        /// Updates the list of assigned roles for the current user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="assignedRolesResource"> (optional)</param>
        /// <returns>ApiResponse of AssignedRolesResource</returns>
        ApiResponse<AssignedRolesResource> UpdateUserAssignedRolesWithHttpInfo (string extensionId, string accountId, AssignedRolesResource assignedRolesResource = default(AssignedRolesResource));
        /// <summary>
        /// Update User Role
        /// </summary>
        /// <remarks>
        /// Updates a user role on the current account by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="roleResource"> (optional)</param>
        /// <returns></returns>
        void UpdateUserRole (string roleId, string accountId, RoleResource roleResource = default(RoleResource));

        /// <summary>
        /// Update User Role
        /// </summary>
        /// <remarks>
        /// Updates a user role on the current account by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="roleResource"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateUserRoleWithHttpInfo (string roleId, string accountId, RoleResource roleResource = default(RoleResource));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Assign Default Role
        /// </summary>
        /// <remarks>
        /// Assigns the default role to the currently logged-in user extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AssignedRolesResource</returns>
        System.Threading.Tasks.Task<AssignedRolesResource> AssignDefaultRoleAsync (string extensionId, string accountId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Assign Default Role
        /// </summary>
        /// <remarks>
        /// Assigns the default role to the currently logged-in user extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AssignedRolesResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssignedRolesResource>> AssignDefaultRoleWithHttpInfoAsync (string extensionId, string accountId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Assign Multiple User Roles
        /// </summary>
        /// <remarks>
        /// Assigns multiple user roles.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Internal identifier of a role</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="bulkRoleAssignResource"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssignMultipleUserRolesAsync (string roleId, string accountId, BulkRoleAssignResource bulkRoleAssignResource = default(BulkRoleAssignResource), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Assign Multiple User Roles
        /// </summary>
        /// <remarks>
        /// Assigns multiple user roles.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Internal identifier of a role</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="bulkRoleAssignResource"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssignMultipleUserRolesWithHttpInfoAsync (string roleId, string accountId, BulkRoleAssignResource bulkRoleAssignResource = default(BulkRoleAssignResource), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create Custom Role
        /// </summary>
        /// <remarks>
        /// Creates custom user role.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="roleResource"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateCustomRoleAsync (string accountId, RoleResource roleResource = default(RoleResource), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Custom Role
        /// </summary>
        /// <remarks>
        /// Creates custom user role.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="roleResource"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateCustomRoleWithHttpInfoAsync (string accountId, RoleResource roleResource = default(RoleResource), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete Custom Role
        /// </summary>
        /// <remarks>
        /// Deletes custom user role by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="validateOnly">Specifies that role should be validated prior to deletion whether it can be deleted or not (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCustomRoleAsync (string roleId, string accountId, bool? validateOnly = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Custom Role
        /// </summary>
        /// <remarks>
        /// Deletes custom user role by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="validateOnly">Specifies that role should be validated prior to deletion whether it can be deleted or not (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCustomRoleWithHttpInfoAsync (string roleId, string accountId, bool? validateOnly = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Assigned Role List
        /// </summary>
        /// <remarks>
        /// Returns the list of assigned roles for the current account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="showHidden"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ExtensionWithRolesCollectionResource</returns>
        System.Threading.Tasks.Task<ExtensionWithRolesCollectionResource> ListAssignedRolesAsync (string accountId, bool? showHidden = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Assigned Role List
        /// </summary>
        /// <remarks>
        /// Returns the list of assigned roles for the current account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="showHidden"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ExtensionWithRolesCollectionResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionWithRolesCollectionResource>> ListAssignedRolesWithHttpInfoAsync (string accountId, bool? showHidden = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Standard User Role List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <param name="servicePlanId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RolesCollectionResource</returns>
        System.Threading.Tasks.Task<RolesCollectionResource> ListStandardUserRoleAsync (string page = default(string), string perPage = default(string), string servicePlanId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Standard User Role List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <param name="servicePlanId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RolesCollectionResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<RolesCollectionResource>> ListStandardUserRoleWithHttpInfoAsync (string page = default(string), string perPage = default(string), string servicePlanId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get User Assigned Role List
        /// </summary>
        /// <remarks>
        /// Returns the list of roles assigned to the current extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="showHidden"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AssignedRolesResource</returns>
        System.Threading.Tasks.Task<AssignedRolesResource> ListUserAssignedRolesAsync (string extensionId, string accountId, bool? showHidden = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get User Assigned Role List
        /// </summary>
        /// <remarks>
        /// Returns the list of roles assigned to the current extension.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="showHidden"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AssignedRolesResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssignedRolesResource>> ListUserAssignedRolesWithHttpInfoAsync (string extensionId, string accountId, bool? showHidden = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Account User Role List
        /// </summary>
        /// <remarks>
        /// Returns the list of account user roles.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="custom">Specifies whether to return custom or predefined only roles. If not specified, all roles are returned (optional)</param>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RolesCollectionResource</returns>
        System.Threading.Tasks.Task<RolesCollectionResource> ListUserRolesAsync (string accountId, bool? custom = default(bool?), string page = default(string), string perPage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Account User Role List
        /// </summary>
        /// <remarks>
        /// Returns the list of account user roles.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="custom">Specifies whether to return custom or predefined only roles. If not specified, all roles are returned (optional)</param>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RolesCollectionResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<RolesCollectionResource>> ListUserRolesWithHttpInfoAsync (string accountId, bool? custom = default(bool?), string page = default(string), string perPage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Default User Role
        /// </summary>
        /// <remarks>
        /// Returns account default user role.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReadDefaultRoleAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Default User Role
        /// </summary>
        /// <remarks>
        /// Returns account default user role.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReadDefaultRoleWithHttpInfoAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Standard User Role
        /// </summary>
        /// <remarks>
        /// Returns standard user role.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RoleResource</returns>
        System.Threading.Tasks.Task<RoleResource> ReadStandardUserRoleAsync (string roleId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Standard User Role
        /// </summary>
        /// <remarks>
        /// Returns standard user role.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RoleResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoleResource>> ReadStandardUserRoleWithHttpInfoAsync (string roleId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get User Role
        /// </summary>
        /// <remarks>
        /// Returns a user role on the current account by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RoleResource</returns>
        System.Threading.Tasks.Task<RoleResource> ReadUserRoleAsync (string roleId, string accountId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get User Role
        /// </summary>
        /// <remarks>
        /// Returns a user role on the current account by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RoleResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoleResource>> ReadUserRoleWithHttpInfoAsync (string roleId, string accountId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Set Default User Role
        /// </summary>
        /// <remarks>
        /// Updates account default user role.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="defaultUserRoleRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateDefaultUserRoleAsync (string accountId, DefaultUserRoleRequest defaultUserRoleRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set Default User Role
        /// </summary>
        /// <remarks>
        /// Updates account default user role.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="defaultUserRoleRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateDefaultUserRoleWithHttpInfoAsync (string accountId, DefaultUserRoleRequest defaultUserRoleRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update User Assigned Roles
        /// </summary>
        /// <remarks>
        /// Updates the list of assigned roles for the current user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="assignedRolesResource"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AssignedRolesResource</returns>
        System.Threading.Tasks.Task<AssignedRolesResource> UpdateUserAssignedRolesAsync (string extensionId, string accountId, AssignedRolesResource assignedRolesResource = default(AssignedRolesResource), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update User Assigned Roles
        /// </summary>
        /// <remarks>
        /// Updates the list of assigned roles for the current user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="assignedRolesResource"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AssignedRolesResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssignedRolesResource>> UpdateUserAssignedRolesWithHttpInfoAsync (string extensionId, string accountId, AssignedRolesResource assignedRolesResource = default(AssignedRolesResource), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update User Role
        /// </summary>
        /// <remarks>
        /// Updates a user role on the current account by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="roleResource"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateUserRoleAsync (string roleId, string accountId, RoleResource roleResource = default(RoleResource), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update User Role
        /// </summary>
        /// <remarks>
        /// Updates a user role on the current account by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="roleResource"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateUserRoleWithHttpInfoAsync (string roleId, string accountId, RoleResource roleResource = default(RoleResource), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RoleManagementApi : IRoleManagementApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RoleManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RoleManagementApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RoleManagementApi"/> class
        /// </summary>
        /// <returns></returns>
        public RoleManagementApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RoleManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RoleManagementApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Assign Default Role Assigns the default role to the currently logged-in user extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>AssignedRolesResource</returns>
        public AssignedRolesResource AssignDefaultRole (string extensionId, string accountId)
        {
             ApiResponse<AssignedRolesResource> localVarResponse = AssignDefaultRoleWithHttpInfo(extensionId, accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Assign Default Role Assigns the default role to the currently logged-in user extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of AssignedRolesResource</returns>
        public ApiResponse<AssignedRolesResource> AssignDefaultRoleWithHttpInfo (string extensionId, string accountId)
        {
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling RoleManagementApi->AssignDefaultRole");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoleManagementApi->AssignDefaultRole");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/assigned-role/default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignDefaultRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssignedRolesResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssignedRolesResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssignedRolesResource)));
        }

        /// <summary>
        /// Assign Default Role Assigns the default role to the currently logged-in user extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AssignedRolesResource</returns>
        public async System.Threading.Tasks.Task<AssignedRolesResource> AssignDefaultRoleAsync (string extensionId, string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AssignedRolesResource> localVarResponse = await AssignDefaultRoleWithHttpInfoAsync(extensionId, accountId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Assign Default Role Assigns the default role to the currently logged-in user extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AssignedRolesResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssignedRolesResource>> AssignDefaultRoleWithHttpInfoAsync (string extensionId, string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling RoleManagementApi->AssignDefaultRole");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoleManagementApi->AssignDefaultRole");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/assigned-role/default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignDefaultRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssignedRolesResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssignedRolesResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssignedRolesResource)));
        }

        /// <summary>
        /// Assign Multiple User Roles Assigns multiple user roles.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Internal identifier of a role</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="bulkRoleAssignResource"> (optional)</param>
        /// <returns></returns>
        public void AssignMultipleUserRoles (string roleId, string accountId, BulkRoleAssignResource bulkRoleAssignResource = default(BulkRoleAssignResource))
        {
             AssignMultipleUserRolesWithHttpInfo(roleId, accountId, bulkRoleAssignResource);
        }

        /// <summary>
        /// Assign Multiple User Roles Assigns multiple user roles.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Internal identifier of a role</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="bulkRoleAssignResource"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AssignMultipleUserRolesWithHttpInfo (string roleId, string accountId, BulkRoleAssignResource bulkRoleAssignResource = default(BulkRoleAssignResource))
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RoleManagementApi->AssignMultipleUserRoles");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoleManagementApi->AssignMultipleUserRoles");

            var localVarPath = "/restapi/v1.0/account/{accountId}/user-role/{roleId}/bulk-assign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (roleId != null) localVarPathParams.Add("roleId", this.Configuration.ApiClient.ParameterToString(roleId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (bulkRoleAssignResource != null && bulkRoleAssignResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bulkRoleAssignResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bulkRoleAssignResource; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignMultipleUserRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Assign Multiple User Roles Assigns multiple user roles.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Internal identifier of a role</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="bulkRoleAssignResource"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssignMultipleUserRolesAsync (string roleId, string accountId, BulkRoleAssignResource bulkRoleAssignResource = default(BulkRoleAssignResource), CancellationToken cancellationToken = default(CancellationToken))
        {
             await AssignMultipleUserRolesWithHttpInfoAsync(roleId, accountId, bulkRoleAssignResource, cancellationToken);

        }

        /// <summary>
        /// Assign Multiple User Roles Assigns multiple user roles.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Internal identifier of a role</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="bulkRoleAssignResource"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssignMultipleUserRolesWithHttpInfoAsync (string roleId, string accountId, BulkRoleAssignResource bulkRoleAssignResource = default(BulkRoleAssignResource), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RoleManagementApi->AssignMultipleUserRoles");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoleManagementApi->AssignMultipleUserRoles");

            var localVarPath = "/restapi/v1.0/account/{accountId}/user-role/{roleId}/bulk-assign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (roleId != null) localVarPathParams.Add("roleId", this.Configuration.ApiClient.ParameterToString(roleId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (bulkRoleAssignResource != null && bulkRoleAssignResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bulkRoleAssignResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bulkRoleAssignResource; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignMultipleUserRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create Custom Role Creates custom user role.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="roleResource"> (optional)</param>
        /// <returns></returns>
        public void CreateCustomRole (string accountId, RoleResource roleResource = default(RoleResource))
        {
             CreateCustomRoleWithHttpInfo(accountId, roleResource);
        }

        /// <summary>
        /// Create Custom Role Creates custom user role.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="roleResource"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateCustomRoleWithHttpInfo (string accountId, RoleResource roleResource = default(RoleResource))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoleManagementApi->CreateCustomRole");

            var localVarPath = "/restapi/v1.0/account/{accountId}/user-role";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (roleResource != null && roleResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(roleResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = roleResource; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create Custom Role Creates custom user role.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="roleResource"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateCustomRoleAsync (string accountId, RoleResource roleResource = default(RoleResource), CancellationToken cancellationToken = default(CancellationToken))
        {
             await CreateCustomRoleWithHttpInfoAsync(accountId, roleResource, cancellationToken);

        }

        /// <summary>
        /// Create Custom Role Creates custom user role.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="roleResource"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateCustomRoleWithHttpInfoAsync (string accountId, RoleResource roleResource = default(RoleResource), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoleManagementApi->CreateCustomRole");

            var localVarPath = "/restapi/v1.0/account/{accountId}/user-role";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (roleResource != null && roleResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(roleResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = roleResource; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Custom Role Deletes custom user role by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="validateOnly">Specifies that role should be validated prior to deletion whether it can be deleted or not (optional)</param>
        /// <returns></returns>
        public void DeleteCustomRole (string roleId, string accountId, bool? validateOnly = default(bool?))
        {
             DeleteCustomRoleWithHttpInfo(roleId, accountId, validateOnly);
        }

        /// <summary>
        /// Delete Custom Role Deletes custom user role by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="validateOnly">Specifies that role should be validated prior to deletion whether it can be deleted or not (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCustomRoleWithHttpInfo (string roleId, string accountId, bool? validateOnly = default(bool?))
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RoleManagementApi->DeleteCustomRole");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoleManagementApi->DeleteCustomRole");

            var localVarPath = "/restapi/v1.0/account/{accountId}/user-role/{roleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (roleId != null) localVarPathParams.Add("roleId", this.Configuration.ApiClient.ParameterToString(roleId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (validateOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "validateOnly", validateOnly)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCustomRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Custom Role Deletes custom user role by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="validateOnly">Specifies that role should be validated prior to deletion whether it can be deleted or not (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCustomRoleAsync (string roleId, string accountId, bool? validateOnly = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteCustomRoleWithHttpInfoAsync(roleId, accountId, validateOnly, cancellationToken);

        }

        /// <summary>
        /// Delete Custom Role Deletes custom user role by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="validateOnly">Specifies that role should be validated prior to deletion whether it can be deleted or not (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCustomRoleWithHttpInfoAsync (string roleId, string accountId, bool? validateOnly = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RoleManagementApi->DeleteCustomRole");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoleManagementApi->DeleteCustomRole");

            var localVarPath = "/restapi/v1.0/account/{accountId}/user-role/{roleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (roleId != null) localVarPathParams.Add("roleId", this.Configuration.ApiClient.ParameterToString(roleId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (validateOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "validateOnly", validateOnly)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCustomRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get Assigned Role List Returns the list of assigned roles for the current account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="showHidden"> (optional)</param>
        /// <returns>ExtensionWithRolesCollectionResource</returns>
        public ExtensionWithRolesCollectionResource ListAssignedRoles (string accountId, bool? showHidden = default(bool?))
        {
             ApiResponse<ExtensionWithRolesCollectionResource> localVarResponse = ListAssignedRolesWithHttpInfo(accountId, showHidden);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Assigned Role List Returns the list of assigned roles for the current account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="showHidden"> (optional)</param>
        /// <returns>ApiResponse of ExtensionWithRolesCollectionResource</returns>
        public ApiResponse<ExtensionWithRolesCollectionResource> ListAssignedRolesWithHttpInfo (string accountId, bool? showHidden = default(bool?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoleManagementApi->ListAssignedRoles");

            var localVarPath = "/restapi/v1.0/account/{accountId}/assigned-role";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (showHidden != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showHidden", showHidden)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAssignedRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionWithRolesCollectionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtensionWithRolesCollectionResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionWithRolesCollectionResource)));
        }

        /// <summary>
        /// Get Assigned Role List Returns the list of assigned roles for the current account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="showHidden"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ExtensionWithRolesCollectionResource</returns>
        public async System.Threading.Tasks.Task<ExtensionWithRolesCollectionResource> ListAssignedRolesAsync (string accountId, bool? showHidden = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ExtensionWithRolesCollectionResource> localVarResponse = await ListAssignedRolesWithHttpInfoAsync(accountId, showHidden, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Assigned Role List Returns the list of assigned roles for the current account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="showHidden"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ExtensionWithRolesCollectionResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionWithRolesCollectionResource>> ListAssignedRolesWithHttpInfoAsync (string accountId, bool? showHidden = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoleManagementApi->ListAssignedRoles");

            var localVarPath = "/restapi/v1.0/account/{accountId}/assigned-role";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (showHidden != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showHidden", showHidden)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAssignedRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionWithRolesCollectionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtensionWithRolesCollectionResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionWithRolesCollectionResource)));
        }

        /// <summary>
        /// Get Standard User Role List 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <param name="servicePlanId"> (optional)</param>
        /// <returns>RolesCollectionResource</returns>
        public RolesCollectionResource ListStandardUserRole (string page = default(string), string perPage = default(string), string servicePlanId = default(string))
        {
             ApiResponse<RolesCollectionResource> localVarResponse = ListStandardUserRoleWithHttpInfo(page, perPage, servicePlanId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Standard User Role List 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <param name="servicePlanId"> (optional)</param>
        /// <returns>ApiResponse of RolesCollectionResource</returns>
        public ApiResponse<RolesCollectionResource> ListStandardUserRoleWithHttpInfo (string page = default(string), string perPage = default(string), string servicePlanId = default(string))
        {

            var localVarPath = "/restapi/v1.0/dictionary/user-role";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (servicePlanId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "servicePlanId", servicePlanId)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListStandardUserRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RolesCollectionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RolesCollectionResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RolesCollectionResource)));
        }

        /// <summary>
        /// Get Standard User Role List 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <param name="servicePlanId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RolesCollectionResource</returns>
        public async System.Threading.Tasks.Task<RolesCollectionResource> ListStandardUserRoleAsync (string page = default(string), string perPage = default(string), string servicePlanId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<RolesCollectionResource> localVarResponse = await ListStandardUserRoleWithHttpInfoAsync(page, perPage, servicePlanId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Standard User Role List 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <param name="servicePlanId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RolesCollectionResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RolesCollectionResource>> ListStandardUserRoleWithHttpInfoAsync (string page = default(string), string perPage = default(string), string servicePlanId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/restapi/v1.0/dictionary/user-role";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (servicePlanId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "servicePlanId", servicePlanId)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListStandardUserRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RolesCollectionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RolesCollectionResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RolesCollectionResource)));
        }

        /// <summary>
        /// Get User Assigned Role List Returns the list of roles assigned to the current extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="showHidden"> (optional)</param>
        /// <returns>AssignedRolesResource</returns>
        public AssignedRolesResource ListUserAssignedRoles (string extensionId, string accountId, bool? showHidden = default(bool?))
        {
             ApiResponse<AssignedRolesResource> localVarResponse = ListUserAssignedRolesWithHttpInfo(extensionId, accountId, showHidden);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Assigned Role List Returns the list of roles assigned to the current extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="showHidden"> (optional)</param>
        /// <returns>ApiResponse of AssignedRolesResource</returns>
        public ApiResponse<AssignedRolesResource> ListUserAssignedRolesWithHttpInfo (string extensionId, string accountId, bool? showHidden = default(bool?))
        {
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling RoleManagementApi->ListUserAssignedRoles");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoleManagementApi->ListUserAssignedRoles");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/assigned-role";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (showHidden != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showHidden", showHidden)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListUserAssignedRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssignedRolesResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssignedRolesResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssignedRolesResource)));
        }

        /// <summary>
        /// Get User Assigned Role List Returns the list of roles assigned to the current extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="showHidden"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AssignedRolesResource</returns>
        public async System.Threading.Tasks.Task<AssignedRolesResource> ListUserAssignedRolesAsync (string extensionId, string accountId, bool? showHidden = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AssignedRolesResource> localVarResponse = await ListUserAssignedRolesWithHttpInfoAsync(extensionId, accountId, showHidden, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get User Assigned Role List Returns the list of roles assigned to the current extension.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="showHidden"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AssignedRolesResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssignedRolesResource>> ListUserAssignedRolesWithHttpInfoAsync (string extensionId, string accountId, bool? showHidden = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling RoleManagementApi->ListUserAssignedRoles");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoleManagementApi->ListUserAssignedRoles");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/assigned-role";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (showHidden != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showHidden", showHidden)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListUserAssignedRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssignedRolesResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssignedRolesResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssignedRolesResource)));
        }

        /// <summary>
        /// Get Account User Role List Returns the list of account user roles.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="custom">Specifies whether to return custom or predefined only roles. If not specified, all roles are returned (optional)</param>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <returns>RolesCollectionResource</returns>
        public RolesCollectionResource ListUserRoles (string accountId, bool? custom = default(bool?), string page = default(string), string perPage = default(string))
        {
             ApiResponse<RolesCollectionResource> localVarResponse = ListUserRolesWithHttpInfo(accountId, custom, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account User Role List Returns the list of account user roles.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="custom">Specifies whether to return custom or predefined only roles. If not specified, all roles are returned (optional)</param>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <returns>ApiResponse of RolesCollectionResource</returns>
        public ApiResponse<RolesCollectionResource> ListUserRolesWithHttpInfo (string accountId, bool? custom = default(bool?), string page = default(string), string perPage = default(string))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoleManagementApi->ListUserRoles");

            var localVarPath = "/restapi/v1.0/account/{accountId}/user-role";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (custom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom", custom)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListUserRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RolesCollectionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RolesCollectionResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RolesCollectionResource)));
        }

        /// <summary>
        /// Get Account User Role List Returns the list of account user roles.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="custom">Specifies whether to return custom or predefined only roles. If not specified, all roles are returned (optional)</param>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RolesCollectionResource</returns>
        public async System.Threading.Tasks.Task<RolesCollectionResource> ListUserRolesAsync (string accountId, bool? custom = default(bool?), string page = default(string), string perPage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<RolesCollectionResource> localVarResponse = await ListUserRolesWithHttpInfoAsync(accountId, custom, page, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Account User Role List Returns the list of account user roles.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="custom">Specifies whether to return custom or predefined only roles. If not specified, all roles are returned (optional)</param>
        /// <param name="page"> (optional, default to &quot;1&quot;)</param>
        /// <param name="perPage"> (optional, default to &quot;100&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RolesCollectionResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RolesCollectionResource>> ListUserRolesWithHttpInfoAsync (string accountId, bool? custom = default(bool?), string page = default(string), string perPage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoleManagementApi->ListUserRoles");

            var localVarPath = "/restapi/v1.0/account/{accountId}/user-role";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (custom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom", custom)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListUserRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RolesCollectionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RolesCollectionResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RolesCollectionResource)));
        }

        /// <summary>
        /// Get Default User Role Returns account default user role.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns></returns>
        public void ReadDefaultRole (string accountId)
        {
             ReadDefaultRoleWithHttpInfo(accountId);
        }

        /// <summary>
        /// Get Default User Role Returns account default user role.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ReadDefaultRoleWithHttpInfo (string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoleManagementApi->ReadDefaultRole");

            var localVarPath = "/restapi/v1.0/account/{accountId}/user-role/default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadDefaultRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get Default User Role Returns account default user role.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReadDefaultRoleAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await ReadDefaultRoleWithHttpInfoAsync(accountId, cancellationToken);

        }

        /// <summary>
        /// Get Default User Role Returns account default user role.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReadDefaultRoleWithHttpInfoAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoleManagementApi->ReadDefaultRole");

            var localVarPath = "/restapi/v1.0/account/{accountId}/user-role/default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadDefaultRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get Standard User Role Returns standard user role.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>RoleResource</returns>
        public RoleResource ReadStandardUserRole (string roleId)
        {
             ApiResponse<RoleResource> localVarResponse = ReadStandardUserRoleWithHttpInfo(roleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Standard User Role Returns standard user role.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>ApiResponse of RoleResource</returns>
        public ApiResponse<RoleResource> ReadStandardUserRoleWithHttpInfo (string roleId)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RoleManagementApi->ReadStandardUserRole");

            var localVarPath = "/restapi/v1.0/dictionary/user-role/{roleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (roleId != null) localVarPathParams.Add("roleId", this.Configuration.ApiClient.ParameterToString(roleId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadStandardUserRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoleResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RoleResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleResource)));
        }

        /// <summary>
        /// Get Standard User Role Returns standard user role.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RoleResource</returns>
        public async System.Threading.Tasks.Task<RoleResource> ReadStandardUserRoleAsync (string roleId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<RoleResource> localVarResponse = await ReadStandardUserRoleWithHttpInfoAsync(roleId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Standard User Role Returns standard user role.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RoleResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RoleResource>> ReadStandardUserRoleWithHttpInfoAsync (string roleId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RoleManagementApi->ReadStandardUserRole");

            var localVarPath = "/restapi/v1.0/dictionary/user-role/{roleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (roleId != null) localVarPathParams.Add("roleId", this.Configuration.ApiClient.ParameterToString(roleId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadStandardUserRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoleResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RoleResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleResource)));
        }

        /// <summary>
        /// Get User Role Returns a user role on the current account by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>RoleResource</returns>
        public RoleResource ReadUserRole (string roleId, string accountId)
        {
             ApiResponse<RoleResource> localVarResponse = ReadUserRoleWithHttpInfo(roleId, accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Role Returns a user role on the current account by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of RoleResource</returns>
        public ApiResponse<RoleResource> ReadUserRoleWithHttpInfo (string roleId, string accountId)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RoleManagementApi->ReadUserRole");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoleManagementApi->ReadUserRole");

            var localVarPath = "/restapi/v1.0/account/{accountId}/user-role/{roleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (roleId != null) localVarPathParams.Add("roleId", this.Configuration.ApiClient.ParameterToString(roleId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadUserRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoleResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RoleResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleResource)));
        }

        /// <summary>
        /// Get User Role Returns a user role on the current account by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RoleResource</returns>
        public async System.Threading.Tasks.Task<RoleResource> ReadUserRoleAsync (string roleId, string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<RoleResource> localVarResponse = await ReadUserRoleWithHttpInfoAsync(roleId, accountId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get User Role Returns a user role on the current account by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RoleResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RoleResource>> ReadUserRoleWithHttpInfoAsync (string roleId, string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RoleManagementApi->ReadUserRole");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoleManagementApi->ReadUserRole");

            var localVarPath = "/restapi/v1.0/account/{accountId}/user-role/{roleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (roleId != null) localVarPathParams.Add("roleId", this.Configuration.ApiClient.ParameterToString(roleId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadUserRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoleResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RoleResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleResource)));
        }

        /// <summary>
        /// Set Default User Role Updates account default user role.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="defaultUserRoleRequest">JSON body</param>
        /// <returns></returns>
        public void UpdateDefaultUserRole (string accountId, DefaultUserRoleRequest defaultUserRoleRequest)
        {
             UpdateDefaultUserRoleWithHttpInfo(accountId, defaultUserRoleRequest);
        }

        /// <summary>
        /// Set Default User Role Updates account default user role.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="defaultUserRoleRequest">JSON body</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateDefaultUserRoleWithHttpInfo (string accountId, DefaultUserRoleRequest defaultUserRoleRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoleManagementApi->UpdateDefaultUserRole");
            // verify the required parameter 'defaultUserRoleRequest' is set
            if (defaultUserRoleRequest == null)
                throw new ApiException(400, "Missing required parameter 'defaultUserRoleRequest' when calling RoleManagementApi->UpdateDefaultUserRole");

            var localVarPath = "/restapi/v1.0/account/{accountId}/user-role/default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (defaultUserRoleRequest != null && defaultUserRoleRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(defaultUserRoleRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = defaultUserRoleRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDefaultUserRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Set Default User Role Updates account default user role.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="defaultUserRoleRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateDefaultUserRoleAsync (string accountId, DefaultUserRoleRequest defaultUserRoleRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             await UpdateDefaultUserRoleWithHttpInfoAsync(accountId, defaultUserRoleRequest, cancellationToken);

        }

        /// <summary>
        /// Set Default User Role Updates account default user role.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="defaultUserRoleRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateDefaultUserRoleWithHttpInfoAsync (string accountId, DefaultUserRoleRequest defaultUserRoleRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoleManagementApi->UpdateDefaultUserRole");
            // verify the required parameter 'defaultUserRoleRequest' is set
            if (defaultUserRoleRequest == null)
                throw new ApiException(400, "Missing required parameter 'defaultUserRoleRequest' when calling RoleManagementApi->UpdateDefaultUserRole");

            var localVarPath = "/restapi/v1.0/account/{accountId}/user-role/default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (defaultUserRoleRequest != null && defaultUserRoleRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(defaultUserRoleRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = defaultUserRoleRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDefaultUserRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update User Assigned Roles Updates the list of assigned roles for the current user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="assignedRolesResource"> (optional)</param>
        /// <returns>AssignedRolesResource</returns>
        public AssignedRolesResource UpdateUserAssignedRoles (string extensionId, string accountId, AssignedRolesResource assignedRolesResource = default(AssignedRolesResource))
        {
             ApiResponse<AssignedRolesResource> localVarResponse = UpdateUserAssignedRolesWithHttpInfo(extensionId, accountId, assignedRolesResource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update User Assigned Roles Updates the list of assigned roles for the current user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="assignedRolesResource"> (optional)</param>
        /// <returns>ApiResponse of AssignedRolesResource</returns>
        public ApiResponse<AssignedRolesResource> UpdateUserAssignedRolesWithHttpInfo (string extensionId, string accountId, AssignedRolesResource assignedRolesResource = default(AssignedRolesResource))
        {
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling RoleManagementApi->UpdateUserAssignedRoles");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoleManagementApi->UpdateUserAssignedRoles");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/assigned-role";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (assignedRolesResource != null && assignedRolesResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assignedRolesResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assignedRolesResource; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserAssignedRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssignedRolesResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssignedRolesResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssignedRolesResource)));
        }

        /// <summary>
        /// Update User Assigned Roles Updates the list of assigned roles for the current user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="assignedRolesResource"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AssignedRolesResource</returns>
        public async System.Threading.Tasks.Task<AssignedRolesResource> UpdateUserAssignedRolesAsync (string extensionId, string accountId, AssignedRolesResource assignedRolesResource = default(AssignedRolesResource), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AssignedRolesResource> localVarResponse = await UpdateUserAssignedRolesWithHttpInfoAsync(extensionId, accountId, assignedRolesResource, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update User Assigned Roles Updates the list of assigned roles for the current user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="assignedRolesResource"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AssignedRolesResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssignedRolesResource>> UpdateUserAssignedRolesWithHttpInfoAsync (string extensionId, string accountId, AssignedRolesResource assignedRolesResource = default(AssignedRolesResource), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling RoleManagementApi->UpdateUserAssignedRoles");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoleManagementApi->UpdateUserAssignedRoles");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/assigned-role";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (assignedRolesResource != null && assignedRolesResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assignedRolesResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assignedRolesResource; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserAssignedRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssignedRolesResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssignedRolesResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssignedRolesResource)));
        }

        /// <summary>
        /// Update User Role Updates a user role on the current account by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="roleResource"> (optional)</param>
        /// <returns></returns>
        public void UpdateUserRole (string roleId, string accountId, RoleResource roleResource = default(RoleResource))
        {
             UpdateUserRoleWithHttpInfo(roleId, accountId, roleResource);
        }

        /// <summary>
        /// Update User Role Updates a user role on the current account by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="roleResource"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateUserRoleWithHttpInfo (string roleId, string accountId, RoleResource roleResource = default(RoleResource))
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RoleManagementApi->UpdateUserRole");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoleManagementApi->UpdateUserRole");

            var localVarPath = "/restapi/v1.0/account/{accountId}/user-role/{roleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (roleId != null) localVarPathParams.Add("roleId", this.Configuration.ApiClient.ParameterToString(roleId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (roleResource != null && roleResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(roleResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = roleResource; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update User Role Updates a user role on the current account by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="roleResource"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateUserRoleAsync (string roleId, string accountId, RoleResource roleResource = default(RoleResource), CancellationToken cancellationToken = default(CancellationToken))
        {
             await UpdateUserRoleWithHttpInfoAsync(roleId, accountId, roleResource, cancellationToken);

        }

        /// <summary>
        /// Update User Role Updates a user role on the current account by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="roleResource"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateUserRoleWithHttpInfoAsync (string roleId, string accountId, RoleResource roleResource = default(RoleResource), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RoleManagementApi->UpdateUserRole");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoleManagementApi->UpdateUserRole");

            var localVarPath = "/restapi/v1.0/account/{accountId}/user-role/{roleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (roleId != null) localVarPathParams.Add("roleId", this.Configuration.ApiClient.ParameterToString(roleId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (roleResource != null && roleResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(roleResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = roleResource; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
