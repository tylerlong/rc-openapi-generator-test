/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChatsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Edit Group Members
        /// </summary>
        /// <remarks>
        /// Updates group members. **Please note:** Only groups of 'Team' type can be updated. Currently only one operation at a time (either adding or removal) is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="editGroupRequest">JSON body</param>
        /// <returns>GlipGroupInfo</returns>
        [Obsolete]
        GlipGroupInfo AssignGlipGroupMembers (string groupId, EditGroupRequest editGroupRequest);

        /// <summary>
        /// Edit Group Members
        /// </summary>
        /// <remarks>
        /// Updates group members. **Please note:** Only groups of 'Team' type can be updated. Currently only one operation at a time (either adding or removal) is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="editGroupRequest">JSON body</param>
        /// <returns>ApiResponse of GlipGroupInfo</returns>
        [Obsolete]
        ApiResponse<GlipGroupInfo> AssignGlipGroupMembersWithHttpInfo (string groupId, EditGroupRequest editGroupRequest);
        /// <summary>
        /// Create Group
        /// </summary>
        /// <remarks>
        /// Creates a new private chat/team.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipCreateGroup">JSON body</param>
        /// <returns>GlipGroupInfo</returns>
        [Obsolete]
        GlipGroupInfo CreateGlipGroup (GlipCreateGroup glipCreateGroup);

        /// <summary>
        /// Create Group
        /// </summary>
        /// <remarks>
        /// Creates a new private chat/team.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipCreateGroup">JSON body</param>
        /// <returns>ApiResponse of GlipGroupInfo</returns>
        [Obsolete]
        ApiResponse<GlipGroupInfo> CreateGlipGroupWithHttpInfo (GlipCreateGroup glipCreateGroup);
        /// <summary>
        /// Add Chat to Favorites
        /// </summary>
        /// <remarks>
        /// Adds the specified chat to the users's list of favorite chats. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat to add to favorite list.</param>
        /// <returns></returns>
        void FavoriteGlipChat (string chatId);

        /// <summary>
        /// Add Chat to Favorites
        /// </summary>
        /// <remarks>
        /// Adds the specified chat to the users's list of favorite chats. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat to add to favorite list.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FavoriteGlipChatWithHttpInfo (string chatId);
        /// <summary>
        /// Get Favorite Chats
        /// </summary>
        /// <remarks>
        /// Returns a list of the current user's favorite chats.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordCount">Max number of chats to be fetched by one request (Not more than 250). (optional, default to 30)</param>
        /// <returns>GlipChatsListWithoutNavigation</returns>
        GlipChatsListWithoutNavigation ListFavoriteChats (int? recordCount = default(int?));

        /// <summary>
        /// Get Favorite Chats
        /// </summary>
        /// <remarks>
        /// Returns a list of the current user's favorite chats.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordCount">Max number of chats to be fetched by one request (Not more than 250). (optional, default to 30)</param>
        /// <returns>ApiResponse of GlipChatsListWithoutNavigation</returns>
        ApiResponse<GlipChatsListWithoutNavigation> ListFavoriteChatsWithHttpInfo (int? recordCount = default(int?));
        /// <summary>
        /// Get Chats
        /// </summary>
        /// <remarks>
        /// Returns the list of chats where the user is a member and also public teams that can be joined.  All records in response are sorted by creation time of a chat in ascending order.  **Chat types**  There are multiple types of chats, including:  * **Personal** - each user is given a dedicated \"personal chat\" in which they are the only member. * **Direct** - a chat between two individuals. * **Group** - a chat between three or more named individuals. A \"group\" chat has no name. * **Team** - a chat related to a specific topic. Members can come and go freely from this chat type. * **Everyone** - a special chat containing every individual in a company. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of chats to be fetched. By default all type of chats will be fetched (optional)</param>
        /// <param name="recordCount">Number of chats to be fetched by one request. The maximum value is 250, by default - 30. (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <returns>GlipChatsList</returns>
        GlipChatsList ListGlipChats (List<string> type = default(List<string>), int? recordCount = default(int?), string pageToken = default(string));

        /// <summary>
        /// Get Chats
        /// </summary>
        /// <remarks>
        /// Returns the list of chats where the user is a member and also public teams that can be joined.  All records in response are sorted by creation time of a chat in ascending order.  **Chat types**  There are multiple types of chats, including:  * **Personal** - each user is given a dedicated \"personal chat\" in which they are the only member. * **Direct** - a chat between two individuals. * **Group** - a chat between three or more named individuals. A \"group\" chat has no name. * **Team** - a chat related to a specific topic. Members can come and go freely from this chat type. * **Everyone** - a special chat containing every individual in a company. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of chats to be fetched. By default all type of chats will be fetched (optional)</param>
        /// <param name="recordCount">Number of chats to be fetched by one request. The maximum value is 250, by default - 30. (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <returns>ApiResponse of GlipChatsList</returns>
        ApiResponse<GlipChatsList> ListGlipChatsWithHttpInfo (List<string> type = default(List<string>), int? recordCount = default(int?), string pageToken = default(string));
        /// <summary>
        /// Get User Groups
        /// </summary>
        /// <remarks>
        /// Returns the list of groups where the user is a member.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of groups to be fetched (by default all type of groups will be fetched) (optional)</param>
        /// <param name="recordCount">Number of groups to be fetched by one request. The maximum value is 250, by default - 30 (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <returns>GlipGroupList</returns>
        [Obsolete]
        GlipGroupList ListGlipGroups (string type = default(string), int? recordCount = default(int?), string pageToken = default(string));

        /// <summary>
        /// Get User Groups
        /// </summary>
        /// <remarks>
        /// Returns the list of groups where the user is a member.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of groups to be fetched (by default all type of groups will be fetched) (optional)</param>
        /// <param name="recordCount">Number of groups to be fetched by one request. The maximum value is 250, by default - 30 (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <returns>ApiResponse of GlipGroupList</returns>
        [Obsolete]
        ApiResponse<GlipGroupList> ListGlipGroupsWithHttpInfo (string type = default(string), int? recordCount = default(int?), string pageToken = default(string));
        /// <summary>
        /// Get Recent Chats
        /// </summary>
        /// <remarks>
        /// Returns recent chats where the user is a member. All records in response are sorted by the `lastModifiedTime` in descending order (the latest changed chat is displayed first on page). **Note** 'Chat' is a general name for all types of threads including *Personal* (user's own me-chat), *Direct* (one on one chat), *Group* (chat of 3-15 participants without specific name), *Team* (chat of 2 and more participants, with a specific name), *Everyone* (company chat including all employees, with a specific name).\"
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of chats to be fetched. By default all chat types are returned (optional)</param>
        /// <param name="recordCount">Max number of chats to be fetched by one request (Not more than 250). (optional, default to 30)</param>
        /// <returns>GlipChatsListWithoutNavigation</returns>
        GlipChatsListWithoutNavigation ListRecentChats (List<string> type = default(List<string>), int? recordCount = default(int?));

        /// <summary>
        /// Get Recent Chats
        /// </summary>
        /// <remarks>
        /// Returns recent chats where the user is a member. All records in response are sorted by the `lastModifiedTime` in descending order (the latest changed chat is displayed first on page). **Note** 'Chat' is a general name for all types of threads including *Personal* (user's own me-chat), *Direct* (one on one chat), *Group* (chat of 3-15 participants without specific name), *Team* (chat of 2 and more participants, with a specific name), *Everyone* (company chat including all employees, with a specific name).\"
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of chats to be fetched. By default all chat types are returned (optional)</param>
        /// <param name="recordCount">Max number of chats to be fetched by one request (Not more than 250). (optional, default to 30)</param>
        /// <returns>ApiResponse of GlipChatsListWithoutNavigation</returns>
        ApiResponse<GlipChatsListWithoutNavigation> ListRecentChatsWithHttpInfo (List<string> type = default(List<string>), int? recordCount = default(int?));
        /// <summary>
        /// Mark Chat as Read
        /// </summary>
        /// <remarks>
        /// Sets the specified chat status to 'Read' for the current user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Id of chat to be marked</param>
        /// <returns></returns>
        void MarkChatRead (string chatId);

        /// <summary>
        /// Mark Chat as Read
        /// </summary>
        /// <remarks>
        /// Sets the specified chat status to 'Read' for the current user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Id of chat to be marked</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MarkChatReadWithHttpInfo (string chatId);
        /// <summary>
        /// Mark Chat as Unread
        /// </summary>
        /// <remarks>
        /// Sets the specified chat status to 'Unread' for the current user. **Note** 'Chat' is a general name for all types of threads including *Personal* (user's own me-chat), *Direct* (one on one chat), *Group* (chat of 3-15 participants without specific name), *Team* (chat of 2 and more participants, with a specific name), *Everyone* (company chat including all employees, with a specific name).\"
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Id of chat to be marked</param>
        /// <returns></returns>
        void MarkChatUnread (string chatId);

        /// <summary>
        /// Mark Chat as Unread
        /// </summary>
        /// <remarks>
        /// Sets the specified chat status to 'Unread' for the current user. **Note** 'Chat' is a general name for all types of threads including *Personal* (user's own me-chat), *Direct* (one on one chat), *Group* (chat of 3-15 participants without specific name), *Team* (chat of 2 and more participants, with a specific name), *Everyone* (company chat including all employees, with a specific name).\"
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Id of chat to be marked</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MarkChatUnreadWithHttpInfo (string chatId);
        /// <summary>
        /// Get Chat
        /// </summary>
        /// <remarks>
        /// Returns information about a chat by ID. **Note** 'Chat' is a general name for all types of threads including *Personal* (user's own me-chat), *Direct* (one on one chat), *Group* (chat of 3-15 participants without specific name), *Team* (chat of 2 and more participants, with a specific name), *Everyone* (company chat including all employees, with a specific name).\"
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat. If tilde (~) is specified, then &#x60;/me&#x60; (Personal) chat will be returned</param>
        /// <returns>GlipChatInfo</returns>
        GlipChatInfo ReadGlipChat (string chatId);

        /// <summary>
        /// Get Chat
        /// </summary>
        /// <remarks>
        /// Returns information about a chat by ID. **Note** 'Chat' is a general name for all types of threads including *Personal* (user's own me-chat), *Direct* (one on one chat), *Group* (chat of 3-15 participants without specific name), *Team* (chat of 2 and more participants, with a specific name), *Everyone* (company chat including all employees, with a specific name).\"
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat. If tilde (~) is specified, then &#x60;/me&#x60; (Personal) chat will be returned</param>
        /// <returns>ApiResponse of GlipChatInfo</returns>
        ApiResponse<GlipChatInfo> ReadGlipChatWithHttpInfo (string chatId);
        /// <summary>
        /// Get Group
        /// </summary>
        /// <remarks>
        /// Returns information about a group or multiple groups by their ID(s). Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group to be returned, the maximum number of IDs is 30</param>
        /// <returns>GlipGroupInfo</returns>
        [Obsolete]
        GlipGroupInfo ReadGlipGroup (List<string> groupId);

        /// <summary>
        /// Get Group
        /// </summary>
        /// <remarks>
        /// Returns information about a group or multiple groups by their ID(s). Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group to be returned, the maximum number of IDs is 30</param>
        /// <returns>ApiResponse of GlipGroupInfo</returns>
        [Obsolete]
        ApiResponse<GlipGroupInfo> ReadGlipGroupWithHttpInfo (List<string> groupId);
        /// <summary>
        /// Remove Chat from Favorites
        /// </summary>
        /// <remarks>
        /// Removes the specified chat from the users's list of favorite chats.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat to remove from favorite list.</param>
        /// <returns></returns>
        void UnfavoriteGlipChat (string chatId);

        /// <summary>
        /// Remove Chat from Favorites
        /// </summary>
        /// <remarks>
        /// Removes the specified chat from the users's list of favorite chats.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat to remove from favorite list.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnfavoriteGlipChatWithHttpInfo (string chatId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Edit Group Members
        /// </summary>
        /// <remarks>
        /// Updates group members. **Please note:** Only groups of 'Team' type can be updated. Currently only one operation at a time (either adding or removal) is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="editGroupRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipGroupInfo</returns>
        [Obsolete]
        System.Threading.Tasks.Task<GlipGroupInfo> AssignGlipGroupMembersAsync (string groupId, EditGroupRequest editGroupRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Edit Group Members
        /// </summary>
        /// <remarks>
        /// Updates group members. **Please note:** Only groups of 'Team' type can be updated. Currently only one operation at a time (either adding or removal) is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="editGroupRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipGroupInfo)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<GlipGroupInfo>> AssignGlipGroupMembersWithHttpInfoAsync (string groupId, EditGroupRequest editGroupRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create Group
        /// </summary>
        /// <remarks>
        /// Creates a new private chat/team.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipCreateGroup">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipGroupInfo</returns>
        [Obsolete]
        System.Threading.Tasks.Task<GlipGroupInfo> CreateGlipGroupAsync (GlipCreateGroup glipCreateGroup, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Group
        /// </summary>
        /// <remarks>
        /// Creates a new private chat/team.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipCreateGroup">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipGroupInfo)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<GlipGroupInfo>> CreateGlipGroupWithHttpInfoAsync (GlipCreateGroup glipCreateGroup, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Add Chat to Favorites
        /// </summary>
        /// <remarks>
        /// Adds the specified chat to the users's list of favorite chats. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat to add to favorite list.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FavoriteGlipChatAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add Chat to Favorites
        /// </summary>
        /// <remarks>
        /// Adds the specified chat to the users's list of favorite chats. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat to add to favorite list.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FavoriteGlipChatWithHttpInfoAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Favorite Chats
        /// </summary>
        /// <remarks>
        /// Returns a list of the current user's favorite chats.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordCount">Max number of chats to be fetched by one request (Not more than 250). (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipChatsListWithoutNavigation</returns>
        System.Threading.Tasks.Task<GlipChatsListWithoutNavigation> ListFavoriteChatsAsync (int? recordCount = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Favorite Chats
        /// </summary>
        /// <remarks>
        /// Returns a list of the current user's favorite chats.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordCount">Max number of chats to be fetched by one request (Not more than 250). (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipChatsListWithoutNavigation)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlipChatsListWithoutNavigation>> ListFavoriteChatsWithHttpInfoAsync (int? recordCount = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Chats
        /// </summary>
        /// <remarks>
        /// Returns the list of chats where the user is a member and also public teams that can be joined.  All records in response are sorted by creation time of a chat in ascending order.  **Chat types**  There are multiple types of chats, including:  * **Personal** - each user is given a dedicated \"personal chat\" in which they are the only member. * **Direct** - a chat between two individuals. * **Group** - a chat between three or more named individuals. A \"group\" chat has no name. * **Team** - a chat related to a specific topic. Members can come and go freely from this chat type. * **Everyone** - a special chat containing every individual in a company. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of chats to be fetched. By default all type of chats will be fetched (optional)</param>
        /// <param name="recordCount">Number of chats to be fetched by one request. The maximum value is 250, by default - 30. (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipChatsList</returns>
        System.Threading.Tasks.Task<GlipChatsList> ListGlipChatsAsync (List<string> type = default(List<string>), int? recordCount = default(int?), string pageToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Chats
        /// </summary>
        /// <remarks>
        /// Returns the list of chats where the user is a member and also public teams that can be joined.  All records in response are sorted by creation time of a chat in ascending order.  **Chat types**  There are multiple types of chats, including:  * **Personal** - each user is given a dedicated \"personal chat\" in which they are the only member. * **Direct** - a chat between two individuals. * **Group** - a chat between three or more named individuals. A \"group\" chat has no name. * **Team** - a chat related to a specific topic. Members can come and go freely from this chat type. * **Everyone** - a special chat containing every individual in a company. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of chats to be fetched. By default all type of chats will be fetched (optional)</param>
        /// <param name="recordCount">Number of chats to be fetched by one request. The maximum value is 250, by default - 30. (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipChatsList)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlipChatsList>> ListGlipChatsWithHttpInfoAsync (List<string> type = default(List<string>), int? recordCount = default(int?), string pageToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get User Groups
        /// </summary>
        /// <remarks>
        /// Returns the list of groups where the user is a member.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of groups to be fetched (by default all type of groups will be fetched) (optional)</param>
        /// <param name="recordCount">Number of groups to be fetched by one request. The maximum value is 250, by default - 30 (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipGroupList</returns>
        [Obsolete]
        System.Threading.Tasks.Task<GlipGroupList> ListGlipGroupsAsync (string type = default(string), int? recordCount = default(int?), string pageToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get User Groups
        /// </summary>
        /// <remarks>
        /// Returns the list of groups where the user is a member.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of groups to be fetched (by default all type of groups will be fetched) (optional)</param>
        /// <param name="recordCount">Number of groups to be fetched by one request. The maximum value is 250, by default - 30 (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipGroupList)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<GlipGroupList>> ListGlipGroupsWithHttpInfoAsync (string type = default(string), int? recordCount = default(int?), string pageToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Recent Chats
        /// </summary>
        /// <remarks>
        /// Returns recent chats where the user is a member. All records in response are sorted by the `lastModifiedTime` in descending order (the latest changed chat is displayed first on page). **Note** 'Chat' is a general name for all types of threads including *Personal* (user's own me-chat), *Direct* (one on one chat), *Group* (chat of 3-15 participants without specific name), *Team* (chat of 2 and more participants, with a specific name), *Everyone* (company chat including all employees, with a specific name).\"
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of chats to be fetched. By default all chat types are returned (optional)</param>
        /// <param name="recordCount">Max number of chats to be fetched by one request (Not more than 250). (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipChatsListWithoutNavigation</returns>
        System.Threading.Tasks.Task<GlipChatsListWithoutNavigation> ListRecentChatsAsync (List<string> type = default(List<string>), int? recordCount = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Recent Chats
        /// </summary>
        /// <remarks>
        /// Returns recent chats where the user is a member. All records in response are sorted by the `lastModifiedTime` in descending order (the latest changed chat is displayed first on page). **Note** 'Chat' is a general name for all types of threads including *Personal* (user's own me-chat), *Direct* (one on one chat), *Group* (chat of 3-15 participants without specific name), *Team* (chat of 2 and more participants, with a specific name), *Everyone* (company chat including all employees, with a specific name).\"
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of chats to be fetched. By default all chat types are returned (optional)</param>
        /// <param name="recordCount">Max number of chats to be fetched by one request (Not more than 250). (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipChatsListWithoutNavigation)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlipChatsListWithoutNavigation>> ListRecentChatsWithHttpInfoAsync (List<string> type = default(List<string>), int? recordCount = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Mark Chat as Read
        /// </summary>
        /// <remarks>
        /// Sets the specified chat status to 'Read' for the current user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Id of chat to be marked</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MarkChatReadAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Mark Chat as Read
        /// </summary>
        /// <remarks>
        /// Sets the specified chat status to 'Read' for the current user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Id of chat to be marked</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MarkChatReadWithHttpInfoAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Mark Chat as Unread
        /// </summary>
        /// <remarks>
        /// Sets the specified chat status to 'Unread' for the current user. **Note** 'Chat' is a general name for all types of threads including *Personal* (user's own me-chat), *Direct* (one on one chat), *Group* (chat of 3-15 participants without specific name), *Team* (chat of 2 and more participants, with a specific name), *Everyone* (company chat including all employees, with a specific name).\"
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Id of chat to be marked</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MarkChatUnreadAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Mark Chat as Unread
        /// </summary>
        /// <remarks>
        /// Sets the specified chat status to 'Unread' for the current user. **Note** 'Chat' is a general name for all types of threads including *Personal* (user's own me-chat), *Direct* (one on one chat), *Group* (chat of 3-15 participants without specific name), *Team* (chat of 2 and more participants, with a specific name), *Everyone* (company chat including all employees, with a specific name).\"
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Id of chat to be marked</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MarkChatUnreadWithHttpInfoAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Chat
        /// </summary>
        /// <remarks>
        /// Returns information about a chat by ID. **Note** 'Chat' is a general name for all types of threads including *Personal* (user's own me-chat), *Direct* (one on one chat), *Group* (chat of 3-15 participants without specific name), *Team* (chat of 2 and more participants, with a specific name), *Everyone* (company chat including all employees, with a specific name).\"
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat. If tilde (~) is specified, then &#x60;/me&#x60; (Personal) chat will be returned</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipChatInfo</returns>
        System.Threading.Tasks.Task<GlipChatInfo> ReadGlipChatAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Chat
        /// </summary>
        /// <remarks>
        /// Returns information about a chat by ID. **Note** 'Chat' is a general name for all types of threads including *Personal* (user's own me-chat), *Direct* (one on one chat), *Group* (chat of 3-15 participants without specific name), *Team* (chat of 2 and more participants, with a specific name), *Everyone* (company chat including all employees, with a specific name).\"
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat. If tilde (~) is specified, then &#x60;/me&#x60; (Personal) chat will be returned</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipChatInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlipChatInfo>> ReadGlipChatWithHttpInfoAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Group
        /// </summary>
        /// <remarks>
        /// Returns information about a group or multiple groups by their ID(s). Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group to be returned, the maximum number of IDs is 30</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipGroupInfo</returns>
        [Obsolete]
        System.Threading.Tasks.Task<GlipGroupInfo> ReadGlipGroupAsync (List<string> groupId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Group
        /// </summary>
        /// <remarks>
        /// Returns information about a group or multiple groups by their ID(s). Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group to be returned, the maximum number of IDs is 30</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipGroupInfo)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<GlipGroupInfo>> ReadGlipGroupWithHttpInfoAsync (List<string> groupId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove Chat from Favorites
        /// </summary>
        /// <remarks>
        /// Removes the specified chat from the users's list of favorite chats.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat to remove from favorite list.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnfavoriteGlipChatAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Remove Chat from Favorites
        /// </summary>
        /// <remarks>
        /// Removes the specified chat from the users's list of favorite chats.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat to remove from favorite list.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnfavoriteGlipChatWithHttpInfoAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ChatsApi : IChatsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChatsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChatsApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChatsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ChatsApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChatsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ChatsApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Edit Group Members Updates group members. **Please note:** Only groups of 'Team' type can be updated. Currently only one operation at a time (either adding or removal) is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="editGroupRequest">JSON body</param>
        /// <returns>GlipGroupInfo</returns>
        [Obsolete]
        public GlipGroupInfo AssignGlipGroupMembers (string groupId, EditGroupRequest editGroupRequest)
        {
             ApiResponse<GlipGroupInfo> localVarResponse = AssignGlipGroupMembersWithHttpInfo(groupId, editGroupRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit Group Members Updates group members. **Please note:** Only groups of 'Team' type can be updated. Currently only one operation at a time (either adding or removal) is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="editGroupRequest">JSON body</param>
        /// <returns>ApiResponse of GlipGroupInfo</returns>
        [Obsolete]
        public ApiResponse<GlipGroupInfo> AssignGlipGroupMembersWithHttpInfo (string groupId, EditGroupRequest editGroupRequest)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ChatsApi->AssignGlipGroupMembers");
            // verify the required parameter 'editGroupRequest' is set
            if (editGroupRequest == null)
                throw new ApiException(400, "Missing required parameter 'editGroupRequest' when calling ChatsApi->AssignGlipGroupMembers");

            var localVarPath = "/restapi/v1.0/glip/groups/{groupId}/bulk-assign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (editGroupRequest != null && editGroupRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(editGroupRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = editGroupRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignGlipGroupMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipGroupInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipGroupInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipGroupInfo)));
        }

        /// <summary>
        /// Edit Group Members Updates group members. **Please note:** Only groups of 'Team' type can be updated. Currently only one operation at a time (either adding or removal) is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="editGroupRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipGroupInfo</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<GlipGroupInfo> AssignGlipGroupMembersAsync (string groupId, EditGroupRequest editGroupRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipGroupInfo> localVarResponse = await AssignGlipGroupMembersWithHttpInfoAsync(groupId, editGroupRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit Group Members Updates group members. **Please note:** Only groups of 'Team' type can be updated. Currently only one operation at a time (either adding or removal) is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="editGroupRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipGroupInfo)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<GlipGroupInfo>> AssignGlipGroupMembersWithHttpInfoAsync (string groupId, EditGroupRequest editGroupRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ChatsApi->AssignGlipGroupMembers");
            // verify the required parameter 'editGroupRequest' is set
            if (editGroupRequest == null)
                throw new ApiException(400, "Missing required parameter 'editGroupRequest' when calling ChatsApi->AssignGlipGroupMembers");

            var localVarPath = "/restapi/v1.0/glip/groups/{groupId}/bulk-assign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (editGroupRequest != null && editGroupRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(editGroupRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = editGroupRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignGlipGroupMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipGroupInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipGroupInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipGroupInfo)));
        }

        /// <summary>
        /// Create Group Creates a new private chat/team.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipCreateGroup">JSON body</param>
        /// <returns>GlipGroupInfo</returns>
        [Obsolete]
        public GlipGroupInfo CreateGlipGroup (GlipCreateGroup glipCreateGroup)
        {
             ApiResponse<GlipGroupInfo> localVarResponse = CreateGlipGroupWithHttpInfo(glipCreateGroup);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Group Creates a new private chat/team.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipCreateGroup">JSON body</param>
        /// <returns>ApiResponse of GlipGroupInfo</returns>
        [Obsolete]
        public ApiResponse<GlipGroupInfo> CreateGlipGroupWithHttpInfo (GlipCreateGroup glipCreateGroup)
        {
            // verify the required parameter 'glipCreateGroup' is set
            if (glipCreateGroup == null)
                throw new ApiException(400, "Missing required parameter 'glipCreateGroup' when calling ChatsApi->CreateGlipGroup");

            var localVarPath = "/restapi/v1.0/glip/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (glipCreateGroup != null && glipCreateGroup.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipCreateGroup); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipCreateGroup; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGlipGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipGroupInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipGroupInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipGroupInfo)));
        }

        /// <summary>
        /// Create Group Creates a new private chat/team.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipCreateGroup">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipGroupInfo</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<GlipGroupInfo> CreateGlipGroupAsync (GlipCreateGroup glipCreateGroup, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipGroupInfo> localVarResponse = await CreateGlipGroupWithHttpInfoAsync(glipCreateGroup, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Group Creates a new private chat/team.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="glipCreateGroup">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipGroupInfo)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<GlipGroupInfo>> CreateGlipGroupWithHttpInfoAsync (GlipCreateGroup glipCreateGroup, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'glipCreateGroup' is set
            if (glipCreateGroup == null)
                throw new ApiException(400, "Missing required parameter 'glipCreateGroup' when calling ChatsApi->CreateGlipGroup");

            var localVarPath = "/restapi/v1.0/glip/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (glipCreateGroup != null && glipCreateGroup.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipCreateGroup); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipCreateGroup; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGlipGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipGroupInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipGroupInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipGroupInfo)));
        }

        /// <summary>
        /// Add Chat to Favorites Adds the specified chat to the users's list of favorite chats. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat to add to favorite list.</param>
        /// <returns></returns>
        public void FavoriteGlipChat (string chatId)
        {
             FavoriteGlipChatWithHttpInfo(chatId);
        }

        /// <summary>
        /// Add Chat to Favorites Adds the specified chat to the users's list of favorite chats. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat to add to favorite list.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FavoriteGlipChatWithHttpInfo (string chatId)
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling ChatsApi->FavoriteGlipChat");

            var localVarPath = "/restapi/v1.0/glip/chats/{chatId}/favorite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FavoriteGlipChat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add Chat to Favorites Adds the specified chat to the users's list of favorite chats. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat to add to favorite list.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FavoriteGlipChatAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await FavoriteGlipChatWithHttpInfoAsync(chatId, cancellationToken);

        }

        /// <summary>
        /// Add Chat to Favorites Adds the specified chat to the users's list of favorite chats. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat to add to favorite list.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FavoriteGlipChatWithHttpInfoAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling ChatsApi->FavoriteGlipChat");

            var localVarPath = "/restapi/v1.0/glip/chats/{chatId}/favorite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FavoriteGlipChat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get Favorite Chats Returns a list of the current user's favorite chats.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordCount">Max number of chats to be fetched by one request (Not more than 250). (optional, default to 30)</param>
        /// <returns>GlipChatsListWithoutNavigation</returns>
        public GlipChatsListWithoutNavigation ListFavoriteChats (int? recordCount = default(int?))
        {
             ApiResponse<GlipChatsListWithoutNavigation> localVarResponse = ListFavoriteChatsWithHttpInfo(recordCount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Favorite Chats Returns a list of the current user's favorite chats.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordCount">Max number of chats to be fetched by one request (Not more than 250). (optional, default to 30)</param>
        /// <returns>ApiResponse of GlipChatsListWithoutNavigation</returns>
        public ApiResponse<GlipChatsListWithoutNavigation> ListFavoriteChatsWithHttpInfo (int? recordCount = default(int?))
        {

            var localVarPath = "/restapi/v1.0/glip/favorites";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordCount", recordCount)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListFavoriteChats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipChatsListWithoutNavigation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipChatsListWithoutNavigation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipChatsListWithoutNavigation)));
        }

        /// <summary>
        /// Get Favorite Chats Returns a list of the current user's favorite chats.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordCount">Max number of chats to be fetched by one request (Not more than 250). (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipChatsListWithoutNavigation</returns>
        public async System.Threading.Tasks.Task<GlipChatsListWithoutNavigation> ListFavoriteChatsAsync (int? recordCount = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipChatsListWithoutNavigation> localVarResponse = await ListFavoriteChatsWithHttpInfoAsync(recordCount, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Favorite Chats Returns a list of the current user's favorite chats.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordCount">Max number of chats to be fetched by one request (Not more than 250). (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipChatsListWithoutNavigation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlipChatsListWithoutNavigation>> ListFavoriteChatsWithHttpInfoAsync (int? recordCount = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/restapi/v1.0/glip/favorites";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordCount", recordCount)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListFavoriteChats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipChatsListWithoutNavigation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipChatsListWithoutNavigation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipChatsListWithoutNavigation)));
        }

        /// <summary>
        /// Get Chats Returns the list of chats where the user is a member and also public teams that can be joined.  All records in response are sorted by creation time of a chat in ascending order.  **Chat types**  There are multiple types of chats, including:  * **Personal** - each user is given a dedicated \"personal chat\" in which they are the only member. * **Direct** - a chat between two individuals. * **Group** - a chat between three or more named individuals. A \"group\" chat has no name. * **Team** - a chat related to a specific topic. Members can come and go freely from this chat type. * **Everyone** - a special chat containing every individual in a company. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of chats to be fetched. By default all type of chats will be fetched (optional)</param>
        /// <param name="recordCount">Number of chats to be fetched by one request. The maximum value is 250, by default - 30. (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <returns>GlipChatsList</returns>
        public GlipChatsList ListGlipChats (List<string> type = default(List<string>), int? recordCount = default(int?), string pageToken = default(string))
        {
             ApiResponse<GlipChatsList> localVarResponse = ListGlipChatsWithHttpInfo(type, recordCount, pageToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Chats Returns the list of chats where the user is a member and also public teams that can be joined.  All records in response are sorted by creation time of a chat in ascending order.  **Chat types**  There are multiple types of chats, including:  * **Personal** - each user is given a dedicated \"personal chat\" in which they are the only member. * **Direct** - a chat between two individuals. * **Group** - a chat between three or more named individuals. A \"group\" chat has no name. * **Team** - a chat related to a specific topic. Members can come and go freely from this chat type. * **Everyone** - a special chat containing every individual in a company. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of chats to be fetched. By default all type of chats will be fetched (optional)</param>
        /// <param name="recordCount">Number of chats to be fetched by one request. The maximum value is 250, by default - 30. (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <returns>ApiResponse of GlipChatsList</returns>
        public ApiResponse<GlipChatsList> ListGlipChatsWithHttpInfo (List<string> type = default(List<string>), int? recordCount = default(int?), string pageToken = default(string))
        {

            var localVarPath = "/restapi/v1.0/glip/chats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "type", type)); // query parameter
            if (recordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordCount", recordCount)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListGlipChats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipChatsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipChatsList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipChatsList)));
        }

        /// <summary>
        /// Get Chats Returns the list of chats where the user is a member and also public teams that can be joined.  All records in response are sorted by creation time of a chat in ascending order.  **Chat types**  There are multiple types of chats, including:  * **Personal** - each user is given a dedicated \"personal chat\" in which they are the only member. * **Direct** - a chat between two individuals. * **Group** - a chat between three or more named individuals. A \"group\" chat has no name. * **Team** - a chat related to a specific topic. Members can come and go freely from this chat type. * **Everyone** - a special chat containing every individual in a company. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of chats to be fetched. By default all type of chats will be fetched (optional)</param>
        /// <param name="recordCount">Number of chats to be fetched by one request. The maximum value is 250, by default - 30. (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipChatsList</returns>
        public async System.Threading.Tasks.Task<GlipChatsList> ListGlipChatsAsync (List<string> type = default(List<string>), int? recordCount = default(int?), string pageToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipChatsList> localVarResponse = await ListGlipChatsWithHttpInfoAsync(type, recordCount, pageToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Chats Returns the list of chats where the user is a member and also public teams that can be joined.  All records in response are sorted by creation time of a chat in ascending order.  **Chat types**  There are multiple types of chats, including:  * **Personal** - each user is given a dedicated \"personal chat\" in which they are the only member. * **Direct** - a chat between two individuals. * **Group** - a chat between three or more named individuals. A \"group\" chat has no name. * **Team** - a chat related to a specific topic. Members can come and go freely from this chat type. * **Everyone** - a special chat containing every individual in a company. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of chats to be fetched. By default all type of chats will be fetched (optional)</param>
        /// <param name="recordCount">Number of chats to be fetched by one request. The maximum value is 250, by default - 30. (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipChatsList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlipChatsList>> ListGlipChatsWithHttpInfoAsync (List<string> type = default(List<string>), int? recordCount = default(int?), string pageToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/restapi/v1.0/glip/chats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "type", type)); // query parameter
            if (recordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordCount", recordCount)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListGlipChats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipChatsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipChatsList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipChatsList)));
        }

        /// <summary>
        /// Get User Groups Returns the list of groups where the user is a member.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of groups to be fetched (by default all type of groups will be fetched) (optional)</param>
        /// <param name="recordCount">Number of groups to be fetched by one request. The maximum value is 250, by default - 30 (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <returns>GlipGroupList</returns>
        [Obsolete]
        public GlipGroupList ListGlipGroups (string type = default(string), int? recordCount = default(int?), string pageToken = default(string))
        {
             ApiResponse<GlipGroupList> localVarResponse = ListGlipGroupsWithHttpInfo(type, recordCount, pageToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Groups Returns the list of groups where the user is a member.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of groups to be fetched (by default all type of groups will be fetched) (optional)</param>
        /// <param name="recordCount">Number of groups to be fetched by one request. The maximum value is 250, by default - 30 (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <returns>ApiResponse of GlipGroupList</returns>
        [Obsolete]
        public ApiResponse<GlipGroupList> ListGlipGroupsWithHttpInfo (string type = default(string), int? recordCount = default(int?), string pageToken = default(string))
        {

            var localVarPath = "/restapi/v1.0/glip/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (recordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordCount", recordCount)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListGlipGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipGroupList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipGroupList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipGroupList)));
        }

        /// <summary>
        /// Get User Groups Returns the list of groups where the user is a member.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of groups to be fetched (by default all type of groups will be fetched) (optional)</param>
        /// <param name="recordCount">Number of groups to be fetched by one request. The maximum value is 250, by default - 30 (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipGroupList</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<GlipGroupList> ListGlipGroupsAsync (string type = default(string), int? recordCount = default(int?), string pageToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipGroupList> localVarResponse = await ListGlipGroupsWithHttpInfoAsync(type, recordCount, pageToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get User Groups Returns the list of groups where the user is a member.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of groups to be fetched (by default all type of groups will be fetched) (optional)</param>
        /// <param name="recordCount">Number of groups to be fetched by one request. The maximum value is 250, by default - 30 (optional, default to 30)</param>
        /// <param name="pageToken">Pagination token. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipGroupList)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<GlipGroupList>> ListGlipGroupsWithHttpInfoAsync (string type = default(string), int? recordCount = default(int?), string pageToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/restapi/v1.0/glip/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (recordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordCount", recordCount)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListGlipGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipGroupList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipGroupList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipGroupList)));
        }

        /// <summary>
        /// Get Recent Chats Returns recent chats where the user is a member. All records in response are sorted by the `lastModifiedTime` in descending order (the latest changed chat is displayed first on page). **Note** 'Chat' is a general name for all types of threads including *Personal* (user's own me-chat), *Direct* (one on one chat), *Group* (chat of 3-15 participants without specific name), *Team* (chat of 2 and more participants, with a specific name), *Everyone* (company chat including all employees, with a specific name).\"
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of chats to be fetched. By default all chat types are returned (optional)</param>
        /// <param name="recordCount">Max number of chats to be fetched by one request (Not more than 250). (optional, default to 30)</param>
        /// <returns>GlipChatsListWithoutNavigation</returns>
        public GlipChatsListWithoutNavigation ListRecentChats (List<string> type = default(List<string>), int? recordCount = default(int?))
        {
             ApiResponse<GlipChatsListWithoutNavigation> localVarResponse = ListRecentChatsWithHttpInfo(type, recordCount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Recent Chats Returns recent chats where the user is a member. All records in response are sorted by the `lastModifiedTime` in descending order (the latest changed chat is displayed first on page). **Note** 'Chat' is a general name for all types of threads including *Personal* (user's own me-chat), *Direct* (one on one chat), *Group* (chat of 3-15 participants without specific name), *Team* (chat of 2 and more participants, with a specific name), *Everyone* (company chat including all employees, with a specific name).\"
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of chats to be fetched. By default all chat types are returned (optional)</param>
        /// <param name="recordCount">Max number of chats to be fetched by one request (Not more than 250). (optional, default to 30)</param>
        /// <returns>ApiResponse of GlipChatsListWithoutNavigation</returns>
        public ApiResponse<GlipChatsListWithoutNavigation> ListRecentChatsWithHttpInfo (List<string> type = default(List<string>), int? recordCount = default(int?))
        {

            var localVarPath = "/restapi/v1.0/glip/recent/chats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "type", type)); // query parameter
            if (recordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordCount", recordCount)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListRecentChats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipChatsListWithoutNavigation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipChatsListWithoutNavigation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipChatsListWithoutNavigation)));
        }

        /// <summary>
        /// Get Recent Chats Returns recent chats where the user is a member. All records in response are sorted by the `lastModifiedTime` in descending order (the latest changed chat is displayed first on page). **Note** 'Chat' is a general name for all types of threads including *Personal* (user's own me-chat), *Direct* (one on one chat), *Group* (chat of 3-15 participants without specific name), *Team* (chat of 2 and more participants, with a specific name), *Everyone* (company chat including all employees, with a specific name).\"
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of chats to be fetched. By default all chat types are returned (optional)</param>
        /// <param name="recordCount">Max number of chats to be fetched by one request (Not more than 250). (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipChatsListWithoutNavigation</returns>
        public async System.Threading.Tasks.Task<GlipChatsListWithoutNavigation> ListRecentChatsAsync (List<string> type = default(List<string>), int? recordCount = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipChatsListWithoutNavigation> localVarResponse = await ListRecentChatsWithHttpInfoAsync(type, recordCount, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Recent Chats Returns recent chats where the user is a member. All records in response are sorted by the `lastModifiedTime` in descending order (the latest changed chat is displayed first on page). **Note** 'Chat' is a general name for all types of threads including *Personal* (user's own me-chat), *Direct* (one on one chat), *Group* (chat of 3-15 participants without specific name), *Team* (chat of 2 and more participants, with a specific name), *Everyone* (company chat including all employees, with a specific name).\"
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of chats to be fetched. By default all chat types are returned (optional)</param>
        /// <param name="recordCount">Max number of chats to be fetched by one request (Not more than 250). (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipChatsListWithoutNavigation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlipChatsListWithoutNavigation>> ListRecentChatsWithHttpInfoAsync (List<string> type = default(List<string>), int? recordCount = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/restapi/v1.0/glip/recent/chats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "type", type)); // query parameter
            if (recordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordCount", recordCount)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListRecentChats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipChatsListWithoutNavigation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipChatsListWithoutNavigation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipChatsListWithoutNavigation)));
        }

        /// <summary>
        /// Mark Chat as Read Sets the specified chat status to 'Read' for the current user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Id of chat to be marked</param>
        /// <returns></returns>
        public void MarkChatRead (string chatId)
        {
             MarkChatReadWithHttpInfo(chatId);
        }

        /// <summary>
        /// Mark Chat as Read Sets the specified chat status to 'Read' for the current user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Id of chat to be marked</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MarkChatReadWithHttpInfo (string chatId)
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling ChatsApi->MarkChatRead");

            var localVarPath = "/restapi/v1.0/glip/chats/{chatId}/read";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkChatRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Mark Chat as Read Sets the specified chat status to 'Read' for the current user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Id of chat to be marked</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MarkChatReadAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await MarkChatReadWithHttpInfoAsync(chatId, cancellationToken);

        }

        /// <summary>
        /// Mark Chat as Read Sets the specified chat status to 'Read' for the current user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Id of chat to be marked</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MarkChatReadWithHttpInfoAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling ChatsApi->MarkChatRead");

            var localVarPath = "/restapi/v1.0/glip/chats/{chatId}/read";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkChatRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Mark Chat as Unread Sets the specified chat status to 'Unread' for the current user. **Note** 'Chat' is a general name for all types of threads including *Personal* (user's own me-chat), *Direct* (one on one chat), *Group* (chat of 3-15 participants without specific name), *Team* (chat of 2 and more participants, with a specific name), *Everyone* (company chat including all employees, with a specific name).\"
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Id of chat to be marked</param>
        /// <returns></returns>
        public void MarkChatUnread (string chatId)
        {
             MarkChatUnreadWithHttpInfo(chatId);
        }

        /// <summary>
        /// Mark Chat as Unread Sets the specified chat status to 'Unread' for the current user. **Note** 'Chat' is a general name for all types of threads including *Personal* (user's own me-chat), *Direct* (one on one chat), *Group* (chat of 3-15 participants without specific name), *Team* (chat of 2 and more participants, with a specific name), *Everyone* (company chat including all employees, with a specific name).\"
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Id of chat to be marked</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MarkChatUnreadWithHttpInfo (string chatId)
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling ChatsApi->MarkChatUnread");

            var localVarPath = "/restapi/v1.0/glip/chats/{chatId}/unread";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkChatUnread", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Mark Chat as Unread Sets the specified chat status to 'Unread' for the current user. **Note** 'Chat' is a general name for all types of threads including *Personal* (user's own me-chat), *Direct* (one on one chat), *Group* (chat of 3-15 participants without specific name), *Team* (chat of 2 and more participants, with a specific name), *Everyone* (company chat including all employees, with a specific name).\"
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Id of chat to be marked</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MarkChatUnreadAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await MarkChatUnreadWithHttpInfoAsync(chatId, cancellationToken);

        }

        /// <summary>
        /// Mark Chat as Unread Sets the specified chat status to 'Unread' for the current user. **Note** 'Chat' is a general name for all types of threads including *Personal* (user's own me-chat), *Direct* (one on one chat), *Group* (chat of 3-15 participants without specific name), *Team* (chat of 2 and more participants, with a specific name), *Everyone* (company chat including all employees, with a specific name).\"
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Id of chat to be marked</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MarkChatUnreadWithHttpInfoAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling ChatsApi->MarkChatUnread");

            var localVarPath = "/restapi/v1.0/glip/chats/{chatId}/unread";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkChatUnread", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get Chat Returns information about a chat by ID. **Note** 'Chat' is a general name for all types of threads including *Personal* (user's own me-chat), *Direct* (one on one chat), *Group* (chat of 3-15 participants without specific name), *Team* (chat of 2 and more participants, with a specific name), *Everyone* (company chat including all employees, with a specific name).\"
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat. If tilde (~) is specified, then &#x60;/me&#x60; (Personal) chat will be returned</param>
        /// <returns>GlipChatInfo</returns>
        public GlipChatInfo ReadGlipChat (string chatId)
        {
             ApiResponse<GlipChatInfo> localVarResponse = ReadGlipChatWithHttpInfo(chatId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Chat Returns information about a chat by ID. **Note** 'Chat' is a general name for all types of threads including *Personal* (user's own me-chat), *Direct* (one on one chat), *Group* (chat of 3-15 participants without specific name), *Team* (chat of 2 and more participants, with a specific name), *Everyone* (company chat including all employees, with a specific name).\"
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat. If tilde (~) is specified, then &#x60;/me&#x60; (Personal) chat will be returned</param>
        /// <returns>ApiResponse of GlipChatInfo</returns>
        public ApiResponse<GlipChatInfo> ReadGlipChatWithHttpInfo (string chatId)
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling ChatsApi->ReadGlipChat");

            var localVarPath = "/restapi/v1.0/glip/chats/{chatId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadGlipChat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipChatInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipChatInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipChatInfo)));
        }

        /// <summary>
        /// Get Chat Returns information about a chat by ID. **Note** 'Chat' is a general name for all types of threads including *Personal* (user's own me-chat), *Direct* (one on one chat), *Group* (chat of 3-15 participants without specific name), *Team* (chat of 2 and more participants, with a specific name), *Everyone* (company chat including all employees, with a specific name).\"
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat. If tilde (~) is specified, then &#x60;/me&#x60; (Personal) chat will be returned</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipChatInfo</returns>
        public async System.Threading.Tasks.Task<GlipChatInfo> ReadGlipChatAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipChatInfo> localVarResponse = await ReadGlipChatWithHttpInfoAsync(chatId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Chat Returns information about a chat by ID. **Note** 'Chat' is a general name for all types of threads including *Personal* (user's own me-chat), *Direct* (one on one chat), *Group* (chat of 3-15 participants without specific name), *Team* (chat of 2 and more participants, with a specific name), *Everyone* (company chat including all employees, with a specific name).\"
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat. If tilde (~) is specified, then &#x60;/me&#x60; (Personal) chat will be returned</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipChatInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlipChatInfo>> ReadGlipChatWithHttpInfoAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling ChatsApi->ReadGlipChat");

            var localVarPath = "/restapi/v1.0/glip/chats/{chatId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadGlipChat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipChatInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipChatInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipChatInfo)));
        }

        /// <summary>
        /// Get Group Returns information about a group or multiple groups by their ID(s). Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group to be returned, the maximum number of IDs is 30</param>
        /// <returns>GlipGroupInfo</returns>
        [Obsolete]
        public GlipGroupInfo ReadGlipGroup (List<string> groupId)
        {
             ApiResponse<GlipGroupInfo> localVarResponse = ReadGlipGroupWithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group Returns information about a group or multiple groups by their ID(s). Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group to be returned, the maximum number of IDs is 30</param>
        /// <returns>ApiResponse of GlipGroupInfo</returns>
        [Obsolete]
        public ApiResponse<GlipGroupInfo> ReadGlipGroupWithHttpInfo (List<string> groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ChatsApi->ReadGlipGroup");

            var localVarPath = "/restapi/v1.0/glip/groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "multipart/mixed"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadGlipGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipGroupInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipGroupInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipGroupInfo)));
        }

        /// <summary>
        /// Get Group Returns information about a group or multiple groups by their ID(s). Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group to be returned, the maximum number of IDs is 30</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipGroupInfo</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<GlipGroupInfo> ReadGlipGroupAsync (List<string> groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipGroupInfo> localVarResponse = await ReadGlipGroupWithHttpInfoAsync(groupId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Group Returns information about a group or multiple groups by their ID(s). Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group to be returned, the maximum number of IDs is 30</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipGroupInfo)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<GlipGroupInfo>> ReadGlipGroupWithHttpInfoAsync (List<string> groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ChatsApi->ReadGlipGroup");

            var localVarPath = "/restapi/v1.0/glip/groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "multipart/mixed"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadGlipGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipGroupInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipGroupInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipGroupInfo)));
        }

        /// <summary>
        /// Remove Chat from Favorites Removes the specified chat from the users's list of favorite chats.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat to remove from favorite list.</param>
        /// <returns></returns>
        public void UnfavoriteGlipChat (string chatId)
        {
             UnfavoriteGlipChatWithHttpInfo(chatId);
        }

        /// <summary>
        /// Remove Chat from Favorites Removes the specified chat from the users's list of favorite chats.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat to remove from favorite list.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UnfavoriteGlipChatWithHttpInfo (string chatId)
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling ChatsApi->UnfavoriteGlipChat");

            var localVarPath = "/restapi/v1.0/glip/chats/{chatId}/unfavorite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnfavoriteGlipChat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove Chat from Favorites Removes the specified chat from the users's list of favorite chats.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat to remove from favorite list.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnfavoriteGlipChatAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await UnfavoriteGlipChatWithHttpInfoAsync(chatId, cancellationToken);

        }

        /// <summary>
        /// Remove Chat from Favorites Removes the specified chat from the users's list of favorite chats.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat to remove from favorite list.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UnfavoriteGlipChatWithHttpInfoAsync (string chatId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling ChatsApi->UnfavoriteGlipChat");

            var localVarPath = "/restapi/v1.0/glip/chats/{chatId}/unfavorite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnfavoriteGlipChat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
