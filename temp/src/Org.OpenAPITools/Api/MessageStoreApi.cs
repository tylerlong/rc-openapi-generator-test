/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessageStoreApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Message
        /// </summary>
        /// <remarks>
        /// Deletes message(s) by the given message ID(s). The first call of this method transfers the message to the 'Delete' status. The second call transfers the deleted message to the 'Purged' status. If it is required to make the message 'Purged' immediately (from the first call), then set the query parameter purge to 'True'.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="messageId">Internal identifier of a message</param>
        /// <param name="purge">If the value is &#39;True&#39;, then the message is purged immediately with all the attachments (optional, default to false)</param>
        /// <param name="conversationId">Internal identifier of a message thread (optional)</param>
        /// <returns></returns>
        void DeleteMessage (string accountId, string extensionId, List<long> messageId, bool? purge = default(bool?), long? conversationId = default(long?));

        /// <summary>
        /// Delete Message
        /// </summary>
        /// <remarks>
        /// Deletes message(s) by the given message ID(s). The first call of this method transfers the message to the 'Delete' status. The second call transfers the deleted message to the 'Purged' status. If it is required to make the message 'Purged' immediately (from the first call), then set the query parameter purge to 'True'.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="messageId">Internal identifier of a message</param>
        /// <param name="purge">If the value is &#39;True&#39;, then the message is purged immediately with all the attachments (optional, default to false)</param>
        /// <param name="conversationId">Internal identifier of a message thread (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMessageWithHttpInfo (string accountId, string extensionId, List<long> messageId, bool? purge = default(bool?), long? conversationId = default(long?));
        /// <summary>
        /// Delete Conversation
        /// </summary>
        /// <remarks>
        /// Deletes conversation(s) by conversation ID(s). Batch request is supported, max number of IDs passed as query/path parameters is 50. Alternative syntax is supported - user conversations can be deleted by passing multiple IDs in request body as an array of string, max number of conversation IDs passed in request body is 100. In this case asterisk is used in the path instead of IDs
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="conversationId"> (optional)</param>
        /// <param name="dateTo">Messages received earlier then the date specified will be deleted. The default value is current datetime (optional)</param>
        /// <param name="type">Type of messages to be deleted (optional, default to All)</param>
        /// <returns></returns>
        void DeleteMessageByFilter (string extensionId, string accountId, List<string> conversationId = default(List<string>), DateTime? dateTo = default(DateTime?), string type = default(string));

        /// <summary>
        /// Delete Conversation
        /// </summary>
        /// <remarks>
        /// Deletes conversation(s) by conversation ID(s). Batch request is supported, max number of IDs passed as query/path parameters is 50. Alternative syntax is supported - user conversations can be deleted by passing multiple IDs in request body as an array of string, max number of conversation IDs passed in request body is 100. In this case asterisk is used in the path instead of IDs
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="conversationId"> (optional)</param>
        /// <param name="dateTo">Messages received earlier then the date specified will be deleted. The default value is current datetime (optional)</param>
        /// <param name="type">Type of messages to be deleted (optional, default to All)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMessageByFilterWithHttpInfo (string extensionId, string accountId, List<string> conversationId = default(List<string>), DateTime? dateTo = default(DateTime?), string type = default(string));
        /// <summary>
        /// Get Message List
        /// </summary>
        /// <remarks>
        /// Returns the list of messages from an extension mailbox.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="availability">Specifies the availability status for the resulting messages. Multiple values are accepted (optional)</param>
        /// <param name="conversationId">Specifies the conversation identifier for the resulting messages (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)</param>
        /// <param name="dateTo">The end datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <param name="direction">The direction for the resulting messages. If not specified, both inbound and outbound messages are returned. Multiple values are accepted (optional)</param>
        /// <param name="distinctConversations">If &#39;True&#39;, then the latest messages per every conversation ID are returned (optional)</param>
        /// <param name="messageType">The type of the resulting messages. If not specified, all messages without message type filtering are returned. Multiple values are accepted (optional)</param>
        /// <param name="readStatus">The read status for the resulting messages. Multiple values are accepted (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="phoneNumber">The phone number. If specified, messages are returned for this particular phone number only (optional)</param>
        /// <returns>GetMessageList</returns>
        GetMessageList ListMessages (string accountId, string extensionId, List<string> availability = default(List<string>), int? conversationId = default(int?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), List<string> direction = default(List<string>), bool? distinctConversations = default(bool?), List<string> messageType = default(List<string>), List<string> readStatus = default(List<string>), int? page = default(int?), int? perPage = default(int?), string phoneNumber = default(string));

        /// <summary>
        /// Get Message List
        /// </summary>
        /// <remarks>
        /// Returns the list of messages from an extension mailbox.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="availability">Specifies the availability status for the resulting messages. Multiple values are accepted (optional)</param>
        /// <param name="conversationId">Specifies the conversation identifier for the resulting messages (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)</param>
        /// <param name="dateTo">The end datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <param name="direction">The direction for the resulting messages. If not specified, both inbound and outbound messages are returned. Multiple values are accepted (optional)</param>
        /// <param name="distinctConversations">If &#39;True&#39;, then the latest messages per every conversation ID are returned (optional)</param>
        /// <param name="messageType">The type of the resulting messages. If not specified, all messages without message type filtering are returned. Multiple values are accepted (optional)</param>
        /// <param name="readStatus">The read status for the resulting messages. Multiple values are accepted (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="phoneNumber">The phone number. If specified, messages are returned for this particular phone number only (optional)</param>
        /// <returns>ApiResponse of GetMessageList</returns>
        ApiResponse<GetMessageList> ListMessagesWithHttpInfo (string accountId, string extensionId, List<string> availability = default(List<string>), int? conversationId = default(int?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), List<string> direction = default(List<string>), bool? distinctConversations = default(bool?), List<string> messageType = default(List<string>), List<string> readStatus = default(List<string>), int? page = default(int?), int? perPage = default(int?), string phoneNumber = default(string));
        /// <summary>
        /// Get Message
        /// </summary>
        /// <remarks>
        /// Returns individual message record(s) by the given message ID(s). The length of inbound messages is unlimited. Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="messageId">Internal identifier of a message</param>
        /// <returns>GetMessageInfoResponse</returns>
        GetMessageInfoResponse ReadMessage (string accountId, string extensionId, long messageId);

        /// <summary>
        /// Get Message
        /// </summary>
        /// <remarks>
        /// Returns individual message record(s) by the given message ID(s). The length of inbound messages is unlimited. Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="messageId">Internal identifier of a message</param>
        /// <returns>ApiResponse of GetMessageInfoResponse</returns>
        ApiResponse<GetMessageInfoResponse> ReadMessageWithHttpInfo (string accountId, string extensionId, long messageId);
        /// <summary>
        /// Get Message Content
        /// </summary>
        /// <remarks>
        /// Returns a specific message attachment data as media stream.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="attachmentId">Internal identifier of a message attachment</param>
        /// <param name="messageId">Internal identifier of a message</param>
        /// <param name="range"> (optional)</param>
        /// <param name="contentDisposition">Content disposition of a response (optional, default to Inline)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream ReadMessageContent (string accountId, string extensionId, long attachmentId, long messageId, string range = default(string), string contentDisposition = default(string));

        /// <summary>
        /// Get Message Content
        /// </summary>
        /// <remarks>
        /// Returns a specific message attachment data as media stream.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="attachmentId">Internal identifier of a message attachment</param>
        /// <param name="messageId">Internal identifier of a message</param>
        /// <param name="range"> (optional)</param>
        /// <param name="contentDisposition">Content disposition of a response (optional, default to Inline)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> ReadMessageContentWithHttpInfo (string accountId, string extensionId, long attachmentId, long messageId, string range = default(string), string contentDisposition = default(string));
        /// <summary>
        /// Get Message Store Configuration
        /// </summary>
        /// <remarks>
        /// Returns message store settings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>MessageStoreConfiguration</returns>
        MessageStoreConfiguration ReadMessageStoreConfiguration (string accountId);

        /// <summary>
        /// Get Message Store Configuration
        /// </summary>
        /// <remarks>
        /// Returns message store settings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of MessageStoreConfiguration</returns>
        ApiResponse<MessageStoreConfiguration> ReadMessageStoreConfigurationWithHttpInfo (string accountId);
        /// <summary>
        /// Sync Messages
        /// </summary>
        /// <remarks>
        /// Synchronizes messages.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="conversationId">Conversation identifier for the resulting messages. Meaningful for SMS and Pager messages only. (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)</param>
        /// <param name="dateTo">The end datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <param name="direction">Direction for the resulting messages. If not specified, both inbound and outbound messages are returned. Multiple values are accepted (optional)</param>
        /// <param name="distinctConversations">If &#39;True&#39;, then the latest messages per every conversation ID are returned (optional)</param>
        /// <param name="messageType">Type for the resulting messages. If not specified, all types of messages are returned. Multiple values are accepted (optional)</param>
        /// <param name="recordCount">Limits the number of records to be returned (works in combination with dateFrom and dateTo if specified) (optional)</param>
        /// <param name="syncToken">Value of syncToken property of last sync request response (optional)</param>
        /// <param name="syncType">Type of message synchronization (optional)</param>
        /// <returns>GetMessageSyncResponse</returns>
        GetMessageSyncResponse SyncMessages (string accountId, string extensionId, long? conversationId = default(long?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), List<string> direction = default(List<string>), bool? distinctConversations = default(bool?), List<string> messageType = default(List<string>), int? recordCount = default(int?), string syncToken = default(string), string syncType = default(string));

        /// <summary>
        /// Sync Messages
        /// </summary>
        /// <remarks>
        /// Synchronizes messages.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="conversationId">Conversation identifier for the resulting messages. Meaningful for SMS and Pager messages only. (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)</param>
        /// <param name="dateTo">The end datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <param name="direction">Direction for the resulting messages. If not specified, both inbound and outbound messages are returned. Multiple values are accepted (optional)</param>
        /// <param name="distinctConversations">If &#39;True&#39;, then the latest messages per every conversation ID are returned (optional)</param>
        /// <param name="messageType">Type for the resulting messages. If not specified, all types of messages are returned. Multiple values are accepted (optional)</param>
        /// <param name="recordCount">Limits the number of records to be returned (works in combination with dateFrom and dateTo if specified) (optional)</param>
        /// <param name="syncToken">Value of syncToken property of last sync request response (optional)</param>
        /// <param name="syncType">Type of message synchronization (optional)</param>
        /// <returns>ApiResponse of GetMessageSyncResponse</returns>
        ApiResponse<GetMessageSyncResponse> SyncMessagesWithHttpInfo (string accountId, string extensionId, long? conversationId = default(long?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), List<string> direction = default(List<string>), bool? distinctConversations = default(bool?), List<string> messageType = default(List<string>), int? recordCount = default(int?), string syncToken = default(string), string syncType = default(string));
        /// <summary>
        /// Update Message List
        /// </summary>
        /// <remarks>
        /// Updates message(s) by ID(s). Currently only message read status can be updated. Batch request is supported, max number of IDs passed as query/path parameters is 50. Alternative syntax is supported - user messages can be updated by passing multiple IDs in request body as an array of string, max number of IDs passed in request body is 1000. In this case asterisk is used in the path instead of IDs.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="messageId">Internal identifier of a message</param>
        /// <param name="dateFrom"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="readStatus">Read status of a message to be changed. Multiple values are accepted (optional)</param>
        /// <returns>GetMessageInfoResponse</returns>
        GetMessageInfoResponse UpdateMessage (string accountId, string extensionId, List<long> messageId, string dateFrom = default(string), string type = default(string), string readStatus = default(string));

        /// <summary>
        /// Update Message List
        /// </summary>
        /// <remarks>
        /// Updates message(s) by ID(s). Currently only message read status can be updated. Batch request is supported, max number of IDs passed as query/path parameters is 50. Alternative syntax is supported - user messages can be updated by passing multiple IDs in request body as an array of string, max number of IDs passed in request body is 1000. In this case asterisk is used in the path instead of IDs.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="messageId">Internal identifier of a message</param>
        /// <param name="dateFrom"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="readStatus">Read status of a message to be changed. Multiple values are accepted (optional)</param>
        /// <returns>ApiResponse of GetMessageInfoResponse</returns>
        ApiResponse<GetMessageInfoResponse> UpdateMessageWithHttpInfo (string accountId, string extensionId, List<long> messageId, string dateFrom = default(string), string type = default(string), string readStatus = default(string));
        /// <summary>
        /// Update Message Store Configuration
        /// </summary>
        /// <remarks>
        /// Updates message store settings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="messageStoreConfiguration">JSON body</param>
        /// <returns>MessageStoreConfiguration</returns>
        MessageStoreConfiguration UpdateMessageStoreConfiguration (string accountId, MessageStoreConfiguration messageStoreConfiguration);

        /// <summary>
        /// Update Message Store Configuration
        /// </summary>
        /// <remarks>
        /// Updates message store settings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="messageStoreConfiguration">JSON body</param>
        /// <returns>ApiResponse of MessageStoreConfiguration</returns>
        ApiResponse<MessageStoreConfiguration> UpdateMessageStoreConfigurationWithHttpInfo (string accountId, MessageStoreConfiguration messageStoreConfiguration);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete Message
        /// </summary>
        /// <remarks>
        /// Deletes message(s) by the given message ID(s). The first call of this method transfers the message to the 'Delete' status. The second call transfers the deleted message to the 'Purged' status. If it is required to make the message 'Purged' immediately (from the first call), then set the query parameter purge to 'True'.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="messageId">Internal identifier of a message</param>
        /// <param name="purge">If the value is &#39;True&#39;, then the message is purged immediately with all the attachments (optional, default to false)</param>
        /// <param name="conversationId">Internal identifier of a message thread (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMessageAsync (string accountId, string extensionId, List<long> messageId, bool? purge = default(bool?), long? conversationId = default(long?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Message
        /// </summary>
        /// <remarks>
        /// Deletes message(s) by the given message ID(s). The first call of this method transfers the message to the 'Delete' status. The second call transfers the deleted message to the 'Purged' status. If it is required to make the message 'Purged' immediately (from the first call), then set the query parameter purge to 'True'.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="messageId">Internal identifier of a message</param>
        /// <param name="purge">If the value is &#39;True&#39;, then the message is purged immediately with all the attachments (optional, default to false)</param>
        /// <param name="conversationId">Internal identifier of a message thread (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMessageWithHttpInfoAsync (string accountId, string extensionId, List<long> messageId, bool? purge = default(bool?), long? conversationId = default(long?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete Conversation
        /// </summary>
        /// <remarks>
        /// Deletes conversation(s) by conversation ID(s). Batch request is supported, max number of IDs passed as query/path parameters is 50. Alternative syntax is supported - user conversations can be deleted by passing multiple IDs in request body as an array of string, max number of conversation IDs passed in request body is 100. In this case asterisk is used in the path instead of IDs
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="conversationId"> (optional)</param>
        /// <param name="dateTo">Messages received earlier then the date specified will be deleted. The default value is current datetime (optional)</param>
        /// <param name="type">Type of messages to be deleted (optional, default to All)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMessageByFilterAsync (string extensionId, string accountId, List<string> conversationId = default(List<string>), DateTime? dateTo = default(DateTime?), string type = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Conversation
        /// </summary>
        /// <remarks>
        /// Deletes conversation(s) by conversation ID(s). Batch request is supported, max number of IDs passed as query/path parameters is 50. Alternative syntax is supported - user conversations can be deleted by passing multiple IDs in request body as an array of string, max number of conversation IDs passed in request body is 100. In this case asterisk is used in the path instead of IDs
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="conversationId"> (optional)</param>
        /// <param name="dateTo">Messages received earlier then the date specified will be deleted. The default value is current datetime (optional)</param>
        /// <param name="type">Type of messages to be deleted (optional, default to All)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMessageByFilterWithHttpInfoAsync (string extensionId, string accountId, List<string> conversationId = default(List<string>), DateTime? dateTo = default(DateTime?), string type = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Message List
        /// </summary>
        /// <remarks>
        /// Returns the list of messages from an extension mailbox.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="availability">Specifies the availability status for the resulting messages. Multiple values are accepted (optional)</param>
        /// <param name="conversationId">Specifies the conversation identifier for the resulting messages (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)</param>
        /// <param name="dateTo">The end datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <param name="direction">The direction for the resulting messages. If not specified, both inbound and outbound messages are returned. Multiple values are accepted (optional)</param>
        /// <param name="distinctConversations">If &#39;True&#39;, then the latest messages per every conversation ID are returned (optional)</param>
        /// <param name="messageType">The type of the resulting messages. If not specified, all messages without message type filtering are returned. Multiple values are accepted (optional)</param>
        /// <param name="readStatus">The read status for the resulting messages. Multiple values are accepted (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="phoneNumber">The phone number. If specified, messages are returned for this particular phone number only (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetMessageList</returns>
        System.Threading.Tasks.Task<GetMessageList> ListMessagesAsync (string accountId, string extensionId, List<string> availability = default(List<string>), int? conversationId = default(int?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), List<string> direction = default(List<string>), bool? distinctConversations = default(bool?), List<string> messageType = default(List<string>), List<string> readStatus = default(List<string>), int? page = default(int?), int? perPage = default(int?), string phoneNumber = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Message List
        /// </summary>
        /// <remarks>
        /// Returns the list of messages from an extension mailbox.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="availability">Specifies the availability status for the resulting messages. Multiple values are accepted (optional)</param>
        /// <param name="conversationId">Specifies the conversation identifier for the resulting messages (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)</param>
        /// <param name="dateTo">The end datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <param name="direction">The direction for the resulting messages. If not specified, both inbound and outbound messages are returned. Multiple values are accepted (optional)</param>
        /// <param name="distinctConversations">If &#39;True&#39;, then the latest messages per every conversation ID are returned (optional)</param>
        /// <param name="messageType">The type of the resulting messages. If not specified, all messages without message type filtering are returned. Multiple values are accepted (optional)</param>
        /// <param name="readStatus">The read status for the resulting messages. Multiple values are accepted (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="phoneNumber">The phone number. If specified, messages are returned for this particular phone number only (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetMessageList)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMessageList>> ListMessagesWithHttpInfoAsync (string accountId, string extensionId, List<string> availability = default(List<string>), int? conversationId = default(int?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), List<string> direction = default(List<string>), bool? distinctConversations = default(bool?), List<string> messageType = default(List<string>), List<string> readStatus = default(List<string>), int? page = default(int?), int? perPage = default(int?), string phoneNumber = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Message
        /// </summary>
        /// <remarks>
        /// Returns individual message record(s) by the given message ID(s). The length of inbound messages is unlimited. Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="messageId">Internal identifier of a message</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetMessageInfoResponse</returns>
        System.Threading.Tasks.Task<GetMessageInfoResponse> ReadMessageAsync (string accountId, string extensionId, long messageId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Message
        /// </summary>
        /// <remarks>
        /// Returns individual message record(s) by the given message ID(s). The length of inbound messages is unlimited. Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="messageId">Internal identifier of a message</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetMessageInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMessageInfoResponse>> ReadMessageWithHttpInfoAsync (string accountId, string extensionId, long messageId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Message Content
        /// </summary>
        /// <remarks>
        /// Returns a specific message attachment data as media stream.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="attachmentId">Internal identifier of a message attachment</param>
        /// <param name="messageId">Internal identifier of a message</param>
        /// <param name="range"> (optional)</param>
        /// <param name="contentDisposition">Content disposition of a response (optional, default to Inline)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> ReadMessageContentAsync (string accountId, string extensionId, long attachmentId, long messageId, string range = default(string), string contentDisposition = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Message Content
        /// </summary>
        /// <remarks>
        /// Returns a specific message attachment data as media stream.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="attachmentId">Internal identifier of a message attachment</param>
        /// <param name="messageId">Internal identifier of a message</param>
        /// <param name="range"> (optional)</param>
        /// <param name="contentDisposition">Content disposition of a response (optional, default to Inline)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ReadMessageContentWithHttpInfoAsync (string accountId, string extensionId, long attachmentId, long messageId, string range = default(string), string contentDisposition = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Message Store Configuration
        /// </summary>
        /// <remarks>
        /// Returns message store settings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MessageStoreConfiguration</returns>
        System.Threading.Tasks.Task<MessageStoreConfiguration> ReadMessageStoreConfigurationAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Message Store Configuration
        /// </summary>
        /// <remarks>
        /// Returns message store settings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MessageStoreConfiguration)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageStoreConfiguration>> ReadMessageStoreConfigurationWithHttpInfoAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Sync Messages
        /// </summary>
        /// <remarks>
        /// Synchronizes messages.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="conversationId">Conversation identifier for the resulting messages. Meaningful for SMS and Pager messages only. (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)</param>
        /// <param name="dateTo">The end datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <param name="direction">Direction for the resulting messages. If not specified, both inbound and outbound messages are returned. Multiple values are accepted (optional)</param>
        /// <param name="distinctConversations">If &#39;True&#39;, then the latest messages per every conversation ID are returned (optional)</param>
        /// <param name="messageType">Type for the resulting messages. If not specified, all types of messages are returned. Multiple values are accepted (optional)</param>
        /// <param name="recordCount">Limits the number of records to be returned (works in combination with dateFrom and dateTo if specified) (optional)</param>
        /// <param name="syncToken">Value of syncToken property of last sync request response (optional)</param>
        /// <param name="syncType">Type of message synchronization (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetMessageSyncResponse</returns>
        System.Threading.Tasks.Task<GetMessageSyncResponse> SyncMessagesAsync (string accountId, string extensionId, long? conversationId = default(long?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), List<string> direction = default(List<string>), bool? distinctConversations = default(bool?), List<string> messageType = default(List<string>), int? recordCount = default(int?), string syncToken = default(string), string syncType = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sync Messages
        /// </summary>
        /// <remarks>
        /// Synchronizes messages.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="conversationId">Conversation identifier for the resulting messages. Meaningful for SMS and Pager messages only. (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)</param>
        /// <param name="dateTo">The end datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <param name="direction">Direction for the resulting messages. If not specified, both inbound and outbound messages are returned. Multiple values are accepted (optional)</param>
        /// <param name="distinctConversations">If &#39;True&#39;, then the latest messages per every conversation ID are returned (optional)</param>
        /// <param name="messageType">Type for the resulting messages. If not specified, all types of messages are returned. Multiple values are accepted (optional)</param>
        /// <param name="recordCount">Limits the number of records to be returned (works in combination with dateFrom and dateTo if specified) (optional)</param>
        /// <param name="syncToken">Value of syncToken property of last sync request response (optional)</param>
        /// <param name="syncType">Type of message synchronization (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetMessageSyncResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMessageSyncResponse>> SyncMessagesWithHttpInfoAsync (string accountId, string extensionId, long? conversationId = default(long?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), List<string> direction = default(List<string>), bool? distinctConversations = default(bool?), List<string> messageType = default(List<string>), int? recordCount = default(int?), string syncToken = default(string), string syncType = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Message List
        /// </summary>
        /// <remarks>
        /// Updates message(s) by ID(s). Currently only message read status can be updated. Batch request is supported, max number of IDs passed as query/path parameters is 50. Alternative syntax is supported - user messages can be updated by passing multiple IDs in request body as an array of string, max number of IDs passed in request body is 1000. In this case asterisk is used in the path instead of IDs.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="messageId">Internal identifier of a message</param>
        /// <param name="dateFrom"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="readStatus">Read status of a message to be changed. Multiple values are accepted (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetMessageInfoResponse</returns>
        System.Threading.Tasks.Task<GetMessageInfoResponse> UpdateMessageAsync (string accountId, string extensionId, List<long> messageId, string dateFrom = default(string), string type = default(string), string readStatus = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Message List
        /// </summary>
        /// <remarks>
        /// Updates message(s) by ID(s). Currently only message read status can be updated. Batch request is supported, max number of IDs passed as query/path parameters is 50. Alternative syntax is supported - user messages can be updated by passing multiple IDs in request body as an array of string, max number of IDs passed in request body is 1000. In this case asterisk is used in the path instead of IDs.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="messageId">Internal identifier of a message</param>
        /// <param name="dateFrom"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="readStatus">Read status of a message to be changed. Multiple values are accepted (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetMessageInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMessageInfoResponse>> UpdateMessageWithHttpInfoAsync (string accountId, string extensionId, List<long> messageId, string dateFrom = default(string), string type = default(string), string readStatus = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Message Store Configuration
        /// </summary>
        /// <remarks>
        /// Updates message store settings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="messageStoreConfiguration">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MessageStoreConfiguration</returns>
        System.Threading.Tasks.Task<MessageStoreConfiguration> UpdateMessageStoreConfigurationAsync (string accountId, MessageStoreConfiguration messageStoreConfiguration, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Message Store Configuration
        /// </summary>
        /// <remarks>
        /// Updates message store settings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="messageStoreConfiguration">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MessageStoreConfiguration)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageStoreConfiguration>> UpdateMessageStoreConfigurationWithHttpInfoAsync (string accountId, MessageStoreConfiguration messageStoreConfiguration, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MessageStoreApi : IMessageStoreApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MessageStoreApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MessageStoreApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessageStoreApi"/> class
        /// </summary>
        /// <returns></returns>
        public MessageStoreApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessageStoreApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MessageStoreApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete Message Deletes message(s) by the given message ID(s). The first call of this method transfers the message to the 'Delete' status. The second call transfers the deleted message to the 'Purged' status. If it is required to make the message 'Purged' immediately (from the first call), then set the query parameter purge to 'True'.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="messageId">Internal identifier of a message</param>
        /// <param name="purge">If the value is &#39;True&#39;, then the message is purged immediately with all the attachments (optional, default to false)</param>
        /// <param name="conversationId">Internal identifier of a message thread (optional)</param>
        /// <returns></returns>
        public void DeleteMessage (string accountId, string extensionId, List<long> messageId, bool? purge = default(bool?), long? conversationId = default(long?))
        {
             DeleteMessageWithHttpInfo(accountId, extensionId, messageId, purge, conversationId);
        }

        /// <summary>
        /// Delete Message Deletes message(s) by the given message ID(s). The first call of this method transfers the message to the 'Delete' status. The second call transfers the deleted message to the 'Purged' status. If it is required to make the message 'Purged' immediately (from the first call), then set the query parameter purge to 'True'.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="messageId">Internal identifier of a message</param>
        /// <param name="purge">If the value is &#39;True&#39;, then the message is purged immediately with all the attachments (optional, default to false)</param>
        /// <param name="conversationId">Internal identifier of a message thread (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteMessageWithHttpInfo (string accountId, string extensionId, List<long> messageId, bool? purge = default(bool?), long? conversationId = default(long?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MessageStoreApi->DeleteMessage");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling MessageStoreApi->DeleteMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageStoreApi->DeleteMessage");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/message-store/{messageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (messageId != null) localVarPathParams.Add("messageId", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (purge != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "purge", purge)); // query parameter
            if (conversationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conversationId", conversationId)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Message Deletes message(s) by the given message ID(s). The first call of this method transfers the message to the 'Delete' status. The second call transfers the deleted message to the 'Purged' status. If it is required to make the message 'Purged' immediately (from the first call), then set the query parameter purge to 'True'.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="messageId">Internal identifier of a message</param>
        /// <param name="purge">If the value is &#39;True&#39;, then the message is purged immediately with all the attachments (optional, default to false)</param>
        /// <param name="conversationId">Internal identifier of a message thread (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMessageAsync (string accountId, string extensionId, List<long> messageId, bool? purge = default(bool?), long? conversationId = default(long?), CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteMessageWithHttpInfoAsync(accountId, extensionId, messageId, purge, conversationId, cancellationToken);

        }

        /// <summary>
        /// Delete Message Deletes message(s) by the given message ID(s). The first call of this method transfers the message to the 'Delete' status. The second call transfers the deleted message to the 'Purged' status. If it is required to make the message 'Purged' immediately (from the first call), then set the query parameter purge to 'True'.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="messageId">Internal identifier of a message</param>
        /// <param name="purge">If the value is &#39;True&#39;, then the message is purged immediately with all the attachments (optional, default to false)</param>
        /// <param name="conversationId">Internal identifier of a message thread (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMessageWithHttpInfoAsync (string accountId, string extensionId, List<long> messageId, bool? purge = default(bool?), long? conversationId = default(long?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MessageStoreApi->DeleteMessage");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling MessageStoreApi->DeleteMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageStoreApi->DeleteMessage");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/message-store/{messageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (messageId != null) localVarPathParams.Add("messageId", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (purge != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "purge", purge)); // query parameter
            if (conversationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conversationId", conversationId)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Conversation Deletes conversation(s) by conversation ID(s). Batch request is supported, max number of IDs passed as query/path parameters is 50. Alternative syntax is supported - user conversations can be deleted by passing multiple IDs in request body as an array of string, max number of conversation IDs passed in request body is 100. In this case asterisk is used in the path instead of IDs
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="conversationId"> (optional)</param>
        /// <param name="dateTo">Messages received earlier then the date specified will be deleted. The default value is current datetime (optional)</param>
        /// <param name="type">Type of messages to be deleted (optional, default to All)</param>
        /// <returns></returns>
        public void DeleteMessageByFilter (string extensionId, string accountId, List<string> conversationId = default(List<string>), DateTime? dateTo = default(DateTime?), string type = default(string))
        {
             DeleteMessageByFilterWithHttpInfo(extensionId, accountId, conversationId, dateTo, type);
        }

        /// <summary>
        /// Delete Conversation Deletes conversation(s) by conversation ID(s). Batch request is supported, max number of IDs passed as query/path parameters is 50. Alternative syntax is supported - user conversations can be deleted by passing multiple IDs in request body as an array of string, max number of conversation IDs passed in request body is 100. In this case asterisk is used in the path instead of IDs
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="conversationId"> (optional)</param>
        /// <param name="dateTo">Messages received earlier then the date specified will be deleted. The default value is current datetime (optional)</param>
        /// <param name="type">Type of messages to be deleted (optional, default to All)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteMessageByFilterWithHttpInfo (string extensionId, string accountId, List<string> conversationId = default(List<string>), DateTime? dateTo = default(DateTime?), string type = default(string))
        {
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling MessageStoreApi->DeleteMessageByFilter");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MessageStoreApi->DeleteMessageByFilter");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/message-store";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (conversationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "conversationId", conversationId)); // query parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateTo", dateTo)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMessageByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Conversation Deletes conversation(s) by conversation ID(s). Batch request is supported, max number of IDs passed as query/path parameters is 50. Alternative syntax is supported - user conversations can be deleted by passing multiple IDs in request body as an array of string, max number of conversation IDs passed in request body is 100. In this case asterisk is used in the path instead of IDs
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="conversationId"> (optional)</param>
        /// <param name="dateTo">Messages received earlier then the date specified will be deleted. The default value is current datetime (optional)</param>
        /// <param name="type">Type of messages to be deleted (optional, default to All)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMessageByFilterAsync (string extensionId, string accountId, List<string> conversationId = default(List<string>), DateTime? dateTo = default(DateTime?), string type = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteMessageByFilterWithHttpInfoAsync(extensionId, accountId, conversationId, dateTo, type, cancellationToken);

        }

        /// <summary>
        /// Delete Conversation Deletes conversation(s) by conversation ID(s). Batch request is supported, max number of IDs passed as query/path parameters is 50. Alternative syntax is supported - user conversations can be deleted by passing multiple IDs in request body as an array of string, max number of conversation IDs passed in request body is 100. In this case asterisk is used in the path instead of IDs
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="conversationId"> (optional)</param>
        /// <param name="dateTo">Messages received earlier then the date specified will be deleted. The default value is current datetime (optional)</param>
        /// <param name="type">Type of messages to be deleted (optional, default to All)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMessageByFilterWithHttpInfoAsync (string extensionId, string accountId, List<string> conversationId = default(List<string>), DateTime? dateTo = default(DateTime?), string type = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling MessageStoreApi->DeleteMessageByFilter");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MessageStoreApi->DeleteMessageByFilter");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/message-store";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (conversationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "conversationId", conversationId)); // query parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateTo", dateTo)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMessageByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get Message List Returns the list of messages from an extension mailbox.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="availability">Specifies the availability status for the resulting messages. Multiple values are accepted (optional)</param>
        /// <param name="conversationId">Specifies the conversation identifier for the resulting messages (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)</param>
        /// <param name="dateTo">The end datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <param name="direction">The direction for the resulting messages. If not specified, both inbound and outbound messages are returned. Multiple values are accepted (optional)</param>
        /// <param name="distinctConversations">If &#39;True&#39;, then the latest messages per every conversation ID are returned (optional)</param>
        /// <param name="messageType">The type of the resulting messages. If not specified, all messages without message type filtering are returned. Multiple values are accepted (optional)</param>
        /// <param name="readStatus">The read status for the resulting messages. Multiple values are accepted (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="phoneNumber">The phone number. If specified, messages are returned for this particular phone number only (optional)</param>
        /// <returns>GetMessageList</returns>
        public GetMessageList ListMessages (string accountId, string extensionId, List<string> availability = default(List<string>), int? conversationId = default(int?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), List<string> direction = default(List<string>), bool? distinctConversations = default(bool?), List<string> messageType = default(List<string>), List<string> readStatus = default(List<string>), int? page = default(int?), int? perPage = default(int?), string phoneNumber = default(string))
        {
             ApiResponse<GetMessageList> localVarResponse = ListMessagesWithHttpInfo(accountId, extensionId, availability, conversationId, dateFrom, dateTo, direction, distinctConversations, messageType, readStatus, page, perPage, phoneNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Message List Returns the list of messages from an extension mailbox.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="availability">Specifies the availability status for the resulting messages. Multiple values are accepted (optional)</param>
        /// <param name="conversationId">Specifies the conversation identifier for the resulting messages (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)</param>
        /// <param name="dateTo">The end datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <param name="direction">The direction for the resulting messages. If not specified, both inbound and outbound messages are returned. Multiple values are accepted (optional)</param>
        /// <param name="distinctConversations">If &#39;True&#39;, then the latest messages per every conversation ID are returned (optional)</param>
        /// <param name="messageType">The type of the resulting messages. If not specified, all messages without message type filtering are returned. Multiple values are accepted (optional)</param>
        /// <param name="readStatus">The read status for the resulting messages. Multiple values are accepted (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="phoneNumber">The phone number. If specified, messages are returned for this particular phone number only (optional)</param>
        /// <returns>ApiResponse of GetMessageList</returns>
        public ApiResponse<GetMessageList> ListMessagesWithHttpInfo (string accountId, string extensionId, List<string> availability = default(List<string>), int? conversationId = default(int?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), List<string> direction = default(List<string>), bool? distinctConversations = default(bool?), List<string> messageType = default(List<string>), List<string> readStatus = default(List<string>), int? page = default(int?), int? perPage = default(int?), string phoneNumber = default(string))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MessageStoreApi->ListMessages");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling MessageStoreApi->ListMessages");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/message-store";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (availability != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "availability", availability)); // query parameter
            if (conversationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conversationId", conversationId)); // query parameter
            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateFrom", dateFrom)); // query parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateTo", dateTo)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "direction", direction)); // query parameter
            if (distinctConversations != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "distinctConversations", distinctConversations)); // query parameter
            if (messageType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "messageType", messageType)); // query parameter
            if (readStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "readStatus", readStatus)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (phoneNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phoneNumber", phoneNumber)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessageList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetMessageList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessageList)));
        }

        /// <summary>
        /// Get Message List Returns the list of messages from an extension mailbox.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="availability">Specifies the availability status for the resulting messages. Multiple values are accepted (optional)</param>
        /// <param name="conversationId">Specifies the conversation identifier for the resulting messages (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)</param>
        /// <param name="dateTo">The end datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <param name="direction">The direction for the resulting messages. If not specified, both inbound and outbound messages are returned. Multiple values are accepted (optional)</param>
        /// <param name="distinctConversations">If &#39;True&#39;, then the latest messages per every conversation ID are returned (optional)</param>
        /// <param name="messageType">The type of the resulting messages. If not specified, all messages without message type filtering are returned. Multiple values are accepted (optional)</param>
        /// <param name="readStatus">The read status for the resulting messages. Multiple values are accepted (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="phoneNumber">The phone number. If specified, messages are returned for this particular phone number only (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetMessageList</returns>
        public async System.Threading.Tasks.Task<GetMessageList> ListMessagesAsync (string accountId, string extensionId, List<string> availability = default(List<string>), int? conversationId = default(int?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), List<string> direction = default(List<string>), bool? distinctConversations = default(bool?), List<string> messageType = default(List<string>), List<string> readStatus = default(List<string>), int? page = default(int?), int? perPage = default(int?), string phoneNumber = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetMessageList> localVarResponse = await ListMessagesWithHttpInfoAsync(accountId, extensionId, availability, conversationId, dateFrom, dateTo, direction, distinctConversations, messageType, readStatus, page, perPage, phoneNumber, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Message List Returns the list of messages from an extension mailbox.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="availability">Specifies the availability status for the resulting messages. Multiple values are accepted (optional)</param>
        /// <param name="conversationId">Specifies the conversation identifier for the resulting messages (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)</param>
        /// <param name="dateTo">The end datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <param name="direction">The direction for the resulting messages. If not specified, both inbound and outbound messages are returned. Multiple values are accepted (optional)</param>
        /// <param name="distinctConversations">If &#39;True&#39;, then the latest messages per every conversation ID are returned (optional)</param>
        /// <param name="messageType">The type of the resulting messages. If not specified, all messages without message type filtering are returned. Multiple values are accepted (optional)</param>
        /// <param name="readStatus">The read status for the resulting messages. Multiple values are accepted (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="phoneNumber">The phone number. If specified, messages are returned for this particular phone number only (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetMessageList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMessageList>> ListMessagesWithHttpInfoAsync (string accountId, string extensionId, List<string> availability = default(List<string>), int? conversationId = default(int?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), List<string> direction = default(List<string>), bool? distinctConversations = default(bool?), List<string> messageType = default(List<string>), List<string> readStatus = default(List<string>), int? page = default(int?), int? perPage = default(int?), string phoneNumber = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MessageStoreApi->ListMessages");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling MessageStoreApi->ListMessages");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/message-store";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (availability != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "availability", availability)); // query parameter
            if (conversationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conversationId", conversationId)); // query parameter
            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateFrom", dateFrom)); // query parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateTo", dateTo)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "direction", direction)); // query parameter
            if (distinctConversations != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "distinctConversations", distinctConversations)); // query parameter
            if (messageType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "messageType", messageType)); // query parameter
            if (readStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "readStatus", readStatus)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (phoneNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phoneNumber", phoneNumber)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessageList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetMessageList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessageList)));
        }

        /// <summary>
        /// Get Message Returns individual message record(s) by the given message ID(s). The length of inbound messages is unlimited. Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="messageId">Internal identifier of a message</param>
        /// <returns>GetMessageInfoResponse</returns>
        public GetMessageInfoResponse ReadMessage (string accountId, string extensionId, long messageId)
        {
             ApiResponse<GetMessageInfoResponse> localVarResponse = ReadMessageWithHttpInfo(accountId, extensionId, messageId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Message Returns individual message record(s) by the given message ID(s). The length of inbound messages is unlimited. Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="messageId">Internal identifier of a message</param>
        /// <returns>ApiResponse of GetMessageInfoResponse</returns>
        public ApiResponse<GetMessageInfoResponse> ReadMessageWithHttpInfo (string accountId, string extensionId, long messageId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MessageStoreApi->ReadMessage");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling MessageStoreApi->ReadMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageStoreApi->ReadMessage");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/message-store/{messageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (messageId != null) localVarPathParams.Add("messageId", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessageInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetMessageInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessageInfoResponse)));
        }

        /// <summary>
        /// Get Message Returns individual message record(s) by the given message ID(s). The length of inbound messages is unlimited. Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="messageId">Internal identifier of a message</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetMessageInfoResponse</returns>
        public async System.Threading.Tasks.Task<GetMessageInfoResponse> ReadMessageAsync (string accountId, string extensionId, long messageId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetMessageInfoResponse> localVarResponse = await ReadMessageWithHttpInfoAsync(accountId, extensionId, messageId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Message Returns individual message record(s) by the given message ID(s). The length of inbound messages is unlimited. Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="messageId">Internal identifier of a message</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetMessageInfoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMessageInfoResponse>> ReadMessageWithHttpInfoAsync (string accountId, string extensionId, long messageId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MessageStoreApi->ReadMessage");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling MessageStoreApi->ReadMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageStoreApi->ReadMessage");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/message-store/{messageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (messageId != null) localVarPathParams.Add("messageId", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessageInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetMessageInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessageInfoResponse)));
        }

        /// <summary>
        /// Get Message Content Returns a specific message attachment data as media stream.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="attachmentId">Internal identifier of a message attachment</param>
        /// <param name="messageId">Internal identifier of a message</param>
        /// <param name="range"> (optional)</param>
        /// <param name="contentDisposition">Content disposition of a response (optional, default to Inline)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream ReadMessageContent (string accountId, string extensionId, long attachmentId, long messageId, string range = default(string), string contentDisposition = default(string))
        {
             ApiResponse<System.IO.Stream> localVarResponse = ReadMessageContentWithHttpInfo(accountId, extensionId, attachmentId, messageId, range, contentDisposition);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Message Content Returns a specific message attachment data as media stream.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="attachmentId">Internal identifier of a message attachment</param>
        /// <param name="messageId">Internal identifier of a message</param>
        /// <param name="range"> (optional)</param>
        /// <param name="contentDisposition">Content disposition of a response (optional, default to Inline)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> ReadMessageContentWithHttpInfo (string accountId, string extensionId, long attachmentId, long messageId, string range = default(string), string contentDisposition = default(string))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MessageStoreApi->ReadMessageContent");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling MessageStoreApi->ReadMessageContent");
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling MessageStoreApi->ReadMessageContent");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageStoreApi->ReadMessageContent");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/message-store/{messageId}/content/{attachmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "image/tiff"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (attachmentId != null) localVarPathParams.Add("attachmentId", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (messageId != null) localVarPathParams.Add("messageId", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (contentDisposition != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contentDisposition", contentDisposition)); // query parameter
            if (range != null) localVarHeaderParams.Add("Range", this.Configuration.ApiClient.ParameterToString(range)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadMessageContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get Message Content Returns a specific message attachment data as media stream.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="attachmentId">Internal identifier of a message attachment</param>
        /// <param name="messageId">Internal identifier of a message</param>
        /// <param name="range"> (optional)</param>
        /// <param name="contentDisposition">Content disposition of a response (optional, default to Inline)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> ReadMessageContentAsync (string accountId, string extensionId, long attachmentId, long messageId, string range = default(string), string contentDisposition = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await ReadMessageContentWithHttpInfoAsync(accountId, extensionId, attachmentId, messageId, range, contentDisposition, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Message Content Returns a specific message attachment data as media stream.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="attachmentId">Internal identifier of a message attachment</param>
        /// <param name="messageId">Internal identifier of a message</param>
        /// <param name="range"> (optional)</param>
        /// <param name="contentDisposition">Content disposition of a response (optional, default to Inline)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ReadMessageContentWithHttpInfoAsync (string accountId, string extensionId, long attachmentId, long messageId, string range = default(string), string contentDisposition = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MessageStoreApi->ReadMessageContent");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling MessageStoreApi->ReadMessageContent");
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling MessageStoreApi->ReadMessageContent");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageStoreApi->ReadMessageContent");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/message-store/{messageId}/content/{attachmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "image/tiff"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (attachmentId != null) localVarPathParams.Add("attachmentId", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (messageId != null) localVarPathParams.Add("messageId", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (contentDisposition != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contentDisposition", contentDisposition)); // query parameter
            if (range != null) localVarHeaderParams.Add("Range", this.Configuration.ApiClient.ParameterToString(range)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadMessageContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get Message Store Configuration Returns message store settings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>MessageStoreConfiguration</returns>
        public MessageStoreConfiguration ReadMessageStoreConfiguration (string accountId)
        {
             ApiResponse<MessageStoreConfiguration> localVarResponse = ReadMessageStoreConfigurationWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Message Store Configuration Returns message store settings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <returns>ApiResponse of MessageStoreConfiguration</returns>
        public ApiResponse<MessageStoreConfiguration> ReadMessageStoreConfigurationWithHttpInfo (string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MessageStoreApi->ReadMessageStoreConfiguration");

            var localVarPath = "/restapi/v1.0/account/{accountId}/message-store-configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadMessageStoreConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageStoreConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessageStoreConfiguration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageStoreConfiguration)));
        }

        /// <summary>
        /// Get Message Store Configuration Returns message store settings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MessageStoreConfiguration</returns>
        public async System.Threading.Tasks.Task<MessageStoreConfiguration> ReadMessageStoreConfigurationAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MessageStoreConfiguration> localVarResponse = await ReadMessageStoreConfigurationWithHttpInfoAsync(accountId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Message Store Configuration Returns message store settings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MessageStoreConfiguration)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessageStoreConfiguration>> ReadMessageStoreConfigurationWithHttpInfoAsync (string accountId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MessageStoreApi->ReadMessageStoreConfiguration");

            var localVarPath = "/restapi/v1.0/account/{accountId}/message-store-configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadMessageStoreConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageStoreConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessageStoreConfiguration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageStoreConfiguration)));
        }

        /// <summary>
        /// Sync Messages Synchronizes messages.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="conversationId">Conversation identifier for the resulting messages. Meaningful for SMS and Pager messages only. (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)</param>
        /// <param name="dateTo">The end datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <param name="direction">Direction for the resulting messages. If not specified, both inbound and outbound messages are returned. Multiple values are accepted (optional)</param>
        /// <param name="distinctConversations">If &#39;True&#39;, then the latest messages per every conversation ID are returned (optional)</param>
        /// <param name="messageType">Type for the resulting messages. If not specified, all types of messages are returned. Multiple values are accepted (optional)</param>
        /// <param name="recordCount">Limits the number of records to be returned (works in combination with dateFrom and dateTo if specified) (optional)</param>
        /// <param name="syncToken">Value of syncToken property of last sync request response (optional)</param>
        /// <param name="syncType">Type of message synchronization (optional)</param>
        /// <returns>GetMessageSyncResponse</returns>
        public GetMessageSyncResponse SyncMessages (string accountId, string extensionId, long? conversationId = default(long?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), List<string> direction = default(List<string>), bool? distinctConversations = default(bool?), List<string> messageType = default(List<string>), int? recordCount = default(int?), string syncToken = default(string), string syncType = default(string))
        {
             ApiResponse<GetMessageSyncResponse> localVarResponse = SyncMessagesWithHttpInfo(accountId, extensionId, conversationId, dateFrom, dateTo, direction, distinctConversations, messageType, recordCount, syncToken, syncType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sync Messages Synchronizes messages.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="conversationId">Conversation identifier for the resulting messages. Meaningful for SMS and Pager messages only. (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)</param>
        /// <param name="dateTo">The end datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <param name="direction">Direction for the resulting messages. If not specified, both inbound and outbound messages are returned. Multiple values are accepted (optional)</param>
        /// <param name="distinctConversations">If &#39;True&#39;, then the latest messages per every conversation ID are returned (optional)</param>
        /// <param name="messageType">Type for the resulting messages. If not specified, all types of messages are returned. Multiple values are accepted (optional)</param>
        /// <param name="recordCount">Limits the number of records to be returned (works in combination with dateFrom and dateTo if specified) (optional)</param>
        /// <param name="syncToken">Value of syncToken property of last sync request response (optional)</param>
        /// <param name="syncType">Type of message synchronization (optional)</param>
        /// <returns>ApiResponse of GetMessageSyncResponse</returns>
        public ApiResponse<GetMessageSyncResponse> SyncMessagesWithHttpInfo (string accountId, string extensionId, long? conversationId = default(long?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), List<string> direction = default(List<string>), bool? distinctConversations = default(bool?), List<string> messageType = default(List<string>), int? recordCount = default(int?), string syncToken = default(string), string syncType = default(string))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MessageStoreApi->SyncMessages");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling MessageStoreApi->SyncMessages");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/message-sync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (conversationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conversationId", conversationId)); // query parameter
            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateFrom", dateFrom)); // query parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateTo", dateTo)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "direction", direction)); // query parameter
            if (distinctConversations != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "distinctConversations", distinctConversations)); // query parameter
            if (messageType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "messageType", messageType)); // query parameter
            if (recordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordCount", recordCount)); // query parameter
            if (syncToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "syncToken", syncToken)); // query parameter
            if (syncType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "syncType", syncType)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SyncMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessageSyncResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetMessageSyncResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessageSyncResponse)));
        }

        /// <summary>
        /// Sync Messages Synchronizes messages.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="conversationId">Conversation identifier for the resulting messages. Meaningful for SMS and Pager messages only. (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)</param>
        /// <param name="dateTo">The end datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <param name="direction">Direction for the resulting messages. If not specified, both inbound and outbound messages are returned. Multiple values are accepted (optional)</param>
        /// <param name="distinctConversations">If &#39;True&#39;, then the latest messages per every conversation ID are returned (optional)</param>
        /// <param name="messageType">Type for the resulting messages. If not specified, all types of messages are returned. Multiple values are accepted (optional)</param>
        /// <param name="recordCount">Limits the number of records to be returned (works in combination with dateFrom and dateTo if specified) (optional)</param>
        /// <param name="syncToken">Value of syncToken property of last sync request response (optional)</param>
        /// <param name="syncType">Type of message synchronization (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetMessageSyncResponse</returns>
        public async System.Threading.Tasks.Task<GetMessageSyncResponse> SyncMessagesAsync (string accountId, string extensionId, long? conversationId = default(long?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), List<string> direction = default(List<string>), bool? distinctConversations = default(bool?), List<string> messageType = default(List<string>), int? recordCount = default(int?), string syncToken = default(string), string syncType = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetMessageSyncResponse> localVarResponse = await SyncMessagesWithHttpInfoAsync(accountId, extensionId, conversationId, dateFrom, dateTo, direction, distinctConversations, messageType, recordCount, syncToken, syncType, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sync Messages Synchronizes messages.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="conversationId">Conversation identifier for the resulting messages. Meaningful for SMS and Pager messages only. (optional)</param>
        /// <param name="dateFrom">The start datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)</param>
        /// <param name="dateTo">The end datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)</param>
        /// <param name="direction">Direction for the resulting messages. If not specified, both inbound and outbound messages are returned. Multiple values are accepted (optional)</param>
        /// <param name="distinctConversations">If &#39;True&#39;, then the latest messages per every conversation ID are returned (optional)</param>
        /// <param name="messageType">Type for the resulting messages. If not specified, all types of messages are returned. Multiple values are accepted (optional)</param>
        /// <param name="recordCount">Limits the number of records to be returned (works in combination with dateFrom and dateTo if specified) (optional)</param>
        /// <param name="syncToken">Value of syncToken property of last sync request response (optional)</param>
        /// <param name="syncType">Type of message synchronization (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetMessageSyncResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMessageSyncResponse>> SyncMessagesWithHttpInfoAsync (string accountId, string extensionId, long? conversationId = default(long?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), List<string> direction = default(List<string>), bool? distinctConversations = default(bool?), List<string> messageType = default(List<string>), int? recordCount = default(int?), string syncToken = default(string), string syncType = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MessageStoreApi->SyncMessages");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling MessageStoreApi->SyncMessages");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/message-sync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (conversationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conversationId", conversationId)); // query parameter
            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateFrom", dateFrom)); // query parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateTo", dateTo)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "direction", direction)); // query parameter
            if (distinctConversations != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "distinctConversations", distinctConversations)); // query parameter
            if (messageType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "messageType", messageType)); // query parameter
            if (recordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordCount", recordCount)); // query parameter
            if (syncToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "syncToken", syncToken)); // query parameter
            if (syncType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "syncType", syncType)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SyncMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessageSyncResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetMessageSyncResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessageSyncResponse)));
        }

        /// <summary>
        /// Update Message List Updates message(s) by ID(s). Currently only message read status can be updated. Batch request is supported, max number of IDs passed as query/path parameters is 50. Alternative syntax is supported - user messages can be updated by passing multiple IDs in request body as an array of string, max number of IDs passed in request body is 1000. In this case asterisk is used in the path instead of IDs.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="messageId">Internal identifier of a message</param>
        /// <param name="dateFrom"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="readStatus">Read status of a message to be changed. Multiple values are accepted (optional)</param>
        /// <returns>GetMessageInfoResponse</returns>
        public GetMessageInfoResponse UpdateMessage (string accountId, string extensionId, List<long> messageId, string dateFrom = default(string), string type = default(string), string readStatus = default(string))
        {
             ApiResponse<GetMessageInfoResponse> localVarResponse = UpdateMessageWithHttpInfo(accountId, extensionId, messageId, dateFrom, type, readStatus);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Message List Updates message(s) by ID(s). Currently only message read status can be updated. Batch request is supported, max number of IDs passed as query/path parameters is 50. Alternative syntax is supported - user messages can be updated by passing multiple IDs in request body as an array of string, max number of IDs passed in request body is 1000. In this case asterisk is used in the path instead of IDs.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="messageId">Internal identifier of a message</param>
        /// <param name="dateFrom"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="readStatus">Read status of a message to be changed. Multiple values are accepted (optional)</param>
        /// <returns>ApiResponse of GetMessageInfoResponse</returns>
        public ApiResponse<GetMessageInfoResponse> UpdateMessageWithHttpInfo (string accountId, string extensionId, List<long> messageId, string dateFrom = default(string), string type = default(string), string readStatus = default(string))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MessageStoreApi->UpdateMessage");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling MessageStoreApi->UpdateMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageStoreApi->UpdateMessage");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/message-store/{messageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/mixed", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (messageId != null) localVarPathParams.Add("messageId", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateFrom", dateFrom)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (readStatus != null) localVarFormParams.Add("readStatus", this.Configuration.ApiClient.ParameterToString(readStatus)); // form parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessageInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetMessageInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessageInfoResponse)));
        }

        /// <summary>
        /// Update Message List Updates message(s) by ID(s). Currently only message read status can be updated. Batch request is supported, max number of IDs passed as query/path parameters is 50. Alternative syntax is supported - user messages can be updated by passing multiple IDs in request body as an array of string, max number of IDs passed in request body is 1000. In this case asterisk is used in the path instead of IDs.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="messageId">Internal identifier of a message</param>
        /// <param name="dateFrom"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="readStatus">Read status of a message to be changed. Multiple values are accepted (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetMessageInfoResponse</returns>
        public async System.Threading.Tasks.Task<GetMessageInfoResponse> UpdateMessageAsync (string accountId, string extensionId, List<long> messageId, string dateFrom = default(string), string type = default(string), string readStatus = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetMessageInfoResponse> localVarResponse = await UpdateMessageWithHttpInfoAsync(accountId, extensionId, messageId, dateFrom, type, readStatus, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Message List Updates message(s) by ID(s). Currently only message read status can be updated. Batch request is supported, max number of IDs passed as query/path parameters is 50. Alternative syntax is supported - user messages can be updated by passing multiple IDs in request body as an array of string, max number of IDs passed in request body is 1000. In this case asterisk is used in the path instead of IDs.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="messageId">Internal identifier of a message</param>
        /// <param name="dateFrom"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="readStatus">Read status of a message to be changed. Multiple values are accepted (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetMessageInfoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMessageInfoResponse>> UpdateMessageWithHttpInfoAsync (string accountId, string extensionId, List<long> messageId, string dateFrom = default(string), string type = default(string), string readStatus = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MessageStoreApi->UpdateMessage");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling MessageStoreApi->UpdateMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageStoreApi->UpdateMessage");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/message-store/{messageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/mixed", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (messageId != null) localVarPathParams.Add("messageId", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateFrom", dateFrom)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (readStatus != null) localVarFormParams.Add("readStatus", this.Configuration.ApiClient.ParameterToString(readStatus)); // form parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessageInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetMessageInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessageInfoResponse)));
        }

        /// <summary>
        /// Update Message Store Configuration Updates message store settings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="messageStoreConfiguration">JSON body</param>
        /// <returns>MessageStoreConfiguration</returns>
        public MessageStoreConfiguration UpdateMessageStoreConfiguration (string accountId, MessageStoreConfiguration messageStoreConfiguration)
        {
             ApiResponse<MessageStoreConfiguration> localVarResponse = UpdateMessageStoreConfigurationWithHttpInfo(accountId, messageStoreConfiguration);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Message Store Configuration Updates message store settings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="messageStoreConfiguration">JSON body</param>
        /// <returns>ApiResponse of MessageStoreConfiguration</returns>
        public ApiResponse<MessageStoreConfiguration> UpdateMessageStoreConfigurationWithHttpInfo (string accountId, MessageStoreConfiguration messageStoreConfiguration)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MessageStoreApi->UpdateMessageStoreConfiguration");
            // verify the required parameter 'messageStoreConfiguration' is set
            if (messageStoreConfiguration == null)
                throw new ApiException(400, "Missing required parameter 'messageStoreConfiguration' when calling MessageStoreApi->UpdateMessageStoreConfiguration");

            var localVarPath = "/restapi/v1.0/account/{accountId}/message-store-configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (messageStoreConfiguration != null && messageStoreConfiguration.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(messageStoreConfiguration); // http body (model) parameter
            }
            else
            {
                localVarPostBody = messageStoreConfiguration; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMessageStoreConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageStoreConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessageStoreConfiguration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageStoreConfiguration)));
        }

        /// <summary>
        /// Update Message Store Configuration Updates message store settings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="messageStoreConfiguration">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MessageStoreConfiguration</returns>
        public async System.Threading.Tasks.Task<MessageStoreConfiguration> UpdateMessageStoreConfigurationAsync (string accountId, MessageStoreConfiguration messageStoreConfiguration, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MessageStoreConfiguration> localVarResponse = await UpdateMessageStoreConfigurationWithHttpInfoAsync(accountId, messageStoreConfiguration, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Message Store Configuration Updates message store settings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="messageStoreConfiguration">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MessageStoreConfiguration)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessageStoreConfiguration>> UpdateMessageStoreConfigurationWithHttpInfoAsync (string accountId, MessageStoreConfiguration messageStoreConfiguration, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MessageStoreApi->UpdateMessageStoreConfiguration");
            // verify the required parameter 'messageStoreConfiguration' is set
            if (messageStoreConfiguration == null)
                throw new ApiException(400, "Missing required parameter 'messageStoreConfiguration' when calling MessageStoreApi->UpdateMessageStoreConfiguration");

            var localVarPath = "/restapi/v1.0/account/{accountId}/message-store-configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (messageStoreConfiguration != null && messageStoreConfiguration.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(messageStoreConfiguration); // http body (model) parameter
            }
            else
            {
                localVarPostBody = messageStoreConfiguration; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMessageStoreConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageStoreConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessageStoreConfiguration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageStoreConfiguration)));
        }

    }
}
