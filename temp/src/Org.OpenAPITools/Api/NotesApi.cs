/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Note
        /// </summary>
        /// <remarks>
        /// Creates a new note in the specified chat.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat to create a note in</param>
        /// <param name="glipNoteCreate"></param>
        /// <returns>GlipNoteInfo</returns>
        GlipNoteInfo CreateChatNote (string chatId, GlipNoteCreate glipNoteCreate);

        /// <summary>
        /// Create Note
        /// </summary>
        /// <remarks>
        /// Creates a new note in the specified chat.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat to create a note in</param>
        /// <param name="glipNoteCreate"></param>
        /// <returns>ApiResponse of GlipNoteInfo</returns>
        ApiResponse<GlipNoteInfo> CreateChatNoteWithHttpInfo (string chatId, GlipNoteCreate glipNoteCreate);
        /// <summary>
        /// Delete Note
        /// </summary>
        /// <remarks>
        /// Deletes the specified note.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be deleted</param>
        /// <returns></returns>
        void DeleteNote (string noteId);

        /// <summary>
        /// Delete Note
        /// </summary>
        /// <remarks>
        /// Deletes the specified note.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteNoteWithHttpInfo (string noteId);
        /// <summary>
        /// Get Chat Notes
        /// </summary>
        /// <remarks>
        /// Returns the list of notes created in the specified chat.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat to fetch notes from.</param>
        /// <param name="creationTimeTo">The end datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, e.g. 2019-03-10T18:23:45. The default value is Now. (optional)</param>
        /// <param name="creationTimeFrom">The start datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone (optional)</param>
        /// <param name="creatorId">Internal identifier of the user that created the note. Multiple values are supported (optional)</param>
        /// <param name="status">Status of notes to be fetched; if not specified all notes are fetched by default. (optional)</param>
        /// <param name="pageToken">Pagination token (optional)</param>
        /// <param name="recordCount">Max number of notes to be fetched by one request; the value range is 1-250. (optional, default to 30)</param>
        /// <returns>GlipNotesInfo</returns>
        GlipNotesInfo ListChatNotes (string chatId, string creationTimeTo = default(string), string creationTimeFrom = default(string), string creatorId = default(string), string status = default(string), string pageToken = default(string), int? recordCount = default(int?));

        /// <summary>
        /// Get Chat Notes
        /// </summary>
        /// <remarks>
        /// Returns the list of notes created in the specified chat.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat to fetch notes from.</param>
        /// <param name="creationTimeTo">The end datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, e.g. 2019-03-10T18:23:45. The default value is Now. (optional)</param>
        /// <param name="creationTimeFrom">The start datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone (optional)</param>
        /// <param name="creatorId">Internal identifier of the user that created the note. Multiple values are supported (optional)</param>
        /// <param name="status">Status of notes to be fetched; if not specified all notes are fetched by default. (optional)</param>
        /// <param name="pageToken">Pagination token (optional)</param>
        /// <param name="recordCount">Max number of notes to be fetched by one request; the value range is 1-250. (optional, default to 30)</param>
        /// <returns>ApiResponse of GlipNotesInfo</returns>
        ApiResponse<GlipNotesInfo> ListChatNotesWithHttpInfo (string chatId, string creationTimeTo = default(string), string creationTimeFrom = default(string), string creatorId = default(string), string status = default(string), string pageToken = default(string), int? recordCount = default(int?));
        /// <summary>
        /// Lock Note
        /// </summary>
        /// <remarks>
        /// Locks a note providing the user with the unique write access for 5 hours.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be locked</param>
        /// <returns></returns>
        void LockNote (string noteId);

        /// <summary>
        /// Lock Note
        /// </summary>
        /// <remarks>
        /// Locks a note providing the user with the unique write access for 5 hours.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be locked</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LockNoteWithHttpInfo (string noteId);
        /// <summary>
        /// Update Note
        /// </summary>
        /// <remarks>
        /// Edits a note. Notes can be edited by any user if posted to a chat. the user belongs to.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be updated</param>
        /// <param name="glipNoteCreate"></param>
        /// <returns>GlipNoteInfo</returns>
        GlipNoteInfo PatchNote (string noteId, GlipNoteCreate glipNoteCreate);

        /// <summary>
        /// Update Note
        /// </summary>
        /// <remarks>
        /// Edits a note. Notes can be edited by any user if posted to a chat. the user belongs to.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be updated</param>
        /// <param name="glipNoteCreate"></param>
        /// <returns>ApiResponse of GlipNoteInfo</returns>
        ApiResponse<GlipNoteInfo> PatchNoteWithHttpInfo (string noteId, GlipNoteCreate glipNoteCreate);
        /// <summary>
        /// Publish Note
        /// </summary>
        /// <remarks>
        /// Publishes a note making it visible to other users.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be published</param>
        /// <returns></returns>
        void PublishNote (string noteId);

        /// <summary>
        /// Publish Note
        /// </summary>
        /// <remarks>
        /// Publishes a note making it visible to other users.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be published</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PublishNoteWithHttpInfo (string noteId);
        /// <summary>
        /// Get Note
        /// </summary>
        /// <remarks>
        /// Returns the specified note(s). It is possible to fetch up to 50 notes per request.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be fetched</param>
        /// <returns>GetGlipNoteInfo</returns>
        GetGlipNoteInfo ReadUserNote (string noteId);

        /// <summary>
        /// Get Note
        /// </summary>
        /// <remarks>
        /// Returns the specified note(s). It is possible to fetch up to 50 notes per request.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be fetched</param>
        /// <returns>ApiResponse of GetGlipNoteInfo</returns>
        ApiResponse<GetGlipNoteInfo> ReadUserNoteWithHttpInfo (string noteId);
        /// <summary>
        /// Unlock Note
        /// </summary>
        /// <remarks>
        /// Unlocks a note letting other users edit this note. Once the note is locked (by another user) it cannot be unlocked during 5 hours since the lock datetime.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be unlocked</param>
        /// <returns></returns>
        void UnlockNote (string noteId);

        /// <summary>
        /// Unlock Note
        /// </summary>
        /// <remarks>
        /// Unlocks a note letting other users edit this note. Once the note is locked (by another user) it cannot be unlocked during 5 hours since the lock datetime.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be unlocked</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnlockNoteWithHttpInfo (string noteId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create Note
        /// </summary>
        /// <remarks>
        /// Creates a new note in the specified chat.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat to create a note in</param>
        /// <param name="glipNoteCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipNoteInfo</returns>
        System.Threading.Tasks.Task<GlipNoteInfo> CreateChatNoteAsync (string chatId, GlipNoteCreate glipNoteCreate, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Note
        /// </summary>
        /// <remarks>
        /// Creates a new note in the specified chat.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat to create a note in</param>
        /// <param name="glipNoteCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipNoteInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlipNoteInfo>> CreateChatNoteWithHttpInfoAsync (string chatId, GlipNoteCreate glipNoteCreate, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete Note
        /// </summary>
        /// <remarks>
        /// Deletes the specified note.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteNoteAsync (string noteId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Note
        /// </summary>
        /// <remarks>
        /// Deletes the specified note.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNoteWithHttpInfoAsync (string noteId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Chat Notes
        /// </summary>
        /// <remarks>
        /// Returns the list of notes created in the specified chat.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat to fetch notes from.</param>
        /// <param name="creationTimeTo">The end datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, e.g. 2019-03-10T18:23:45. The default value is Now. (optional)</param>
        /// <param name="creationTimeFrom">The start datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone (optional)</param>
        /// <param name="creatorId">Internal identifier of the user that created the note. Multiple values are supported (optional)</param>
        /// <param name="status">Status of notes to be fetched; if not specified all notes are fetched by default. (optional)</param>
        /// <param name="pageToken">Pagination token (optional)</param>
        /// <param name="recordCount">Max number of notes to be fetched by one request; the value range is 1-250. (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipNotesInfo</returns>
        System.Threading.Tasks.Task<GlipNotesInfo> ListChatNotesAsync (string chatId, string creationTimeTo = default(string), string creationTimeFrom = default(string), string creatorId = default(string), string status = default(string), string pageToken = default(string), int? recordCount = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Chat Notes
        /// </summary>
        /// <remarks>
        /// Returns the list of notes created in the specified chat.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat to fetch notes from.</param>
        /// <param name="creationTimeTo">The end datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, e.g. 2019-03-10T18:23:45. The default value is Now. (optional)</param>
        /// <param name="creationTimeFrom">The start datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone (optional)</param>
        /// <param name="creatorId">Internal identifier of the user that created the note. Multiple values are supported (optional)</param>
        /// <param name="status">Status of notes to be fetched; if not specified all notes are fetched by default. (optional)</param>
        /// <param name="pageToken">Pagination token (optional)</param>
        /// <param name="recordCount">Max number of notes to be fetched by one request; the value range is 1-250. (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipNotesInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlipNotesInfo>> ListChatNotesWithHttpInfoAsync (string chatId, string creationTimeTo = default(string), string creationTimeFrom = default(string), string creatorId = default(string), string status = default(string), string pageToken = default(string), int? recordCount = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Lock Note
        /// </summary>
        /// <remarks>
        /// Locks a note providing the user with the unique write access for 5 hours.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be locked</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LockNoteAsync (string noteId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Lock Note
        /// </summary>
        /// <remarks>
        /// Locks a note providing the user with the unique write access for 5 hours.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be locked</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LockNoteWithHttpInfoAsync (string noteId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Note
        /// </summary>
        /// <remarks>
        /// Edits a note. Notes can be edited by any user if posted to a chat. the user belongs to.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be updated</param>
        /// <param name="glipNoteCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipNoteInfo</returns>
        System.Threading.Tasks.Task<GlipNoteInfo> PatchNoteAsync (string noteId, GlipNoteCreate glipNoteCreate, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Note
        /// </summary>
        /// <remarks>
        /// Edits a note. Notes can be edited by any user if posted to a chat. the user belongs to.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be updated</param>
        /// <param name="glipNoteCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipNoteInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlipNoteInfo>> PatchNoteWithHttpInfoAsync (string noteId, GlipNoteCreate glipNoteCreate, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Publish Note
        /// </summary>
        /// <remarks>
        /// Publishes a note making it visible to other users.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be published</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PublishNoteAsync (string noteId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Publish Note
        /// </summary>
        /// <remarks>
        /// Publishes a note making it visible to other users.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be published</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PublishNoteWithHttpInfoAsync (string noteId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Note
        /// </summary>
        /// <remarks>
        /// Returns the specified note(s). It is possible to fetch up to 50 notes per request.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be fetched</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetGlipNoteInfo</returns>
        System.Threading.Tasks.Task<GetGlipNoteInfo> ReadUserNoteAsync (string noteId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Note
        /// </summary>
        /// <remarks>
        /// Returns the specified note(s). It is possible to fetch up to 50 notes per request.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be fetched</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetGlipNoteInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetGlipNoteInfo>> ReadUserNoteWithHttpInfoAsync (string noteId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Unlock Note
        /// </summary>
        /// <remarks>
        /// Unlocks a note letting other users edit this note. Once the note is locked (by another user) it cannot be unlocked during 5 hours since the lock datetime.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be unlocked</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnlockNoteAsync (string noteId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Unlock Note
        /// </summary>
        /// <remarks>
        /// Unlocks a note letting other users edit this note. Once the note is locked (by another user) it cannot be unlocked during 5 hours since the lock datetime.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be unlocked</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnlockNoteWithHttpInfoAsync (string noteId, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NotesApi : INotesApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NotesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NotesApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotesApi"/> class
        /// </summary>
        /// <returns></returns>
        public NotesApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NotesApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create Note Creates a new note in the specified chat.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat to create a note in</param>
        /// <param name="glipNoteCreate"></param>
        /// <returns>GlipNoteInfo</returns>
        public GlipNoteInfo CreateChatNote (string chatId, GlipNoteCreate glipNoteCreate)
        {
             ApiResponse<GlipNoteInfo> localVarResponse = CreateChatNoteWithHttpInfo(chatId, glipNoteCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Note Creates a new note in the specified chat.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat to create a note in</param>
        /// <param name="glipNoteCreate"></param>
        /// <returns>ApiResponse of GlipNoteInfo</returns>
        public ApiResponse<GlipNoteInfo> CreateChatNoteWithHttpInfo (string chatId, GlipNoteCreate glipNoteCreate)
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling NotesApi->CreateChatNote");
            // verify the required parameter 'glipNoteCreate' is set
            if (glipNoteCreate == null)
                throw new ApiException(400, "Missing required parameter 'glipNoteCreate' when calling NotesApi->CreateChatNote");

            var localVarPath = "/restapi/v1.0/glip/chats/{chatId}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter
            if (glipNoteCreate != null && glipNoteCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipNoteCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipNoteCreate; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateChatNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipNoteInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipNoteInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipNoteInfo)));
        }

        /// <summary>
        /// Create Note Creates a new note in the specified chat.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat to create a note in</param>
        /// <param name="glipNoteCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipNoteInfo</returns>
        public async System.Threading.Tasks.Task<GlipNoteInfo> CreateChatNoteAsync (string chatId, GlipNoteCreate glipNoteCreate, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipNoteInfo> localVarResponse = await CreateChatNoteWithHttpInfoAsync(chatId, glipNoteCreate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Note Creates a new note in the specified chat.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat to create a note in</param>
        /// <param name="glipNoteCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipNoteInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlipNoteInfo>> CreateChatNoteWithHttpInfoAsync (string chatId, GlipNoteCreate glipNoteCreate, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling NotesApi->CreateChatNote");
            // verify the required parameter 'glipNoteCreate' is set
            if (glipNoteCreate == null)
                throw new ApiException(400, "Missing required parameter 'glipNoteCreate' when calling NotesApi->CreateChatNote");

            var localVarPath = "/restapi/v1.0/glip/chats/{chatId}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter
            if (glipNoteCreate != null && glipNoteCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipNoteCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipNoteCreate; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateChatNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipNoteInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipNoteInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipNoteInfo)));
        }

        /// <summary>
        /// Delete Note Deletes the specified note.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be deleted</param>
        /// <returns></returns>
        public void DeleteNote (string noteId)
        {
             DeleteNoteWithHttpInfo(noteId);
        }

        /// <summary>
        /// Delete Note Deletes the specified note.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteNoteWithHttpInfo (string noteId)
        {
            // verify the required parameter 'noteId' is set
            if (noteId == null)
                throw new ApiException(400, "Missing required parameter 'noteId' when calling NotesApi->DeleteNote");

            var localVarPath = "/restapi/v1.0/glip/notes/{noteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (noteId != null) localVarPathParams.Add("noteId", this.Configuration.ApiClient.ParameterToString(noteId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Note Deletes the specified note.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteNoteAsync (string noteId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteNoteWithHttpInfoAsync(noteId, cancellationToken);

        }

        /// <summary>
        /// Delete Note Deletes the specified note.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNoteWithHttpInfoAsync (string noteId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'noteId' is set
            if (noteId == null)
                throw new ApiException(400, "Missing required parameter 'noteId' when calling NotesApi->DeleteNote");

            var localVarPath = "/restapi/v1.0/glip/notes/{noteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (noteId != null) localVarPathParams.Add("noteId", this.Configuration.ApiClient.ParameterToString(noteId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get Chat Notes Returns the list of notes created in the specified chat.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat to fetch notes from.</param>
        /// <param name="creationTimeTo">The end datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, e.g. 2019-03-10T18:23:45. The default value is Now. (optional)</param>
        /// <param name="creationTimeFrom">The start datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone (optional)</param>
        /// <param name="creatorId">Internal identifier of the user that created the note. Multiple values are supported (optional)</param>
        /// <param name="status">Status of notes to be fetched; if not specified all notes are fetched by default. (optional)</param>
        /// <param name="pageToken">Pagination token (optional)</param>
        /// <param name="recordCount">Max number of notes to be fetched by one request; the value range is 1-250. (optional, default to 30)</param>
        /// <returns>GlipNotesInfo</returns>
        public GlipNotesInfo ListChatNotes (string chatId, string creationTimeTo = default(string), string creationTimeFrom = default(string), string creatorId = default(string), string status = default(string), string pageToken = default(string), int? recordCount = default(int?))
        {
             ApiResponse<GlipNotesInfo> localVarResponse = ListChatNotesWithHttpInfo(chatId, creationTimeTo, creationTimeFrom, creatorId, status, pageToken, recordCount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Chat Notes Returns the list of notes created in the specified chat.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat to fetch notes from.</param>
        /// <param name="creationTimeTo">The end datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, e.g. 2019-03-10T18:23:45. The default value is Now. (optional)</param>
        /// <param name="creationTimeFrom">The start datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone (optional)</param>
        /// <param name="creatorId">Internal identifier of the user that created the note. Multiple values are supported (optional)</param>
        /// <param name="status">Status of notes to be fetched; if not specified all notes are fetched by default. (optional)</param>
        /// <param name="pageToken">Pagination token (optional)</param>
        /// <param name="recordCount">Max number of notes to be fetched by one request; the value range is 1-250. (optional, default to 30)</param>
        /// <returns>ApiResponse of GlipNotesInfo</returns>
        public ApiResponse<GlipNotesInfo> ListChatNotesWithHttpInfo (string chatId, string creationTimeTo = default(string), string creationTimeFrom = default(string), string creatorId = default(string), string status = default(string), string pageToken = default(string), int? recordCount = default(int?))
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling NotesApi->ListChatNotes");

            var localVarPath = "/restapi/v1.0/glip/chats/{chatId}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter
            if (creationTimeTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "creationTimeTo", creationTimeTo)); // query parameter
            if (creationTimeFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "creationTimeFrom", creationTimeFrom)); // query parameter
            if (creatorId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "creatorId", creatorId)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter
            if (recordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordCount", recordCount)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListChatNotes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipNotesInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipNotesInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipNotesInfo)));
        }

        /// <summary>
        /// Get Chat Notes Returns the list of notes created in the specified chat.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat to fetch notes from.</param>
        /// <param name="creationTimeTo">The end datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, e.g. 2019-03-10T18:23:45. The default value is Now. (optional)</param>
        /// <param name="creationTimeFrom">The start datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone (optional)</param>
        /// <param name="creatorId">Internal identifier of the user that created the note. Multiple values are supported (optional)</param>
        /// <param name="status">Status of notes to be fetched; if not specified all notes are fetched by default. (optional)</param>
        /// <param name="pageToken">Pagination token (optional)</param>
        /// <param name="recordCount">Max number of notes to be fetched by one request; the value range is 1-250. (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipNotesInfo</returns>
        public async System.Threading.Tasks.Task<GlipNotesInfo> ListChatNotesAsync (string chatId, string creationTimeTo = default(string), string creationTimeFrom = default(string), string creatorId = default(string), string status = default(string), string pageToken = default(string), int? recordCount = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipNotesInfo> localVarResponse = await ListChatNotesWithHttpInfoAsync(chatId, creationTimeTo, creationTimeFrom, creatorId, status, pageToken, recordCount, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Chat Notes Returns the list of notes created in the specified chat.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">Internal identifier of a chat to fetch notes from.</param>
        /// <param name="creationTimeTo">The end datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, e.g. 2019-03-10T18:23:45. The default value is Now. (optional)</param>
        /// <param name="creationTimeFrom">The start datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone (optional)</param>
        /// <param name="creatorId">Internal identifier of the user that created the note. Multiple values are supported (optional)</param>
        /// <param name="status">Status of notes to be fetched; if not specified all notes are fetched by default. (optional)</param>
        /// <param name="pageToken">Pagination token (optional)</param>
        /// <param name="recordCount">Max number of notes to be fetched by one request; the value range is 1-250. (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipNotesInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlipNotesInfo>> ListChatNotesWithHttpInfoAsync (string chatId, string creationTimeTo = default(string), string creationTimeFrom = default(string), string creatorId = default(string), string status = default(string), string pageToken = default(string), int? recordCount = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
                throw new ApiException(400, "Missing required parameter 'chatId' when calling NotesApi->ListChatNotes");

            var localVarPath = "/restapi/v1.0/glip/chats/{chatId}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chatId != null) localVarPathParams.Add("chatId", this.Configuration.ApiClient.ParameterToString(chatId)); // path parameter
            if (creationTimeTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "creationTimeTo", creationTimeTo)); // query parameter
            if (creationTimeFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "creationTimeFrom", creationTimeFrom)); // query parameter
            if (creatorId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "creatorId", creatorId)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter
            if (recordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordCount", recordCount)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListChatNotes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipNotesInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipNotesInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipNotesInfo)));
        }

        /// <summary>
        /// Lock Note Locks a note providing the user with the unique write access for 5 hours.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be locked</param>
        /// <returns></returns>
        public void LockNote (string noteId)
        {
             LockNoteWithHttpInfo(noteId);
        }

        /// <summary>
        /// Lock Note Locks a note providing the user with the unique write access for 5 hours.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be locked</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LockNoteWithHttpInfo (string noteId)
        {
            // verify the required parameter 'noteId' is set
            if (noteId == null)
                throw new ApiException(400, "Missing required parameter 'noteId' when calling NotesApi->LockNote");

            var localVarPath = "/restapi/v1.0/glip/notes/{noteId}/lock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (noteId != null) localVarPathParams.Add("noteId", this.Configuration.ApiClient.ParameterToString(noteId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LockNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Lock Note Locks a note providing the user with the unique write access for 5 hours.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be locked</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LockNoteAsync (string noteId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await LockNoteWithHttpInfoAsync(noteId, cancellationToken);

        }

        /// <summary>
        /// Lock Note Locks a note providing the user with the unique write access for 5 hours.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be locked</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LockNoteWithHttpInfoAsync (string noteId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'noteId' is set
            if (noteId == null)
                throw new ApiException(400, "Missing required parameter 'noteId' when calling NotesApi->LockNote");

            var localVarPath = "/restapi/v1.0/glip/notes/{noteId}/lock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (noteId != null) localVarPathParams.Add("noteId", this.Configuration.ApiClient.ParameterToString(noteId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LockNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update Note Edits a note. Notes can be edited by any user if posted to a chat. the user belongs to.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be updated</param>
        /// <param name="glipNoteCreate"></param>
        /// <returns>GlipNoteInfo</returns>
        public GlipNoteInfo PatchNote (string noteId, GlipNoteCreate glipNoteCreate)
        {
             ApiResponse<GlipNoteInfo> localVarResponse = PatchNoteWithHttpInfo(noteId, glipNoteCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Note Edits a note. Notes can be edited by any user if posted to a chat. the user belongs to.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be updated</param>
        /// <param name="glipNoteCreate"></param>
        /// <returns>ApiResponse of GlipNoteInfo</returns>
        public ApiResponse<GlipNoteInfo> PatchNoteWithHttpInfo (string noteId, GlipNoteCreate glipNoteCreate)
        {
            // verify the required parameter 'noteId' is set
            if (noteId == null)
                throw new ApiException(400, "Missing required parameter 'noteId' when calling NotesApi->PatchNote");
            // verify the required parameter 'glipNoteCreate' is set
            if (glipNoteCreate == null)
                throw new ApiException(400, "Missing required parameter 'glipNoteCreate' when calling NotesApi->PatchNote");

            var localVarPath = "/restapi/v1.0/glip/notes/{noteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (noteId != null) localVarPathParams.Add("noteId", this.Configuration.ApiClient.ParameterToString(noteId)); // path parameter
            if (glipNoteCreate != null && glipNoteCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipNoteCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipNoteCreate; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipNoteInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipNoteInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipNoteInfo)));
        }

        /// <summary>
        /// Update Note Edits a note. Notes can be edited by any user if posted to a chat. the user belongs to.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be updated</param>
        /// <param name="glipNoteCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipNoteInfo</returns>
        public async System.Threading.Tasks.Task<GlipNoteInfo> PatchNoteAsync (string noteId, GlipNoteCreate glipNoteCreate, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipNoteInfo> localVarResponse = await PatchNoteWithHttpInfoAsync(noteId, glipNoteCreate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Note Edits a note. Notes can be edited by any user if posted to a chat. the user belongs to.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be updated</param>
        /// <param name="glipNoteCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipNoteInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlipNoteInfo>> PatchNoteWithHttpInfoAsync (string noteId, GlipNoteCreate glipNoteCreate, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'noteId' is set
            if (noteId == null)
                throw new ApiException(400, "Missing required parameter 'noteId' when calling NotesApi->PatchNote");
            // verify the required parameter 'glipNoteCreate' is set
            if (glipNoteCreate == null)
                throw new ApiException(400, "Missing required parameter 'glipNoteCreate' when calling NotesApi->PatchNote");

            var localVarPath = "/restapi/v1.0/glip/notes/{noteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (noteId != null) localVarPathParams.Add("noteId", this.Configuration.ApiClient.ParameterToString(noteId)); // path parameter
            if (glipNoteCreate != null && glipNoteCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(glipNoteCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = glipNoteCreate; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipNoteInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipNoteInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipNoteInfo)));
        }

        /// <summary>
        /// Publish Note Publishes a note making it visible to other users.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be published</param>
        /// <returns></returns>
        public void PublishNote (string noteId)
        {
             PublishNoteWithHttpInfo(noteId);
        }

        /// <summary>
        /// Publish Note Publishes a note making it visible to other users.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be published</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PublishNoteWithHttpInfo (string noteId)
        {
            // verify the required parameter 'noteId' is set
            if (noteId == null)
                throw new ApiException(400, "Missing required parameter 'noteId' when calling NotesApi->PublishNote");

            var localVarPath = "/restapi/v1.0/glip/notes/{noteId}/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (noteId != null) localVarPathParams.Add("noteId", this.Configuration.ApiClient.ParameterToString(noteId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Publish Note Publishes a note making it visible to other users.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be published</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PublishNoteAsync (string noteId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await PublishNoteWithHttpInfoAsync(noteId, cancellationToken);

        }

        /// <summary>
        /// Publish Note Publishes a note making it visible to other users.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be published</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PublishNoteWithHttpInfoAsync (string noteId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'noteId' is set
            if (noteId == null)
                throw new ApiException(400, "Missing required parameter 'noteId' when calling NotesApi->PublishNote");

            var localVarPath = "/restapi/v1.0/glip/notes/{noteId}/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (noteId != null) localVarPathParams.Add("noteId", this.Configuration.ApiClient.ParameterToString(noteId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get Note Returns the specified note(s). It is possible to fetch up to 50 notes per request.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be fetched</param>
        /// <returns>GetGlipNoteInfo</returns>
        public GetGlipNoteInfo ReadUserNote (string noteId)
        {
             ApiResponse<GetGlipNoteInfo> localVarResponse = ReadUserNoteWithHttpInfo(noteId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Note Returns the specified note(s). It is possible to fetch up to 50 notes per request.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be fetched</param>
        /// <returns>ApiResponse of GetGlipNoteInfo</returns>
        public ApiResponse<GetGlipNoteInfo> ReadUserNoteWithHttpInfo (string noteId)
        {
            // verify the required parameter 'noteId' is set
            if (noteId == null)
                throw new ApiException(400, "Missing required parameter 'noteId' when calling NotesApi->ReadUserNote");

            var localVarPath = "/restapi/v1.0/glip/notes/{noteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (noteId != null) localVarPathParams.Add("noteId", this.Configuration.ApiClient.ParameterToString(noteId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadUserNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetGlipNoteInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetGlipNoteInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetGlipNoteInfo)));
        }

        /// <summary>
        /// Get Note Returns the specified note(s). It is possible to fetch up to 50 notes per request.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be fetched</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetGlipNoteInfo</returns>
        public async System.Threading.Tasks.Task<GetGlipNoteInfo> ReadUserNoteAsync (string noteId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetGlipNoteInfo> localVarResponse = await ReadUserNoteWithHttpInfoAsync(noteId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Note Returns the specified note(s). It is possible to fetch up to 50 notes per request.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be fetched</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetGlipNoteInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetGlipNoteInfo>> ReadUserNoteWithHttpInfoAsync (string noteId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'noteId' is set
            if (noteId == null)
                throw new ApiException(400, "Missing required parameter 'noteId' when calling NotesApi->ReadUserNote");

            var localVarPath = "/restapi/v1.0/glip/notes/{noteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (noteId != null) localVarPathParams.Add("noteId", this.Configuration.ApiClient.ParameterToString(noteId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadUserNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetGlipNoteInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetGlipNoteInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetGlipNoteInfo)));
        }

        /// <summary>
        /// Unlock Note Unlocks a note letting other users edit this note. Once the note is locked (by another user) it cannot be unlocked during 5 hours since the lock datetime.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be unlocked</param>
        /// <returns></returns>
        public void UnlockNote (string noteId)
        {
             UnlockNoteWithHttpInfo(noteId);
        }

        /// <summary>
        /// Unlock Note Unlocks a note letting other users edit this note. Once the note is locked (by another user) it cannot be unlocked during 5 hours since the lock datetime.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be unlocked</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UnlockNoteWithHttpInfo (string noteId)
        {
            // verify the required parameter 'noteId' is set
            if (noteId == null)
                throw new ApiException(400, "Missing required parameter 'noteId' when calling NotesApi->UnlockNote");

            var localVarPath = "/restapi/v1.0/glip/notes/{noteId}/unlock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (noteId != null) localVarPathParams.Add("noteId", this.Configuration.ApiClient.ParameterToString(noteId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnlockNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Unlock Note Unlocks a note letting other users edit this note. Once the note is locked (by another user) it cannot be unlocked during 5 hours since the lock datetime.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be unlocked</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnlockNoteAsync (string noteId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await UnlockNoteWithHttpInfoAsync(noteId, cancellationToken);

        }

        /// <summary>
        /// Unlock Note Unlocks a note letting other users edit this note. Once the note is locked (by another user) it cannot be unlocked during 5 hours since the lock datetime.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Internal identifier of a note to be unlocked</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UnlockNoteWithHttpInfoAsync (string noteId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'noteId' is set
            if (noteId == null)
                throw new ApiException(400, "Missing required parameter 'noteId' when calling NotesApi->UnlockNote");

            var localVarPath = "/restapi/v1.0/glip/notes/{noteId}/unlock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (noteId != null) localVarPathParams.Add("noteId", this.Configuration.ApiClient.ParameterToString(noteId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnlockNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
