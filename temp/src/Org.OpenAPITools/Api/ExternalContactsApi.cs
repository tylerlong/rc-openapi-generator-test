/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExternalContactsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Update Multiple Contacts
        /// </summary>
        /// <remarks>
        /// Uploads multiple contacts for multiple extensions at once. Maximum 500 extensions can be uploaded per request. Max amount of contacts that can be uploaded per an extension is 10,000. Each contact uploaded to an extension is not visible to other extensions.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="addressBookBulkUploadRequest">JSON body</param>
        /// <returns>AddressBookBulkUploadResponse</returns>
        AddressBookBulkUploadResponse AddressBookBulkUpload (string accountId, AddressBookBulkUploadRequest addressBookBulkUploadRequest);

        /// <summary>
        /// Update Multiple Contacts
        /// </summary>
        /// <remarks>
        /// Uploads multiple contacts for multiple extensions at once. Maximum 500 extensions can be uploaded per request. Max amount of contacts that can be uploaded per an extension is 10,000. Each contact uploaded to an extension is not visible to other extensions.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="addressBookBulkUploadRequest">JSON body</param>
        /// <returns>ApiResponse of AddressBookBulkUploadResponse</returns>
        ApiResponse<AddressBookBulkUploadResponse> AddressBookBulkUploadWithHttpInfo (string accountId, AddressBookBulkUploadRequest addressBookBulkUploadRequest);
        /// <summary>
        /// Create Contact
        /// </summary>
        /// <remarks>
        /// Creates personal user contact.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="dialingPlan">A country code value complying with the [ISO 3166-1 alpha-2](https://ru.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. The default value is home country of the current extension (optional)</param>
        /// <param name="personalContactRequest"> (optional)</param>
        /// <returns>PersonalContactResource</returns>
        PersonalContactResource CreateContact (string accountId, string extensionId, string dialingPlan = default(string), PersonalContactRequest personalContactRequest = default(PersonalContactRequest));

        /// <summary>
        /// Create Contact
        /// </summary>
        /// <remarks>
        /// Creates personal user contact.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="dialingPlan">A country code value complying with the [ISO 3166-1 alpha-2](https://ru.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. The default value is home country of the current extension (optional)</param>
        /// <param name="personalContactRequest"> (optional)</param>
        /// <returns>ApiResponse of PersonalContactResource</returns>
        ApiResponse<PersonalContactResource> CreateContactWithHttpInfo (string accountId, string extensionId, string dialingPlan = default(string), PersonalContactRequest personalContactRequest = default(PersonalContactRequest));
        /// <summary>
        /// Delete Contact
        /// </summary>
        /// <remarks>
        /// Deletes contact(s) by ID(s). Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="contactId">Internal identifier of a contact record in the RingCentral database</param>
        /// <returns></returns>
        void DeleteContact (string accountId, string extensionId, long contactId);

        /// <summary>
        /// Delete Contact
        /// </summary>
        /// <remarks>
        /// Deletes contact(s) by ID(s). Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="contactId">Internal identifier of a contact record in the RingCentral database</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteContactWithHttpInfo (string accountId, string extensionId, long contactId);
        /// <summary>
        /// Get Contacts Update Task
        /// </summary>
        /// <remarks>
        /// Returns the status of a task on adding multiple contacts to multiple extensions.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <returns>AddressBookBulkUploadResponse</returns>
        AddressBookBulkUploadResponse GetAddressBookBulkUploadTask (string accountId, string taskId);

        /// <summary>
        /// Get Contacts Update Task
        /// </summary>
        /// <remarks>
        /// Returns the status of a task on adding multiple contacts to multiple extensions.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <returns>ApiResponse of AddressBookBulkUploadResponse</returns>
        ApiResponse<AddressBookBulkUploadResponse> GetAddressBookBulkUploadTaskWithHttpInfo (string accountId, string taskId);
        /// <summary>
        /// Get Contact List
        /// </summary>
        /// <remarks>
        /// Returns user personal contacts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="startsWith">If specified, only contacts whose First name or Last name start with the mentioned substring are returned. Case-insensitive (optional)</param>
        /// <param name="sortBy">Sorts results by the specified property (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="phoneNumber"> (optional)</param>
        /// <returns>ContactList</returns>
        ContactList ListContacts (string accountId, string extensionId, string startsWith = default(string), List<string> sortBy = default(List<string>), int? page = default(int?), int? perPage = default(int?), List<string> phoneNumber = default(List<string>));

        /// <summary>
        /// Get Contact List
        /// </summary>
        /// <remarks>
        /// Returns user personal contacts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="startsWith">If specified, only contacts whose First name or Last name start with the mentioned substring are returned. Case-insensitive (optional)</param>
        /// <param name="sortBy">Sorts results by the specified property (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="phoneNumber"> (optional)</param>
        /// <returns>ApiResponse of ContactList</returns>
        ApiResponse<ContactList> ListContactsWithHttpInfo (string accountId, string extensionId, string startsWith = default(string), List<string> sortBy = default(List<string>), int? page = default(int?), int? perPage = default(int?), List<string> phoneNumber = default(List<string>));
        /// <summary>
        /// Get Favorite Contact List
        /// </summary>
        /// <remarks>
        /// Returns the list of favorite contacts of the current extension. Favorite contacts include both company contacts (extensions) and personal contacts (address book records).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <returns>FavoriteContactList</returns>
        FavoriteContactList ListFavoriteContacts (string accountId, string extensionId);

        /// <summary>
        /// Get Favorite Contact List
        /// </summary>
        /// <remarks>
        /// Returns the list of favorite contacts of the current extension. Favorite contacts include both company contacts (extensions) and personal contacts (address book records).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <returns>ApiResponse of FavoriteContactList</returns>
        ApiResponse<FavoriteContactList> ListFavoriteContactsWithHttpInfo (string accountId, string extensionId);
        /// <summary>
        /// Get Contact
        /// </summary>
        /// <remarks>
        /// Returns contact(s) by ID(s). Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="contactId">Internal identifier of a contact record in the RingCentral database</param>
        /// <returns>PersonalContactResource</returns>
        PersonalContactResource ReadContact (string accountId, string extensionId, long contactId);

        /// <summary>
        /// Get Contact
        /// </summary>
        /// <remarks>
        /// Returns contact(s) by ID(s). Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="contactId">Internal identifier of a contact record in the RingCentral database</param>
        /// <returns>ApiResponse of PersonalContactResource</returns>
        ApiResponse<PersonalContactResource> ReadContactWithHttpInfo (string accountId, string extensionId, long contactId);
        /// <summary>
        /// Address Book Synchronization
        /// </summary>
        /// <remarks>
        /// Synchronizes user contacts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="syncType">Type of synchronization (optional)</param>
        /// <param name="syncToken">Value of syncToken property of the last sync request response (optional)</param>
        /// <param name="perPage">Number of records per page to be returned. The max number of records is 250, which is also the default. For &#39;FSync&#39; if the number of records exceeds the parameter value (either specified or default), all of the pages can be retrieved in several requests. For &#39;ISync&#39; if the number of records exceeds the page size, the number of incoming changes to this number is limited (optional)</param>
        /// <param name="pageId">Internal identifier of a page. It can be obtained from the &#39;nextPageId&#39; parameter passed in response body (optional)</param>
        /// <returns>AddressBookSync</returns>
        AddressBookSync SyncAddressBook (string accountId, string extensionId, string syncType = default(string), string syncToken = default(string), int? perPage = default(int?), long? pageId = default(long?));

        /// <summary>
        /// Address Book Synchronization
        /// </summary>
        /// <remarks>
        /// Synchronizes user contacts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="syncType">Type of synchronization (optional)</param>
        /// <param name="syncToken">Value of syncToken property of the last sync request response (optional)</param>
        /// <param name="perPage">Number of records per page to be returned. The max number of records is 250, which is also the default. For &#39;FSync&#39; if the number of records exceeds the parameter value (either specified or default), all of the pages can be retrieved in several requests. For &#39;ISync&#39; if the number of records exceeds the page size, the number of incoming changes to this number is limited (optional)</param>
        /// <param name="pageId">Internal identifier of a page. It can be obtained from the &#39;nextPageId&#39; parameter passed in response body (optional)</param>
        /// <returns>ApiResponse of AddressBookSync</returns>
        ApiResponse<AddressBookSync> SyncAddressBookWithHttpInfo (string accountId, string extensionId, string syncType = default(string), string syncToken = default(string), int? perPage = default(int?), long? pageId = default(long?));
        /// <summary>
        /// Update Contact
        /// </summary>
        /// <remarks>
        /// Updates personal contact information by contact ID(s). Batch request is supported
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="contactId">Internal identifier of a contact record in the RingCentral database</param>
        /// <param name="dialingPlan">A country code value complying with the [ISO 3166-1 alpha-2](https://ru.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. The default value is home country of the current extension (optional)</param>
        /// <param name="personalContactRequest"> (optional)</param>
        /// <returns>PersonalContactResource</returns>
        PersonalContactResource UpdateContact (string accountId, string extensionId, long contactId, string dialingPlan = default(string), PersonalContactRequest personalContactRequest = default(PersonalContactRequest));

        /// <summary>
        /// Update Contact
        /// </summary>
        /// <remarks>
        /// Updates personal contact information by contact ID(s). Batch request is supported
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="contactId">Internal identifier of a contact record in the RingCentral database</param>
        /// <param name="dialingPlan">A country code value complying with the [ISO 3166-1 alpha-2](https://ru.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. The default value is home country of the current extension (optional)</param>
        /// <param name="personalContactRequest"> (optional)</param>
        /// <returns>ApiResponse of PersonalContactResource</returns>
        ApiResponse<PersonalContactResource> UpdateContactWithHttpInfo (string accountId, string extensionId, long contactId, string dialingPlan = default(string), PersonalContactRequest personalContactRequest = default(PersonalContactRequest));
        /// <summary>
        /// Update Favorite Contact List
        /// </summary>
        /// <remarks>
        /// Updates the list of favorite contacts of the current extension. Favorite contacts include both company contacts (extensions) and personal contacts (address book records).**Please note**: currently personal address book size is limited to 10 000 contacts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="favoriteCollection"> (optional)</param>
        /// <returns>FavoriteContactList</returns>
        FavoriteContactList UpdateFavoriteContactList (string accountId, string extensionId, FavoriteCollection favoriteCollection = default(FavoriteCollection));

        /// <summary>
        /// Update Favorite Contact List
        /// </summary>
        /// <remarks>
        /// Updates the list of favorite contacts of the current extension. Favorite contacts include both company contacts (extensions) and personal contacts (address book records).**Please note**: currently personal address book size is limited to 10 000 contacts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="favoriteCollection"> (optional)</param>
        /// <returns>ApiResponse of FavoriteContactList</returns>
        ApiResponse<FavoriteContactList> UpdateFavoriteContactListWithHttpInfo (string accountId, string extensionId, FavoriteCollection favoriteCollection = default(FavoriteCollection));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Update Multiple Contacts
        /// </summary>
        /// <remarks>
        /// Uploads multiple contacts for multiple extensions at once. Maximum 500 extensions can be uploaded per request. Max amount of contacts that can be uploaded per an extension is 10,000. Each contact uploaded to an extension is not visible to other extensions.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="addressBookBulkUploadRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddressBookBulkUploadResponse</returns>
        System.Threading.Tasks.Task<AddressBookBulkUploadResponse> AddressBookBulkUploadAsync (string accountId, AddressBookBulkUploadRequest addressBookBulkUploadRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Multiple Contacts
        /// </summary>
        /// <remarks>
        /// Uploads multiple contacts for multiple extensions at once. Maximum 500 extensions can be uploaded per request. Max amount of contacts that can be uploaded per an extension is 10,000. Each contact uploaded to an extension is not visible to other extensions.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="addressBookBulkUploadRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddressBookBulkUploadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressBookBulkUploadResponse>> AddressBookBulkUploadWithHttpInfoAsync (string accountId, AddressBookBulkUploadRequest addressBookBulkUploadRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create Contact
        /// </summary>
        /// <remarks>
        /// Creates personal user contact.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="dialingPlan">A country code value complying with the [ISO 3166-1 alpha-2](https://ru.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. The default value is home country of the current extension (optional)</param>
        /// <param name="personalContactRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PersonalContactResource</returns>
        System.Threading.Tasks.Task<PersonalContactResource> CreateContactAsync (string accountId, string extensionId, string dialingPlan = default(string), PersonalContactRequest personalContactRequest = default(PersonalContactRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Contact
        /// </summary>
        /// <remarks>
        /// Creates personal user contact.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="dialingPlan">A country code value complying with the [ISO 3166-1 alpha-2](https://ru.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. The default value is home country of the current extension (optional)</param>
        /// <param name="personalContactRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PersonalContactResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonalContactResource>> CreateContactWithHttpInfoAsync (string accountId, string extensionId, string dialingPlan = default(string), PersonalContactRequest personalContactRequest = default(PersonalContactRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete Contact
        /// </summary>
        /// <remarks>
        /// Deletes contact(s) by ID(s). Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="contactId">Internal identifier of a contact record in the RingCentral database</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteContactAsync (string accountId, string extensionId, long contactId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Contact
        /// </summary>
        /// <remarks>
        /// Deletes contact(s) by ID(s). Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="contactId">Internal identifier of a contact record in the RingCentral database</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactWithHttpInfoAsync (string accountId, string extensionId, long contactId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Contacts Update Task
        /// </summary>
        /// <remarks>
        /// Returns the status of a task on adding multiple contacts to multiple extensions.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddressBookBulkUploadResponse</returns>
        System.Threading.Tasks.Task<AddressBookBulkUploadResponse> GetAddressBookBulkUploadTaskAsync (string accountId, string taskId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Contacts Update Task
        /// </summary>
        /// <remarks>
        /// Returns the status of a task on adding multiple contacts to multiple extensions.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddressBookBulkUploadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressBookBulkUploadResponse>> GetAddressBookBulkUploadTaskWithHttpInfoAsync (string accountId, string taskId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Contact List
        /// </summary>
        /// <remarks>
        /// Returns user personal contacts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="startsWith">If specified, only contacts whose First name or Last name start with the mentioned substring are returned. Case-insensitive (optional)</param>
        /// <param name="sortBy">Sorts results by the specified property (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="phoneNumber"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ContactList</returns>
        System.Threading.Tasks.Task<ContactList> ListContactsAsync (string accountId, string extensionId, string startsWith = default(string), List<string> sortBy = default(List<string>), int? page = default(int?), int? perPage = default(int?), List<string> phoneNumber = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Contact List
        /// </summary>
        /// <remarks>
        /// Returns user personal contacts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="startsWith">If specified, only contacts whose First name or Last name start with the mentioned substring are returned. Case-insensitive (optional)</param>
        /// <param name="sortBy">Sorts results by the specified property (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="phoneNumber"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ContactList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactList>> ListContactsWithHttpInfoAsync (string accountId, string extensionId, string startsWith = default(string), List<string> sortBy = default(List<string>), int? page = default(int?), int? perPage = default(int?), List<string> phoneNumber = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Favorite Contact List
        /// </summary>
        /// <remarks>
        /// Returns the list of favorite contacts of the current extension. Favorite contacts include both company contacts (extensions) and personal contacts (address book records).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FavoriteContactList</returns>
        System.Threading.Tasks.Task<FavoriteContactList> ListFavoriteContactsAsync (string accountId, string extensionId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Favorite Contact List
        /// </summary>
        /// <remarks>
        /// Returns the list of favorite contacts of the current extension. Favorite contacts include both company contacts (extensions) and personal contacts (address book records).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FavoriteContactList)</returns>
        System.Threading.Tasks.Task<ApiResponse<FavoriteContactList>> ListFavoriteContactsWithHttpInfoAsync (string accountId, string extensionId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Contact
        /// </summary>
        /// <remarks>
        /// Returns contact(s) by ID(s). Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="contactId">Internal identifier of a contact record in the RingCentral database</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PersonalContactResource</returns>
        System.Threading.Tasks.Task<PersonalContactResource> ReadContactAsync (string accountId, string extensionId, long contactId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Contact
        /// </summary>
        /// <remarks>
        /// Returns contact(s) by ID(s). Batch request is supported.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="contactId">Internal identifier of a contact record in the RingCentral database</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PersonalContactResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonalContactResource>> ReadContactWithHttpInfoAsync (string accountId, string extensionId, long contactId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Address Book Synchronization
        /// </summary>
        /// <remarks>
        /// Synchronizes user contacts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="syncType">Type of synchronization (optional)</param>
        /// <param name="syncToken">Value of syncToken property of the last sync request response (optional)</param>
        /// <param name="perPage">Number of records per page to be returned. The max number of records is 250, which is also the default. For &#39;FSync&#39; if the number of records exceeds the parameter value (either specified or default), all of the pages can be retrieved in several requests. For &#39;ISync&#39; if the number of records exceeds the page size, the number of incoming changes to this number is limited (optional)</param>
        /// <param name="pageId">Internal identifier of a page. It can be obtained from the &#39;nextPageId&#39; parameter passed in response body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddressBookSync</returns>
        System.Threading.Tasks.Task<AddressBookSync> SyncAddressBookAsync (string accountId, string extensionId, string syncType = default(string), string syncToken = default(string), int? perPage = default(int?), long? pageId = default(long?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Address Book Synchronization
        /// </summary>
        /// <remarks>
        /// Synchronizes user contacts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="syncType">Type of synchronization (optional)</param>
        /// <param name="syncToken">Value of syncToken property of the last sync request response (optional)</param>
        /// <param name="perPage">Number of records per page to be returned. The max number of records is 250, which is also the default. For &#39;FSync&#39; if the number of records exceeds the parameter value (either specified or default), all of the pages can be retrieved in several requests. For &#39;ISync&#39; if the number of records exceeds the page size, the number of incoming changes to this number is limited (optional)</param>
        /// <param name="pageId">Internal identifier of a page. It can be obtained from the &#39;nextPageId&#39; parameter passed in response body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddressBookSync)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressBookSync>> SyncAddressBookWithHttpInfoAsync (string accountId, string extensionId, string syncType = default(string), string syncToken = default(string), int? perPage = default(int?), long? pageId = default(long?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Contact
        /// </summary>
        /// <remarks>
        /// Updates personal contact information by contact ID(s). Batch request is supported
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="contactId">Internal identifier of a contact record in the RingCentral database</param>
        /// <param name="dialingPlan">A country code value complying with the [ISO 3166-1 alpha-2](https://ru.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. The default value is home country of the current extension (optional)</param>
        /// <param name="personalContactRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PersonalContactResource</returns>
        System.Threading.Tasks.Task<PersonalContactResource> UpdateContactAsync (string accountId, string extensionId, long contactId, string dialingPlan = default(string), PersonalContactRequest personalContactRequest = default(PersonalContactRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Contact
        /// </summary>
        /// <remarks>
        /// Updates personal contact information by contact ID(s). Batch request is supported
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="contactId">Internal identifier of a contact record in the RingCentral database</param>
        /// <param name="dialingPlan">A country code value complying with the [ISO 3166-1 alpha-2](https://ru.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. The default value is home country of the current extension (optional)</param>
        /// <param name="personalContactRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PersonalContactResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonalContactResource>> UpdateContactWithHttpInfoAsync (string accountId, string extensionId, long contactId, string dialingPlan = default(string), PersonalContactRequest personalContactRequest = default(PersonalContactRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Favorite Contact List
        /// </summary>
        /// <remarks>
        /// Updates the list of favorite contacts of the current extension. Favorite contacts include both company contacts (extensions) and personal contacts (address book records).**Please note**: currently personal address book size is limited to 10 000 contacts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="favoriteCollection"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FavoriteContactList</returns>
        System.Threading.Tasks.Task<FavoriteContactList> UpdateFavoriteContactListAsync (string accountId, string extensionId, FavoriteCollection favoriteCollection = default(FavoriteCollection), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Favorite Contact List
        /// </summary>
        /// <remarks>
        /// Updates the list of favorite contacts of the current extension. Favorite contacts include both company contacts (extensions) and personal contacts (address book records).**Please note**: currently personal address book size is limited to 10 000 contacts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="favoriteCollection"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FavoriteContactList)</returns>
        System.Threading.Tasks.Task<ApiResponse<FavoriteContactList>> UpdateFavoriteContactListWithHttpInfoAsync (string accountId, string extensionId, FavoriteCollection favoriteCollection = default(FavoriteCollection), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ExternalContactsApi : IExternalContactsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalContactsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExternalContactsApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalContactsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ExternalContactsApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalContactsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ExternalContactsApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Update Multiple Contacts Uploads multiple contacts for multiple extensions at once. Maximum 500 extensions can be uploaded per request. Max amount of contacts that can be uploaded per an extension is 10,000. Each contact uploaded to an extension is not visible to other extensions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="addressBookBulkUploadRequest">JSON body</param>
        /// <returns>AddressBookBulkUploadResponse</returns>
        public AddressBookBulkUploadResponse AddressBookBulkUpload (string accountId, AddressBookBulkUploadRequest addressBookBulkUploadRequest)
        {
             ApiResponse<AddressBookBulkUploadResponse> localVarResponse = AddressBookBulkUploadWithHttpInfo(accountId, addressBookBulkUploadRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Multiple Contacts Uploads multiple contacts for multiple extensions at once. Maximum 500 extensions can be uploaded per request. Max amount of contacts that can be uploaded per an extension is 10,000. Each contact uploaded to an extension is not visible to other extensions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="addressBookBulkUploadRequest">JSON body</param>
        /// <returns>ApiResponse of AddressBookBulkUploadResponse</returns>
        public ApiResponse<AddressBookBulkUploadResponse> AddressBookBulkUploadWithHttpInfo (string accountId, AddressBookBulkUploadRequest addressBookBulkUploadRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExternalContactsApi->AddressBookBulkUpload");
            // verify the required parameter 'addressBookBulkUploadRequest' is set
            if (addressBookBulkUploadRequest == null)
                throw new ApiException(400, "Missing required parameter 'addressBookBulkUploadRequest' when calling ExternalContactsApi->AddressBookBulkUpload");

            var localVarPath = "/restapi/v1.0/account/{accountId}/address-book-bulk-upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (addressBookBulkUploadRequest != null && addressBookBulkUploadRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addressBookBulkUploadRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addressBookBulkUploadRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookBulkUpload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookBulkUploadResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookBulkUploadResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookBulkUploadResponse)));
        }

        /// <summary>
        /// Update Multiple Contacts Uploads multiple contacts for multiple extensions at once. Maximum 500 extensions can be uploaded per request. Max amount of contacts that can be uploaded per an extension is 10,000. Each contact uploaded to an extension is not visible to other extensions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="addressBookBulkUploadRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddressBookBulkUploadResponse</returns>
        public async System.Threading.Tasks.Task<AddressBookBulkUploadResponse> AddressBookBulkUploadAsync (string accountId, AddressBookBulkUploadRequest addressBookBulkUploadRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AddressBookBulkUploadResponse> localVarResponse = await AddressBookBulkUploadWithHttpInfoAsync(accountId, addressBookBulkUploadRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Multiple Contacts Uploads multiple contacts for multiple extensions at once. Maximum 500 extensions can be uploaded per request. Max amount of contacts that can be uploaded per an extension is 10,000. Each contact uploaded to an extension is not visible to other extensions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="addressBookBulkUploadRequest">JSON body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddressBookBulkUploadResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressBookBulkUploadResponse>> AddressBookBulkUploadWithHttpInfoAsync (string accountId, AddressBookBulkUploadRequest addressBookBulkUploadRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExternalContactsApi->AddressBookBulkUpload");
            // verify the required parameter 'addressBookBulkUploadRequest' is set
            if (addressBookBulkUploadRequest == null)
                throw new ApiException(400, "Missing required parameter 'addressBookBulkUploadRequest' when calling ExternalContactsApi->AddressBookBulkUpload");

            var localVarPath = "/restapi/v1.0/account/{accountId}/address-book-bulk-upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (addressBookBulkUploadRequest != null && addressBookBulkUploadRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addressBookBulkUploadRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addressBookBulkUploadRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookBulkUpload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookBulkUploadResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookBulkUploadResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookBulkUploadResponse)));
        }

        /// <summary>
        /// Create Contact Creates personal user contact.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="dialingPlan">A country code value complying with the [ISO 3166-1 alpha-2](https://ru.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. The default value is home country of the current extension (optional)</param>
        /// <param name="personalContactRequest"> (optional)</param>
        /// <returns>PersonalContactResource</returns>
        public PersonalContactResource CreateContact (string accountId, string extensionId, string dialingPlan = default(string), PersonalContactRequest personalContactRequest = default(PersonalContactRequest))
        {
             ApiResponse<PersonalContactResource> localVarResponse = CreateContactWithHttpInfo(accountId, extensionId, dialingPlan, personalContactRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Contact Creates personal user contact.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="dialingPlan">A country code value complying with the [ISO 3166-1 alpha-2](https://ru.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. The default value is home country of the current extension (optional)</param>
        /// <param name="personalContactRequest"> (optional)</param>
        /// <returns>ApiResponse of PersonalContactResource</returns>
        public ApiResponse<PersonalContactResource> CreateContactWithHttpInfo (string accountId, string extensionId, string dialingPlan = default(string), PersonalContactRequest personalContactRequest = default(PersonalContactRequest))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExternalContactsApi->CreateContact");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling ExternalContactsApi->CreateContact");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/address-book/contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (dialingPlan != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dialingPlan", dialingPlan)); // query parameter
            if (personalContactRequest != null && personalContactRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(personalContactRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = personalContactRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonalContactResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PersonalContactResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonalContactResource)));
        }

        /// <summary>
        /// Create Contact Creates personal user contact.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="dialingPlan">A country code value complying with the [ISO 3166-1 alpha-2](https://ru.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. The default value is home country of the current extension (optional)</param>
        /// <param name="personalContactRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PersonalContactResource</returns>
        public async System.Threading.Tasks.Task<PersonalContactResource> CreateContactAsync (string accountId, string extensionId, string dialingPlan = default(string), PersonalContactRequest personalContactRequest = default(PersonalContactRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PersonalContactResource> localVarResponse = await CreateContactWithHttpInfoAsync(accountId, extensionId, dialingPlan, personalContactRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Contact Creates personal user contact.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="dialingPlan">A country code value complying with the [ISO 3166-1 alpha-2](https://ru.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. The default value is home country of the current extension (optional)</param>
        /// <param name="personalContactRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PersonalContactResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PersonalContactResource>> CreateContactWithHttpInfoAsync (string accountId, string extensionId, string dialingPlan = default(string), PersonalContactRequest personalContactRequest = default(PersonalContactRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExternalContactsApi->CreateContact");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling ExternalContactsApi->CreateContact");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/address-book/contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (dialingPlan != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dialingPlan", dialingPlan)); // query parameter
            if (personalContactRequest != null && personalContactRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(personalContactRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = personalContactRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonalContactResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PersonalContactResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonalContactResource)));
        }

        /// <summary>
        /// Delete Contact Deletes contact(s) by ID(s). Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="contactId">Internal identifier of a contact record in the RingCentral database</param>
        /// <returns></returns>
        public void DeleteContact (string accountId, string extensionId, long contactId)
        {
             DeleteContactWithHttpInfo(accountId, extensionId, contactId);
        }

        /// <summary>
        /// Delete Contact Deletes contact(s) by ID(s). Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="contactId">Internal identifier of a contact record in the RingCentral database</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteContactWithHttpInfo (string accountId, string extensionId, long contactId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExternalContactsApi->DeleteContact");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling ExternalContactsApi->DeleteContact");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ExternalContactsApi->DeleteContact");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/address-book/contact/{contactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Contact Deletes contact(s) by ID(s). Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="contactId">Internal identifier of a contact record in the RingCentral database</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContactAsync (string accountId, string extensionId, long contactId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteContactWithHttpInfoAsync(accountId, extensionId, contactId, cancellationToken);

        }

        /// <summary>
        /// Delete Contact Deletes contact(s) by ID(s). Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="contactId">Internal identifier of a contact record in the RingCentral database</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactWithHttpInfoAsync (string accountId, string extensionId, long contactId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExternalContactsApi->DeleteContact");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling ExternalContactsApi->DeleteContact");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ExternalContactsApi->DeleteContact");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/address-book/contact/{contactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get Contacts Update Task Returns the status of a task on adding multiple contacts to multiple extensions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <returns>AddressBookBulkUploadResponse</returns>
        public AddressBookBulkUploadResponse GetAddressBookBulkUploadTask (string accountId, string taskId)
        {
             ApiResponse<AddressBookBulkUploadResponse> localVarResponse = GetAddressBookBulkUploadTaskWithHttpInfo(accountId, taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Contacts Update Task Returns the status of a task on adding multiple contacts to multiple extensions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <returns>ApiResponse of AddressBookBulkUploadResponse</returns>
        public ApiResponse<AddressBookBulkUploadResponse> GetAddressBookBulkUploadTaskWithHttpInfo (string accountId, string taskId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExternalContactsApi->GetAddressBookBulkUploadTask");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ExternalContactsApi->GetAddressBookBulkUploadTask");

            var localVarPath = "/restapi/v1.0/account/{accountId}/address-book-bulk-upload/tasks/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAddressBookBulkUploadTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookBulkUploadResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookBulkUploadResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookBulkUploadResponse)));
        }

        /// <summary>
        /// Get Contacts Update Task Returns the status of a task on adding multiple contacts to multiple extensions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddressBookBulkUploadResponse</returns>
        public async System.Threading.Tasks.Task<AddressBookBulkUploadResponse> GetAddressBookBulkUploadTaskAsync (string accountId, string taskId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AddressBookBulkUploadResponse> localVarResponse = await GetAddressBookBulkUploadTaskWithHttpInfoAsync(accountId, taskId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Contacts Update Task Returns the status of a task on adding multiple contacts to multiple extensions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddressBookBulkUploadResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressBookBulkUploadResponse>> GetAddressBookBulkUploadTaskWithHttpInfoAsync (string accountId, string taskId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExternalContactsApi->GetAddressBookBulkUploadTask");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ExternalContactsApi->GetAddressBookBulkUploadTask");

            var localVarPath = "/restapi/v1.0/account/{accountId}/address-book-bulk-upload/tasks/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAddressBookBulkUploadTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookBulkUploadResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookBulkUploadResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookBulkUploadResponse)));
        }

        /// <summary>
        /// Get Contact List Returns user personal contacts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="startsWith">If specified, only contacts whose First name or Last name start with the mentioned substring are returned. Case-insensitive (optional)</param>
        /// <param name="sortBy">Sorts results by the specified property (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="phoneNumber"> (optional)</param>
        /// <returns>ContactList</returns>
        public ContactList ListContacts (string accountId, string extensionId, string startsWith = default(string), List<string> sortBy = default(List<string>), int? page = default(int?), int? perPage = default(int?), List<string> phoneNumber = default(List<string>))
        {
             ApiResponse<ContactList> localVarResponse = ListContactsWithHttpInfo(accountId, extensionId, startsWith, sortBy, page, perPage, phoneNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Contact List Returns user personal contacts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="startsWith">If specified, only contacts whose First name or Last name start with the mentioned substring are returned. Case-insensitive (optional)</param>
        /// <param name="sortBy">Sorts results by the specified property (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="phoneNumber"> (optional)</param>
        /// <returns>ApiResponse of ContactList</returns>
        public ApiResponse<ContactList> ListContactsWithHttpInfo (string accountId, string extensionId, string startsWith = default(string), List<string> sortBy = default(List<string>), int? page = default(int?), int? perPage = default(int?), List<string> phoneNumber = default(List<string>))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExternalContactsApi->ListContacts");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling ExternalContactsApi->ListContacts");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/address-book/contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (startsWith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startsWith", startsWith)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sortBy", sortBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (phoneNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "phoneNumber", phoneNumber)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ContactList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactList)));
        }

        /// <summary>
        /// Get Contact List Returns user personal contacts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="startsWith">If specified, only contacts whose First name or Last name start with the mentioned substring are returned. Case-insensitive (optional)</param>
        /// <param name="sortBy">Sorts results by the specified property (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="phoneNumber"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ContactList</returns>
        public async System.Threading.Tasks.Task<ContactList> ListContactsAsync (string accountId, string extensionId, string startsWith = default(string), List<string> sortBy = default(List<string>), int? page = default(int?), int? perPage = default(int?), List<string> phoneNumber = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ContactList> localVarResponse = await ListContactsWithHttpInfoAsync(accountId, extensionId, startsWith, sortBy, page, perPage, phoneNumber, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Contact List Returns user personal contacts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="startsWith">If specified, only contacts whose First name or Last name start with the mentioned substring are returned. Case-insensitive (optional)</param>
        /// <param name="sortBy">Sorts results by the specified property (optional)</param>
        /// <param name="page">Indicates the page number to retrieve. Only positive number values are accepted (optional, default to 1)</param>
        /// <param name="perPage">Indicates the page size (number of items) (optional, default to 100)</param>
        /// <param name="phoneNumber"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ContactList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContactList>> ListContactsWithHttpInfoAsync (string accountId, string extensionId, string startsWith = default(string), List<string> sortBy = default(List<string>), int? page = default(int?), int? perPage = default(int?), List<string> phoneNumber = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExternalContactsApi->ListContacts");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling ExternalContactsApi->ListContacts");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/address-book/contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (startsWith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startsWith", startsWith)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sortBy", sortBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (phoneNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "phoneNumber", phoneNumber)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ContactList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactList)));
        }

        /// <summary>
        /// Get Favorite Contact List Returns the list of favorite contacts of the current extension. Favorite contacts include both company contacts (extensions) and personal contacts (address book records).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <returns>FavoriteContactList</returns>
        public FavoriteContactList ListFavoriteContacts (string accountId, string extensionId)
        {
             ApiResponse<FavoriteContactList> localVarResponse = ListFavoriteContactsWithHttpInfo(accountId, extensionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Favorite Contact List Returns the list of favorite contacts of the current extension. Favorite contacts include both company contacts (extensions) and personal contacts (address book records).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <returns>ApiResponse of FavoriteContactList</returns>
        public ApiResponse<FavoriteContactList> ListFavoriteContactsWithHttpInfo (string accountId, string extensionId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExternalContactsApi->ListFavoriteContacts");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling ExternalContactsApi->ListFavoriteContacts");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/favorite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListFavoriteContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FavoriteContactList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FavoriteContactList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FavoriteContactList)));
        }

        /// <summary>
        /// Get Favorite Contact List Returns the list of favorite contacts of the current extension. Favorite contacts include both company contacts (extensions) and personal contacts (address book records).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FavoriteContactList</returns>
        public async System.Threading.Tasks.Task<FavoriteContactList> ListFavoriteContactsAsync (string accountId, string extensionId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<FavoriteContactList> localVarResponse = await ListFavoriteContactsWithHttpInfoAsync(accountId, extensionId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Favorite Contact List Returns the list of favorite contacts of the current extension. Favorite contacts include both company contacts (extensions) and personal contacts (address book records).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FavoriteContactList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FavoriteContactList>> ListFavoriteContactsWithHttpInfoAsync (string accountId, string extensionId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExternalContactsApi->ListFavoriteContacts");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling ExternalContactsApi->ListFavoriteContacts");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/favorite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListFavoriteContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FavoriteContactList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FavoriteContactList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FavoriteContactList)));
        }

        /// <summary>
        /// Get Contact Returns contact(s) by ID(s). Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="contactId">Internal identifier of a contact record in the RingCentral database</param>
        /// <returns>PersonalContactResource</returns>
        public PersonalContactResource ReadContact (string accountId, string extensionId, long contactId)
        {
             ApiResponse<PersonalContactResource> localVarResponse = ReadContactWithHttpInfo(accountId, extensionId, contactId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Contact Returns contact(s) by ID(s). Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="contactId">Internal identifier of a contact record in the RingCentral database</param>
        /// <returns>ApiResponse of PersonalContactResource</returns>
        public ApiResponse<PersonalContactResource> ReadContactWithHttpInfo (string accountId, string extensionId, long contactId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExternalContactsApi->ReadContact");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling ExternalContactsApi->ReadContact");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ExternalContactsApi->ReadContact");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/address-book/contact/{contactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonalContactResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PersonalContactResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonalContactResource)));
        }

        /// <summary>
        /// Get Contact Returns contact(s) by ID(s). Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="contactId">Internal identifier of a contact record in the RingCentral database</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PersonalContactResource</returns>
        public async System.Threading.Tasks.Task<PersonalContactResource> ReadContactAsync (string accountId, string extensionId, long contactId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PersonalContactResource> localVarResponse = await ReadContactWithHttpInfoAsync(accountId, extensionId, contactId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Contact Returns contact(s) by ID(s). Batch request is supported.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="contactId">Internal identifier of a contact record in the RingCentral database</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PersonalContactResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PersonalContactResource>> ReadContactWithHttpInfoAsync (string accountId, string extensionId, long contactId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExternalContactsApi->ReadContact");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling ExternalContactsApi->ReadContact");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ExternalContactsApi->ReadContact");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/address-book/contact/{contactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonalContactResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PersonalContactResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonalContactResource)));
        }

        /// <summary>
        /// Address Book Synchronization Synchronizes user contacts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="syncType">Type of synchronization (optional)</param>
        /// <param name="syncToken">Value of syncToken property of the last sync request response (optional)</param>
        /// <param name="perPage">Number of records per page to be returned. The max number of records is 250, which is also the default. For &#39;FSync&#39; if the number of records exceeds the parameter value (either specified or default), all of the pages can be retrieved in several requests. For &#39;ISync&#39; if the number of records exceeds the page size, the number of incoming changes to this number is limited (optional)</param>
        /// <param name="pageId">Internal identifier of a page. It can be obtained from the &#39;nextPageId&#39; parameter passed in response body (optional)</param>
        /// <returns>AddressBookSync</returns>
        public AddressBookSync SyncAddressBook (string accountId, string extensionId, string syncType = default(string), string syncToken = default(string), int? perPage = default(int?), long? pageId = default(long?))
        {
             ApiResponse<AddressBookSync> localVarResponse = SyncAddressBookWithHttpInfo(accountId, extensionId, syncType, syncToken, perPage, pageId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Address Book Synchronization Synchronizes user contacts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="syncType">Type of synchronization (optional)</param>
        /// <param name="syncToken">Value of syncToken property of the last sync request response (optional)</param>
        /// <param name="perPage">Number of records per page to be returned. The max number of records is 250, which is also the default. For &#39;FSync&#39; if the number of records exceeds the parameter value (either specified or default), all of the pages can be retrieved in several requests. For &#39;ISync&#39; if the number of records exceeds the page size, the number of incoming changes to this number is limited (optional)</param>
        /// <param name="pageId">Internal identifier of a page. It can be obtained from the &#39;nextPageId&#39; parameter passed in response body (optional)</param>
        /// <returns>ApiResponse of AddressBookSync</returns>
        public ApiResponse<AddressBookSync> SyncAddressBookWithHttpInfo (string accountId, string extensionId, string syncType = default(string), string syncToken = default(string), int? perPage = default(int?), long? pageId = default(long?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExternalContactsApi->SyncAddressBook");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling ExternalContactsApi->SyncAddressBook");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/address-book-sync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (syncType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "syncType", syncType)); // query parameter
            if (syncToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "syncToken", syncToken)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (pageId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageId", pageId)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SyncAddressBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookSync>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookSync) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookSync)));
        }

        /// <summary>
        /// Address Book Synchronization Synchronizes user contacts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="syncType">Type of synchronization (optional)</param>
        /// <param name="syncToken">Value of syncToken property of the last sync request response (optional)</param>
        /// <param name="perPage">Number of records per page to be returned. The max number of records is 250, which is also the default. For &#39;FSync&#39; if the number of records exceeds the parameter value (either specified or default), all of the pages can be retrieved in several requests. For &#39;ISync&#39; if the number of records exceeds the page size, the number of incoming changes to this number is limited (optional)</param>
        /// <param name="pageId">Internal identifier of a page. It can be obtained from the &#39;nextPageId&#39; parameter passed in response body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddressBookSync</returns>
        public async System.Threading.Tasks.Task<AddressBookSync> SyncAddressBookAsync (string accountId, string extensionId, string syncType = default(string), string syncToken = default(string), int? perPage = default(int?), long? pageId = default(long?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AddressBookSync> localVarResponse = await SyncAddressBookWithHttpInfoAsync(accountId, extensionId, syncType, syncToken, perPage, pageId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Address Book Synchronization Synchronizes user contacts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="syncType">Type of synchronization (optional)</param>
        /// <param name="syncToken">Value of syncToken property of the last sync request response (optional)</param>
        /// <param name="perPage">Number of records per page to be returned. The max number of records is 250, which is also the default. For &#39;FSync&#39; if the number of records exceeds the parameter value (either specified or default), all of the pages can be retrieved in several requests. For &#39;ISync&#39; if the number of records exceeds the page size, the number of incoming changes to this number is limited (optional)</param>
        /// <param name="pageId">Internal identifier of a page. It can be obtained from the &#39;nextPageId&#39; parameter passed in response body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddressBookSync)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressBookSync>> SyncAddressBookWithHttpInfoAsync (string accountId, string extensionId, string syncType = default(string), string syncToken = default(string), int? perPage = default(int?), long? pageId = default(long?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExternalContactsApi->SyncAddressBook");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling ExternalContactsApi->SyncAddressBook");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/address-book-sync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (syncType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "syncType", syncType)); // query parameter
            if (syncToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "syncToken", syncToken)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter
            if (pageId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageId", pageId)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SyncAddressBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookSync>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookSync) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookSync)));
        }

        /// <summary>
        /// Update Contact Updates personal contact information by contact ID(s). Batch request is supported
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="contactId">Internal identifier of a contact record in the RingCentral database</param>
        /// <param name="dialingPlan">A country code value complying with the [ISO 3166-1 alpha-2](https://ru.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. The default value is home country of the current extension (optional)</param>
        /// <param name="personalContactRequest"> (optional)</param>
        /// <returns>PersonalContactResource</returns>
        public PersonalContactResource UpdateContact (string accountId, string extensionId, long contactId, string dialingPlan = default(string), PersonalContactRequest personalContactRequest = default(PersonalContactRequest))
        {
             ApiResponse<PersonalContactResource> localVarResponse = UpdateContactWithHttpInfo(accountId, extensionId, contactId, dialingPlan, personalContactRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Contact Updates personal contact information by contact ID(s). Batch request is supported
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="contactId">Internal identifier of a contact record in the RingCentral database</param>
        /// <param name="dialingPlan">A country code value complying with the [ISO 3166-1 alpha-2](https://ru.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. The default value is home country of the current extension (optional)</param>
        /// <param name="personalContactRequest"> (optional)</param>
        /// <returns>ApiResponse of PersonalContactResource</returns>
        public ApiResponse<PersonalContactResource> UpdateContactWithHttpInfo (string accountId, string extensionId, long contactId, string dialingPlan = default(string), PersonalContactRequest personalContactRequest = default(PersonalContactRequest))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExternalContactsApi->UpdateContact");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling ExternalContactsApi->UpdateContact");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ExternalContactsApi->UpdateContact");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/address-book/contact/{contactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (dialingPlan != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dialingPlan", dialingPlan)); // query parameter
            if (personalContactRequest != null && personalContactRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(personalContactRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = personalContactRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonalContactResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PersonalContactResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonalContactResource)));
        }

        /// <summary>
        /// Update Contact Updates personal contact information by contact ID(s). Batch request is supported
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="contactId">Internal identifier of a contact record in the RingCentral database</param>
        /// <param name="dialingPlan">A country code value complying with the [ISO 3166-1 alpha-2](https://ru.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. The default value is home country of the current extension (optional)</param>
        /// <param name="personalContactRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PersonalContactResource</returns>
        public async System.Threading.Tasks.Task<PersonalContactResource> UpdateContactAsync (string accountId, string extensionId, long contactId, string dialingPlan = default(string), PersonalContactRequest personalContactRequest = default(PersonalContactRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PersonalContactResource> localVarResponse = await UpdateContactWithHttpInfoAsync(accountId, extensionId, contactId, dialingPlan, personalContactRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Contact Updates personal contact information by contact ID(s). Batch request is supported
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="contactId">Internal identifier of a contact record in the RingCentral database</param>
        /// <param name="dialingPlan">A country code value complying with the [ISO 3166-1 alpha-2](https://ru.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. The default value is home country of the current extension (optional)</param>
        /// <param name="personalContactRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PersonalContactResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PersonalContactResource>> UpdateContactWithHttpInfoAsync (string accountId, string extensionId, long contactId, string dialingPlan = default(string), PersonalContactRequest personalContactRequest = default(PersonalContactRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExternalContactsApi->UpdateContact");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling ExternalContactsApi->UpdateContact");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ExternalContactsApi->UpdateContact");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/address-book/contact/{contactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (dialingPlan != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dialingPlan", dialingPlan)); // query parameter
            if (personalContactRequest != null && personalContactRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(personalContactRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = personalContactRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonalContactResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PersonalContactResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonalContactResource)));
        }

        /// <summary>
        /// Update Favorite Contact List Updates the list of favorite contacts of the current extension. Favorite contacts include both company contacts (extensions) and personal contacts (address book records).**Please note**: currently personal address book size is limited to 10 000 contacts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="favoriteCollection"> (optional)</param>
        /// <returns>FavoriteContactList</returns>
        public FavoriteContactList UpdateFavoriteContactList (string accountId, string extensionId, FavoriteCollection favoriteCollection = default(FavoriteCollection))
        {
             ApiResponse<FavoriteContactList> localVarResponse = UpdateFavoriteContactListWithHttpInfo(accountId, extensionId, favoriteCollection);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Favorite Contact List Updates the list of favorite contacts of the current extension. Favorite contacts include both company contacts (extensions) and personal contacts (address book records).**Please note**: currently personal address book size is limited to 10 000 contacts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="favoriteCollection"> (optional)</param>
        /// <returns>ApiResponse of FavoriteContactList</returns>
        public ApiResponse<FavoriteContactList> UpdateFavoriteContactListWithHttpInfo (string accountId, string extensionId, FavoriteCollection favoriteCollection = default(FavoriteCollection))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExternalContactsApi->UpdateFavoriteContactList");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling ExternalContactsApi->UpdateFavoriteContactList");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/favorite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (favoriteCollection != null && favoriteCollection.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(favoriteCollection); // http body (model) parameter
            }
            else
            {
                localVarPostBody = favoriteCollection; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFavoriteContactList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FavoriteContactList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FavoriteContactList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FavoriteContactList)));
        }

        /// <summary>
        /// Update Favorite Contact List Updates the list of favorite contacts of the current extension. Favorite contacts include both company contacts (extensions) and personal contacts (address book records).**Please note**: currently personal address book size is limited to 10 000 contacts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="favoriteCollection"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FavoriteContactList</returns>
        public async System.Threading.Tasks.Task<FavoriteContactList> UpdateFavoriteContactListAsync (string accountId, string extensionId, FavoriteCollection favoriteCollection = default(FavoriteCollection), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<FavoriteContactList> localVarResponse = await UpdateFavoriteContactListWithHttpInfoAsync(accountId, extensionId, favoriteCollection, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Favorite Contact List Updates the list of favorite contacts of the current extension. Favorite contacts include both company contacts (extensions) and personal contacts (address book records).**Please note**: currently personal address book size is limited to 10 000 contacts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session</param>
        /// <param name="extensionId">Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session</param>
        /// <param name="favoriteCollection"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FavoriteContactList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FavoriteContactList>> UpdateFavoriteContactListWithHttpInfoAsync (string accountId, string extensionId, FavoriteCollection favoriteCollection = default(FavoriteCollection), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExternalContactsApi->UpdateFavoriteContactList");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling ExternalContactsApi->UpdateFavoriteContactList");

            var localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/favorite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extensionId", this.Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (favoriteCollection != null && favoriteCollection.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(favoriteCollection); // http body (model) parameter
            }
            else
            {
                localVarPostBody = favoriteCollection; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFavoriteContactList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FavoriteContactList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FavoriteContactList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FavoriteContactList)));
        }

    }
}
