/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIncomingWebhooksApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Activate Webhook
        /// </summary>
        /// <remarks>
        /// Activates a webhook by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Internal identifier of a webhook</param>
        /// <returns></returns>
        void ActivateGlipWebhook (string webhookId);

        /// <summary>
        /// Activate Webhook
        /// </summary>
        /// <remarks>
        /// Activates a webhook by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Internal identifier of a webhook</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ActivateGlipWebhookWithHttpInfo (string webhookId);
        /// <summary>
        /// Create Webhook in Group
        /// </summary>
        /// <remarks>
        /// Creates a new webhook.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <returns>GlipWebhookInfo</returns>
        GlipWebhookInfo CreateGlipGroupWebhook (string groupId);

        /// <summary>
        /// Create Webhook in Group
        /// </summary>
        /// <remarks>
        /// Creates a new webhook.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <returns>ApiResponse of GlipWebhookInfo</returns>
        ApiResponse<GlipWebhookInfo> CreateGlipGroupWebhookWithHttpInfo (string groupId);
        /// <summary>
        /// Delete Webhook
        /// </summary>
        /// <remarks>
        /// Deletes a webhook by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Internal identifier of a webhook</param>
        /// <returns></returns>
        void DeleteGlipWebhook (string webhookId);

        /// <summary>
        /// Delete Webhook
        /// </summary>
        /// <remarks>
        /// Deletes a webhook by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Internal identifier of a webhook</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGlipWebhookWithHttpInfo (string webhookId);
        /// <summary>
        /// Get Webhooks in Group
        /// </summary>
        /// <remarks>
        /// Returns webhooks which are available for the current user by group ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <returns>GlipWebhookList</returns>
        GlipWebhookList ListGlipGroupWebhooks (string groupId);

        /// <summary>
        /// Get Webhooks in Group
        /// </summary>
        /// <remarks>
        /// Returns webhooks which are available for the current user by group ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <returns>ApiResponse of GlipWebhookList</returns>
        ApiResponse<GlipWebhookList> ListGlipGroupWebhooksWithHttpInfo (string groupId);
        /// <summary>
        /// Get Webhooks
        /// </summary>
        /// <remarks>
        /// Returns the list of all webhooks associated with the current account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GlipWebhookList</returns>
        GlipWebhookList ListGlipWebhooks ();

        /// <summary>
        /// Get Webhooks
        /// </summary>
        /// <remarks>
        /// Returns the list of all webhooks associated with the current account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GlipWebhookList</returns>
        ApiResponse<GlipWebhookList> ListGlipWebhooksWithHttpInfo ();
        /// <summary>
        /// Get Webhook
        /// </summary>
        /// <remarks>
        /// Returns webhooks(s) with the specified id(s).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Internal identifier of a webhook or comma separated list of webhooks IDs</param>
        /// <returns>GlipWebhookList</returns>
        GlipWebhookList ReadGlipWebhook (List<string> webhookId);

        /// <summary>
        /// Get Webhook
        /// </summary>
        /// <remarks>
        /// Returns webhooks(s) with the specified id(s).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Internal identifier of a webhook or comma separated list of webhooks IDs</param>
        /// <returns>ApiResponse of GlipWebhookList</returns>
        ApiResponse<GlipWebhookList> ReadGlipWebhookWithHttpInfo (List<string> webhookId);
        /// <summary>
        /// Suspend Webhook
        /// </summary>
        /// <remarks>
        /// Suspends a webhook by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Internal identifier of a webhook</param>
        /// <returns></returns>
        void SuspendGlipWebhook (string webhookId);

        /// <summary>
        /// Suspend Webhook
        /// </summary>
        /// <remarks>
        /// Suspends a webhook by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Internal identifier of a webhook</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SuspendGlipWebhookWithHttpInfo (string webhookId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Activate Webhook
        /// </summary>
        /// <remarks>
        /// Activates a webhook by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Internal identifier of a webhook</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ActivateGlipWebhookAsync (string webhookId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Activate Webhook
        /// </summary>
        /// <remarks>
        /// Activates a webhook by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Internal identifier of a webhook</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ActivateGlipWebhookWithHttpInfoAsync (string webhookId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create Webhook in Group
        /// </summary>
        /// <remarks>
        /// Creates a new webhook.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipWebhookInfo</returns>
        System.Threading.Tasks.Task<GlipWebhookInfo> CreateGlipGroupWebhookAsync (string groupId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Webhook in Group
        /// </summary>
        /// <remarks>
        /// Creates a new webhook.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipWebhookInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlipWebhookInfo>> CreateGlipGroupWebhookWithHttpInfoAsync (string groupId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete Webhook
        /// </summary>
        /// <remarks>
        /// Deletes a webhook by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Internal identifier of a webhook</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteGlipWebhookAsync (string webhookId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Webhook
        /// </summary>
        /// <remarks>
        /// Deletes a webhook by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Internal identifier of a webhook</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGlipWebhookWithHttpInfoAsync (string webhookId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Webhooks in Group
        /// </summary>
        /// <remarks>
        /// Returns webhooks which are available for the current user by group ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipWebhookList</returns>
        System.Threading.Tasks.Task<GlipWebhookList> ListGlipGroupWebhooksAsync (string groupId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Webhooks in Group
        /// </summary>
        /// <remarks>
        /// Returns webhooks which are available for the current user by group ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipWebhookList)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlipWebhookList>> ListGlipGroupWebhooksWithHttpInfoAsync (string groupId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Webhooks
        /// </summary>
        /// <remarks>
        /// Returns the list of all webhooks associated with the current account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipWebhookList</returns>
        System.Threading.Tasks.Task<GlipWebhookList> ListGlipWebhooksAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Webhooks
        /// </summary>
        /// <remarks>
        /// Returns the list of all webhooks associated with the current account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipWebhookList)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlipWebhookList>> ListGlipWebhooksWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Webhook
        /// </summary>
        /// <remarks>
        /// Returns webhooks(s) with the specified id(s).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Internal identifier of a webhook or comma separated list of webhooks IDs</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipWebhookList</returns>
        System.Threading.Tasks.Task<GlipWebhookList> ReadGlipWebhookAsync (List<string> webhookId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Webhook
        /// </summary>
        /// <remarks>
        /// Returns webhooks(s) with the specified id(s).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Internal identifier of a webhook or comma separated list of webhooks IDs</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipWebhookList)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlipWebhookList>> ReadGlipWebhookWithHttpInfoAsync (List<string> webhookId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Suspend Webhook
        /// </summary>
        /// <remarks>
        /// Suspends a webhook by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Internal identifier of a webhook</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SuspendGlipWebhookAsync (string webhookId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Suspend Webhook
        /// </summary>
        /// <remarks>
        /// Suspends a webhook by ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Internal identifier of a webhook</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SuspendGlipWebhookWithHttpInfoAsync (string webhookId, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IncomingWebhooksApi : IIncomingWebhooksApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IncomingWebhooksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IncomingWebhooksApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IncomingWebhooksApi"/> class
        /// </summary>
        /// <returns></returns>
        public IncomingWebhooksApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IncomingWebhooksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IncomingWebhooksApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Activate Webhook Activates a webhook by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Internal identifier of a webhook</param>
        /// <returns></returns>
        public void ActivateGlipWebhook (string webhookId)
        {
             ActivateGlipWebhookWithHttpInfo(webhookId);
        }

        /// <summary>
        /// Activate Webhook Activates a webhook by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Internal identifier of a webhook</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ActivateGlipWebhookWithHttpInfo (string webhookId)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling IncomingWebhooksApi->ActivateGlipWebhook");

            var localVarPath = "/restapi/v1.0/glip/webhooks/{webhookId}/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookId != null) localVarPathParams.Add("webhookId", this.Configuration.ApiClient.ParameterToString(webhookId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateGlipWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Activate Webhook Activates a webhook by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Internal identifier of a webhook</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ActivateGlipWebhookAsync (string webhookId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await ActivateGlipWebhookWithHttpInfoAsync(webhookId, cancellationToken);

        }

        /// <summary>
        /// Activate Webhook Activates a webhook by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Internal identifier of a webhook</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ActivateGlipWebhookWithHttpInfoAsync (string webhookId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling IncomingWebhooksApi->ActivateGlipWebhook");

            var localVarPath = "/restapi/v1.0/glip/webhooks/{webhookId}/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookId != null) localVarPathParams.Add("webhookId", this.Configuration.ApiClient.ParameterToString(webhookId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateGlipWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create Webhook in Group Creates a new webhook.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <returns>GlipWebhookInfo</returns>
        public GlipWebhookInfo CreateGlipGroupWebhook (string groupId)
        {
             ApiResponse<GlipWebhookInfo> localVarResponse = CreateGlipGroupWebhookWithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Webhook in Group Creates a new webhook.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <returns>ApiResponse of GlipWebhookInfo</returns>
        public ApiResponse<GlipWebhookInfo> CreateGlipGroupWebhookWithHttpInfo (string groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling IncomingWebhooksApi->CreateGlipGroupWebhook");

            var localVarPath = "/restapi/v1.0/glip/groups/{groupId}/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGlipGroupWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipWebhookInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipWebhookInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipWebhookInfo)));
        }

        /// <summary>
        /// Create Webhook in Group Creates a new webhook.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipWebhookInfo</returns>
        public async System.Threading.Tasks.Task<GlipWebhookInfo> CreateGlipGroupWebhookAsync (string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipWebhookInfo> localVarResponse = await CreateGlipGroupWebhookWithHttpInfoAsync(groupId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Webhook in Group Creates a new webhook.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipWebhookInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlipWebhookInfo>> CreateGlipGroupWebhookWithHttpInfoAsync (string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling IncomingWebhooksApi->CreateGlipGroupWebhook");

            var localVarPath = "/restapi/v1.0/glip/groups/{groupId}/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGlipGroupWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipWebhookInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipWebhookInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipWebhookInfo)));
        }

        /// <summary>
        /// Delete Webhook Deletes a webhook by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Internal identifier of a webhook</param>
        /// <returns></returns>
        public void DeleteGlipWebhook (string webhookId)
        {
             DeleteGlipWebhookWithHttpInfo(webhookId);
        }

        /// <summary>
        /// Delete Webhook Deletes a webhook by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Internal identifier of a webhook</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteGlipWebhookWithHttpInfo (string webhookId)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling IncomingWebhooksApi->DeleteGlipWebhook");

            var localVarPath = "/restapi/v1.0/glip/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookId != null) localVarPathParams.Add("webhookId", this.Configuration.ApiClient.ParameterToString(webhookId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGlipWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Webhook Deletes a webhook by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Internal identifier of a webhook</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteGlipWebhookAsync (string webhookId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteGlipWebhookWithHttpInfoAsync(webhookId, cancellationToken);

        }

        /// <summary>
        /// Delete Webhook Deletes a webhook by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Internal identifier of a webhook</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGlipWebhookWithHttpInfoAsync (string webhookId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling IncomingWebhooksApi->DeleteGlipWebhook");

            var localVarPath = "/restapi/v1.0/glip/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookId != null) localVarPathParams.Add("webhookId", this.Configuration.ApiClient.ParameterToString(webhookId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGlipWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get Webhooks in Group Returns webhooks which are available for the current user by group ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <returns>GlipWebhookList</returns>
        public GlipWebhookList ListGlipGroupWebhooks (string groupId)
        {
             ApiResponse<GlipWebhookList> localVarResponse = ListGlipGroupWebhooksWithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Webhooks in Group Returns webhooks which are available for the current user by group ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <returns>ApiResponse of GlipWebhookList</returns>
        public ApiResponse<GlipWebhookList> ListGlipGroupWebhooksWithHttpInfo (string groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling IncomingWebhooksApi->ListGlipGroupWebhooks");

            var localVarPath = "/restapi/v1.0/glip/groups/{groupId}/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListGlipGroupWebhooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipWebhookList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipWebhookList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipWebhookList)));
        }

        /// <summary>
        /// Get Webhooks in Group Returns webhooks which are available for the current user by group ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipWebhookList</returns>
        public async System.Threading.Tasks.Task<GlipWebhookList> ListGlipGroupWebhooksAsync (string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipWebhookList> localVarResponse = await ListGlipGroupWebhooksWithHttpInfoAsync(groupId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Webhooks in Group Returns webhooks which are available for the current user by group ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Internal identifier of a group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipWebhookList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlipWebhookList>> ListGlipGroupWebhooksWithHttpInfoAsync (string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling IncomingWebhooksApi->ListGlipGroupWebhooks");

            var localVarPath = "/restapi/v1.0/glip/groups/{groupId}/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListGlipGroupWebhooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipWebhookList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipWebhookList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipWebhookList)));
        }

        /// <summary>
        /// Get Webhooks Returns the list of all webhooks associated with the current account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GlipWebhookList</returns>
        public GlipWebhookList ListGlipWebhooks ()
        {
             ApiResponse<GlipWebhookList> localVarResponse = ListGlipWebhooksWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Webhooks Returns the list of all webhooks associated with the current account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GlipWebhookList</returns>
        public ApiResponse<GlipWebhookList> ListGlipWebhooksWithHttpInfo ()
        {

            var localVarPath = "/restapi/v1.0/glip/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "multipart/mixed"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListGlipWebhooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipWebhookList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipWebhookList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipWebhookList)));
        }

        /// <summary>
        /// Get Webhooks Returns the list of all webhooks associated with the current account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipWebhookList</returns>
        public async System.Threading.Tasks.Task<GlipWebhookList> ListGlipWebhooksAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipWebhookList> localVarResponse = await ListGlipWebhooksWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Webhooks Returns the list of all webhooks associated with the current account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipWebhookList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlipWebhookList>> ListGlipWebhooksWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/restapi/v1.0/glip/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "multipart/mixed"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListGlipWebhooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipWebhookList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipWebhookList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipWebhookList)));
        }

        /// <summary>
        /// Get Webhook Returns webhooks(s) with the specified id(s).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Internal identifier of a webhook or comma separated list of webhooks IDs</param>
        /// <returns>GlipWebhookList</returns>
        public GlipWebhookList ReadGlipWebhook (List<string> webhookId)
        {
             ApiResponse<GlipWebhookList> localVarResponse = ReadGlipWebhookWithHttpInfo(webhookId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Webhook Returns webhooks(s) with the specified id(s).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Internal identifier of a webhook or comma separated list of webhooks IDs</param>
        /// <returns>ApiResponse of GlipWebhookList</returns>
        public ApiResponse<GlipWebhookList> ReadGlipWebhookWithHttpInfo (List<string> webhookId)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling IncomingWebhooksApi->ReadGlipWebhook");

            var localVarPath = "/restapi/v1.0/glip/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "multipart/mixed"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookId != null) localVarPathParams.Add("webhookId", this.Configuration.ApiClient.ParameterToString(webhookId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadGlipWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipWebhookList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipWebhookList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipWebhookList)));
        }

        /// <summary>
        /// Get Webhook Returns webhooks(s) with the specified id(s).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Internal identifier of a webhook or comma separated list of webhooks IDs</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlipWebhookList</returns>
        public async System.Threading.Tasks.Task<GlipWebhookList> ReadGlipWebhookAsync (List<string> webhookId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlipWebhookList> localVarResponse = await ReadGlipWebhookWithHttpInfoAsync(webhookId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Webhook Returns webhooks(s) with the specified id(s).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Internal identifier of a webhook or comma separated list of webhooks IDs</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlipWebhookList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlipWebhookList>> ReadGlipWebhookWithHttpInfoAsync (List<string> webhookId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling IncomingWebhooksApi->ReadGlipWebhook");

            var localVarPath = "/restapi/v1.0/glip/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "multipart/mixed"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookId != null) localVarPathParams.Add("webhookId", this.Configuration.ApiClient.ParameterToString(webhookId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadGlipWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlipWebhookList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlipWebhookList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlipWebhookList)));
        }

        /// <summary>
        /// Suspend Webhook Suspends a webhook by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Internal identifier of a webhook</param>
        /// <returns></returns>
        public void SuspendGlipWebhook (string webhookId)
        {
             SuspendGlipWebhookWithHttpInfo(webhookId);
        }

        /// <summary>
        /// Suspend Webhook Suspends a webhook by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Internal identifier of a webhook</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SuspendGlipWebhookWithHttpInfo (string webhookId)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling IncomingWebhooksApi->SuspendGlipWebhook");

            var localVarPath = "/restapi/v1.0/glip/webhooks/{webhookId}/suspend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookId != null) localVarPathParams.Add("webhookId", this.Configuration.ApiClient.ParameterToString(webhookId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SuspendGlipWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Suspend Webhook Suspends a webhook by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Internal identifier of a webhook</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SuspendGlipWebhookAsync (string webhookId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await SuspendGlipWebhookWithHttpInfoAsync(webhookId, cancellationToken);

        }

        /// <summary>
        /// Suspend Webhook Suspends a webhook by ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Internal identifier of a webhook</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SuspendGlipWebhookWithHttpInfoAsync (string webhookId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling IncomingWebhooksApi->SuspendGlipWebhook");

            var localVarPath = "/restapi/v1.0/glip/webhooks/{webhookId}/suspend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookId != null) localVarPathParams.Add("webhookId", this.Configuration.ApiClient.ParameterToString(webhookId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SuspendGlipWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
