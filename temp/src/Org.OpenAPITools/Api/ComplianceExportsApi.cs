/*
 * RingCentral Connect Platform API
 *
 * RingCentral Connect Platform API
 *
 * The version of the OpenAPI document: 1.0.48
 * Contact: platform@ringcentral.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IComplianceExportsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Data Export Task
        /// </summary>
        /// <remarks>
        /// Creates a task for Glip data export and returns a link at which the exported data will be available in future once the task is implemented. The exported data can be downloaded by calling Get Data Export Task method with the specified task ID. Simultaneously no more than 2 tasks per company can be created.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataExportTaskRequest">JSON body (optional)</param>
        /// <returns>DataExportTask</returns>
        DataExportTask CreateDataExportTask (CreateDataExportTaskRequest createDataExportTaskRequest = default(CreateDataExportTaskRequest));

        /// <summary>
        /// Create Data Export Task
        /// </summary>
        /// <remarks>
        /// Creates a task for Glip data export and returns a link at which the exported data will be available in future once the task is implemented. The exported data can be downloaded by calling Get Data Export Task method with the specified task ID. Simultaneously no more than 2 tasks per company can be created.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataExportTaskRequest">JSON body (optional)</param>
        /// <returns>ApiResponse of DataExportTask</returns>
        ApiResponse<DataExportTask> CreateDataExportTaskWithHttpInfo (CreateDataExportTaskRequest createDataExportTaskRequest = default(CreateDataExportTaskRequest));
        /// <summary>
        /// Get Data Export Task List
        /// </summary>
        /// <remarks>
        /// Returns the list of Glip data export tasks.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Status of the task(s) to be returned. Multiple values are supported (optional)</param>
        /// <param name="page">Page number to be retrieved; value range is &gt; 0 (optional, default to 1)</param>
        /// <param name="perPage">Number of records to be returned per page; value range is 1 - 250 (optional, default to 30)</param>
        /// <returns>DataExportTaskList</returns>
        DataExportTaskList ListDataExportTasks (string status = default(string), int? page = default(int?), int? perPage = default(int?));

        /// <summary>
        /// Get Data Export Task List
        /// </summary>
        /// <remarks>
        /// Returns the list of Glip data export tasks.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Status of the task(s) to be returned. Multiple values are supported (optional)</param>
        /// <param name="page">Page number to be retrieved; value range is &gt; 0 (optional, default to 1)</param>
        /// <param name="perPage">Number of records to be returned per page; value range is 1 - 250 (optional, default to 30)</param>
        /// <returns>ApiResponse of DataExportTaskList</returns>
        ApiResponse<DataExportTaskList> ListDataExportTasksWithHttpInfo (string status = default(string), int? page = default(int?), int? perPage = default(int?));
        /// <summary>
        /// Get Data Export Task
        /// </summary>
        /// <remarks>
        /// Returns the links for downloading Glip data exported within the specified task. If the export task is still in progress, then only the task status will be returned. If the data is ready for downloading, then the list of URLs will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task to be retrieved</param>
        /// <returns>DataExportTask</returns>
        DataExportTask ReadDataExportTask (string taskId);

        /// <summary>
        /// Get Data Export Task
        /// </summary>
        /// <remarks>
        /// Returns the links for downloading Glip data exported within the specified task. If the export task is still in progress, then only the task status will be returned. If the data is ready for downloading, then the list of URLs will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task to be retrieved</param>
        /// <returns>ApiResponse of DataExportTask</returns>
        ApiResponse<DataExportTask> ReadDataExportTaskWithHttpInfo (string taskId);
        /// <summary>
        /// Get Data Export Task Dataset
        /// </summary>
        /// <remarks>
        /// Returns the specified dataset by ID. Each dataset is a ZIP archive the size of which is limited to 1 Gb.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="datasetId">Internal identifier of a dataset</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream ReadDataExportTaskDataset (string taskId, string datasetId);

        /// <summary>
        /// Get Data Export Task Dataset
        /// </summary>
        /// <remarks>
        /// Returns the specified dataset by ID. Each dataset is a ZIP archive the size of which is limited to 1 Gb.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="datasetId">Internal identifier of a dataset</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> ReadDataExportTaskDatasetWithHttpInfo (string taskId, string datasetId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create Data Export Task
        /// </summary>
        /// <remarks>
        /// Creates a task for Glip data export and returns a link at which the exported data will be available in future once the task is implemented. The exported data can be downloaded by calling Get Data Export Task method with the specified task ID. Simultaneously no more than 2 tasks per company can be created.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataExportTaskRequest">JSON body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DataExportTask</returns>
        System.Threading.Tasks.Task<DataExportTask> CreateDataExportTaskAsync (CreateDataExportTaskRequest createDataExportTaskRequest = default(CreateDataExportTaskRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Data Export Task
        /// </summary>
        /// <remarks>
        /// Creates a task for Glip data export and returns a link at which the exported data will be available in future once the task is implemented. The exported data can be downloaded by calling Get Data Export Task method with the specified task ID. Simultaneously no more than 2 tasks per company can be created.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataExportTaskRequest">JSON body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DataExportTask)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataExportTask>> CreateDataExportTaskWithHttpInfoAsync (CreateDataExportTaskRequest createDataExportTaskRequest = default(CreateDataExportTaskRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Data Export Task List
        /// </summary>
        /// <remarks>
        /// Returns the list of Glip data export tasks.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Status of the task(s) to be returned. Multiple values are supported (optional)</param>
        /// <param name="page">Page number to be retrieved; value range is &gt; 0 (optional, default to 1)</param>
        /// <param name="perPage">Number of records to be returned per page; value range is 1 - 250 (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DataExportTaskList</returns>
        System.Threading.Tasks.Task<DataExportTaskList> ListDataExportTasksAsync (string status = default(string), int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Data Export Task List
        /// </summary>
        /// <remarks>
        /// Returns the list of Glip data export tasks.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Status of the task(s) to be returned. Multiple values are supported (optional)</param>
        /// <param name="page">Page number to be retrieved; value range is &gt; 0 (optional, default to 1)</param>
        /// <param name="perPage">Number of records to be returned per page; value range is 1 - 250 (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DataExportTaskList)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataExportTaskList>> ListDataExportTasksWithHttpInfoAsync (string status = default(string), int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Data Export Task
        /// </summary>
        /// <remarks>
        /// Returns the links for downloading Glip data exported within the specified task. If the export task is still in progress, then only the task status will be returned. If the data is ready for downloading, then the list of URLs will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task to be retrieved</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DataExportTask</returns>
        System.Threading.Tasks.Task<DataExportTask> ReadDataExportTaskAsync (string taskId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Data Export Task
        /// </summary>
        /// <remarks>
        /// Returns the links for downloading Glip data exported within the specified task. If the export task is still in progress, then only the task status will be returned. If the data is ready for downloading, then the list of URLs will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task to be retrieved</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DataExportTask)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataExportTask>> ReadDataExportTaskWithHttpInfoAsync (string taskId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Data Export Task Dataset
        /// </summary>
        /// <remarks>
        /// Returns the specified dataset by ID. Each dataset is a ZIP archive the size of which is limited to 1 Gb.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="datasetId">Internal identifier of a dataset</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> ReadDataExportTaskDatasetAsync (string taskId, string datasetId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Data Export Task Dataset
        /// </summary>
        /// <remarks>
        /// Returns the specified dataset by ID. Each dataset is a ZIP archive the size of which is limited to 1 Gb.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="datasetId">Internal identifier of a dataset</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ReadDataExportTaskDatasetWithHttpInfoAsync (string taskId, string datasetId, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ComplianceExportsApi : IComplianceExportsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ComplianceExportsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ComplianceExportsApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComplianceExportsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ComplianceExportsApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComplianceExportsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ComplianceExportsApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create Data Export Task Creates a task for Glip data export and returns a link at which the exported data will be available in future once the task is implemented. The exported data can be downloaded by calling Get Data Export Task method with the specified task ID. Simultaneously no more than 2 tasks per company can be created.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataExportTaskRequest">JSON body (optional)</param>
        /// <returns>DataExportTask</returns>
        public DataExportTask CreateDataExportTask (CreateDataExportTaskRequest createDataExportTaskRequest = default(CreateDataExportTaskRequest))
        {
             ApiResponse<DataExportTask> localVarResponse = CreateDataExportTaskWithHttpInfo(createDataExportTaskRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Data Export Task Creates a task for Glip data export and returns a link at which the exported data will be available in future once the task is implemented. The exported data can be downloaded by calling Get Data Export Task method with the specified task ID. Simultaneously no more than 2 tasks per company can be created.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataExportTaskRequest">JSON body (optional)</param>
        /// <returns>ApiResponse of DataExportTask</returns>
        public ApiResponse<DataExportTask> CreateDataExportTaskWithHttpInfo (CreateDataExportTaskRequest createDataExportTaskRequest = default(CreateDataExportTaskRequest))
        {

            var localVarPath = "/restapi/v1.0/glip/data-export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createDataExportTaskRequest != null && createDataExportTaskRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createDataExportTaskRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createDataExportTaskRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDataExportTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataExportTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DataExportTask) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataExportTask)));
        }

        /// <summary>
        /// Create Data Export Task Creates a task for Glip data export and returns a link at which the exported data will be available in future once the task is implemented. The exported data can be downloaded by calling Get Data Export Task method with the specified task ID. Simultaneously no more than 2 tasks per company can be created.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataExportTaskRequest">JSON body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DataExportTask</returns>
        public async System.Threading.Tasks.Task<DataExportTask> CreateDataExportTaskAsync (CreateDataExportTaskRequest createDataExportTaskRequest = default(CreateDataExportTaskRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DataExportTask> localVarResponse = await CreateDataExportTaskWithHttpInfoAsync(createDataExportTaskRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Data Export Task Creates a task for Glip data export and returns a link at which the exported data will be available in future once the task is implemented. The exported data can be downloaded by calling Get Data Export Task method with the specified task ID. Simultaneously no more than 2 tasks per company can be created.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataExportTaskRequest">JSON body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DataExportTask)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataExportTask>> CreateDataExportTaskWithHttpInfoAsync (CreateDataExportTaskRequest createDataExportTaskRequest = default(CreateDataExportTaskRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/restapi/v1.0/glip/data-export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createDataExportTaskRequest != null && createDataExportTaskRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createDataExportTaskRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createDataExportTaskRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDataExportTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataExportTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DataExportTask) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataExportTask)));
        }

        /// <summary>
        /// Get Data Export Task List Returns the list of Glip data export tasks.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Status of the task(s) to be returned. Multiple values are supported (optional)</param>
        /// <param name="page">Page number to be retrieved; value range is &gt; 0 (optional, default to 1)</param>
        /// <param name="perPage">Number of records to be returned per page; value range is 1 - 250 (optional, default to 30)</param>
        /// <returns>DataExportTaskList</returns>
        public DataExportTaskList ListDataExportTasks (string status = default(string), int? page = default(int?), int? perPage = default(int?))
        {
             ApiResponse<DataExportTaskList> localVarResponse = ListDataExportTasksWithHttpInfo(status, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Data Export Task List Returns the list of Glip data export tasks.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Status of the task(s) to be returned. Multiple values are supported (optional)</param>
        /// <param name="page">Page number to be retrieved; value range is &gt; 0 (optional, default to 1)</param>
        /// <param name="perPage">Number of records to be returned per page; value range is 1 - 250 (optional, default to 30)</param>
        /// <returns>ApiResponse of DataExportTaskList</returns>
        public ApiResponse<DataExportTaskList> ListDataExportTasksWithHttpInfo (string status = default(string), int? page = default(int?), int? perPage = default(int?))
        {

            var localVarPath = "/restapi/v1.0/glip/data-export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDataExportTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataExportTaskList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DataExportTaskList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataExportTaskList)));
        }

        /// <summary>
        /// Get Data Export Task List Returns the list of Glip data export tasks.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Status of the task(s) to be returned. Multiple values are supported (optional)</param>
        /// <param name="page">Page number to be retrieved; value range is &gt; 0 (optional, default to 1)</param>
        /// <param name="perPage">Number of records to be returned per page; value range is 1 - 250 (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DataExportTaskList</returns>
        public async System.Threading.Tasks.Task<DataExportTaskList> ListDataExportTasksAsync (string status = default(string), int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DataExportTaskList> localVarResponse = await ListDataExportTasksWithHttpInfoAsync(status, page, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Data Export Task List Returns the list of Glip data export tasks.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Status of the task(s) to be returned. Multiple values are supported (optional)</param>
        /// <param name="page">Page number to be retrieved; value range is &gt; 0 (optional, default to 1)</param>
        /// <param name="perPage">Number of records to be returned per page; value range is 1 - 250 (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DataExportTaskList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataExportTaskList>> ListDataExportTasksWithHttpInfoAsync (string status = default(string), int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/restapi/v1.0/glip/data-export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perPage", perPage)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDataExportTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataExportTaskList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DataExportTaskList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataExportTaskList)));
        }

        /// <summary>
        /// Get Data Export Task Returns the links for downloading Glip data exported within the specified task. If the export task is still in progress, then only the task status will be returned. If the data is ready for downloading, then the list of URLs will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task to be retrieved</param>
        /// <returns>DataExportTask</returns>
        public DataExportTask ReadDataExportTask (string taskId)
        {
             ApiResponse<DataExportTask> localVarResponse = ReadDataExportTaskWithHttpInfo(taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Data Export Task Returns the links for downloading Glip data exported within the specified task. If the export task is still in progress, then only the task status will be returned. If the data is ready for downloading, then the list of URLs will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task to be retrieved</param>
        /// <returns>ApiResponse of DataExportTask</returns>
        public ApiResponse<DataExportTask> ReadDataExportTaskWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ComplianceExportsApi->ReadDataExportTask");

            var localVarPath = "/restapi/v1.0/glip/data-export/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadDataExportTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataExportTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DataExportTask) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataExportTask)));
        }

        /// <summary>
        /// Get Data Export Task Returns the links for downloading Glip data exported within the specified task. If the export task is still in progress, then only the task status will be returned. If the data is ready for downloading, then the list of URLs will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task to be retrieved</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DataExportTask</returns>
        public async System.Threading.Tasks.Task<DataExportTask> ReadDataExportTaskAsync (string taskId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DataExportTask> localVarResponse = await ReadDataExportTaskWithHttpInfoAsync(taskId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Data Export Task Returns the links for downloading Glip data exported within the specified task. If the export task is still in progress, then only the task status will be returned. If the data is ready for downloading, then the list of URLs will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task to be retrieved</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DataExportTask)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataExportTask>> ReadDataExportTaskWithHttpInfoAsync (string taskId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ComplianceExportsApi->ReadDataExportTask");

            var localVarPath = "/restapi/v1.0/glip/data-export/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadDataExportTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataExportTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DataExportTask) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataExportTask)));
        }

        /// <summary>
        /// Get Data Export Task Dataset Returns the specified dataset by ID. Each dataset is a ZIP archive the size of which is limited to 1 Gb.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="datasetId">Internal identifier of a dataset</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream ReadDataExportTaskDataset (string taskId, string datasetId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = ReadDataExportTaskDatasetWithHttpInfo(taskId, datasetId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Data Export Task Dataset Returns the specified dataset by ID. Each dataset is a ZIP archive the size of which is limited to 1 Gb.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="datasetId">Internal identifier of a dataset</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> ReadDataExportTaskDatasetWithHttpInfo (string taskId, string datasetId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ComplianceExportsApi->ReadDataExportTaskDataset");
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
                throw new ApiException(400, "Missing required parameter 'datasetId' when calling ComplianceExportsApi->ReadDataExportTaskDataset");

            var localVarPath = "/restapi/v1.0/glip/data-export/{taskId}/datasets/{datasetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (datasetId != null) localVarPathParams.Add("datasetId", this.Configuration.ApiClient.ParameterToString(datasetId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadDataExportTaskDataset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get Data Export Task Dataset Returns the specified dataset by ID. Each dataset is a ZIP archive the size of which is limited to 1 Gb.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="datasetId">Internal identifier of a dataset</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> ReadDataExportTaskDatasetAsync (string taskId, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await ReadDataExportTaskDatasetWithHttpInfoAsync(taskId, datasetId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Data Export Task Dataset Returns the specified dataset by ID. Each dataset is a ZIP archive the size of which is limited to 1 Gb.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Internal identifier of a task</param>
        /// <param name="datasetId">Internal identifier of a dataset</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ReadDataExportTaskDatasetWithHttpInfoAsync (string taskId, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ComplianceExportsApi->ReadDataExportTaskDataset");
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
                throw new ApiException(400, "Missing required parameter 'datasetId' when calling ComplianceExportsApi->ReadDataExportTaskDataset");

            var localVarPath = "/restapi/v1.0/glip/data-export/{taskId}/datasets/{datasetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (datasetId != null) localVarPathParams.Add("datasetId", this.Configuration.ApiClient.ParameterToString(datasetId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadDataExportTaskDataset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

    }
}
